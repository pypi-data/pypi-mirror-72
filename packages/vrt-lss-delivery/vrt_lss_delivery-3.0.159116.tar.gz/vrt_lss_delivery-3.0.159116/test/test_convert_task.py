# coding: utf-8

"""
    VeeRoute.LSS Delivery

    Программный интерфейс для планирования задач курьерской доставки  # noqa: E501

    The version of the OpenAPI document: 3.0.159116
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import vrt_lss_delivery
from vrt_lss_delivery.models.convert_task import ConvertTask  # noqa: E501
from vrt_lss_delivery.rest import ApiException

class TestConvertTask(unittest.TestCase):
    """ConvertTask unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ConvertTask
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = vrt_lss_delivery.models.convert_task.ConvertTask()  # noqa: E501
        if include_optional :
            return ConvertTask(
                plan_task = vrt_lss_delivery.models.plan_task.PlanTask(
                    warehouses = [
                        vrt_lss_delivery.models.warehouse.Warehouse(
                            key = 'whs0001', 
                            location = vrt_lss_delivery.models.location.Location(
                                latitude = 55.692789, 
                                longitude = 37.554554, 
                                arrival_duration = 15, 
                                departure_duration = 5, ), 
                            work_windows = [
                                vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2020-10-21T09:30+03:00', 
                                    to = '2020-10-21T19:45Z', )
                                ], )
                        ], 
                    orders = [
                        vrt_lss_delivery.models.order.Order(
                            key = 'order0001', 
                            type = 'DROP', 
                            warehouse_keys = [
                                'whs0001'
                                ], 
                            customer = vrt_lss_delivery.models.customer.Customer(
                                location = vrt_lss_delivery.models.location.Location(
                                    latitude = 55.692789, 
                                    longitude = 37.554554, 
                                    arrival_duration = 15, 
                                    departure_duration = 5, ), 
                                time_windows = [
                                    vrt_lss_delivery.models.time_window.TimeWindow(
                                        from = '2020-10-21T09:30+03:00', 
                                        to = '2020-10-21T19:45Z', )
                                    ], ), 
                            cargos = [
                                vrt_lss_delivery.models.cargo.Cargo(
                                    key = 'cargo01', 
                                    capacity = vrt_lss_delivery.models.capacity.Capacity(
                                        mass = 10, 
                                        volume = 2, 
                                        capacity_x = 1, 
                                        capacity_y = 2, 
                                        capacity_z = 3, ), 
                                    width = 1, 
                                    height = 0.3, 
                                    length = 2.2, 
                                    max_storage_time = 45, 
                                    restrictions = ["Freezer"], )
                                ], 
                            warehouse_duration = 10, 
                            customer_duration = 10, 
                            cost = vrt_lss_delivery.models.order_cost.OrderCost(
                                reward = 199.1, 
                                penalty = vrt_lss_delivery.models.cost_penalty.CostPenalty(
                                    start_time = '2020-10-21T17:00Z', 
                                    period = 60, 
                                    value = 1000, 
                                    max_value = 10000, ), ), 
                            restrictions = ["Special"], 
                            blacklist = ["A0"], )
                        ], 
                    performers = [
                        vrt_lss_delivery.models.performer.Performer(
                            key = 'performer0001', 
                            count = 15, 
                            box = vrt_lss_delivery.models.box.Box(
                                key = 'box01', 
                                capacity = vrt_lss_delivery.models.capacity.Capacity(
                                    mass = 10, 
                                    volume = 2, 
                                    capacity_x = 1, 
                                    capacity_y = 2, 
                                    capacity_z = 3, ), 
                                max_size = vrt_lss_delivery.models.capacity.Capacity(
                                    mass = 10, 
                                    volume = 2, 
                                    capacity_x = 1, 
                                    capacity_y = 2, 
                                    capacity_z = 3, ), 
                                width = 1, 
                                height = 3.1, 
                                length = 2.1, 
                                features = ["Freezer"], ), 
                            start_location = vrt_lss_delivery.models.location.Location(
                                latitude = 55.692789, 
                                longitude = 37.554554, 
                                arrival_duration = 15, 
                                departure_duration = 5, ), 
                            finish_location = vrt_lss_delivery.models.location.Location(
                                latitude = 55.692789, 
                                longitude = 37.554554, 
                                arrival_duration = 15, 
                                departure_duration = 5, ), 
                            features = ["B1","Special"], 
                            transport_type = 'CAR', 
                            shifts = [
                                vrt_lss_delivery.models.shift.Shift(
                                    availability_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                        from = '2020-10-21T09:30+03:00', 
                                        to = '2020-10-21T19:45Z', ), 
                                    working_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                        from = '2020-10-21T09:30+03:00', 
                                        to = '2020-10-21T19:45Z', ), )
                                ], 
                            tariff = vrt_lss_delivery.models.tariff.Tariff(
                                basic = vrt_lss_delivery.models.tariff_primary.TariffPrimary(
                                    cost_per_shift = 1000.9, 
                                    cost_per_meter = 0.05, 
                                    max_length = 200000, 
                                    cost_per_minute = 0.12, 
                                    max_time = 480, ), 
                                extra = [
                                    vrt_lss_delivery.models.tariff_primary.TariffPrimary(
                                        cost_per_shift = 1000.9, 
                                        cost_per_meter = 0.05, 
                                        max_length = 200000, 
                                        cost_per_minute = 0.12, 
                                        max_time = 480, )
                                    ], ), )
                        ], 
                    trips = [
                        vrt_lss_delivery.models.trip.Trip(
                            key = 'TRIP0001', 
                            trip_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                from = '2020-10-21T09:30+03:00', 
                                to = '2020-10-21T19:45Z', ), 
                            performer_key = 'performer01', 
                            actions = [
                                vrt_lss_delivery.models.trip_action.TripAction(
                                    order_key = 'order01', 
                                    warehouse_key = 'whs01', 
                                    order_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                        from = '2020-10-21T09:30+03:00', 
                                        to = '2020-10-21T19:45Z', ), 
                                    location_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                        from = '2020-10-21T09:30+03:00', 
                                        to = '2020-10-21T19:45Z', ), )
                                ], 
                            waitlist = ["order02"], )
                        ], 
                    settings = vrt_lss_delivery.models.plan_settings.PlanSettings(
                        configuration = 'default', 
                        planning_time = 30, 
                        result_ttl = 10, 
                        result_timezone = 3, 
                        predict_slots = 2, 
                        transport_factor = [
                            vrt_lss_delivery.models.transport_factor.TransportFactor(
                                transport_type = 'CAR', 
                                speed = 2.5, )
                            ], 
                        capacity_factor = [
                            vrt_lss_delivery.models.capacity_factor.CapacityFactor(
                                transport_type = 'CAR', 
                                capacity = 2.5, )
                            ], 
                        routing = [
                            vrt_lss_delivery.models.routing.Routing(
                                transport_type = 'CAR', 
                                matrix = {"waypoints":[{"latitude":59.9345,"longitude":30.1504},{"latitude":59.942383,"longitude":30.258951},{"latitude":59.9545,"longitude":30.2004},{"latitude":59.89527,"longitude":30.261747},{"latitude":59.9745,"longitude":30.5004}],"distances":[[0,5822,1820,14130,23304],[5936,0,4931,8365,17731],[1819,4853,0,13161,22335],[14859,9056,13854,0,21440],[21777,16306,20772,19290,0]],"durations":[[0,13,7,24,36],[13,0,9,13,25],[7,9,0,21,32],[26,14,22,0,30],[34,23,30,28,0]]}, 
                                traffic_jams = [
                                    vrt_lss_delivery.models.traffic_factor.TrafficFactor(
                                        time_window = vrt_lss_delivery.models.time_window.TimeWindow(
                                            from = '2020-10-21T09:30+03:00', 
                                            to = '2020-10-21T19:45Z', ), 
                                        length_multiplier = 2, 
                                        length_additive = 20, 
                                        time_multiplier = 2, 
                                        time_additive = 30, )
                                    ], )
                            ], 
                        assumptions = vrt_lss_delivery.models.plan_assumptions.PlanAssumptions(
                            flight_distance = True, 
                            disable_compatibility = True, 
                            disable_capacity = True, 
                            same_order_time_window = True, 
                            expand_shift_time_window = True, ), 
                        precision = 2, ), 
                    delivery_settings = vrt_lss_delivery.models.delivery_settings.DeliverySettings(
                        restrict_middle_warehouses = False, 
                        restrict_multiple_warehouses = False, 
                        restrict_multiple_order_types = True, ), ), 
                plan_result = {"tracedata":{"code":"test_LssTesting_DeliveryPlanner_2020-02-13 11:52_c181aeca-551a-4500-86e1-75ff3ee8b6d7"},"timetable":[{"key":"perf_1","count":1,"box":{"key":"box2","capacity":{"mass":100,"volume":20,"capacity_x":10,"capacity_y":20,"capacity_z":30},"width":40,"height":40,"length":40,"features":["termobox"]},"start_location":{"latitude":55.760162,"longitude":37.75975,"arrival_duration":3,"departure_duration":1},"finish_location":{"latitude":55.760162,"longitude":37.75975,"arrival_duration":3,"departure_duration":1},"features":["fast_delivery"],"transport_type":"CAR","shifts":[{"availability_time":{"from":"2020-02-23T07:30:00+03:00","to":"2020-02-23T20:30:00+03:00"},"working_time":{"from":"2020-02-23T07:30:00+03:00","to":"2020-02-23T20:30:00+03:00"},"trip":{"key":"trip_0_shft_perf_perf_1","trip_time":{"from":"2020-02-23T08:20:00+03:00","to":"2020-02-23T10:01:00+03:00"},"actions":[{"order":{"key":"order_2","type":"DROP","warehouse":{"location":{"latitude":55.780163,"longitude":37.799747,"arrival_duration":3,"departure_duration":1},"duration":1,"work_windows":[{"from":"2020-02-23T07:30:00+03:00","to":"2020-02-23T20:30:00+03:00"}]},"location":{"latitude":55.747074,"longitude":37.599712,"arrival_duration":3,"departure_duration":1},"cargos":[{"key":"cargo_2","capacity":{"mass":10,"volume":2,"capacity_x":1,"capacity_y":2,"capacity_z":3},"width":1,"height":1,"length":1,"max_storage_time":2147483647,"restrictions":[]}],"possible_events":[{"time_window":{"from":"2020-02-23T09:13:00+03:00","to":"2020-02-23T20:45:00+03:00"}}],"duration":15,"cost":{"reward":1500,"penalty":{"start_time":"2020-02-23T15:00:00+03:00","period":5,"value":1,"max_value":1}},"restrictions":[],"blacklist":[]},"pickup":{"order_time":{"from":"2020-02-23T08:20:00+03:00","to":"2020-02-23T08:21:00+03:00"},"location_time":{"from":"2020-02-23T08:20:00+03:00","to":"2020-02-23T08:21:00+03:00"}},"drop":{"order_time":{"from":"2020-02-23T09:13:00+03:00","to":"2020-02-23T09:28:00+03:00"},"location_time":{"from":"2020-02-23T09:13:00+03:00","to":"2020-02-23T09:28:00+03:00"}}},{"order":{"key":"order_1","type":"DROP","warehouse":{"location":{"latitude":55.760162,"longitude":37.75975,"arrival_duration":3,"departure_duration":1},"duration":1,"work_windows":[{"from":"2020-02-23T07:30:00+03:00","to":"2020-02-23T20:30:00+03:00"}]},"location":{"latitude":55.703953,"longitude":37.50277,"arrival_duration":3,"departure_duration":1},"cargos":[{"key":"cargo_1_1","capacity":{"mass":10,"volume":2,"capacity_x":1,"capacity_y":2,"capacity_z":3},"width":1,"height":1,"length":1,"max_storage_time":200,"restrictions":["termobox"]}],"possible_events":[{"time_window":{"from":"2020-02-23T09:13:00+03:00","to":"2020-02-23T16:45:00+03:00"}}],"duration":5,"cost":{"reward":1500,"penalty":{"start_time":"2020-02-23T15:20:00+03:00","period":5,"value":1,"max_value":1}},"restrictions":["fast_delivery"],"blacklist":["slow_delivery"]},"pickup":{"order_time":{"from":"2020-02-23T08:41:00+03:00","to":"2020-02-23T08:42:00+03:00"},"location_time":{"from":"2020-02-23T08:41:00+03:00","to":"2020-02-23T08:42:00+03:00"}},"drop":{"order_time":{"from":"2020-02-23T09:56:00+03:00","to":"2020-02-23T10:01:00+03:00"},"location_time":{"from":"2020-02-23T09:56:00+03:00","to":"2020-02-23T10:01:00+03:00"}}}],"waitlist":[]}}],"tariff":{"basic":{"cost_per_shift":2000,"cost_per_meter":0.01,"max_length":1159116,"cost_per_minute":1,"max_time":400},"extra":[{"cost_per_shift":1000,"cost_per_meter":0.01,"max_length":1159116,"cost_per_minute":1,"max_time":400}]}}],"statistics":{"total_statistics":{"cost":2391.635,"reward":3000,"measurements":{"driving_time":67,"waiting_time":0,"working_time":22,"arriving_time":9,"departure_time":3,"total_time":34,"time_window":{"from":"2020-02-23T08:20:00+03:00","to":"2020-02-23T08:20:00+03:00"},"distance":29042},"orders_count":2,"performers_count":1,"capacity_utilization":{"mass":0.2,"volume":0.2,"capacity_x":0.2,"capacity_y":0.2,"capacity_z":0.2}},"trips_statistics":[{"trip_key":"trip_0_shft_perf_perf_1","statistics":{"cost":2391.635,"reward":3000,"measurements":{"driving_time":67,"waiting_time":0,"working_time":22,"arriving_time":9,"departure_time":3,"total_time":34,"time_window":{"from":"2020-02-23T08:20:00+03:00","to":"2020-02-23T10:01:00+03:00"},"distance":29042},"orders_count":2,"performers_count":1,"capacity_utilization":{"mass":0.2,"volume":0.2,"capacity_x":0.2,"capacity_y":0.2,"capacity_z":0.2}},"stop_statistics":[{"location":{"latitude":55.780163,"longitude":37.799747,"arrival_duration":3,"departure_duration":1},"demand_ids":["order_2#dmd_pickup_"],"measurements":{"driving_time":0,"waiting_time":0,"working_time":1,"arriving_time":0,"departure_time":1,"total_time":2,"time_window":{"from":"2020-02-23T08:20:00+03:00","to":"2020-02-23T08:22:00+03:00"},"distance":0},"upload":{"count":1,"capacity":{"mass":10,"volume":2,"capacity_x":1,"capacity_y":2,"capacity_z":3}},"current_load":{"count":1,"capacity":{"mass":10,"volume":2,"capacity_x":1,"capacity_y":2,"capacity_z":3}}},{"location":{"latitude":55.760162,"longitude":37.75975,"arrival_duration":3,"departure_duration":1},"demand_ids":["order_1#dmd_pickup_"],"measurements":{"driving_time":16,"waiting_time":0,"working_time":1,"arriving_time":3,"departure_time":1,"total_time":5,"time_window":{"from":"2020-02-23T08:38:00+03:00","to":"2020-02-23T08:43:00+03:00"},"distance":6599},"upload":{"count":1,"capacity":{"mass":10,"volume":2,"capacity_x":1,"capacity_y":2,"capacity_z":3}},"current_load":{"count":2,"capacity":{"mass":20,"volume":4,"capacity_x":2,"capacity_y":4,"capacity_z":6}}},{"location":{"latitude":55.747074,"longitude":37.599712,"arrival_duration":3,"departure_duration":1},"demand_ids":["order_2#dmd_drop_"],"measurements":{"driving_time":27,"waiting_time":0,"working_time":15,"arriving_time":3,"departure_time":1,"total_time":19,"time_window":{"from":"2020-02-23T09:10:00+03:00","to":"2020-02-23T09:29:00+03:00"},"distance":12271},"download":{"count":1,"capacity":{"mass":10,"volume":2,"capacity_x":1,"capacity_y":2,"capacity_z":3}},"current_load":{"count":1,"capacity":{"mass":10,"volume":2,"capacity_x":1,"capacity_y":2,"capacity_z":3}}},{"location":{"latitude":55.703953,"longitude":37.50277,"arrival_duration":3,"departure_duration":1},"demand_ids":["order_1#dmd_drop_"],"measurements":{"driving_time":24,"waiting_time":0,"working_time":5,"arriving_time":3,"departure_time":0,"total_time":8,"time_window":{"from":"2020-02-23T09:53:00+03:00","to":"2020-02-23T10:01:00+03:00"},"distance":10172},"download":{"count":1,"capacity":{"mass":10,"volume":2,"capacity_x":1,"capacity_y":2,"capacity_z":3}},"current_load":{"count":0,"capacity":{"mass":0,"volume":0,"capacity_x":0,"capacity_y":0,"capacity_z":0}}}],"total_load":{"count":2,"capacity":{"mass":20,"volume":4,"capacity_x":2,"capacity_y":4,"capacity_z":6}},"max_load":{"count":2,"capacity":{"mass":20,"volume":4,"capacity_x":2,"capacity_y":4,"capacity_z":6}}}]},"validations":[],"unplanned_orders":[]}, 
                settings = vrt_lss_delivery.models.convert_settings.ConvertSettings(
                    route_index_from = 15, 
                    route_index_to = 150, )
            )
        else :
            return ConvertTask(
                plan_task = vrt_lss_delivery.models.plan_task.PlanTask(
                    warehouses = [
                        vrt_lss_delivery.models.warehouse.Warehouse(
                            key = 'whs0001', 
                            location = vrt_lss_delivery.models.location.Location(
                                latitude = 55.692789, 
                                longitude = 37.554554, 
                                arrival_duration = 15, 
                                departure_duration = 5, ), 
                            work_windows = [
                                vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2020-10-21T09:30+03:00', 
                                    to = '2020-10-21T19:45Z', )
                                ], )
                        ], 
                    orders = [
                        vrt_lss_delivery.models.order.Order(
                            key = 'order0001', 
                            type = 'DROP', 
                            warehouse_keys = [
                                'whs0001'
                                ], 
                            customer = vrt_lss_delivery.models.customer.Customer(
                                location = vrt_lss_delivery.models.location.Location(
                                    latitude = 55.692789, 
                                    longitude = 37.554554, 
                                    arrival_duration = 15, 
                                    departure_duration = 5, ), 
                                time_windows = [
                                    vrt_lss_delivery.models.time_window.TimeWindow(
                                        from = '2020-10-21T09:30+03:00', 
                                        to = '2020-10-21T19:45Z', )
                                    ], ), 
                            cargos = [
                                vrt_lss_delivery.models.cargo.Cargo(
                                    key = 'cargo01', 
                                    capacity = vrt_lss_delivery.models.capacity.Capacity(
                                        mass = 10, 
                                        volume = 2, 
                                        capacity_x = 1, 
                                        capacity_y = 2, 
                                        capacity_z = 3, ), 
                                    width = 1, 
                                    height = 0.3, 
                                    length = 2.2, 
                                    max_storage_time = 45, 
                                    restrictions = ["Freezer"], )
                                ], 
                            warehouse_duration = 10, 
                            customer_duration = 10, 
                            cost = vrt_lss_delivery.models.order_cost.OrderCost(
                                reward = 199.1, 
                                penalty = vrt_lss_delivery.models.cost_penalty.CostPenalty(
                                    start_time = '2020-10-21T17:00Z', 
                                    period = 60, 
                                    value = 1000, 
                                    max_value = 10000, ), ), 
                            restrictions = ["Special"], 
                            blacklist = ["A0"], )
                        ], 
                    performers = [
                        vrt_lss_delivery.models.performer.Performer(
                            key = 'performer0001', 
                            count = 15, 
                            box = vrt_lss_delivery.models.box.Box(
                                key = 'box01', 
                                capacity = vrt_lss_delivery.models.capacity.Capacity(
                                    mass = 10, 
                                    volume = 2, 
                                    capacity_x = 1, 
                                    capacity_y = 2, 
                                    capacity_z = 3, ), 
                                max_size = vrt_lss_delivery.models.capacity.Capacity(
                                    mass = 10, 
                                    volume = 2, 
                                    capacity_x = 1, 
                                    capacity_y = 2, 
                                    capacity_z = 3, ), 
                                width = 1, 
                                height = 3.1, 
                                length = 2.1, 
                                features = ["Freezer"], ), 
                            start_location = vrt_lss_delivery.models.location.Location(
                                latitude = 55.692789, 
                                longitude = 37.554554, 
                                arrival_duration = 15, 
                                departure_duration = 5, ), 
                            finish_location = vrt_lss_delivery.models.location.Location(
                                latitude = 55.692789, 
                                longitude = 37.554554, 
                                arrival_duration = 15, 
                                departure_duration = 5, ), 
                            features = ["B1","Special"], 
                            transport_type = 'CAR', 
                            shifts = [
                                vrt_lss_delivery.models.shift.Shift(
                                    availability_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                        from = '2020-10-21T09:30+03:00', 
                                        to = '2020-10-21T19:45Z', ), 
                                    working_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                        from = '2020-10-21T09:30+03:00', 
                                        to = '2020-10-21T19:45Z', ), )
                                ], 
                            tariff = vrt_lss_delivery.models.tariff.Tariff(
                                basic = vrt_lss_delivery.models.tariff_primary.TariffPrimary(
                                    cost_per_shift = 1000.9, 
                                    cost_per_meter = 0.05, 
                                    max_length = 200000, 
                                    cost_per_minute = 0.12, 
                                    max_time = 480, ), 
                                extra = [
                                    vrt_lss_delivery.models.tariff_primary.TariffPrimary(
                                        cost_per_shift = 1000.9, 
                                        cost_per_meter = 0.05, 
                                        max_length = 200000, 
                                        cost_per_minute = 0.12, 
                                        max_time = 480, )
                                    ], ), )
                        ], 
                    trips = [
                        vrt_lss_delivery.models.trip.Trip(
                            key = 'TRIP0001', 
                            trip_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                from = '2020-10-21T09:30+03:00', 
                                to = '2020-10-21T19:45Z', ), 
                            performer_key = 'performer01', 
                            actions = [
                                vrt_lss_delivery.models.trip_action.TripAction(
                                    order_key = 'order01', 
                                    warehouse_key = 'whs01', 
                                    order_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                        from = '2020-10-21T09:30+03:00', 
                                        to = '2020-10-21T19:45Z', ), 
                                    location_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                        from = '2020-10-21T09:30+03:00', 
                                        to = '2020-10-21T19:45Z', ), )
                                ], 
                            waitlist = ["order02"], )
                        ], 
                    settings = vrt_lss_delivery.models.plan_settings.PlanSettings(
                        configuration = 'default', 
                        planning_time = 30, 
                        result_ttl = 10, 
                        result_timezone = 3, 
                        predict_slots = 2, 
                        transport_factor = [
                            vrt_lss_delivery.models.transport_factor.TransportFactor(
                                transport_type = 'CAR', 
                                speed = 2.5, )
                            ], 
                        capacity_factor = [
                            vrt_lss_delivery.models.capacity_factor.CapacityFactor(
                                transport_type = 'CAR', 
                                capacity = 2.5, )
                            ], 
                        routing = [
                            vrt_lss_delivery.models.routing.Routing(
                                transport_type = 'CAR', 
                                matrix = {"waypoints":[{"latitude":59.9345,"longitude":30.1504},{"latitude":59.942383,"longitude":30.258951},{"latitude":59.9545,"longitude":30.2004},{"latitude":59.89527,"longitude":30.261747},{"latitude":59.9745,"longitude":30.5004}],"distances":[[0,5822,1820,14130,23304],[5936,0,4931,8365,17731],[1819,4853,0,13161,22335],[14859,9056,13854,0,21440],[21777,16306,20772,19290,0]],"durations":[[0,13,7,24,36],[13,0,9,13,25],[7,9,0,21,32],[26,14,22,0,30],[34,23,30,28,0]]}, 
                                traffic_jams = [
                                    vrt_lss_delivery.models.traffic_factor.TrafficFactor(
                                        time_window = vrt_lss_delivery.models.time_window.TimeWindow(
                                            from = '2020-10-21T09:30+03:00', 
                                            to = '2020-10-21T19:45Z', ), 
                                        length_multiplier = 2, 
                                        length_additive = 20, 
                                        time_multiplier = 2, 
                                        time_additive = 30, )
                                    ], )
                            ], 
                        assumptions = vrt_lss_delivery.models.plan_assumptions.PlanAssumptions(
                            flight_distance = True, 
                            disable_compatibility = True, 
                            disable_capacity = True, 
                            same_order_time_window = True, 
                            expand_shift_time_window = True, ), 
                        precision = 2, ), 
                    delivery_settings = vrt_lss_delivery.models.delivery_settings.DeliverySettings(
                        restrict_middle_warehouses = False, 
                        restrict_multiple_warehouses = False, 
                        restrict_multiple_order_types = True, ), ),
        )

    def testConvertTask(self):
        """Test ConvertTask"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()

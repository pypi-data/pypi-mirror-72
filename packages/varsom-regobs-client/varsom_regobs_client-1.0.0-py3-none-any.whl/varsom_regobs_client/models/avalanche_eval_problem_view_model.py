# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AvalancheEvalProblemViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avalanche_eval_problem_id': 'int',
        'aval_probability_tid': 'int',
        'aval_probability_name': 'str',
        'aval_trigger_simple_tid': 'int',
        'aval_trigger_simple_name': 'str',
        'destructive_size_ext_tid': 'int',
        'destructive_size_ext_name': 'str',
        'avalanche_ext_tid': 'int',
        'avalanche_ext_name': 'str',
        'aval_cause_tid': 'int',
        'aval_cause_name': 'str',
        'aval_cause_ext_tid': 'int',
        'aval_cause_ext_name': 'str',
        'aval_release_height_tid': 'int',
        'aval_release_height_name': 'str',
        'avalanche_probability_auto_text': 'str',
        'avalanche_problem_auto_text': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'avalanche_eval_problem_id': 'AvalancheEvalProblemID',
        'aval_probability_tid': 'AvalProbabilityTID',
        'aval_probability_name': 'AvalProbabilityName',
        'aval_trigger_simple_tid': 'AvalTriggerSimpleTID',
        'aval_trigger_simple_name': 'AvalTriggerSimpleName',
        'destructive_size_ext_tid': 'DestructiveSizeExtTID',
        'destructive_size_ext_name': 'DestructiveSizeExtName',
        'avalanche_ext_tid': 'AvalancheExtTID',
        'avalanche_ext_name': 'AvalancheExtName',
        'aval_cause_tid': 'AvalCauseTID',
        'aval_cause_name': 'AvalCauseName',
        'aval_cause_ext_tid': 'AvalCauseExtTID',
        'aval_cause_ext_name': 'AvalCauseExtName',
        'aval_release_height_tid': 'AvalReleaseHeightTID',
        'aval_release_height_name': 'AvalReleaseHeightName',
        'avalanche_probability_auto_text': 'AvalancheProbabilityAutoText',
        'avalanche_problem_auto_text': 'AvalancheProblemAutoText',
        'comment': 'Comment'
    }

    def __init__(self, avalanche_eval_problem_id=None, aval_probability_tid=None, aval_probability_name=None, aval_trigger_simple_tid=None, aval_trigger_simple_name=None, destructive_size_ext_tid=None, destructive_size_ext_name=None, avalanche_ext_tid=None, avalanche_ext_name=None, aval_cause_tid=None, aval_cause_name=None, aval_cause_ext_tid=None, aval_cause_ext_name=None, aval_release_height_tid=None, aval_release_height_name=None, avalanche_probability_auto_text=None, avalanche_problem_auto_text=None, comment=None):  # noqa: E501
        """AvalancheEvalProblemViewModel - a model defined in Swagger"""  # noqa: E501
        self._avalanche_eval_problem_id = None
        self._aval_probability_tid = None
        self._aval_probability_name = None
        self._aval_trigger_simple_tid = None
        self._aval_trigger_simple_name = None
        self._destructive_size_ext_tid = None
        self._destructive_size_ext_name = None
        self._avalanche_ext_tid = None
        self._avalanche_ext_name = None
        self._aval_cause_tid = None
        self._aval_cause_name = None
        self._aval_cause_ext_tid = None
        self._aval_cause_ext_name = None
        self._aval_release_height_tid = None
        self._aval_release_height_name = None
        self._avalanche_probability_auto_text = None
        self._avalanche_problem_auto_text = None
        self._comment = None
        self.discriminator = None
        if avalanche_eval_problem_id is not None:
            self.avalanche_eval_problem_id = avalanche_eval_problem_id
        if aval_probability_tid is not None:
            self.aval_probability_tid = aval_probability_tid
        if aval_probability_name is not None:
            self.aval_probability_name = aval_probability_name
        if aval_trigger_simple_tid is not None:
            self.aval_trigger_simple_tid = aval_trigger_simple_tid
        if aval_trigger_simple_name is not None:
            self.aval_trigger_simple_name = aval_trigger_simple_name
        if destructive_size_ext_tid is not None:
            self.destructive_size_ext_tid = destructive_size_ext_tid
        if destructive_size_ext_name is not None:
            self.destructive_size_ext_name = destructive_size_ext_name
        if avalanche_ext_tid is not None:
            self.avalanche_ext_tid = avalanche_ext_tid
        if avalanche_ext_name is not None:
            self.avalanche_ext_name = avalanche_ext_name
        if aval_cause_tid is not None:
            self.aval_cause_tid = aval_cause_tid
        if aval_cause_name is not None:
            self.aval_cause_name = aval_cause_name
        if aval_cause_ext_tid is not None:
            self.aval_cause_ext_tid = aval_cause_ext_tid
        if aval_cause_ext_name is not None:
            self.aval_cause_ext_name = aval_cause_ext_name
        if aval_release_height_tid is not None:
            self.aval_release_height_tid = aval_release_height_tid
        if aval_release_height_name is not None:
            self.aval_release_height_name = aval_release_height_name
        if avalanche_probability_auto_text is not None:
            self.avalanche_probability_auto_text = avalanche_probability_auto_text
        if avalanche_problem_auto_text is not None:
            self.avalanche_problem_auto_text = avalanche_problem_auto_text
        if comment is not None:
            self.comment = comment

    @property
    def avalanche_eval_problem_id(self):
        """Gets the avalanche_eval_problem_id of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The avalanche_eval_problem_id of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._avalanche_eval_problem_id

    @avalanche_eval_problem_id.setter
    def avalanche_eval_problem_id(self, avalanche_eval_problem_id):
        """Sets the avalanche_eval_problem_id of this AvalancheEvalProblemViewModel.


        :param avalanche_eval_problem_id: The avalanche_eval_problem_id of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: int
        """

        self._avalanche_eval_problem_id = avalanche_eval_problem_id

    @property
    def aval_probability_tid(self):
        """Gets the aval_probability_tid of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The aval_probability_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._aval_probability_tid

    @aval_probability_tid.setter
    def aval_probability_tid(self, aval_probability_tid):
        """Sets the aval_probability_tid of this AvalancheEvalProblemViewModel.


        :param aval_probability_tid: The aval_probability_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: int
        """

        self._aval_probability_tid = aval_probability_tid

    @property
    def aval_probability_name(self):
        """Gets the aval_probability_name of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The aval_probability_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._aval_probability_name

    @aval_probability_name.setter
    def aval_probability_name(self, aval_probability_name):
        """Sets the aval_probability_name of this AvalancheEvalProblemViewModel.


        :param aval_probability_name: The aval_probability_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: str
        """

        self._aval_probability_name = aval_probability_name

    @property
    def aval_trigger_simple_tid(self):
        """Gets the aval_trigger_simple_tid of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The aval_trigger_simple_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._aval_trigger_simple_tid

    @aval_trigger_simple_tid.setter
    def aval_trigger_simple_tid(self, aval_trigger_simple_tid):
        """Sets the aval_trigger_simple_tid of this AvalancheEvalProblemViewModel.


        :param aval_trigger_simple_tid: The aval_trigger_simple_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: int
        """

        self._aval_trigger_simple_tid = aval_trigger_simple_tid

    @property
    def aval_trigger_simple_name(self):
        """Gets the aval_trigger_simple_name of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The aval_trigger_simple_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._aval_trigger_simple_name

    @aval_trigger_simple_name.setter
    def aval_trigger_simple_name(self, aval_trigger_simple_name):
        """Sets the aval_trigger_simple_name of this AvalancheEvalProblemViewModel.


        :param aval_trigger_simple_name: The aval_trigger_simple_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: str
        """

        self._aval_trigger_simple_name = aval_trigger_simple_name

    @property
    def destructive_size_ext_tid(self):
        """Gets the destructive_size_ext_tid of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The destructive_size_ext_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._destructive_size_ext_tid

    @destructive_size_ext_tid.setter
    def destructive_size_ext_tid(self, destructive_size_ext_tid):
        """Sets the destructive_size_ext_tid of this AvalancheEvalProblemViewModel.


        :param destructive_size_ext_tid: The destructive_size_ext_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: int
        """

        self._destructive_size_ext_tid = destructive_size_ext_tid

    @property
    def destructive_size_ext_name(self):
        """Gets the destructive_size_ext_name of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The destructive_size_ext_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._destructive_size_ext_name

    @destructive_size_ext_name.setter
    def destructive_size_ext_name(self, destructive_size_ext_name):
        """Sets the destructive_size_ext_name of this AvalancheEvalProblemViewModel.


        :param destructive_size_ext_name: The destructive_size_ext_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: str
        """

        self._destructive_size_ext_name = destructive_size_ext_name

    @property
    def avalanche_ext_tid(self):
        """Gets the avalanche_ext_tid of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The avalanche_ext_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._avalanche_ext_tid

    @avalanche_ext_tid.setter
    def avalanche_ext_tid(self, avalanche_ext_tid):
        """Sets the avalanche_ext_tid of this AvalancheEvalProblemViewModel.


        :param avalanche_ext_tid: The avalanche_ext_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: int
        """

        self._avalanche_ext_tid = avalanche_ext_tid

    @property
    def avalanche_ext_name(self):
        """Gets the avalanche_ext_name of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The avalanche_ext_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._avalanche_ext_name

    @avalanche_ext_name.setter
    def avalanche_ext_name(self, avalanche_ext_name):
        """Sets the avalanche_ext_name of this AvalancheEvalProblemViewModel.


        :param avalanche_ext_name: The avalanche_ext_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: str
        """

        self._avalanche_ext_name = avalanche_ext_name

    @property
    def aval_cause_tid(self):
        """Gets the aval_cause_tid of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The aval_cause_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._aval_cause_tid

    @aval_cause_tid.setter
    def aval_cause_tid(self, aval_cause_tid):
        """Sets the aval_cause_tid of this AvalancheEvalProblemViewModel.


        :param aval_cause_tid: The aval_cause_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: int
        """

        self._aval_cause_tid = aval_cause_tid

    @property
    def aval_cause_name(self):
        """Gets the aval_cause_name of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The aval_cause_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._aval_cause_name

    @aval_cause_name.setter
    def aval_cause_name(self, aval_cause_name):
        """Sets the aval_cause_name of this AvalancheEvalProblemViewModel.


        :param aval_cause_name: The aval_cause_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: str
        """

        self._aval_cause_name = aval_cause_name

    @property
    def aval_cause_ext_tid(self):
        """Gets the aval_cause_ext_tid of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The aval_cause_ext_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._aval_cause_ext_tid

    @aval_cause_ext_tid.setter
    def aval_cause_ext_tid(self, aval_cause_ext_tid):
        """Sets the aval_cause_ext_tid of this AvalancheEvalProblemViewModel.


        :param aval_cause_ext_tid: The aval_cause_ext_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: int
        """

        self._aval_cause_ext_tid = aval_cause_ext_tid

    @property
    def aval_cause_ext_name(self):
        """Gets the aval_cause_ext_name of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The aval_cause_ext_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._aval_cause_ext_name

    @aval_cause_ext_name.setter
    def aval_cause_ext_name(self, aval_cause_ext_name):
        """Sets the aval_cause_ext_name of this AvalancheEvalProblemViewModel.


        :param aval_cause_ext_name: The aval_cause_ext_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: str
        """

        self._aval_cause_ext_name = aval_cause_ext_name

    @property
    def aval_release_height_tid(self):
        """Gets the aval_release_height_tid of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The aval_release_height_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._aval_release_height_tid

    @aval_release_height_tid.setter
    def aval_release_height_tid(self, aval_release_height_tid):
        """Sets the aval_release_height_tid of this AvalancheEvalProblemViewModel.


        :param aval_release_height_tid: The aval_release_height_tid of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: int
        """

        self._aval_release_height_tid = aval_release_height_tid

    @property
    def aval_release_height_name(self):
        """Gets the aval_release_height_name of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The aval_release_height_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._aval_release_height_name

    @aval_release_height_name.setter
    def aval_release_height_name(self, aval_release_height_name):
        """Sets the aval_release_height_name of this AvalancheEvalProblemViewModel.


        :param aval_release_height_name: The aval_release_height_name of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: str
        """

        self._aval_release_height_name = aval_release_height_name

    @property
    def avalanche_probability_auto_text(self):
        """Gets the avalanche_probability_auto_text of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The avalanche_probability_auto_text of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._avalanche_probability_auto_text

    @avalanche_probability_auto_text.setter
    def avalanche_probability_auto_text(self, avalanche_probability_auto_text):
        """Sets the avalanche_probability_auto_text of this AvalancheEvalProblemViewModel.


        :param avalanche_probability_auto_text: The avalanche_probability_auto_text of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: str
        """

        self._avalanche_probability_auto_text = avalanche_probability_auto_text

    @property
    def avalanche_problem_auto_text(self):
        """Gets the avalanche_problem_auto_text of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The avalanche_problem_auto_text of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._avalanche_problem_auto_text

    @avalanche_problem_auto_text.setter
    def avalanche_problem_auto_text(self, avalanche_problem_auto_text):
        """Sets the avalanche_problem_auto_text of this AvalancheEvalProblemViewModel.


        :param avalanche_problem_auto_text: The avalanche_problem_auto_text of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: str
        """

        self._avalanche_problem_auto_text = avalanche_problem_auto_text

    @property
    def comment(self):
        """Gets the comment of this AvalancheEvalProblemViewModel.  # noqa: E501


        :return: The comment of this AvalancheEvalProblemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AvalancheEvalProblemViewModel.


        :param comment: The comment of this AvalancheEvalProblemViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvalancheEvalProblemViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvalancheEvalProblemViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IceThicknessViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'snow_depth': 'float',
        'slush_snow': 'float',
        'ice_thickness_sum': 'float',
        'ice_height_before': 'float',
        'ice_height_after': 'float',
        'comment': 'str',
        'ice_thickness_layers': 'list[IceThicknessLayerViewModel]'
    }

    attribute_map = {
        'snow_depth': 'SnowDepth',
        'slush_snow': 'SlushSnow',
        'ice_thickness_sum': 'IceThicknessSum',
        'ice_height_before': 'IceHeightBefore',
        'ice_height_after': 'IceHeightAfter',
        'comment': 'Comment',
        'ice_thickness_layers': 'IceThicknessLayers'
    }

    def __init__(self, snow_depth=None, slush_snow=None, ice_thickness_sum=None, ice_height_before=None, ice_height_after=None, comment=None, ice_thickness_layers=None):  # noqa: E501
        """IceThicknessViewModel - a model defined in Swagger"""  # noqa: E501
        self._snow_depth = None
        self._slush_snow = None
        self._ice_thickness_sum = None
        self._ice_height_before = None
        self._ice_height_after = None
        self._comment = None
        self._ice_thickness_layers = None
        self.discriminator = None
        if snow_depth is not None:
            self.snow_depth = snow_depth
        if slush_snow is not None:
            self.slush_snow = slush_snow
        if ice_thickness_sum is not None:
            self.ice_thickness_sum = ice_thickness_sum
        if ice_height_before is not None:
            self.ice_height_before = ice_height_before
        if ice_height_after is not None:
            self.ice_height_after = ice_height_after
        if comment is not None:
            self.comment = comment
        if ice_thickness_layers is not None:
            self.ice_thickness_layers = ice_thickness_layers

    @property
    def snow_depth(self):
        """Gets the snow_depth of this IceThicknessViewModel.  # noqa: E501


        :return: The snow_depth of this IceThicknessViewModel.  # noqa: E501
        :rtype: float
        """
        return self._snow_depth

    @snow_depth.setter
    def snow_depth(self, snow_depth):
        """Sets the snow_depth of this IceThicknessViewModel.


        :param snow_depth: The snow_depth of this IceThicknessViewModel.  # noqa: E501
        :type: float
        """

        self._snow_depth = snow_depth

    @property
    def slush_snow(self):
        """Gets the slush_snow of this IceThicknessViewModel.  # noqa: E501


        :return: The slush_snow of this IceThicknessViewModel.  # noqa: E501
        :rtype: float
        """
        return self._slush_snow

    @slush_snow.setter
    def slush_snow(self, slush_snow):
        """Sets the slush_snow of this IceThicknessViewModel.


        :param slush_snow: The slush_snow of this IceThicknessViewModel.  # noqa: E501
        :type: float
        """

        self._slush_snow = slush_snow

    @property
    def ice_thickness_sum(self):
        """Gets the ice_thickness_sum of this IceThicknessViewModel.  # noqa: E501


        :return: The ice_thickness_sum of this IceThicknessViewModel.  # noqa: E501
        :rtype: float
        """
        return self._ice_thickness_sum

    @ice_thickness_sum.setter
    def ice_thickness_sum(self, ice_thickness_sum):
        """Sets the ice_thickness_sum of this IceThicknessViewModel.


        :param ice_thickness_sum: The ice_thickness_sum of this IceThicknessViewModel.  # noqa: E501
        :type: float
        """

        self._ice_thickness_sum = ice_thickness_sum

    @property
    def ice_height_before(self):
        """Gets the ice_height_before of this IceThicknessViewModel.  # noqa: E501


        :return: The ice_height_before of this IceThicknessViewModel.  # noqa: E501
        :rtype: float
        """
        return self._ice_height_before

    @ice_height_before.setter
    def ice_height_before(self, ice_height_before):
        """Sets the ice_height_before of this IceThicknessViewModel.


        :param ice_height_before: The ice_height_before of this IceThicknessViewModel.  # noqa: E501
        :type: float
        """

        self._ice_height_before = ice_height_before

    @property
    def ice_height_after(self):
        """Gets the ice_height_after of this IceThicknessViewModel.  # noqa: E501


        :return: The ice_height_after of this IceThicknessViewModel.  # noqa: E501
        :rtype: float
        """
        return self._ice_height_after

    @ice_height_after.setter
    def ice_height_after(self, ice_height_after):
        """Sets the ice_height_after of this IceThicknessViewModel.


        :param ice_height_after: The ice_height_after of this IceThicknessViewModel.  # noqa: E501
        :type: float
        """

        self._ice_height_after = ice_height_after

    @property
    def comment(self):
        """Gets the comment of this IceThicknessViewModel.  # noqa: E501


        :return: The comment of this IceThicknessViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IceThicknessViewModel.


        :param comment: The comment of this IceThicknessViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def ice_thickness_layers(self):
        """Gets the ice_thickness_layers of this IceThicknessViewModel.  # noqa: E501


        :return: The ice_thickness_layers of this IceThicknessViewModel.  # noqa: E501
        :rtype: list[IceThicknessLayerViewModel]
        """
        return self._ice_thickness_layers

    @ice_thickness_layers.setter
    def ice_thickness_layers(self, ice_thickness_layers):
        """Sets the ice_thickness_layers of this IceThicknessViewModel.


        :param ice_thickness_layers: The ice_thickness_layers of this IceThicknessViewModel.  # noqa: E501
        :type: list[IceThicknessLayerViewModel]
        """

        self._ice_thickness_layers = ice_thickness_layers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IceThicknessViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IceThicknessViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

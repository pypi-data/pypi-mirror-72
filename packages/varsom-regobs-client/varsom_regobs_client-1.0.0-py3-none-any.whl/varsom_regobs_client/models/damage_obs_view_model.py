# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DamageObsViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geo_hazard_tid': 'int',
        'geo_hazard_name': 'str',
        'damage_type_tid': 'int',
        'damage_type_name': 'str',
        'damage_position': 'PositionDto',
        'comment': 'str',
        'attachments': 'list[int]'
    }

    attribute_map = {
        'geo_hazard_tid': 'GeoHazardTID',
        'geo_hazard_name': 'GeoHazardName',
        'damage_type_tid': 'DamageTypeTID',
        'damage_type_name': 'DamageTypeName',
        'damage_position': 'DamagePosition',
        'comment': 'Comment',
        'attachments': 'Attachments'
    }

    def __init__(self, geo_hazard_tid=None, geo_hazard_name=None, damage_type_tid=None, damage_type_name=None, damage_position=None, comment=None, attachments=None):  # noqa: E501
        """DamageObsViewModel - a model defined in Swagger"""  # noqa: E501
        self._geo_hazard_tid = None
        self._geo_hazard_name = None
        self._damage_type_tid = None
        self._damage_type_name = None
        self._damage_position = None
        self._comment = None
        self._attachments = None
        self.discriminator = None
        if geo_hazard_tid is not None:
            self.geo_hazard_tid = geo_hazard_tid
        if geo_hazard_name is not None:
            self.geo_hazard_name = geo_hazard_name
        if damage_type_tid is not None:
            self.damage_type_tid = damage_type_tid
        if damage_type_name is not None:
            self.damage_type_name = damage_type_name
        if damage_position is not None:
            self.damage_position = damage_position
        if comment is not None:
            self.comment = comment
        if attachments is not None:
            self.attachments = attachments

    @property
    def geo_hazard_tid(self):
        """Gets the geo_hazard_tid of this DamageObsViewModel.  # noqa: E501


        :return: The geo_hazard_tid of this DamageObsViewModel.  # noqa: E501
        :rtype: int
        """
        return self._geo_hazard_tid

    @geo_hazard_tid.setter
    def geo_hazard_tid(self, geo_hazard_tid):
        """Sets the geo_hazard_tid of this DamageObsViewModel.


        :param geo_hazard_tid: The geo_hazard_tid of this DamageObsViewModel.  # noqa: E501
        :type: int
        """

        self._geo_hazard_tid = geo_hazard_tid

    @property
    def geo_hazard_name(self):
        """Gets the geo_hazard_name of this DamageObsViewModel.  # noqa: E501


        :return: The geo_hazard_name of this DamageObsViewModel.  # noqa: E501
        :rtype: str
        """
        return self._geo_hazard_name

    @geo_hazard_name.setter
    def geo_hazard_name(self, geo_hazard_name):
        """Sets the geo_hazard_name of this DamageObsViewModel.


        :param geo_hazard_name: The geo_hazard_name of this DamageObsViewModel.  # noqa: E501
        :type: str
        """

        self._geo_hazard_name = geo_hazard_name

    @property
    def damage_type_tid(self):
        """Gets the damage_type_tid of this DamageObsViewModel.  # noqa: E501


        :return: The damage_type_tid of this DamageObsViewModel.  # noqa: E501
        :rtype: int
        """
        return self._damage_type_tid

    @damage_type_tid.setter
    def damage_type_tid(self, damage_type_tid):
        """Sets the damage_type_tid of this DamageObsViewModel.


        :param damage_type_tid: The damage_type_tid of this DamageObsViewModel.  # noqa: E501
        :type: int
        """

        self._damage_type_tid = damage_type_tid

    @property
    def damage_type_name(self):
        """Gets the damage_type_name of this DamageObsViewModel.  # noqa: E501


        :return: The damage_type_name of this DamageObsViewModel.  # noqa: E501
        :rtype: str
        """
        return self._damage_type_name

    @damage_type_name.setter
    def damage_type_name(self, damage_type_name):
        """Sets the damage_type_name of this DamageObsViewModel.


        :param damage_type_name: The damage_type_name of this DamageObsViewModel.  # noqa: E501
        :type: str
        """

        self._damage_type_name = damage_type_name

    @property
    def damage_position(self):
        """Gets the damage_position of this DamageObsViewModel.  # noqa: E501


        :return: The damage_position of this DamageObsViewModel.  # noqa: E501
        :rtype: PositionDto
        """
        return self._damage_position

    @damage_position.setter
    def damage_position(self, damage_position):
        """Sets the damage_position of this DamageObsViewModel.


        :param damage_position: The damage_position of this DamageObsViewModel.  # noqa: E501
        :type: PositionDto
        """

        self._damage_position = damage_position

    @property
    def comment(self):
        """Gets the comment of this DamageObsViewModel.  # noqa: E501


        :return: The comment of this DamageObsViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DamageObsViewModel.


        :param comment: The comment of this DamageObsViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def attachments(self):
        """Gets the attachments of this DamageObsViewModel.  # noqa: E501


        :return: The attachments of this DamageObsViewModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this DamageObsViewModel.


        :param attachments: The attachments of this DamageObsViewModel.  # noqa: E501
        :type: list[int]
        """

        self._attachments = attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DamageObsViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DamageObsViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ForecastRegionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'text': 'str',
        'sort_order': 'int',
        'sub_regions': 'list[ForecastRegionSubRegionDto]',
        'is_region_for_grouping': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'text': 'Text',
        'sort_order': 'SortOrder',
        'sub_regions': 'SubRegions',
        'is_region_for_grouping': 'IsRegionForGrouping'
    }

    def __init__(self, id=None, text=None, sort_order=None, sub_regions=None, is_region_for_grouping=None):  # noqa: E501
        """ForecastRegionDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._text = None
        self._sort_order = None
        self._sub_regions = None
        self._is_region_for_grouping = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if text is not None:
            self.text = text
        if sort_order is not None:
            self.sort_order = sort_order
        if sub_regions is not None:
            self.sub_regions = sub_regions
        if is_region_for_grouping is not None:
            self.is_region_for_grouping = is_region_for_grouping

    @property
    def id(self):
        """Gets the id of this ForecastRegionDto.  # noqa: E501


        :return: The id of this ForecastRegionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ForecastRegionDto.


        :param id: The id of this ForecastRegionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def text(self):
        """Gets the text of this ForecastRegionDto.  # noqa: E501


        :return: The text of this ForecastRegionDto.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ForecastRegionDto.


        :param text: The text of this ForecastRegionDto.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def sort_order(self):
        """Gets the sort_order of this ForecastRegionDto.  # noqa: E501


        :return: The sort_order of this ForecastRegionDto.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ForecastRegionDto.


        :param sort_order: The sort_order of this ForecastRegionDto.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def sub_regions(self):
        """Gets the sub_regions of this ForecastRegionDto.  # noqa: E501


        :return: The sub_regions of this ForecastRegionDto.  # noqa: E501
        :rtype: list[ForecastRegionSubRegionDto]
        """
        return self._sub_regions

    @sub_regions.setter
    def sub_regions(self, sub_regions):
        """Sets the sub_regions of this ForecastRegionDto.


        :param sub_regions: The sub_regions of this ForecastRegionDto.  # noqa: E501
        :type: list[ForecastRegionSubRegionDto]
        """

        self._sub_regions = sub_regions

    @property
    def is_region_for_grouping(self):
        """Gets the is_region_for_grouping of this ForecastRegionDto.  # noqa: E501


        :return: The is_region_for_grouping of this ForecastRegionDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_region_for_grouping

    @is_region_for_grouping.setter
    def is_region_for_grouping(self, is_region_for_grouping):
        """Sets the is_region_for_grouping of this ForecastRegionDto.


        :param is_region_for_grouping: The is_region_for_grouping of this ForecastRegionDto.  # noqa: E501
        :type: bool
        """

        self._is_region_for_grouping = is_region_for_grouping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForecastRegionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForecastRegionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

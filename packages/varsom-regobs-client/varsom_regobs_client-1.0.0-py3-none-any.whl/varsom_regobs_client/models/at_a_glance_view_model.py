# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AtAGlanceViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reg_id': 'int',
        'geo_hazard_tid': 'int',
        'dt_obs_time': 'datetime',
        'nick_name': 'str',
        'competence_level_tid': 'int',
        'title': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'utm_north': 'int',
        'utm_east': 'int',
        'form_names': 'list[str]',
        'first_attachment_id': 'int'
    }

    attribute_map = {
        'reg_id': 'RegID',
        'geo_hazard_tid': 'GeoHazardTID',
        'dt_obs_time': 'DtObsTime',
        'nick_name': 'NickName',
        'competence_level_tid': 'CompetenceLevelTID',
        'title': 'Title',
        'latitude': 'Latitude',
        'longitude': 'Longitude',
        'utm_north': 'UtmNorth',
        'utm_east': 'UtmEast',
        'form_names': 'FormNames',
        'first_attachment_id': 'FirstAttachmentId'
    }

    def __init__(self, reg_id=None, geo_hazard_tid=None, dt_obs_time=None, nick_name=None, competence_level_tid=None, title=None, latitude=None, longitude=None, utm_north=None, utm_east=None, form_names=None, first_attachment_id=None):  # noqa: E501
        """AtAGlanceViewModel - a model defined in Swagger"""  # noqa: E501
        self._reg_id = None
        self._geo_hazard_tid = None
        self._dt_obs_time = None
        self._nick_name = None
        self._competence_level_tid = None
        self._title = None
        self._latitude = None
        self._longitude = None
        self._utm_north = None
        self._utm_east = None
        self._form_names = None
        self._first_attachment_id = None
        self.discriminator = None
        if reg_id is not None:
            self.reg_id = reg_id
        if geo_hazard_tid is not None:
            self.geo_hazard_tid = geo_hazard_tid
        if dt_obs_time is not None:
            self.dt_obs_time = dt_obs_time
        if nick_name is not None:
            self.nick_name = nick_name
        if competence_level_tid is not None:
            self.competence_level_tid = competence_level_tid
        if title is not None:
            self.title = title
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if utm_north is not None:
            self.utm_north = utm_north
        if utm_east is not None:
            self.utm_east = utm_east
        if form_names is not None:
            self.form_names = form_names
        if first_attachment_id is not None:
            self.first_attachment_id = first_attachment_id

    @property
    def reg_id(self):
        """Gets the reg_id of this AtAGlanceViewModel.  # noqa: E501


        :return: The reg_id of this AtAGlanceViewModel.  # noqa: E501
        :rtype: int
        """
        return self._reg_id

    @reg_id.setter
    def reg_id(self, reg_id):
        """Sets the reg_id of this AtAGlanceViewModel.


        :param reg_id: The reg_id of this AtAGlanceViewModel.  # noqa: E501
        :type: int
        """

        self._reg_id = reg_id

    @property
    def geo_hazard_tid(self):
        """Gets the geo_hazard_tid of this AtAGlanceViewModel.  # noqa: E501


        :return: The geo_hazard_tid of this AtAGlanceViewModel.  # noqa: E501
        :rtype: int
        """
        return self._geo_hazard_tid

    @geo_hazard_tid.setter
    def geo_hazard_tid(self, geo_hazard_tid):
        """Sets the geo_hazard_tid of this AtAGlanceViewModel.


        :param geo_hazard_tid: The geo_hazard_tid of this AtAGlanceViewModel.  # noqa: E501
        :type: int
        """

        self._geo_hazard_tid = geo_hazard_tid

    @property
    def dt_obs_time(self):
        """Gets the dt_obs_time of this AtAGlanceViewModel.  # noqa: E501


        :return: The dt_obs_time of this AtAGlanceViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_obs_time

    @dt_obs_time.setter
    def dt_obs_time(self, dt_obs_time):
        """Sets the dt_obs_time of this AtAGlanceViewModel.


        :param dt_obs_time: The dt_obs_time of this AtAGlanceViewModel.  # noqa: E501
        :type: datetime
        """

        self._dt_obs_time = dt_obs_time

    @property
    def nick_name(self):
        """Gets the nick_name of this AtAGlanceViewModel.  # noqa: E501


        :return: The nick_name of this AtAGlanceViewModel.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this AtAGlanceViewModel.


        :param nick_name: The nick_name of this AtAGlanceViewModel.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def competence_level_tid(self):
        """Gets the competence_level_tid of this AtAGlanceViewModel.  # noqa: E501


        :return: The competence_level_tid of this AtAGlanceViewModel.  # noqa: E501
        :rtype: int
        """
        return self._competence_level_tid

    @competence_level_tid.setter
    def competence_level_tid(self, competence_level_tid):
        """Sets the competence_level_tid of this AtAGlanceViewModel.


        :param competence_level_tid: The competence_level_tid of this AtAGlanceViewModel.  # noqa: E501
        :type: int
        """

        self._competence_level_tid = competence_level_tid

    @property
    def title(self):
        """Gets the title of this AtAGlanceViewModel.  # noqa: E501


        :return: The title of this AtAGlanceViewModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AtAGlanceViewModel.


        :param title: The title of this AtAGlanceViewModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def latitude(self):
        """Gets the latitude of this AtAGlanceViewModel.  # noqa: E501


        :return: The latitude of this AtAGlanceViewModel.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this AtAGlanceViewModel.


        :param latitude: The latitude of this AtAGlanceViewModel.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this AtAGlanceViewModel.  # noqa: E501


        :return: The longitude of this AtAGlanceViewModel.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this AtAGlanceViewModel.


        :param longitude: The longitude of this AtAGlanceViewModel.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def utm_north(self):
        """Gets the utm_north of this AtAGlanceViewModel.  # noqa: E501


        :return: The utm_north of this AtAGlanceViewModel.  # noqa: E501
        :rtype: int
        """
        return self._utm_north

    @utm_north.setter
    def utm_north(self, utm_north):
        """Sets the utm_north of this AtAGlanceViewModel.


        :param utm_north: The utm_north of this AtAGlanceViewModel.  # noqa: E501
        :type: int
        """

        self._utm_north = utm_north

    @property
    def utm_east(self):
        """Gets the utm_east of this AtAGlanceViewModel.  # noqa: E501


        :return: The utm_east of this AtAGlanceViewModel.  # noqa: E501
        :rtype: int
        """
        return self._utm_east

    @utm_east.setter
    def utm_east(self, utm_east):
        """Sets the utm_east of this AtAGlanceViewModel.


        :param utm_east: The utm_east of this AtAGlanceViewModel.  # noqa: E501
        :type: int
        """

        self._utm_east = utm_east

    @property
    def form_names(self):
        """Gets the form_names of this AtAGlanceViewModel.  # noqa: E501


        :return: The form_names of this AtAGlanceViewModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._form_names

    @form_names.setter
    def form_names(self, form_names):
        """Sets the form_names of this AtAGlanceViewModel.


        :param form_names: The form_names of this AtAGlanceViewModel.  # noqa: E501
        :type: list[str]
        """

        self._form_names = form_names

    @property
    def first_attachment_id(self):
        """Gets the first_attachment_id of this AtAGlanceViewModel.  # noqa: E501


        :return: The first_attachment_id of this AtAGlanceViewModel.  # noqa: E501
        :rtype: int
        """
        return self._first_attachment_id

    @first_attachment_id.setter
    def first_attachment_id(self, first_attachment_id):
        """Sets the first_attachment_id of this AtAGlanceViewModel.


        :param first_attachment_id: The first_attachment_id of this AtAGlanceViewModel.  # noqa: E501
        :type: int
        """

        self._first_attachment_id = first_attachment_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtAGlanceViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtAGlanceViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

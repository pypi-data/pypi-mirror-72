# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AvalancheEvaluation3Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avalanche_danger_tid': 'int',
        'avalanche_evaluation': 'str',
        'avalanche_development': 'str',
        'usage_flag_tid': 'int',
        'forecast_correct_tid': 'int',
        'forecast_comment': 'str'
    }

    attribute_map = {
        'avalanche_danger_tid': 'AvalancheDangerTID',
        'avalanche_evaluation': 'AvalancheEvaluation',
        'avalanche_development': 'AvalancheDevelopment',
        'usage_flag_tid': 'UsageFlagTID',
        'forecast_correct_tid': 'ForecastCorrectTID',
        'forecast_comment': 'ForecastComment'
    }

    def __init__(self, avalanche_danger_tid=None, avalanche_evaluation=None, avalanche_development=None, usage_flag_tid=None, forecast_correct_tid=None, forecast_comment=None):  # noqa: E501
        """AvalancheEvaluation3Dto - a model defined in Swagger"""  # noqa: E501
        self._avalanche_danger_tid = None
        self._avalanche_evaluation = None
        self._avalanche_development = None
        self._usage_flag_tid = None
        self._forecast_correct_tid = None
        self._forecast_comment = None
        self.discriminator = None
        if avalanche_danger_tid is not None:
            self.avalanche_danger_tid = avalanche_danger_tid
        if avalanche_evaluation is not None:
            self.avalanche_evaluation = avalanche_evaluation
        if avalanche_development is not None:
            self.avalanche_development = avalanche_development
        if usage_flag_tid is not None:
            self.usage_flag_tid = usage_flag_tid
        if forecast_correct_tid is not None:
            self.forecast_correct_tid = forecast_correct_tid
        if forecast_comment is not None:
            self.forecast_comment = forecast_comment

    @property
    def avalanche_danger_tid(self):
        """Gets the avalanche_danger_tid of this AvalancheEvaluation3Dto.  # noqa: E501

        Faregrad. The AvalancheDangerKD unique identifier  # noqa: E501

        :return: The avalanche_danger_tid of this AvalancheEvaluation3Dto.  # noqa: E501
        :rtype: int
        """
        return self._avalanche_danger_tid

    @avalanche_danger_tid.setter
    def avalanche_danger_tid(self, avalanche_danger_tid):
        """Sets the avalanche_danger_tid of this AvalancheEvaluation3Dto.

        Faregrad. The AvalancheDangerKD unique identifier  # noqa: E501

        :param avalanche_danger_tid: The avalanche_danger_tid of this AvalancheEvaluation3Dto.  # noqa: E501
        :type: int
        """

        self._avalanche_danger_tid = avalanche_danger_tid

    @property
    def avalanche_evaluation(self):
        """Gets the avalanche_evaluation of this AvalancheEvaluation3Dto.  # noqa: E501

        Her blir Skredfarevurdering skrevet inn. I appen blir “Utstrekning” lagt til som tekst i denne kolonnen  # noqa: E501

        :return: The avalanche_evaluation of this AvalancheEvaluation3Dto.  # noqa: E501
        :rtype: str
        """
        return self._avalanche_evaluation

    @avalanche_evaluation.setter
    def avalanche_evaluation(self, avalanche_evaluation):
        """Sets the avalanche_evaluation of this AvalancheEvaluation3Dto.

        Her blir Skredfarevurdering skrevet inn. I appen blir “Utstrekning” lagt til som tekst i denne kolonnen  # noqa: E501

        :param avalanche_evaluation: The avalanche_evaluation of this AvalancheEvaluation3Dto.  # noqa: E501
        :type: str
        """

        self._avalanche_evaluation = avalanche_evaluation

    @property
    def avalanche_development(self):
        """Gets the avalanche_development of this AvalancheEvaluation3Dto.  # noqa: E501

        Her blir forventet utvikling skrevet inn.  # noqa: E501

        :return: The avalanche_development of this AvalancheEvaluation3Dto.  # noqa: E501
        :rtype: str
        """
        return self._avalanche_development

    @avalanche_development.setter
    def avalanche_development(self, avalanche_development):
        """Sets the avalanche_development of this AvalancheEvaluation3Dto.

        Her blir forventet utvikling skrevet inn.  # noqa: E501

        :param avalanche_development: The avalanche_development of this AvalancheEvaluation3Dto.  # noqa: E501
        :type: str
        """

        self._avalanche_development = avalanche_development

    @property
    def usage_flag_tid(self):
        """Gets the usage_flag_tid of this AvalancheEvaluation3Dto.  # noqa: E501

        Bruksflagg er ikke implementert enda. Hensikten er å kunne flagge en observasjon som godkjent, underkjent, overført historisk database mm. The UsageFlagKD unique identifier  # noqa: E501

        :return: The usage_flag_tid of this AvalancheEvaluation3Dto.  # noqa: E501
        :rtype: int
        """
        return self._usage_flag_tid

    @usage_flag_tid.setter
    def usage_flag_tid(self, usage_flag_tid):
        """Sets the usage_flag_tid of this AvalancheEvaluation3Dto.

        Bruksflagg er ikke implementert enda. Hensikten er å kunne flagge en observasjon som godkjent, underkjent, overført historisk database mm. The UsageFlagKD unique identifier  # noqa: E501

        :param usage_flag_tid: The usage_flag_tid of this AvalancheEvaluation3Dto.  # noqa: E501
        :type: int
        """

        self._usage_flag_tid = usage_flag_tid

    @property
    def forecast_correct_tid(self):
        """Gets the forecast_correct_tid of this AvalancheEvaluation3Dto.  # noqa: E501

        Felt hvor observatøren kan fortelle de syns varslet stemmer. Valg fra liste gitt i ForecastCorrectKD. The ForecastCorrectKD unique identifier  # noqa: E501

        :return: The forecast_correct_tid of this AvalancheEvaluation3Dto.  # noqa: E501
        :rtype: int
        """
        return self._forecast_correct_tid

    @forecast_correct_tid.setter
    def forecast_correct_tid(self, forecast_correct_tid):
        """Sets the forecast_correct_tid of this AvalancheEvaluation3Dto.

        Felt hvor observatøren kan fortelle de syns varslet stemmer. Valg fra liste gitt i ForecastCorrectKD. The ForecastCorrectKD unique identifier  # noqa: E501

        :param forecast_correct_tid: The forecast_correct_tid of this AvalancheEvaluation3Dto.  # noqa: E501
        :type: int
        """

        self._forecast_correct_tid = forecast_correct_tid

    @property
    def forecast_comment(self):
        """Gets the forecast_comment of this AvalancheEvaluation3Dto.  # noqa: E501

        Kommetarfelt for utdypende kommentar om varslet stemmer eller ikke.  # noqa: E501

        :return: The forecast_comment of this AvalancheEvaluation3Dto.  # noqa: E501
        :rtype: str
        """
        return self._forecast_comment

    @forecast_comment.setter
    def forecast_comment(self, forecast_comment):
        """Sets the forecast_comment of this AvalancheEvaluation3Dto.

        Kommetarfelt for utdypende kommentar om varslet stemmer eller ikke.  # noqa: E501

        :param forecast_comment: The forecast_comment of this AvalancheEvaluation3Dto.  # noqa: E501
        :type: str
        """

        self._forecast_comment = forecast_comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvalancheEvaluation3Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvalancheEvaluation3Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IceCoverViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ice_cover_before_tid': 'int',
        'ice_cover_before_name': 'str',
        'ice_cover_tid': 'int',
        'ice_cover_name': 'str',
        'comment': 'str',
        'ice_cover_after_tid': 'int',
        'ice_cover_after_name': 'str',
        'ice_skateability_tid': 'int',
        'ice_skateability_name': 'str',
        'ice_capacity_tid': 'int',
        'ice_capacity_name': 'str'
    }

    attribute_map = {
        'ice_cover_before_tid': 'IceCoverBeforeTID',
        'ice_cover_before_name': 'IceCoverBeforeName',
        'ice_cover_tid': 'IceCoverTID',
        'ice_cover_name': 'IceCoverName',
        'comment': 'Comment',
        'ice_cover_after_tid': 'IceCoverAfterTID',
        'ice_cover_after_name': 'IceCoverAfterName',
        'ice_skateability_tid': 'IceSkateabilityTID',
        'ice_skateability_name': 'IceSkateabilityName',
        'ice_capacity_tid': 'IceCapacityTID',
        'ice_capacity_name': 'IceCapacityName'
    }

    def __init__(self, ice_cover_before_tid=None, ice_cover_before_name=None, ice_cover_tid=None, ice_cover_name=None, comment=None, ice_cover_after_tid=None, ice_cover_after_name=None, ice_skateability_tid=None, ice_skateability_name=None, ice_capacity_tid=None, ice_capacity_name=None):  # noqa: E501
        """IceCoverViewModel - a model defined in Swagger"""  # noqa: E501
        self._ice_cover_before_tid = None
        self._ice_cover_before_name = None
        self._ice_cover_tid = None
        self._ice_cover_name = None
        self._comment = None
        self._ice_cover_after_tid = None
        self._ice_cover_after_name = None
        self._ice_skateability_tid = None
        self._ice_skateability_name = None
        self._ice_capacity_tid = None
        self._ice_capacity_name = None
        self.discriminator = None
        if ice_cover_before_tid is not None:
            self.ice_cover_before_tid = ice_cover_before_tid
        if ice_cover_before_name is not None:
            self.ice_cover_before_name = ice_cover_before_name
        if ice_cover_tid is not None:
            self.ice_cover_tid = ice_cover_tid
        if ice_cover_name is not None:
            self.ice_cover_name = ice_cover_name
        if comment is not None:
            self.comment = comment
        if ice_cover_after_tid is not None:
            self.ice_cover_after_tid = ice_cover_after_tid
        if ice_cover_after_name is not None:
            self.ice_cover_after_name = ice_cover_after_name
        if ice_skateability_tid is not None:
            self.ice_skateability_tid = ice_skateability_tid
        if ice_skateability_name is not None:
            self.ice_skateability_name = ice_skateability_name
        if ice_capacity_tid is not None:
            self.ice_capacity_tid = ice_capacity_tid
        if ice_capacity_name is not None:
            self.ice_capacity_name = ice_capacity_name

    @property
    def ice_cover_before_tid(self):
        """Gets the ice_cover_before_tid of this IceCoverViewModel.  # noqa: E501


        :return: The ice_cover_before_tid of this IceCoverViewModel.  # noqa: E501
        :rtype: int
        """
        return self._ice_cover_before_tid

    @ice_cover_before_tid.setter
    def ice_cover_before_tid(self, ice_cover_before_tid):
        """Sets the ice_cover_before_tid of this IceCoverViewModel.


        :param ice_cover_before_tid: The ice_cover_before_tid of this IceCoverViewModel.  # noqa: E501
        :type: int
        """

        self._ice_cover_before_tid = ice_cover_before_tid

    @property
    def ice_cover_before_name(self):
        """Gets the ice_cover_before_name of this IceCoverViewModel.  # noqa: E501


        :return: The ice_cover_before_name of this IceCoverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._ice_cover_before_name

    @ice_cover_before_name.setter
    def ice_cover_before_name(self, ice_cover_before_name):
        """Sets the ice_cover_before_name of this IceCoverViewModel.


        :param ice_cover_before_name: The ice_cover_before_name of this IceCoverViewModel.  # noqa: E501
        :type: str
        """

        self._ice_cover_before_name = ice_cover_before_name

    @property
    def ice_cover_tid(self):
        """Gets the ice_cover_tid of this IceCoverViewModel.  # noqa: E501


        :return: The ice_cover_tid of this IceCoverViewModel.  # noqa: E501
        :rtype: int
        """
        return self._ice_cover_tid

    @ice_cover_tid.setter
    def ice_cover_tid(self, ice_cover_tid):
        """Sets the ice_cover_tid of this IceCoverViewModel.


        :param ice_cover_tid: The ice_cover_tid of this IceCoverViewModel.  # noqa: E501
        :type: int
        """

        self._ice_cover_tid = ice_cover_tid

    @property
    def ice_cover_name(self):
        """Gets the ice_cover_name of this IceCoverViewModel.  # noqa: E501


        :return: The ice_cover_name of this IceCoverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._ice_cover_name

    @ice_cover_name.setter
    def ice_cover_name(self, ice_cover_name):
        """Sets the ice_cover_name of this IceCoverViewModel.


        :param ice_cover_name: The ice_cover_name of this IceCoverViewModel.  # noqa: E501
        :type: str
        """

        self._ice_cover_name = ice_cover_name

    @property
    def comment(self):
        """Gets the comment of this IceCoverViewModel.  # noqa: E501


        :return: The comment of this IceCoverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IceCoverViewModel.


        :param comment: The comment of this IceCoverViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def ice_cover_after_tid(self):
        """Gets the ice_cover_after_tid of this IceCoverViewModel.  # noqa: E501


        :return: The ice_cover_after_tid of this IceCoverViewModel.  # noqa: E501
        :rtype: int
        """
        return self._ice_cover_after_tid

    @ice_cover_after_tid.setter
    def ice_cover_after_tid(self, ice_cover_after_tid):
        """Sets the ice_cover_after_tid of this IceCoverViewModel.


        :param ice_cover_after_tid: The ice_cover_after_tid of this IceCoverViewModel.  # noqa: E501
        :type: int
        """

        self._ice_cover_after_tid = ice_cover_after_tid

    @property
    def ice_cover_after_name(self):
        """Gets the ice_cover_after_name of this IceCoverViewModel.  # noqa: E501


        :return: The ice_cover_after_name of this IceCoverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._ice_cover_after_name

    @ice_cover_after_name.setter
    def ice_cover_after_name(self, ice_cover_after_name):
        """Sets the ice_cover_after_name of this IceCoverViewModel.


        :param ice_cover_after_name: The ice_cover_after_name of this IceCoverViewModel.  # noqa: E501
        :type: str
        """

        self._ice_cover_after_name = ice_cover_after_name

    @property
    def ice_skateability_tid(self):
        """Gets the ice_skateability_tid of this IceCoverViewModel.  # noqa: E501


        :return: The ice_skateability_tid of this IceCoverViewModel.  # noqa: E501
        :rtype: int
        """
        return self._ice_skateability_tid

    @ice_skateability_tid.setter
    def ice_skateability_tid(self, ice_skateability_tid):
        """Sets the ice_skateability_tid of this IceCoverViewModel.


        :param ice_skateability_tid: The ice_skateability_tid of this IceCoverViewModel.  # noqa: E501
        :type: int
        """

        self._ice_skateability_tid = ice_skateability_tid

    @property
    def ice_skateability_name(self):
        """Gets the ice_skateability_name of this IceCoverViewModel.  # noqa: E501


        :return: The ice_skateability_name of this IceCoverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._ice_skateability_name

    @ice_skateability_name.setter
    def ice_skateability_name(self, ice_skateability_name):
        """Sets the ice_skateability_name of this IceCoverViewModel.


        :param ice_skateability_name: The ice_skateability_name of this IceCoverViewModel.  # noqa: E501
        :type: str
        """

        self._ice_skateability_name = ice_skateability_name

    @property
    def ice_capacity_tid(self):
        """Gets the ice_capacity_tid of this IceCoverViewModel.  # noqa: E501


        :return: The ice_capacity_tid of this IceCoverViewModel.  # noqa: E501
        :rtype: int
        """
        return self._ice_capacity_tid

    @ice_capacity_tid.setter
    def ice_capacity_tid(self, ice_capacity_tid):
        """Sets the ice_capacity_tid of this IceCoverViewModel.


        :param ice_capacity_tid: The ice_capacity_tid of this IceCoverViewModel.  # noqa: E501
        :type: int
        """

        self._ice_capacity_tid = ice_capacity_tid

    @property
    def ice_capacity_name(self):
        """Gets the ice_capacity_name of this IceCoverViewModel.  # noqa: E501


        :return: The ice_capacity_name of this IceCoverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._ice_capacity_name

    @ice_capacity_name.setter
    def ice_capacity_name(self, ice_capacity_name):
        """Sets the ice_capacity_name of this IceCoverViewModel.


        :param ice_capacity_name: The ice_capacity_name of this IceCoverViewModel.  # noqa: E501
        :type: str
        """

        self._ice_capacity_name = ice_capacity_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IceCoverViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IceCoverViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SearchCriteriaRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reg_id': 'int',
        'lang_key': 'int',
        'location_id': 'int',
        'observer_id': 'int',
        'observer_guid': 'str',
        'group_id': 'int',
        'from_date': 'datetime',
        'to_date': 'datetime',
        'from_dt_obs_time': 'datetime',
        'to_dt_obs_time': 'datetime',
        'from_dt_change_time': 'datetime',
        'to_dt_change_time': 'datetime',
        'number_of_records': 'int',
        'offset': 'int',
        'time_zone': 'str',
        'selected_registration_types': 'list[RegistrationTypeCriteriaDto]',
        'selected_regions': 'list[int]',
        'selected_geo_hazards': 'list[int]',
        'observer_competence': 'list[int]',
        'observer_nick_name': 'str',
        'countries': 'list[int]',
        'counties': 'list[str]',
        'text_search': 'str',
        'radius': 'WithinRadiusCriteriaDto',
        'extent': 'WithinExtentCriteriaDto'
    }

    attribute_map = {
        'reg_id': 'RegId',
        'lang_key': 'LangKey',
        'location_id': 'LocationId',
        'observer_id': 'ObserverId',
        'observer_guid': 'ObserverGuid',
        'group_id': 'GroupId',
        'from_date': 'FromDate',
        'to_date': 'ToDate',
        'from_dt_obs_time': 'FromDtObsTime',
        'to_dt_obs_time': 'ToDtObsTime',
        'from_dt_change_time': 'FromDtChangeTime',
        'to_dt_change_time': 'ToDtChangeTime',
        'number_of_records': 'NumberOfRecords',
        'offset': 'Offset',
        'time_zone': 'TimeZone',
        'selected_registration_types': 'SelectedRegistrationTypes',
        'selected_regions': 'SelectedRegions',
        'selected_geo_hazards': 'SelectedGeoHazards',
        'observer_competence': 'ObserverCompetence',
        'observer_nick_name': 'ObserverNickName',
        'countries': 'Countries',
        'counties': 'Counties',
        'text_search': 'TextSearch',
        'radius': 'Radius',
        'extent': 'Extent'
    }

    def __init__(self, reg_id=None, lang_key=None, location_id=None, observer_id=None, observer_guid=None, group_id=None, from_date=None, to_date=None, from_dt_obs_time=None, to_dt_obs_time=None, from_dt_change_time=None, to_dt_change_time=None, number_of_records=None, offset=None, time_zone=None, selected_registration_types=None, selected_regions=None, selected_geo_hazards=None, observer_competence=None, observer_nick_name=None, countries=None, counties=None, text_search=None, radius=None, extent=None):  # noqa: E501
        """SearchCriteriaRequestDto - a model defined in Swagger"""  # noqa: E501
        self._reg_id = None
        self._lang_key = None
        self._location_id = None
        self._observer_id = None
        self._observer_guid = None
        self._group_id = None
        self._from_date = None
        self._to_date = None
        self._from_dt_obs_time = None
        self._to_dt_obs_time = None
        self._from_dt_change_time = None
        self._to_dt_change_time = None
        self._number_of_records = None
        self._offset = None
        self._time_zone = None
        self._selected_registration_types = None
        self._selected_regions = None
        self._selected_geo_hazards = None
        self._observer_competence = None
        self._observer_nick_name = None
        self._countries = None
        self._counties = None
        self._text_search = None
        self._radius = None
        self._extent = None
        self.discriminator = None
        if reg_id is not None:
            self.reg_id = reg_id
        if lang_key is not None:
            self.lang_key = lang_key
        if location_id is not None:
            self.location_id = location_id
        if observer_id is not None:
            self.observer_id = observer_id
        if observer_guid is not None:
            self.observer_guid = observer_guid
        if group_id is not None:
            self.group_id = group_id
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date
        if from_dt_obs_time is not None:
            self.from_dt_obs_time = from_dt_obs_time
        if to_dt_obs_time is not None:
            self.to_dt_obs_time = to_dt_obs_time
        if from_dt_change_time is not None:
            self.from_dt_change_time = from_dt_change_time
        if to_dt_change_time is not None:
            self.to_dt_change_time = to_dt_change_time
        if number_of_records is not None:
            self.number_of_records = number_of_records
        if offset is not None:
            self.offset = offset
        if time_zone is not None:
            self.time_zone = time_zone
        if selected_registration_types is not None:
            self.selected_registration_types = selected_registration_types
        if selected_regions is not None:
            self.selected_regions = selected_regions
        if selected_geo_hazards is not None:
            self.selected_geo_hazards = selected_geo_hazards
        if observer_competence is not None:
            self.observer_competence = observer_competence
        if observer_nick_name is not None:
            self.observer_nick_name = observer_nick_name
        if countries is not None:
            self.countries = countries
        if counties is not None:
            self.counties = counties
        if text_search is not None:
            self.text_search = text_search
        if radius is not None:
            self.radius = radius
        if extent is not None:
            self.extent = extent

    @property
    def reg_id(self):
        """Gets the reg_id of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The reg_id of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._reg_id

    @reg_id.setter
    def reg_id(self, reg_id):
        """Sets the reg_id of this SearchCriteriaRequestDto.


        :param reg_id: The reg_id of this SearchCriteriaRequestDto.  # noqa: E501
        :type: int
        """

        self._reg_id = reg_id

    @property
    def lang_key(self):
        """Gets the lang_key of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The lang_key of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._lang_key

    @lang_key.setter
    def lang_key(self, lang_key):
        """Sets the lang_key of this SearchCriteriaRequestDto.


        :param lang_key: The lang_key of this SearchCriteriaRequestDto.  # noqa: E501
        :type: int
        """

        self._lang_key = lang_key

    @property
    def location_id(self):
        """Gets the location_id of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The location_id of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this SearchCriteriaRequestDto.


        :param location_id: The location_id of this SearchCriteriaRequestDto.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def observer_id(self):
        """Gets the observer_id of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The observer_id of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._observer_id

    @observer_id.setter
    def observer_id(self, observer_id):
        """Sets the observer_id of this SearchCriteriaRequestDto.


        :param observer_id: The observer_id of this SearchCriteriaRequestDto.  # noqa: E501
        :type: int
        """

        self._observer_id = observer_id

    @property
    def observer_guid(self):
        """Gets the observer_guid of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The observer_guid of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._observer_guid

    @observer_guid.setter
    def observer_guid(self, observer_guid):
        """Sets the observer_guid of this SearchCriteriaRequestDto.


        :param observer_guid: The observer_guid of this SearchCriteriaRequestDto.  # noqa: E501
        :type: str
        """

        self._observer_guid = observer_guid

    @property
    def group_id(self):
        """Gets the group_id of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The group_id of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this SearchCriteriaRequestDto.


        :param group_id: The group_id of this SearchCriteriaRequestDto.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def from_date(self):
        """Gets the from_date of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The from_date of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this SearchCriteriaRequestDto.


        :param from_date: The from_date of this SearchCriteriaRequestDto.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The to_date of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this SearchCriteriaRequestDto.


        :param to_date: The to_date of this SearchCriteriaRequestDto.  # noqa: E501
        :type: datetime
        """

        self._to_date = to_date

    @property
    def from_dt_obs_time(self):
        """Gets the from_dt_obs_time of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The from_dt_obs_time of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._from_dt_obs_time

    @from_dt_obs_time.setter
    def from_dt_obs_time(self, from_dt_obs_time):
        """Sets the from_dt_obs_time of this SearchCriteriaRequestDto.


        :param from_dt_obs_time: The from_dt_obs_time of this SearchCriteriaRequestDto.  # noqa: E501
        :type: datetime
        """

        self._from_dt_obs_time = from_dt_obs_time

    @property
    def to_dt_obs_time(self):
        """Gets the to_dt_obs_time of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The to_dt_obs_time of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._to_dt_obs_time

    @to_dt_obs_time.setter
    def to_dt_obs_time(self, to_dt_obs_time):
        """Sets the to_dt_obs_time of this SearchCriteriaRequestDto.


        :param to_dt_obs_time: The to_dt_obs_time of this SearchCriteriaRequestDto.  # noqa: E501
        :type: datetime
        """

        self._to_dt_obs_time = to_dt_obs_time

    @property
    def from_dt_change_time(self):
        """Gets the from_dt_change_time of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The from_dt_change_time of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._from_dt_change_time

    @from_dt_change_time.setter
    def from_dt_change_time(self, from_dt_change_time):
        """Sets the from_dt_change_time of this SearchCriteriaRequestDto.


        :param from_dt_change_time: The from_dt_change_time of this SearchCriteriaRequestDto.  # noqa: E501
        :type: datetime
        """

        self._from_dt_change_time = from_dt_change_time

    @property
    def to_dt_change_time(self):
        """Gets the to_dt_change_time of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The to_dt_change_time of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._to_dt_change_time

    @to_dt_change_time.setter
    def to_dt_change_time(self, to_dt_change_time):
        """Sets the to_dt_change_time of this SearchCriteriaRequestDto.


        :param to_dt_change_time: The to_dt_change_time of this SearchCriteriaRequestDto.  # noqa: E501
        :type: datetime
        """

        self._to_dt_change_time = to_dt_change_time

    @property
    def number_of_records(self):
        """Gets the number_of_records of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The number_of_records of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._number_of_records

    @number_of_records.setter
    def number_of_records(self, number_of_records):
        """Sets the number_of_records of this SearchCriteriaRequestDto.


        :param number_of_records: The number_of_records of this SearchCriteriaRequestDto.  # noqa: E501
        :type: int
        """

        self._number_of_records = number_of_records

    @property
    def offset(self):
        """Gets the offset of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The offset of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchCriteriaRequestDto.


        :param offset: The offset of this SearchCriteriaRequestDto.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def time_zone(self):
        """Gets the time_zone of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The time_zone of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this SearchCriteriaRequestDto.


        :param time_zone: The time_zone of this SearchCriteriaRequestDto.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def selected_registration_types(self):
        """Gets the selected_registration_types of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The selected_registration_types of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: list[RegistrationTypeCriteriaDto]
        """
        return self._selected_registration_types

    @selected_registration_types.setter
    def selected_registration_types(self, selected_registration_types):
        """Sets the selected_registration_types of this SearchCriteriaRequestDto.


        :param selected_registration_types: The selected_registration_types of this SearchCriteriaRequestDto.  # noqa: E501
        :type: list[RegistrationTypeCriteriaDto]
        """

        self._selected_registration_types = selected_registration_types

    @property
    def selected_regions(self):
        """Gets the selected_regions of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The selected_regions of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._selected_regions

    @selected_regions.setter
    def selected_regions(self, selected_regions):
        """Sets the selected_regions of this SearchCriteriaRequestDto.


        :param selected_regions: The selected_regions of this SearchCriteriaRequestDto.  # noqa: E501
        :type: list[int]
        """

        self._selected_regions = selected_regions

    @property
    def selected_geo_hazards(self):
        """Gets the selected_geo_hazards of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The selected_geo_hazards of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._selected_geo_hazards

    @selected_geo_hazards.setter
    def selected_geo_hazards(self, selected_geo_hazards):
        """Sets the selected_geo_hazards of this SearchCriteriaRequestDto.


        :param selected_geo_hazards: The selected_geo_hazards of this SearchCriteriaRequestDto.  # noqa: E501
        :type: list[int]
        """

        self._selected_geo_hazards = selected_geo_hazards

    @property
    def observer_competence(self):
        """Gets the observer_competence of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The observer_competence of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._observer_competence

    @observer_competence.setter
    def observer_competence(self, observer_competence):
        """Sets the observer_competence of this SearchCriteriaRequestDto.


        :param observer_competence: The observer_competence of this SearchCriteriaRequestDto.  # noqa: E501
        :type: list[int]
        """

        self._observer_competence = observer_competence

    @property
    def observer_nick_name(self):
        """Gets the observer_nick_name of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The observer_nick_name of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._observer_nick_name

    @observer_nick_name.setter
    def observer_nick_name(self, observer_nick_name):
        """Sets the observer_nick_name of this SearchCriteriaRequestDto.


        :param observer_nick_name: The observer_nick_name of this SearchCriteriaRequestDto.  # noqa: E501
        :type: str
        """

        self._observer_nick_name = observer_nick_name

    @property
    def countries(self):
        """Gets the countries of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The countries of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this SearchCriteriaRequestDto.


        :param countries: The countries of this SearchCriteriaRequestDto.  # noqa: E501
        :type: list[int]
        """

        self._countries = countries

    @property
    def counties(self):
        """Gets the counties of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The counties of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._counties

    @counties.setter
    def counties(self, counties):
        """Sets the counties of this SearchCriteriaRequestDto.


        :param counties: The counties of this SearchCriteriaRequestDto.  # noqa: E501
        :type: list[str]
        """

        self._counties = counties

    @property
    def text_search(self):
        """Gets the text_search of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The text_search of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._text_search

    @text_search.setter
    def text_search(self, text_search):
        """Sets the text_search of this SearchCriteriaRequestDto.


        :param text_search: The text_search of this SearchCriteriaRequestDto.  # noqa: E501
        :type: str
        """

        self._text_search = text_search

    @property
    def radius(self):
        """Gets the radius of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The radius of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: WithinRadiusCriteriaDto
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this SearchCriteriaRequestDto.


        :param radius: The radius of this SearchCriteriaRequestDto.  # noqa: E501
        :type: WithinRadiusCriteriaDto
        """

        self._radius = radius

    @property
    def extent(self):
        """Gets the extent of this SearchCriteriaRequestDto.  # noqa: E501


        :return: The extent of this SearchCriteriaRequestDto.  # noqa: E501
        :rtype: WithinExtentCriteriaDto
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this SearchCriteriaRequestDto.


        :param extent: The extent of this SearchCriteriaRequestDto.  # noqa: E501
        :type: WithinExtentCriteriaDto
        """

        self._extent = extent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchCriteriaRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchCriteriaRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

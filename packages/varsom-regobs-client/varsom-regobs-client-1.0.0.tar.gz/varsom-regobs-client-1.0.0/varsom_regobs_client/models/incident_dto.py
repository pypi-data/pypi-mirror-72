# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IncidentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geo_hazard_tid': 'int',
        'activity_influenced_tid': 'int',
        'damage_extent_tid': 'int',
        'forecast_accurate_tid': 'int',
        'dt_end_time': 'datetime',
        'incident_header': 'str',
        'incident_ingress': 'str',
        'incident_text': 'str',
        'sensitive_text': 'str',
        'usage_flag_tid': 'int',
        'comment': 'str',
        'incident_ur_ls': 'list[IncidentUrlsDto]'
    }

    attribute_map = {
        'geo_hazard_tid': 'GeoHazardTID',
        'activity_influenced_tid': 'ActivityInfluencedTID',
        'damage_extent_tid': 'DamageExtentTID',
        'forecast_accurate_tid': 'ForecastAccurateTID',
        'dt_end_time': 'DtEndTime',
        'incident_header': 'IncidentHeader',
        'incident_ingress': 'IncidentIngress',
        'incident_text': 'IncidentText',
        'sensitive_text': 'SensitiveText',
        'usage_flag_tid': 'UsageFlagTID',
        'comment': 'Comment',
        'incident_ur_ls': 'IncidentURLs'
    }

    def __init__(self, geo_hazard_tid=None, activity_influenced_tid=None, damage_extent_tid=None, forecast_accurate_tid=None, dt_end_time=None, incident_header=None, incident_ingress=None, incident_text=None, sensitive_text=None, usage_flag_tid=None, comment=None, incident_ur_ls=None):  # noqa: E501
        """IncidentDto - a model defined in Swagger"""  # noqa: E501
        self._geo_hazard_tid = None
        self._activity_influenced_tid = None
        self._damage_extent_tid = None
        self._forecast_accurate_tid = None
        self._dt_end_time = None
        self._incident_header = None
        self._incident_ingress = None
        self._incident_text = None
        self._sensitive_text = None
        self._usage_flag_tid = None
        self._comment = None
        self._incident_ur_ls = None
        self.discriminator = None
        if geo_hazard_tid is not None:
            self.geo_hazard_tid = geo_hazard_tid
        if activity_influenced_tid is not None:
            self.activity_influenced_tid = activity_influenced_tid
        if damage_extent_tid is not None:
            self.damage_extent_tid = damage_extent_tid
        if forecast_accurate_tid is not None:
            self.forecast_accurate_tid = forecast_accurate_tid
        if dt_end_time is not None:
            self.dt_end_time = dt_end_time
        if incident_header is not None:
            self.incident_header = incident_header
        if incident_ingress is not None:
            self.incident_ingress = incident_ingress
        if incident_text is not None:
            self.incident_text = incident_text
        if sensitive_text is not None:
            self.sensitive_text = sensitive_text
        if usage_flag_tid is not None:
            self.usage_flag_tid = usage_flag_tid
        if comment is not None:
            self.comment = comment
        if incident_ur_ls is not None:
            self.incident_ur_ls = incident_ur_ls

    @property
    def geo_hazard_tid(self):
        """Gets the geo_hazard_tid of this IncidentDto.  # noqa: E501

        Sett naturfare. Tabellen brukes av alle naturfarer (snø, jord, vann, is).  # noqa: E501

        :return: The geo_hazard_tid of this IncidentDto.  # noqa: E501
        :rtype: int
        """
        return self._geo_hazard_tid

    @geo_hazard_tid.setter
    def geo_hazard_tid(self, geo_hazard_tid):
        """Sets the geo_hazard_tid of this IncidentDto.

        Sett naturfare. Tabellen brukes av alle naturfarer (snø, jord, vann, is).  # noqa: E501

        :param geo_hazard_tid: The geo_hazard_tid of this IncidentDto.  # noqa: E501
        :type: int
        """

        self._geo_hazard_tid = geo_hazard_tid

    @property
    def activity_influenced_tid(self):
        """Gets the activity_influenced_tid of this IncidentDto.  # noqa: E501

        Hva ble påvirket av hendelsen. Valgene er gitt i ActivityInfluencedKD. The ActivityInfluencedKD unique identifier  # noqa: E501

        :return: The activity_influenced_tid of this IncidentDto.  # noqa: E501
        :rtype: int
        """
        return self._activity_influenced_tid

    @activity_influenced_tid.setter
    def activity_influenced_tid(self, activity_influenced_tid):
        """Sets the activity_influenced_tid of this IncidentDto.

        Hva ble påvirket av hendelsen. Valgene er gitt i ActivityInfluencedKD. The ActivityInfluencedKD unique identifier  # noqa: E501

        :param activity_influenced_tid: The activity_influenced_tid of this IncidentDto.  # noqa: E501
        :type: int
        """

        self._activity_influenced_tid = activity_influenced_tid

    @property
    def damage_extent_tid(self):
        """Gets the damage_extent_tid of this IncidentDto.  # noqa: E501

        Skadeomfang. Hva var konsekvensen av hendelsen. Valgene gitt i DamageExtentKD. The DamageExtentKD unique identifier  # noqa: E501

        :return: The damage_extent_tid of this IncidentDto.  # noqa: E501
        :rtype: int
        """
        return self._damage_extent_tid

    @damage_extent_tid.setter
    def damage_extent_tid(self, damage_extent_tid):
        """Sets the damage_extent_tid of this IncidentDto.

        Skadeomfang. Hva var konsekvensen av hendelsen. Valgene gitt i DamageExtentKD. The DamageExtentKD unique identifier  # noqa: E501

        :param damage_extent_tid: The damage_extent_tid of this IncidentDto.  # noqa: E501
        :type: int
        """

        self._damage_extent_tid = damage_extent_tid

    @property
    def forecast_accurate_tid(self):
        """Gets the forecast_accurate_tid of this IncidentDto.  # noqa: E501

        Var det et varsel utstedt og stemte det? The ForecastAccurateKD unique identifier  # noqa: E501

        :return: The forecast_accurate_tid of this IncidentDto.  # noqa: E501
        :rtype: int
        """
        return self._forecast_accurate_tid

    @forecast_accurate_tid.setter
    def forecast_accurate_tid(self, forecast_accurate_tid):
        """Sets the forecast_accurate_tid of this IncidentDto.

        Var det et varsel utstedt og stemte det? The ForecastAccurateKD unique identifier  # noqa: E501

        :param forecast_accurate_tid: The forecast_accurate_tid of this IncidentDto.  # noqa: E501
        :type: int
        """

        self._forecast_accurate_tid = forecast_accurate_tid

    @property
    def dt_end_time(self):
        """Gets the dt_end_time of this IncidentDto.  # noqa: E501

        Om hendelsen strakte seg ut i tid, når sluttet den å gjelde? Feks, når åpnet veien igjen etter raset?  # noqa: E501

        :return: The dt_end_time of this IncidentDto.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_end_time

    @dt_end_time.setter
    def dt_end_time(self, dt_end_time):
        """Sets the dt_end_time of this IncidentDto.

        Om hendelsen strakte seg ut i tid, når sluttet den å gjelde? Feks, når åpnet veien igjen etter raset?  # noqa: E501

        :param dt_end_time: The dt_end_time of this IncidentDto.  # noqa: E501
        :type: datetime
        """

        self._dt_end_time = dt_end_time

    @property
    def incident_header(self):
        """Gets the incident_header of this IncidentDto.  # noqa: E501

        Hendelsen beskrives med overskrift ..  # noqa: E501

        :return: The incident_header of this IncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._incident_header

    @incident_header.setter
    def incident_header(self, incident_header):
        """Sets the incident_header of this IncidentDto.

        Hendelsen beskrives med overskrift ..  # noqa: E501

        :param incident_header: The incident_header of this IncidentDto.  # noqa: E501
        :type: str
        """

        self._incident_header = incident_header

    @property
    def incident_ingress(self):
        """Gets the incident_ingress of this IncidentDto.  # noqa: E501

        .. med ingress eller sammendrag ..  # noqa: E501

        :return: The incident_ingress of this IncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._incident_ingress

    @incident_ingress.setter
    def incident_ingress(self, incident_ingress):
        """Sets the incident_ingress of this IncidentDto.

        .. med ingress eller sammendrag ..  # noqa: E501

        :param incident_ingress: The incident_ingress of this IncidentDto.  # noqa: E501
        :type: str
        """

        self._incident_ingress = incident_ingress

    @property
    def incident_text(self):
        """Gets the incident_text of this IncidentDto.  # noqa: E501

        .. og teksten eller artikkelen.  # noqa: E501

        :return: The incident_text of this IncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._incident_text

    @incident_text.setter
    def incident_text(self, incident_text):
        """Sets the incident_text of this IncidentDto.

        .. og teksten eller artikkelen.  # noqa: E501

        :param incident_text: The incident_text of this IncidentDto.  # noqa: E501
        :type: str
        """

        self._incident_text = incident_text

    @property
    def sensitive_text(self):
        """Gets the sensitive_text of this IncidentDto.  # noqa: E501

        Vi har lagt opp til et felt for internkommentar. Denne kolonnen vises ikke på tjenestelaget og i view.  # noqa: E501

        :return: The sensitive_text of this IncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._sensitive_text

    @sensitive_text.setter
    def sensitive_text(self, sensitive_text):
        """Sets the sensitive_text of this IncidentDto.

        Vi har lagt opp til et felt for internkommentar. Denne kolonnen vises ikke på tjenestelaget og i view.  # noqa: E501

        :param sensitive_text: The sensitive_text of this IncidentDto.  # noqa: E501
        :type: str
        """

        self._sensitive_text = sensitive_text

    @property
    def usage_flag_tid(self):
        """Gets the usage_flag_tid of this IncidentDto.  # noqa: E501

        Bruksflagg er ikke implementert enda. Hensikten er å kunne flagge en observasjon som godkjent, underkjent, overført historisk database mm. The UsageFlagKD unique identifier  # noqa: E501

        :return: The usage_flag_tid of this IncidentDto.  # noqa: E501
        :rtype: int
        """
        return self._usage_flag_tid

    @usage_flag_tid.setter
    def usage_flag_tid(self, usage_flag_tid):
        """Sets the usage_flag_tid of this IncidentDto.

        Bruksflagg er ikke implementert enda. Hensikten er å kunne flagge en observasjon som godkjent, underkjent, overført historisk database mm. The UsageFlagKD unique identifier  # noqa: E501

        :param usage_flag_tid: The usage_flag_tid of this IncidentDto.  # noqa: E501
        :type: int
        """

        self._usage_flag_tid = usage_flag_tid

    @property
    def comment(self):
        """Gets the comment of this IncidentDto.  # noqa: E501

        Comment.  # noqa: E501

        :return: The comment of this IncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IncidentDto.

        Comment.  # noqa: E501

        :param comment: The comment of this IncidentDto.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def incident_ur_ls(self):
        """Gets the incident_ur_ls of this IncidentDto.  # noqa: E501

        Provide description for IncidentURLs  # noqa: E501

        :return: The incident_ur_ls of this IncidentDto.  # noqa: E501
        :rtype: list[IncidentUrlsDto]
        """
        return self._incident_ur_ls

    @incident_ur_ls.setter
    def incident_ur_ls(self, incident_ur_ls):
        """Sets the incident_ur_ls of this IncidentDto.

        Provide description for IncidentURLs  # noqa: E501

        :param incident_ur_ls: The incident_ur_ls of this IncidentDto.  # noqa: E501
        :type: list[IncidentUrlsDto]
        """

        self._incident_ur_ls = incident_ur_ls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncidentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

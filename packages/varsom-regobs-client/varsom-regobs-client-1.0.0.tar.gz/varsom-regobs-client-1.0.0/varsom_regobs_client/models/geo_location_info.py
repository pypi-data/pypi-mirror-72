# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GeoLocationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'masl': 'int',
        'steepness': 'float',
        'warning_region_id': 'str',
        'warning_region_name': 'str',
        'name': 'str',
        'municipality': 'str',
        'municipality_id': 'str',
        'admin_area_name': 'str',
        'admin_area_id': 'str',
        'country': 'str',
        'country_code': 'str'
    }

    attribute_map = {
        'masl': 'Masl',
        'steepness': 'Steepness',
        'warning_region_id': 'WarningRegionId',
        'warning_region_name': 'WarningRegionName',
        'name': 'Name',
        'municipality': 'Municipality',
        'municipality_id': 'MunicipalityId',
        'admin_area_name': 'AdminAreaName',
        'admin_area_id': 'AdminAreaId',
        'country': 'Country',
        'country_code': 'CountryCode'
    }

    def __init__(self, masl=None, steepness=None, warning_region_id=None, warning_region_name=None, name=None, municipality=None, municipality_id=None, admin_area_name=None, admin_area_id=None, country=None, country_code=None):  # noqa: E501
        """GeoLocationInfo - a model defined in Swagger"""  # noqa: E501
        self._masl = None
        self._steepness = None
        self._warning_region_id = None
        self._warning_region_name = None
        self._name = None
        self._municipality = None
        self._municipality_id = None
        self._admin_area_name = None
        self._admin_area_id = None
        self._country = None
        self._country_code = None
        self.discriminator = None
        if masl is not None:
            self.masl = masl
        if steepness is not None:
            self.steepness = steepness
        if warning_region_id is not None:
            self.warning_region_id = warning_region_id
        if warning_region_name is not None:
            self.warning_region_name = warning_region_name
        if name is not None:
            self.name = name
        if municipality is not None:
            self.municipality = municipality
        if municipality_id is not None:
            self.municipality_id = municipality_id
        if admin_area_name is not None:
            self.admin_area_name = admin_area_name
        if admin_area_id is not None:
            self.admin_area_id = admin_area_id
        if country is not None:
            self.country = country
        if country_code is not None:
            self.country_code = country_code

    @property
    def masl(self):
        """Gets the masl of this GeoLocationInfo.  # noqa: E501


        :return: The masl of this GeoLocationInfo.  # noqa: E501
        :rtype: int
        """
        return self._masl

    @masl.setter
    def masl(self, masl):
        """Sets the masl of this GeoLocationInfo.


        :param masl: The masl of this GeoLocationInfo.  # noqa: E501
        :type: int
        """

        self._masl = masl

    @property
    def steepness(self):
        """Gets the steepness of this GeoLocationInfo.  # noqa: E501


        :return: The steepness of this GeoLocationInfo.  # noqa: E501
        :rtype: float
        """
        return self._steepness

    @steepness.setter
    def steepness(self, steepness):
        """Sets the steepness of this GeoLocationInfo.


        :param steepness: The steepness of this GeoLocationInfo.  # noqa: E501
        :type: float
        """

        self._steepness = steepness

    @property
    def warning_region_id(self):
        """Gets the warning_region_id of this GeoLocationInfo.  # noqa: E501


        :return: The warning_region_id of this GeoLocationInfo.  # noqa: E501
        :rtype: str
        """
        return self._warning_region_id

    @warning_region_id.setter
    def warning_region_id(self, warning_region_id):
        """Sets the warning_region_id of this GeoLocationInfo.


        :param warning_region_id: The warning_region_id of this GeoLocationInfo.  # noqa: E501
        :type: str
        """

        self._warning_region_id = warning_region_id

    @property
    def warning_region_name(self):
        """Gets the warning_region_name of this GeoLocationInfo.  # noqa: E501


        :return: The warning_region_name of this GeoLocationInfo.  # noqa: E501
        :rtype: str
        """
        return self._warning_region_name

    @warning_region_name.setter
    def warning_region_name(self, warning_region_name):
        """Sets the warning_region_name of this GeoLocationInfo.


        :param warning_region_name: The warning_region_name of this GeoLocationInfo.  # noqa: E501
        :type: str
        """

        self._warning_region_name = warning_region_name

    @property
    def name(self):
        """Gets the name of this GeoLocationInfo.  # noqa: E501


        :return: The name of this GeoLocationInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeoLocationInfo.


        :param name: The name of this GeoLocationInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def municipality(self):
        """Gets the municipality of this GeoLocationInfo.  # noqa: E501


        :return: The municipality of this GeoLocationInfo.  # noqa: E501
        :rtype: str
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this GeoLocationInfo.


        :param municipality: The municipality of this GeoLocationInfo.  # noqa: E501
        :type: str
        """

        self._municipality = municipality

    @property
    def municipality_id(self):
        """Gets the municipality_id of this GeoLocationInfo.  # noqa: E501


        :return: The municipality_id of this GeoLocationInfo.  # noqa: E501
        :rtype: str
        """
        return self._municipality_id

    @municipality_id.setter
    def municipality_id(self, municipality_id):
        """Sets the municipality_id of this GeoLocationInfo.


        :param municipality_id: The municipality_id of this GeoLocationInfo.  # noqa: E501
        :type: str
        """

        self._municipality_id = municipality_id

    @property
    def admin_area_name(self):
        """Gets the admin_area_name of this GeoLocationInfo.  # noqa: E501


        :return: The admin_area_name of this GeoLocationInfo.  # noqa: E501
        :rtype: str
        """
        return self._admin_area_name

    @admin_area_name.setter
    def admin_area_name(self, admin_area_name):
        """Sets the admin_area_name of this GeoLocationInfo.


        :param admin_area_name: The admin_area_name of this GeoLocationInfo.  # noqa: E501
        :type: str
        """

        self._admin_area_name = admin_area_name

    @property
    def admin_area_id(self):
        """Gets the admin_area_id of this GeoLocationInfo.  # noqa: E501


        :return: The admin_area_id of this GeoLocationInfo.  # noqa: E501
        :rtype: str
        """
        return self._admin_area_id

    @admin_area_id.setter
    def admin_area_id(self, admin_area_id):
        """Sets the admin_area_id of this GeoLocationInfo.


        :param admin_area_id: The admin_area_id of this GeoLocationInfo.  # noqa: E501
        :type: str
        """

        self._admin_area_id = admin_area_id

    @property
    def country(self):
        """Gets the country of this GeoLocationInfo.  # noqa: E501


        :return: The country of this GeoLocationInfo.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GeoLocationInfo.


        :param country: The country of this GeoLocationInfo.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this GeoLocationInfo.  # noqa: E501


        :return: The country_code of this GeoLocationInfo.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this GeoLocationInfo.


        :param country_code: The country_code of this GeoLocationInfo.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeoLocationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeoLocationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

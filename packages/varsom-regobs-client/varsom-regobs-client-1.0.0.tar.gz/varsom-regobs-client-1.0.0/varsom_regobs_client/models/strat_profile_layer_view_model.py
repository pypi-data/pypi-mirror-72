# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StratProfileLayerViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'depth_top': 'float',
        'thickness': 'float',
        'grain_form_primary_tid': 'int',
        'grain_form_primary_t_name': 'str',
        'grain_form_secondary_tid': 'int',
        'grain_form_secondary_t_name': 'str',
        'grain_size_avg': 'float',
        'grain_size_avg_max': 'float',
        'hardness_tid': 'int',
        'hardness_t_name': 'str',
        'hardness_bottom_tid': 'int',
        'hardness_bottom_t_name': 'str',
        'wetness_tid': 'int',
        'wetness_t_name': 'str',
        'critical_layer_tid': 'int',
        'critical_layer_t_name': 'str',
        'comment': 'str',
        'sort_order': 'int'
    }

    attribute_map = {
        'depth_top': 'DepthTop',
        'thickness': 'Thickness',
        'grain_form_primary_tid': 'GrainFormPrimaryTID',
        'grain_form_primary_t_name': 'GrainFormPrimaryTName',
        'grain_form_secondary_tid': 'GrainFormSecondaryTID',
        'grain_form_secondary_t_name': 'GrainFormSecondaryTName',
        'grain_size_avg': 'GrainSizeAvg',
        'grain_size_avg_max': 'GrainSizeAvgMax',
        'hardness_tid': 'HardnessTID',
        'hardness_t_name': 'HardnessTName',
        'hardness_bottom_tid': 'HardnessBottomTID',
        'hardness_bottom_t_name': 'HardnessBottomTName',
        'wetness_tid': 'WetnessTID',
        'wetness_t_name': 'WetnessTName',
        'critical_layer_tid': 'CriticalLayerTID',
        'critical_layer_t_name': 'CriticalLayerTName',
        'comment': 'Comment',
        'sort_order': 'SortOrder'
    }

    def __init__(self, depth_top=None, thickness=None, grain_form_primary_tid=None, grain_form_primary_t_name=None, grain_form_secondary_tid=None, grain_form_secondary_t_name=None, grain_size_avg=None, grain_size_avg_max=None, hardness_tid=None, hardness_t_name=None, hardness_bottom_tid=None, hardness_bottom_t_name=None, wetness_tid=None, wetness_t_name=None, critical_layer_tid=None, critical_layer_t_name=None, comment=None, sort_order=None):  # noqa: E501
        """StratProfileLayerViewModel - a model defined in Swagger"""  # noqa: E501
        self._depth_top = None
        self._thickness = None
        self._grain_form_primary_tid = None
        self._grain_form_primary_t_name = None
        self._grain_form_secondary_tid = None
        self._grain_form_secondary_t_name = None
        self._grain_size_avg = None
        self._grain_size_avg_max = None
        self._hardness_tid = None
        self._hardness_t_name = None
        self._hardness_bottom_tid = None
        self._hardness_bottom_t_name = None
        self._wetness_tid = None
        self._wetness_t_name = None
        self._critical_layer_tid = None
        self._critical_layer_t_name = None
        self._comment = None
        self._sort_order = None
        self.discriminator = None
        if depth_top is not None:
            self.depth_top = depth_top
        if thickness is not None:
            self.thickness = thickness
        if grain_form_primary_tid is not None:
            self.grain_form_primary_tid = grain_form_primary_tid
        if grain_form_primary_t_name is not None:
            self.grain_form_primary_t_name = grain_form_primary_t_name
        if grain_form_secondary_tid is not None:
            self.grain_form_secondary_tid = grain_form_secondary_tid
        if grain_form_secondary_t_name is not None:
            self.grain_form_secondary_t_name = grain_form_secondary_t_name
        if grain_size_avg is not None:
            self.grain_size_avg = grain_size_avg
        if grain_size_avg_max is not None:
            self.grain_size_avg_max = grain_size_avg_max
        if hardness_tid is not None:
            self.hardness_tid = hardness_tid
        if hardness_t_name is not None:
            self.hardness_t_name = hardness_t_name
        if hardness_bottom_tid is not None:
            self.hardness_bottom_tid = hardness_bottom_tid
        if hardness_bottom_t_name is not None:
            self.hardness_bottom_t_name = hardness_bottom_t_name
        if wetness_tid is not None:
            self.wetness_tid = wetness_tid
        if wetness_t_name is not None:
            self.wetness_t_name = wetness_t_name
        if critical_layer_tid is not None:
            self.critical_layer_tid = critical_layer_tid
        if critical_layer_t_name is not None:
            self.critical_layer_t_name = critical_layer_t_name
        if comment is not None:
            self.comment = comment
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def depth_top(self):
        """Gets the depth_top of this StratProfileLayerViewModel.  # noqa: E501


        :return: The depth_top of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: float
        """
        return self._depth_top

    @depth_top.setter
    def depth_top(self, depth_top):
        """Sets the depth_top of this StratProfileLayerViewModel.


        :param depth_top: The depth_top of this StratProfileLayerViewModel.  # noqa: E501
        :type: float
        """

        self._depth_top = depth_top

    @property
    def thickness(self):
        """Gets the thickness of this StratProfileLayerViewModel.  # noqa: E501


        :return: The thickness of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: float
        """
        return self._thickness

    @thickness.setter
    def thickness(self, thickness):
        """Sets the thickness of this StratProfileLayerViewModel.


        :param thickness: The thickness of this StratProfileLayerViewModel.  # noqa: E501
        :type: float
        """

        self._thickness = thickness

    @property
    def grain_form_primary_tid(self):
        """Gets the grain_form_primary_tid of this StratProfileLayerViewModel.  # noqa: E501


        :return: The grain_form_primary_tid of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: int
        """
        return self._grain_form_primary_tid

    @grain_form_primary_tid.setter
    def grain_form_primary_tid(self, grain_form_primary_tid):
        """Sets the grain_form_primary_tid of this StratProfileLayerViewModel.


        :param grain_form_primary_tid: The grain_form_primary_tid of this StratProfileLayerViewModel.  # noqa: E501
        :type: int
        """

        self._grain_form_primary_tid = grain_form_primary_tid

    @property
    def grain_form_primary_t_name(self):
        """Gets the grain_form_primary_t_name of this StratProfileLayerViewModel.  # noqa: E501


        :return: The grain_form_primary_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: str
        """
        return self._grain_form_primary_t_name

    @grain_form_primary_t_name.setter
    def grain_form_primary_t_name(self, grain_form_primary_t_name):
        """Sets the grain_form_primary_t_name of this StratProfileLayerViewModel.


        :param grain_form_primary_t_name: The grain_form_primary_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :type: str
        """

        self._grain_form_primary_t_name = grain_form_primary_t_name

    @property
    def grain_form_secondary_tid(self):
        """Gets the grain_form_secondary_tid of this StratProfileLayerViewModel.  # noqa: E501


        :return: The grain_form_secondary_tid of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: int
        """
        return self._grain_form_secondary_tid

    @grain_form_secondary_tid.setter
    def grain_form_secondary_tid(self, grain_form_secondary_tid):
        """Sets the grain_form_secondary_tid of this StratProfileLayerViewModel.


        :param grain_form_secondary_tid: The grain_form_secondary_tid of this StratProfileLayerViewModel.  # noqa: E501
        :type: int
        """

        self._grain_form_secondary_tid = grain_form_secondary_tid

    @property
    def grain_form_secondary_t_name(self):
        """Gets the grain_form_secondary_t_name of this StratProfileLayerViewModel.  # noqa: E501


        :return: The grain_form_secondary_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: str
        """
        return self._grain_form_secondary_t_name

    @grain_form_secondary_t_name.setter
    def grain_form_secondary_t_name(self, grain_form_secondary_t_name):
        """Sets the grain_form_secondary_t_name of this StratProfileLayerViewModel.


        :param grain_form_secondary_t_name: The grain_form_secondary_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :type: str
        """

        self._grain_form_secondary_t_name = grain_form_secondary_t_name

    @property
    def grain_size_avg(self):
        """Gets the grain_size_avg of this StratProfileLayerViewModel.  # noqa: E501


        :return: The grain_size_avg of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: float
        """
        return self._grain_size_avg

    @grain_size_avg.setter
    def grain_size_avg(self, grain_size_avg):
        """Sets the grain_size_avg of this StratProfileLayerViewModel.


        :param grain_size_avg: The grain_size_avg of this StratProfileLayerViewModel.  # noqa: E501
        :type: float
        """

        self._grain_size_avg = grain_size_avg

    @property
    def grain_size_avg_max(self):
        """Gets the grain_size_avg_max of this StratProfileLayerViewModel.  # noqa: E501


        :return: The grain_size_avg_max of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: float
        """
        return self._grain_size_avg_max

    @grain_size_avg_max.setter
    def grain_size_avg_max(self, grain_size_avg_max):
        """Sets the grain_size_avg_max of this StratProfileLayerViewModel.


        :param grain_size_avg_max: The grain_size_avg_max of this StratProfileLayerViewModel.  # noqa: E501
        :type: float
        """

        self._grain_size_avg_max = grain_size_avg_max

    @property
    def hardness_tid(self):
        """Gets the hardness_tid of this StratProfileLayerViewModel.  # noqa: E501


        :return: The hardness_tid of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: int
        """
        return self._hardness_tid

    @hardness_tid.setter
    def hardness_tid(self, hardness_tid):
        """Sets the hardness_tid of this StratProfileLayerViewModel.


        :param hardness_tid: The hardness_tid of this StratProfileLayerViewModel.  # noqa: E501
        :type: int
        """

        self._hardness_tid = hardness_tid

    @property
    def hardness_t_name(self):
        """Gets the hardness_t_name of this StratProfileLayerViewModel.  # noqa: E501


        :return: The hardness_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: str
        """
        return self._hardness_t_name

    @hardness_t_name.setter
    def hardness_t_name(self, hardness_t_name):
        """Sets the hardness_t_name of this StratProfileLayerViewModel.


        :param hardness_t_name: The hardness_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :type: str
        """

        self._hardness_t_name = hardness_t_name

    @property
    def hardness_bottom_tid(self):
        """Gets the hardness_bottom_tid of this StratProfileLayerViewModel.  # noqa: E501


        :return: The hardness_bottom_tid of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: int
        """
        return self._hardness_bottom_tid

    @hardness_bottom_tid.setter
    def hardness_bottom_tid(self, hardness_bottom_tid):
        """Sets the hardness_bottom_tid of this StratProfileLayerViewModel.


        :param hardness_bottom_tid: The hardness_bottom_tid of this StratProfileLayerViewModel.  # noqa: E501
        :type: int
        """

        self._hardness_bottom_tid = hardness_bottom_tid

    @property
    def hardness_bottom_t_name(self):
        """Gets the hardness_bottom_t_name of this StratProfileLayerViewModel.  # noqa: E501


        :return: The hardness_bottom_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: str
        """
        return self._hardness_bottom_t_name

    @hardness_bottom_t_name.setter
    def hardness_bottom_t_name(self, hardness_bottom_t_name):
        """Sets the hardness_bottom_t_name of this StratProfileLayerViewModel.


        :param hardness_bottom_t_name: The hardness_bottom_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :type: str
        """

        self._hardness_bottom_t_name = hardness_bottom_t_name

    @property
    def wetness_tid(self):
        """Gets the wetness_tid of this StratProfileLayerViewModel.  # noqa: E501


        :return: The wetness_tid of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: int
        """
        return self._wetness_tid

    @wetness_tid.setter
    def wetness_tid(self, wetness_tid):
        """Sets the wetness_tid of this StratProfileLayerViewModel.


        :param wetness_tid: The wetness_tid of this StratProfileLayerViewModel.  # noqa: E501
        :type: int
        """

        self._wetness_tid = wetness_tid

    @property
    def wetness_t_name(self):
        """Gets the wetness_t_name of this StratProfileLayerViewModel.  # noqa: E501


        :return: The wetness_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: str
        """
        return self._wetness_t_name

    @wetness_t_name.setter
    def wetness_t_name(self, wetness_t_name):
        """Sets the wetness_t_name of this StratProfileLayerViewModel.


        :param wetness_t_name: The wetness_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :type: str
        """

        self._wetness_t_name = wetness_t_name

    @property
    def critical_layer_tid(self):
        """Gets the critical_layer_tid of this StratProfileLayerViewModel.  # noqa: E501


        :return: The critical_layer_tid of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: int
        """
        return self._critical_layer_tid

    @critical_layer_tid.setter
    def critical_layer_tid(self, critical_layer_tid):
        """Sets the critical_layer_tid of this StratProfileLayerViewModel.


        :param critical_layer_tid: The critical_layer_tid of this StratProfileLayerViewModel.  # noqa: E501
        :type: int
        """

        self._critical_layer_tid = critical_layer_tid

    @property
    def critical_layer_t_name(self):
        """Gets the critical_layer_t_name of this StratProfileLayerViewModel.  # noqa: E501


        :return: The critical_layer_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: str
        """
        return self._critical_layer_t_name

    @critical_layer_t_name.setter
    def critical_layer_t_name(self, critical_layer_t_name):
        """Sets the critical_layer_t_name of this StratProfileLayerViewModel.


        :param critical_layer_t_name: The critical_layer_t_name of this StratProfileLayerViewModel.  # noqa: E501
        :type: str
        """

        self._critical_layer_t_name = critical_layer_t_name

    @property
    def comment(self):
        """Gets the comment of this StratProfileLayerViewModel.  # noqa: E501


        :return: The comment of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this StratProfileLayerViewModel.


        :param comment: The comment of this StratProfileLayerViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def sort_order(self):
        """Gets the sort_order of this StratProfileLayerViewModel.  # noqa: E501


        :return: The sort_order of this StratProfileLayerViewModel.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this StratProfileLayerViewModel.


        :param sort_order: The sort_order of this StratProfileLayerViewModel.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StratProfileLayerViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StratProfileLayerViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DensityProfileDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cylinder_diameter': 'float',
        'tare_weight': 'float',
        'comment': 'str',
        'layers': 'list[DensityProfileLayerDto]'
    }

    attribute_map = {
        'cylinder_diameter': 'CylinderDiameter',
        'tare_weight': 'TareWeight',
        'comment': 'Comment',
        'layers': 'Layers'
    }

    def __init__(self, cylinder_diameter=None, tare_weight=None, comment=None, layers=None):  # noqa: E501
        """DensityProfileDto - a model defined in Swagger"""  # noqa: E501
        self._cylinder_diameter = None
        self._tare_weight = None
        self._comment = None
        self._layers = None
        self.discriminator = None
        if cylinder_diameter is not None:
            self.cylinder_diameter = cylinder_diameter
        if tare_weight is not None:
            self.tare_weight = tare_weight
        if comment is not None:
            self.comment = comment
        if layers is not None:
            self.layers = layers

    @property
    def cylinder_diameter(self):
        """Gets the cylinder_diameter of this DensityProfileDto.  # noqa: E501


        :return: The cylinder_diameter of this DensityProfileDto.  # noqa: E501
        :rtype: float
        """
        return self._cylinder_diameter

    @cylinder_diameter.setter
    def cylinder_diameter(self, cylinder_diameter):
        """Sets the cylinder_diameter of this DensityProfileDto.


        :param cylinder_diameter: The cylinder_diameter of this DensityProfileDto.  # noqa: E501
        :type: float
        """

        self._cylinder_diameter = cylinder_diameter

    @property
    def tare_weight(self):
        """Gets the tare_weight of this DensityProfileDto.  # noqa: E501


        :return: The tare_weight of this DensityProfileDto.  # noqa: E501
        :rtype: float
        """
        return self._tare_weight

    @tare_weight.setter
    def tare_weight(self, tare_weight):
        """Sets the tare_weight of this DensityProfileDto.


        :param tare_weight: The tare_weight of this DensityProfileDto.  # noqa: E501
        :type: float
        """

        self._tare_weight = tare_weight

    @property
    def comment(self):
        """Gets the comment of this DensityProfileDto.  # noqa: E501


        :return: The comment of this DensityProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DensityProfileDto.


        :param comment: The comment of this DensityProfileDto.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def layers(self):
        """Gets the layers of this DensityProfileDto.  # noqa: E501


        :return: The layers of this DensityProfileDto.  # noqa: E501
        :rtype: list[DensityProfileLayerDto]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this DensityProfileDto.


        :param layers: The layers of this DensityProfileDto.  # noqa: E501
        :type: list[DensityProfileLayerDto]
        """

        self._layers = layers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DensityProfileDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DensityProfileDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WaterLevelMeasurementViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'water_level_measurement_id': 'int',
        'water_level_value': 'float',
        'dt_measurement_time': 'datetime',
        'comment': 'str',
        'attachments': 'list[int]'
    }

    attribute_map = {
        'water_level_measurement_id': 'WaterLevelMeasurementId',
        'water_level_value': 'WaterLevelValue',
        'dt_measurement_time': 'DtMeasurementTime',
        'comment': 'Comment',
        'attachments': 'Attachments'
    }

    def __init__(self, water_level_measurement_id=None, water_level_value=None, dt_measurement_time=None, comment=None, attachments=None):  # noqa: E501
        """WaterLevelMeasurementViewModel - a model defined in Swagger"""  # noqa: E501
        self._water_level_measurement_id = None
        self._water_level_value = None
        self._dt_measurement_time = None
        self._comment = None
        self._attachments = None
        self.discriminator = None
        if water_level_measurement_id is not None:
            self.water_level_measurement_id = water_level_measurement_id
        if water_level_value is not None:
            self.water_level_value = water_level_value
        if dt_measurement_time is not None:
            self.dt_measurement_time = dt_measurement_time
        if comment is not None:
            self.comment = comment
        if attachments is not None:
            self.attachments = attachments

    @property
    def water_level_measurement_id(self):
        """Gets the water_level_measurement_id of this WaterLevelMeasurementViewModel.  # noqa: E501


        :return: The water_level_measurement_id of this WaterLevelMeasurementViewModel.  # noqa: E501
        :rtype: int
        """
        return self._water_level_measurement_id

    @water_level_measurement_id.setter
    def water_level_measurement_id(self, water_level_measurement_id):
        """Sets the water_level_measurement_id of this WaterLevelMeasurementViewModel.


        :param water_level_measurement_id: The water_level_measurement_id of this WaterLevelMeasurementViewModel.  # noqa: E501
        :type: int
        """

        self._water_level_measurement_id = water_level_measurement_id

    @property
    def water_level_value(self):
        """Gets the water_level_value of this WaterLevelMeasurementViewModel.  # noqa: E501


        :return: The water_level_value of this WaterLevelMeasurementViewModel.  # noqa: E501
        :rtype: float
        """
        return self._water_level_value

    @water_level_value.setter
    def water_level_value(self, water_level_value):
        """Sets the water_level_value of this WaterLevelMeasurementViewModel.


        :param water_level_value: The water_level_value of this WaterLevelMeasurementViewModel.  # noqa: E501
        :type: float
        """

        self._water_level_value = water_level_value

    @property
    def dt_measurement_time(self):
        """Gets the dt_measurement_time of this WaterLevelMeasurementViewModel.  # noqa: E501


        :return: The dt_measurement_time of this WaterLevelMeasurementViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_measurement_time

    @dt_measurement_time.setter
    def dt_measurement_time(self, dt_measurement_time):
        """Sets the dt_measurement_time of this WaterLevelMeasurementViewModel.


        :param dt_measurement_time: The dt_measurement_time of this WaterLevelMeasurementViewModel.  # noqa: E501
        :type: datetime
        """

        self._dt_measurement_time = dt_measurement_time

    @property
    def comment(self):
        """Gets the comment of this WaterLevelMeasurementViewModel.  # noqa: E501


        :return: The comment of this WaterLevelMeasurementViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this WaterLevelMeasurementViewModel.


        :param comment: The comment of this WaterLevelMeasurementViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def attachments(self):
        """Gets the attachments of this WaterLevelMeasurementViewModel.  # noqa: E501


        :return: The attachments of this WaterLevelMeasurementViewModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this WaterLevelMeasurementViewModel.


        :param attachments: The attachments of this WaterLevelMeasurementViewModel.  # noqa: E501
        :type: list[int]
        """

        self._attachments = attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WaterLevelMeasurementViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaterLevelMeasurementViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

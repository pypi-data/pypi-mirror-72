# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WithinExtentCriteriaDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'top_left': 'PositionDto',
        'bottom_right': 'PositionDto'
    }

    attribute_map = {
        'top_left': 'TopLeft',
        'bottom_right': 'BottomRight'
    }

    def __init__(self, top_left=None, bottom_right=None):  # noqa: E501
        """WithinExtentCriteriaDto - a model defined in Swagger"""  # noqa: E501
        self._top_left = None
        self._bottom_right = None
        self.discriminator = None
        if top_left is not None:
            self.top_left = top_left
        if bottom_right is not None:
            self.bottom_right = bottom_right

    @property
    def top_left(self):
        """Gets the top_left of this WithinExtentCriteriaDto.  # noqa: E501


        :return: The top_left of this WithinExtentCriteriaDto.  # noqa: E501
        :rtype: PositionDto
        """
        return self._top_left

    @top_left.setter
    def top_left(self, top_left):
        """Sets the top_left of this WithinExtentCriteriaDto.


        :param top_left: The top_left of this WithinExtentCriteriaDto.  # noqa: E501
        :type: PositionDto
        """

        self._top_left = top_left

    @property
    def bottom_right(self):
        """Gets the bottom_right of this WithinExtentCriteriaDto.  # noqa: E501


        :return: The bottom_right of this WithinExtentCriteriaDto.  # noqa: E501
        :rtype: PositionDto
        """
        return self._bottom_right

    @bottom_right.setter
    def bottom_right(self, bottom_right):
        """Sets the bottom_right of this WithinExtentCriteriaDto.


        :param bottom_right: The bottom_right of this WithinExtentCriteriaDto.  # noqa: E501
        :type: PositionDto
        """

        self._bottom_right = bottom_right

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WithinExtentCriteriaDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WithinExtentCriteriaDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

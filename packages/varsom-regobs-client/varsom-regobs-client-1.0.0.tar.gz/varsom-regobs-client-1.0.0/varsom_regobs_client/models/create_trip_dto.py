# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateTripDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'device_guid': 'str',
        'geo_hazard_id': 'int',
        'lat': 'str',
        'lng': 'str',
        'observation_expected_minutes': 'int',
        'observer_guid': 'str',
        'trip_type_id': 'int'
    }

    attribute_map = {
        'comment': 'Comment',
        'device_guid': 'DeviceGuid',
        'geo_hazard_id': 'GeoHazardID',
        'lat': 'Lat',
        'lng': 'Lng',
        'observation_expected_minutes': 'ObservationExpectedMinutes',
        'observer_guid': 'ObserverGuid',
        'trip_type_id': 'TripTypeID'
    }

    def __init__(self, comment=None, device_guid=None, geo_hazard_id=None, lat=None, lng=None, observation_expected_minutes=None, observer_guid=None, trip_type_id=None):  # noqa: E501
        """CreateTripDto - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._device_guid = None
        self._geo_hazard_id = None
        self._lat = None
        self._lng = None
        self._observation_expected_minutes = None
        self._observer_guid = None
        self._trip_type_id = None
        self.discriminator = None
        if comment is not None:
            self.comment = comment
        if device_guid is not None:
            self.device_guid = device_guid
        if geo_hazard_id is not None:
            self.geo_hazard_id = geo_hazard_id
        if lat is not None:
            self.lat = lat
        if lng is not None:
            self.lng = lng
        if observation_expected_minutes is not None:
            self.observation_expected_minutes = observation_expected_minutes
        if observer_guid is not None:
            self.observer_guid = observer_guid
        if trip_type_id is not None:
            self.trip_type_id = trip_type_id

    @property
    def comment(self):
        """Gets the comment of this CreateTripDto.  # noqa: E501


        :return: The comment of this CreateTripDto.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CreateTripDto.


        :param comment: The comment of this CreateTripDto.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def device_guid(self):
        """Gets the device_guid of this CreateTripDto.  # noqa: E501


        :return: The device_guid of this CreateTripDto.  # noqa: E501
        :rtype: str
        """
        return self._device_guid

    @device_guid.setter
    def device_guid(self, device_guid):
        """Sets the device_guid of this CreateTripDto.


        :param device_guid: The device_guid of this CreateTripDto.  # noqa: E501
        :type: str
        """

        self._device_guid = device_guid

    @property
    def geo_hazard_id(self):
        """Gets the geo_hazard_id of this CreateTripDto.  # noqa: E501


        :return: The geo_hazard_id of this CreateTripDto.  # noqa: E501
        :rtype: int
        """
        return self._geo_hazard_id

    @geo_hazard_id.setter
    def geo_hazard_id(self, geo_hazard_id):
        """Sets the geo_hazard_id of this CreateTripDto.


        :param geo_hazard_id: The geo_hazard_id of this CreateTripDto.  # noqa: E501
        :type: int
        """

        self._geo_hazard_id = geo_hazard_id

    @property
    def lat(self):
        """Gets the lat of this CreateTripDto.  # noqa: E501


        :return: The lat of this CreateTripDto.  # noqa: E501
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this CreateTripDto.


        :param lat: The lat of this CreateTripDto.  # noqa: E501
        :type: str
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this CreateTripDto.  # noqa: E501


        :return: The lng of this CreateTripDto.  # noqa: E501
        :rtype: str
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this CreateTripDto.


        :param lng: The lng of this CreateTripDto.  # noqa: E501
        :type: str
        """

        self._lng = lng

    @property
    def observation_expected_minutes(self):
        """Gets the observation_expected_minutes of this CreateTripDto.  # noqa: E501


        :return: The observation_expected_minutes of this CreateTripDto.  # noqa: E501
        :rtype: int
        """
        return self._observation_expected_minutes

    @observation_expected_minutes.setter
    def observation_expected_minutes(self, observation_expected_minutes):
        """Sets the observation_expected_minutes of this CreateTripDto.


        :param observation_expected_minutes: The observation_expected_minutes of this CreateTripDto.  # noqa: E501
        :type: int
        """

        self._observation_expected_minutes = observation_expected_minutes

    @property
    def observer_guid(self):
        """Gets the observer_guid of this CreateTripDto.  # noqa: E501


        :return: The observer_guid of this CreateTripDto.  # noqa: E501
        :rtype: str
        """
        return self._observer_guid

    @observer_guid.setter
    def observer_guid(self, observer_guid):
        """Sets the observer_guid of this CreateTripDto.


        :param observer_guid: The observer_guid of this CreateTripDto.  # noqa: E501
        :type: str
        """

        self._observer_guid = observer_guid

    @property
    def trip_type_id(self):
        """Gets the trip_type_id of this CreateTripDto.  # noqa: E501


        :return: The trip_type_id of this CreateTripDto.  # noqa: E501
        :rtype: int
        """
        return self._trip_type_id

    @trip_type_id.setter
    def trip_type_id(self, trip_type_id):
        """Sets the trip_type_id of this CreateTripDto.


        :param trip_type_id: The trip_type_id of this CreateTripDto.  # noqa: E501
        :type: int
        """

        self._trip_type_id = trip_type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTripDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTripDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

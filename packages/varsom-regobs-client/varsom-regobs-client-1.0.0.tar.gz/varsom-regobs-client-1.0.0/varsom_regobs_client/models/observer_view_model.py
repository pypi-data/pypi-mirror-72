# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ObserverViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'observer_guid': 'str',
        'observer_group_id': 'int',
        'observer_group_name': 'str',
        'nick_name': 'str',
        'observer_id': 'int',
        'observer_name': 'str',
        'competence_level_tid': 'int',
        'competence_level_name': 'str'
    }

    attribute_map = {
        'observer_guid': 'ObserverGUID',
        'observer_group_id': 'ObserverGroupID',
        'observer_group_name': 'ObserverGroupName',
        'nick_name': 'NickName',
        'observer_id': 'ObserverID',
        'observer_name': 'ObserverName',
        'competence_level_tid': 'CompetenceLevelTID',
        'competence_level_name': 'CompetenceLevelName'
    }

    def __init__(self, observer_guid=None, observer_group_id=None, observer_group_name=None, nick_name=None, observer_id=None, observer_name=None, competence_level_tid=None, competence_level_name=None):  # noqa: E501
        """ObserverViewModel - a model defined in Swagger"""  # noqa: E501
        self._observer_guid = None
        self._observer_group_id = None
        self._observer_group_name = None
        self._nick_name = None
        self._observer_id = None
        self._observer_name = None
        self._competence_level_tid = None
        self._competence_level_name = None
        self.discriminator = None
        if observer_guid is not None:
            self.observer_guid = observer_guid
        if observer_group_id is not None:
            self.observer_group_id = observer_group_id
        if observer_group_name is not None:
            self.observer_group_name = observer_group_name
        if nick_name is not None:
            self.nick_name = nick_name
        if observer_id is not None:
            self.observer_id = observer_id
        if observer_name is not None:
            self.observer_name = observer_name
        if competence_level_tid is not None:
            self.competence_level_tid = competence_level_tid
        if competence_level_name is not None:
            self.competence_level_name = competence_level_name

    @property
    def observer_guid(self):
        """Gets the observer_guid of this ObserverViewModel.  # noqa: E501


        :return: The observer_guid of this ObserverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._observer_guid

    @observer_guid.setter
    def observer_guid(self, observer_guid):
        """Sets the observer_guid of this ObserverViewModel.


        :param observer_guid: The observer_guid of this ObserverViewModel.  # noqa: E501
        :type: str
        """

        self._observer_guid = observer_guid

    @property
    def observer_group_id(self):
        """Gets the observer_group_id of this ObserverViewModel.  # noqa: E501


        :return: The observer_group_id of this ObserverViewModel.  # noqa: E501
        :rtype: int
        """
        return self._observer_group_id

    @observer_group_id.setter
    def observer_group_id(self, observer_group_id):
        """Sets the observer_group_id of this ObserverViewModel.


        :param observer_group_id: The observer_group_id of this ObserverViewModel.  # noqa: E501
        :type: int
        """

        self._observer_group_id = observer_group_id

    @property
    def observer_group_name(self):
        """Gets the observer_group_name of this ObserverViewModel.  # noqa: E501


        :return: The observer_group_name of this ObserverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._observer_group_name

    @observer_group_name.setter
    def observer_group_name(self, observer_group_name):
        """Sets the observer_group_name of this ObserverViewModel.


        :param observer_group_name: The observer_group_name of this ObserverViewModel.  # noqa: E501
        :type: str
        """

        self._observer_group_name = observer_group_name

    @property
    def nick_name(self):
        """Gets the nick_name of this ObserverViewModel.  # noqa: E501


        :return: The nick_name of this ObserverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this ObserverViewModel.


        :param nick_name: The nick_name of this ObserverViewModel.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def observer_id(self):
        """Gets the observer_id of this ObserverViewModel.  # noqa: E501


        :return: The observer_id of this ObserverViewModel.  # noqa: E501
        :rtype: int
        """
        return self._observer_id

    @observer_id.setter
    def observer_id(self, observer_id):
        """Sets the observer_id of this ObserverViewModel.


        :param observer_id: The observer_id of this ObserverViewModel.  # noqa: E501
        :type: int
        """

        self._observer_id = observer_id

    @property
    def observer_name(self):
        """Gets the observer_name of this ObserverViewModel.  # noqa: E501


        :return: The observer_name of this ObserverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._observer_name

    @observer_name.setter
    def observer_name(self, observer_name):
        """Sets the observer_name of this ObserverViewModel.


        :param observer_name: The observer_name of this ObserverViewModel.  # noqa: E501
        :type: str
        """

        self._observer_name = observer_name

    @property
    def competence_level_tid(self):
        """Gets the competence_level_tid of this ObserverViewModel.  # noqa: E501


        :return: The competence_level_tid of this ObserverViewModel.  # noqa: E501
        :rtype: int
        """
        return self._competence_level_tid

    @competence_level_tid.setter
    def competence_level_tid(self, competence_level_tid):
        """Sets the competence_level_tid of this ObserverViewModel.


        :param competence_level_tid: The competence_level_tid of this ObserverViewModel.  # noqa: E501
        :type: int
        """

        self._competence_level_tid = competence_level_tid

    @property
    def competence_level_name(self):
        """Gets the competence_level_name of this ObserverViewModel.  # noqa: E501


        :return: The competence_level_name of this ObserverViewModel.  # noqa: E501
        :rtype: str
        """
        return self._competence_level_name

    @competence_level_name.setter
    def competence_level_name(self, competence_level_name):
        """Sets the competence_level_name of this ObserverViewModel.


        :param competence_level_name: The competence_level_name of this ObserverViewModel.  # noqa: E501
        :type: str
        """

        self._competence_level_name = competence_level_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObserverViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObserverViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

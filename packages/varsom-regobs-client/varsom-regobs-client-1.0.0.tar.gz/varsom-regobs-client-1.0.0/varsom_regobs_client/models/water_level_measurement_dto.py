# coding: utf-8

"""
    RegObs API

      ## Introduction    RegObs is a tool for collecting observations and events   related to natural hazards. It is currently used by the   Norwegian flood, landslide and avalanche warning service in   Norway, but the data is openly available for anyone through this API.    Regobs has been developed by the Norwegian Water resources and   Energy Directorate (NVE), in collaboration with the Norwegian   Meteorological Institute (MET) and the Norwegian Public Roads   Administration (NPRA).    You can check out our representation of the data at [regobs.no](http://regobs.no).    ## Authentication    Some endpoints require an api key.  You can get an API key by sending an email to   [raek@nve.no](mailto:raek@nve.no?subject=RegObs%20API%20Key).  To use the api key with the swagger ui, fill in the api\\_key input above.   It should then be included with every request in the   `regObs_apptoken` header.    ## Getting started    Get the last 10 observations using python:    ```python  import requests  r = requests.post('https://api.regobs.no/v4/Search',       data={'NumberOfRecords': 10},      headers={'Content-Type': 'application/json'}  )  data = r.json()  print(len(data))  # 10  ```      # noqa: E501

    OpenAPI spec version: v4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WaterLevelMeasurementDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'water_level_value': 'float',
        'dt_measurement_time': 'datetime',
        'usage_flag_tid': 'int',
        'comment': 'str',
        'pictures': 'list[PictureRequestDto]'
    }

    attribute_map = {
        'water_level_value': 'WaterLevelValue',
        'dt_measurement_time': 'DtMeasurementTime',
        'usage_flag_tid': 'UsageFlagTID',
        'comment': 'Comment',
        'pictures': 'Pictures'
    }

    def __init__(self, water_level_value=None, dt_measurement_time=None, usage_flag_tid=None, comment=None, pictures=None):  # noqa: E501
        """WaterLevelMeasurementDto - a model defined in Swagger"""  # noqa: E501
        self._water_level_value = None
        self._dt_measurement_time = None
        self._usage_flag_tid = None
        self._comment = None
        self._pictures = None
        self.discriminator = None
        if water_level_value is not None:
            self.water_level_value = water_level_value
        self.dt_measurement_time = dt_measurement_time
        if usage_flag_tid is not None:
            self.usage_flag_tid = usage_flag_tid
        if comment is not None:
            self.comment = comment
        if pictures is not None:
            self.pictures = pictures

    @property
    def water_level_value(self):
        """Gets the water_level_value of this WaterLevelMeasurementDto.  # noqa: E501


        :return: The water_level_value of this WaterLevelMeasurementDto.  # noqa: E501
        :rtype: float
        """
        return self._water_level_value

    @water_level_value.setter
    def water_level_value(self, water_level_value):
        """Sets the water_level_value of this WaterLevelMeasurementDto.


        :param water_level_value: The water_level_value of this WaterLevelMeasurementDto.  # noqa: E501
        :type: float
        """

        self._water_level_value = water_level_value

    @property
    def dt_measurement_time(self):
        """Gets the dt_measurement_time of this WaterLevelMeasurementDto.  # noqa: E501


        :return: The dt_measurement_time of this WaterLevelMeasurementDto.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_measurement_time

    @dt_measurement_time.setter
    def dt_measurement_time(self, dt_measurement_time):
        """Sets the dt_measurement_time of this WaterLevelMeasurementDto.


        :param dt_measurement_time: The dt_measurement_time of this WaterLevelMeasurementDto.  # noqa: E501
        :type: datetime
        """
        if dt_measurement_time is None:
            raise ValueError("Invalid value for `dt_measurement_time`, must not be `None`")  # noqa: E501

        self._dt_measurement_time = dt_measurement_time

    @property
    def usage_flag_tid(self):
        """Gets the usage_flag_tid of this WaterLevelMeasurementDto.  # noqa: E501


        :return: The usage_flag_tid of this WaterLevelMeasurementDto.  # noqa: E501
        :rtype: int
        """
        return self._usage_flag_tid

    @usage_flag_tid.setter
    def usage_flag_tid(self, usage_flag_tid):
        """Sets the usage_flag_tid of this WaterLevelMeasurementDto.


        :param usage_flag_tid: The usage_flag_tid of this WaterLevelMeasurementDto.  # noqa: E501
        :type: int
        """

        self._usage_flag_tid = usage_flag_tid

    @property
    def comment(self):
        """Gets the comment of this WaterLevelMeasurementDto.  # noqa: E501


        :return: The comment of this WaterLevelMeasurementDto.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this WaterLevelMeasurementDto.


        :param comment: The comment of this WaterLevelMeasurementDto.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def pictures(self):
        """Gets the pictures of this WaterLevelMeasurementDto.  # noqa: E501


        :return: The pictures of this WaterLevelMeasurementDto.  # noqa: E501
        :rtype: list[PictureRequestDto]
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this WaterLevelMeasurementDto.


        :param pictures: The pictures of this WaterLevelMeasurementDto.  # noqa: E501
        :type: list[PictureRequestDto]
        """

        self._pictures = pictures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WaterLevelMeasurementDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaterLevelMeasurementDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['oanda_candles']

package_data = \
{'': ['*']}

install_requires = \
['forex-types>=0.0.6,<0.0.7',
 'magic-kind>=0.2.2,<0.3.0',
 'oandapyV20>=0.6.3,<0.7.0',
 'requests>=2.23.0,<3.0.0',
 'time-int>=0.0.3,<0.0.4']

setup_kwargs = {
    'name': 'oanda-candles',
    'version': '0.0.6',
    'description': 'Oanda forex candle API built on top of oandapyV20',
    'long_description': '# oanda-candles\nOanda forex candle API built on top of oandapyV20\n\n### Oanda Access Token\nUsing this package requires an access token to a user\'s\nOanda brokerage account. This module only uses the token to\nrequest candle data, but such tokens can be used to make\ntrades on the account. It is recommended that access\ntokens from a demo as opposed to a live accounts be used.\n \nDemo account tokens can be generated by a signed in user here:\n\nhttps://www.oanda.com/demo-account/tpa/personal_token\n\n### Quick Example\nSupposing that `token` is set to an Oanda access token, one could print\nthe opening bid price of the latest 100 trading hours for the Aussie like this: \n\n```python\nfrom oanda_candles import CandleRequester, Pair, Gran\n\naud_usd = Pair("audusd")\nrequester = CandleRequester(token, aud_usd, Gran.H1)\ncandles = requester.request(count=100)\n\nfor candle in candles:\n    print(candle.bid.o)\n```\n\n\n### Summary of Basic Usage\n1. A `CandleRequester` object is initialized with a token, forex pair, and granularity.\n1. Its `request` method is called specifying starting time, ending time, and/or count of the candle range desired.\n1. This returns a `CandleSequence` object containing `Candle` objects as well as the pair and granularity.\n1. Each `Candle` has three `Ohlc` objects, one for Bid, Mid, and Ask prices.\n1. The `Ohlc` objects have open, high, low, and close `Price` objects\n\n### Understanding Request Ranges\nThe `CandleRequester.request()` has `start`, `end`, and `count`\noptional parameters used to specify how many candles and from when.\n\n parameter | valid types | valid range | default\n --- | --- |---| ---\nstart | TimeInt, datetime, None | epoch to now | --\nend | TimeInt, datetime, None | epoch to now | now\ncount | int, None | 1 to 5000 | 500\n\nIt does not make sense to set all three of these parameters, but you can\nspecify any single one of them, or any two of them, or none of them.\nThe behavior for when they are set or unset is shown in this table:\n\nstart | end | count | behavior\n --- | --- | ---| ---\n-- | -- | -- | Get latest 500 candles\n-- | -- | set | Get latest count candles\n-- | set | -- | Get last 500 candles up until the end time\n-- | set | set | Get last count candles up until the end time\nset | -- | -- | Get the first 500 candles from start time\nset | -- | set | Get the first count candles from start time\nset | set | -- | Get candles from start to end times\nset | set | set | ValueError (there might be a different count in the range)\n',
    'author': 'Andrew Allaire',
    'author_email': 'andrew.allaire@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/aallaire/oanda-candles',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.5,<4.0',
}


setup(**setup_kwargs)

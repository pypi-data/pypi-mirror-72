sphinxcontrib-ditaa
*********************

:author: "Yongping Guo"<guoyoooping@163.com>

A sphinx extension for embedding block diagram using ditaa.

This extension enables you to insert block diagrams into your document generated by sphinx. Following code is an example::

    .. ditaa::

        +--------+   +-------+    +-------+
        |        | --+ ditaa +--> |       |
        |  Text  |   +-------+    |diagram|
        |Document|   |!magic!|    |       |
        |     {d}|   |       |    |       |
        +---+----+   +-------+    +-------+
            :                         ^
            |       Lots of work      |
            +-------------------------+

After conversion using ditaa, the above file becomes: |example1|_

.. |example1| image:: http://ditaa.sourceforge.net/images/first.png
.. _example1: http://ditaa.sourceforge.net/images/first.png

1. Introduction
===============

ditaa_ is a small command-line utility that can convert diagrams drawn using ascii art ('drawings' that contain characters that resemble lines like | / - ), into proper bitmap graphics. See http://ditaa.sourceforge.net/.

ditaa_ is a java programme and the input must be a plain text file and the output is a seperate image file. It's inconvenient for user to include the image directly. This extensions allows the plain-text graph in .rst file to be rendered as a graph drawn by ditaa_ in sphinx scheme. With this plugin you can focus the graph itself and the ditaa and sphinx would convert it automatically.

Now it support to render the image into html and pdf target.

2. Install and configuration
============================

2.1 prerequisite
----------------

ditaa_ is in java, normally it's call by the following format::

    java -jar /usr/local/Cellar/ditaa/0.10/libexec/ditaa0_10.jar art10.txt art10.png 

to use it in the sphinx we should convert it to a single command and call it as::

    ditaa art10.txt art10.png 

There are two means to do that:

1) Crate a execuable script as following::

    $ cat /usr/local/bin/ditaa
    #!/bin/bash
    exec java  -jar /usr/local/Cellar/ditaa/0.10/libexec/ditaa0_10.jar "$@"

2) If you don't like the converttion, please refer to `2.3 Configuration`_ for the workaround. you can add the following configuration to the conf.py::

    ditaa = "java"
    ditaa_args = ["-jar", "/usr/local/Cellar/ditaa/0.10/libexec/ditaa0_10.jar"]
    ditaa_log_enable = True

2.2 install sphinxcontrib-ditaa
-------------------------------

::

    pip install sphinxcontrib-ditaa

2.3 configuration
-----------------

Just add ``sphinxcontrib.ditaa`` to the list of extensions in the ``conf.py`` file. For example::

    extensions = ['sphinxcontrib.ditaa']

sphinxcontrib-ditaa also provide configuration to add different options to ditaa command and render different kind of output:

``ditaa`` <str>:

    Ditaa is a java implementation and maybe is not callable directly, please
    input the ditaa executale name if you didn't convert it to a normal
    command. Default is "ditaa". See examples below.

``ditaa_args`` <list>:

    Given a ditaa option list, default is empty.

``ditaa_log_enable`` <Bool>:

    Since ditaa is slow, will give out a log to note progress if it's
    configured. Default is True.

ditaa_output_suffix: <str>:

    The output file format.

For example::

    ditaa = "java"
    ditaa_args = ["-jar", "/usr/local/Cellar/ditaa/0.10/libexec/ditaa0_10.jar"]
    ditaa_log_enable = True

3. Quick Example
================

This source::

    .. ditaa::

        +--------+   +-------+    +-------+
        |        | --+ ditaa +--> |       |
        |  Text  |   +-------+    |diagram|
        |Document|   |!magic!|    |       |
        |     {d}|   |       |    |       |
        +---+----+   +-------+    +-------+
            :                         ^
            |       Lots of work      |
            +-------------------------+

is rendered as: |example1|_

Another example::

    .. ditaa::

        +----------+ edit +----------+   input +----------+ compile +----------+
        |  cPNK    |      |  cRED    |         |   cGRE   |         |  cPNK    |
        | refined  |<-----+ h,cpp    +-------->+ compiler,+-------->+Executable|
        |   h,cpp  |      |          |         | linker   |         |   File   |
        |          |      |          |         |          |         |          |
        +----------+      +----+-----+         +----------+         +----------+
                               | input
                               v
                          +----------+
                          |  cGRE    |
                          | doxygen  |
                          |          |
                          +----+-----+
                               | process
                               v
                          +----------+
                          |  cPNK    |
                          | Doxgen   |
                          | Document |
                          |          |
                          +----------+

is rendered as: |example2|_

.. |example2| image:: http://emacser.com/uploads/asciiExampleWithColorAndType.png
.. _example2: http://emacser.com/uploads/asciiExampleWithColorAndType.png

4. Usage
========

1) Firstly, make a directory and write the .rst files::

    $ mkdir test_dir
    $ cd test_dir
    $ vim test.rst

2) create a sphinex project in the directory, presss Enter if there is no
change::

    $ sphinx-quickstart

3) Just add ``sphinxcontrib.ditaa`` to the list of extensions in the
``conf.py`` file just created in step 2::

    extensions = ['sphinxcontrib.ditaa']

4) Add your work .rst files into index.rst just created in step 2::

    Contents:
     
    .. toctree::
       :maxdepth: 2
     
       test.rst

5) make your target files::

    $ make html

or::

    $ make pdf

6) check your target files:

    $ open .build/html/index.html

4.1 Options
-----------

1) ditaa options:

See detail in ditaa -h::

    :--no-antialias:
    :--background:
    :--no-antialias:
    :--no-separation:
    :--encoding:
    :--html:
    :--overwrite:
    :--round-corners:
    :--no-shadows:
    :--scale: 1.5 #Please note that it's ditaa's parameter and the units are
               fractions of the default size (2.5 renders 1.5 times bigger
               than the default). Be warning to be different from image's
               scale unit.
    :--transparent:
    :--tabs:
    :--fixed-slope:

2) image options:

See detail in rst syntax::

    :name: 
    :class: 
    :alt: 
    :title:
    :height: 
    :width: 
    :scale: 50%, Please node that it's integer percentage (the "%" symbol is optional)
    :align: 
    :target: 
    :inline: 

Examples::

    .. ditaa::
       :--no-antialias:
       :--transparent: 
       :--scale: 1.5
       :alt: a test for ditaa.
       :width: 600
       :height: 400
       :align: left
       :scale: 50

        Color codes
        /-------------+-------------\
        |cRED RED     |cBLU BLU     |
        +-------------+-------------+
        |cGRE GRE     |cPNK PNK     |
        +-------------+-------------+
        |cBLK BLK     |cYEL YEL     |
        \-------------+-------------/

5. License
==========

GPLv3

.. _ditaa: http://ditaa.sourceforge.net/
.. _Sphinx: http://sphinx.pocoo.org/

6. Changelog
============

0.5

Don't import sphinx.util.compat since sphinx.util.compat is deprecated at 1.6
and is removed since Sphinx 1.7.


0.6

Support python3

1.0

upgrade to formal release.
Fix a bug that ditaa doesn't work when ditaa options have values.

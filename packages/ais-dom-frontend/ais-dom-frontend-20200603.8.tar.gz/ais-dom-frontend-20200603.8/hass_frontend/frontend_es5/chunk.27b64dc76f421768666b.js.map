{"version":3,"file":"chunk.27b64dc76f421768666b.js","sources":["webpack:///./src/panels/lovelace/cards/hui-gauge-card.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket/dist/types\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { styleMap } from \"lit-html/directives/style-map\";\nimport \"@thomasloven/round-slider\";\n\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport \"../../../components/ha-card\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entites\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport type { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport type { GaugeCardConfig } from \"./types\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport { installResizeObserver } from \"../common/install-resize-observer\";\n\nexport const severityMap = {\n  red: \"var(--label-badge-red)\",\n  green: \"var(--label-badge-green)\",\n  yellow: \"var(--label-badge-yellow)\",\n  normal: \"var(--label-badge-blue)\",\n};\n\n@customElement(\"hui-gauge-card\")\nclass HuiGaugeCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\n      /* webpackChunkName: \"hui-gauge-card-editor\" */ \"../editor/config-elements/hui-gauge-card-editor\"\n    );\n    return document.createElement(\"hui-gauge-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): GaugeCardConfig {\n    const includeDomains = [\"sensor\"];\n    const maxEntities = 1;\n    const entityFilter = (stateObj: HassEntity): boolean => {\n      return !isNaN(Number(stateObj.state));\n    };\n\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains,\n      entityFilter\n    );\n\n    return { type: \"gauge\", entity: foundEntities[0] || \"\" };\n  }\n\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: GaugeCardConfig;\n\n  private _resizeObserver?: ResizeObserver;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this.updateComplete.then(() => this._attachObserver());\n  }\n\n  public disconnectedCallback(): void {\n    if (this._resizeObserver) {\n      this._resizeObserver.disconnect();\n    }\n  }\n\n  public getCardSize(): number {\n    return 2;\n  }\n\n  public setConfig(config: GaugeCardConfig): void {\n    if (!config || !config.entity) {\n      throw new Error(\"Invalid card configuration\");\n    }\n    if (!isValidEntityId(config.entity)) {\n      throw new Error(\"Invalid Entity\");\n    }\n    this._config = { min: 0, max: 100, ...config };\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const state = Number(stateObj.state);\n\n    if (isNaN(state)) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_non_numeric\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    const sliderBarColor = this._computeSeverity(state);\n\n    let value: number | undefined;\n\n    if (this._config.max === null || isNaN(this._config.max!)) {\n      value = undefined;\n    } else {\n      value = Math.min(this._config.max!, state);\n    }\n\n    return html`\n      <ha-card\n        @click=${this._handleClick}\n        tabindex=\"0\"\n        style=${styleMap({\n          \"--round-slider-bar-color\": sliderBarColor,\n        })}\n      >\n        <round-slider\n          readonly\n          arcLength=\"180\"\n          startAngle=\"180\"\n          .value=${value}\n          .min=${this._config.min}\n          .max=${this._config.max}\n        ></round-slider>\n        <div class=\"gauge-data\">\n          <div class=\"percent\">\n            ${stateObj.state}\n            ${this._config.unit ||\n            stateObj.attributes.unit_of_measurement ||\n            \"\"}\n          </div>\n          <div class=\"name\">\n            ${this._config.name || computeStateName(stateObj)}\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected firstUpdated(): void {\n    this._measureCard();\n    this._attachObserver();\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | GaugeCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  private _computeSeverity(numberValue: number): string {\n    const sections = this._config!.severity;\n\n    if (!sections) {\n      return severityMap.normal;\n    }\n\n    const sectionsArray = Object.keys(sections);\n    const sortable = sectionsArray.map((severity) => [\n      severity,\n      sections[severity],\n    ]);\n\n    for (const severity of sortable) {\n      if (severityMap[severity[0]] == null || isNaN(severity[1])) {\n        return severityMap.normal;\n      }\n    }\n    sortable.sort((a, b) => a[1] - b[1]);\n\n    if (numberValue >= sortable[0][1] && numberValue < sortable[1][1]) {\n      return severityMap[sortable[0][0]];\n    }\n    if (numberValue >= sortable[1][1] && numberValue < sortable[2][1]) {\n      return severityMap[sortable[1][0]];\n    }\n    if (numberValue >= sortable[2][1]) {\n      return severityMap[sortable[2][0]];\n    }\n    return severityMap.normal;\n  }\n\n  private _handleClick(): void {\n    fireEvent(this, \"hass-more-info\", { entityId: this._config!.entity });\n  }\n\n  private async _attachObserver(): Promise<void> {\n    if (!this._resizeObserver) {\n      await installResizeObserver();\n      this._resizeObserver = new ResizeObserver(\n        debounce(() => this._measureCard(), 250, false)\n      );\n    }\n    const card = this.shadowRoot!.querySelector(\"ha-card\");\n    // If we show an error or warning there is no ha-card\n    if (!card) {\n      return;\n    }\n    this._resizeObserver.observe(card);\n  }\n\n  private _measureCard() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    if (this.offsetWidth < 200) {\n      this.setAttribute(\"narrow\", \"\");\n    } else {\n      this.removeAttribute(\"narrow\");\n    }\n    if (this.offsetWidth < 150) {\n      this.setAttribute(\"veryNarrow\", \"\");\n    } else {\n      this.removeAttribute(\"veryNarrow\");\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: block;\n      }\n\n      ha-card {\n        cursor: pointer;\n        height: 100%;\n        overflow: hidden;\n        padding: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      ha-card:focus {\n        outline: none;\n        background: var(--divider-color);\n      }\n\n      round-slider {\n        max-width: 200px;\n        --round-slider-path-width: 35px;\n        --round-slider-path-color: var(--primary-background-color);\n        --round-slider-linecap: \"butt\";\n      }\n\n      .gauge-data {\n        text-align: center;\n        line-height: initial;\n        color: var(--primary-text-color);\n        margin-top: -26px;\n        width: 100%;\n      }\n\n      .gauge-data .percent {\n        white-space: nowrap;\n        font-size: 28px;\n      }\n\n      .gauge-data .name {\n        font-size: 15px;\n      }\n\n      /* ============= NARROW ============= */\n\n      :host([narrow]) ha-card {\n        padding: 8px;\n      }\n\n      :host([narrow]) round-slider {\n        --round-slider-path-width: 22px;\n      }\n\n      :host([narrow]) .gauge-data {\n        margin-top: -22px;\n      }\n\n      :host([narrow]) .gauge-data .percent {\n        font-size: 24px;\n      }\n\n      :host([narrow]) .gauge-data .name {\n        font-size: 14px;\n      }\n\n      /* ============= VERY NARROW ============= */\n\n      :host([narrow]) ha-card {\n        padding: 4px;\n      }\n\n      :host([veryNarrow]) round-slider {\n        --round-slider-path-width: 15px;\n      }\n\n      :host([veryNarrow]) .gauge-data {\n        margin-top: -16px;\n      }\n\n      :host([veryNarrow]) .gauge-data .percent {\n        font-size: 16px;\n      }\n\n      :host([veryNarrow]) .gauge-data .name {\n        font-size: 12px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-gauge-card\": HuiGaugeCard;\n  }\n}\n"],"mappings":"AA4BA","sourceRoot":""}
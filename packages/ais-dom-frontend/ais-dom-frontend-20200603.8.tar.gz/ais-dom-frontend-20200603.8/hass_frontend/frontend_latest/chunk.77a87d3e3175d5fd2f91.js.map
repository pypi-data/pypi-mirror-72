{"version":3,"file":"chunk.77a87d3e3175d5fd2f91.js","sources":["webpack:///src/mwc-fab-base.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts"],"sourcesContent":["/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport {ripple} from '@material/mwc-ripple/ripple-directive.js';\nimport {html, LitElement, property, TemplateResult} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map.js';\n\nexport class FabBase extends LitElement {\n  @property({type: Boolean}) mini = false;\n\n  @property({type: Boolean}) exited = false;\n\n  @property({type: Boolean}) disabled = false;\n\n  @property({type: Boolean}) extended = false;\n\n  @property({type: Boolean}) showIconAtEnd = false;\n\n  @property() icon = '';\n\n  @property() label = '';\n\n  protected createRenderRoot() {\n    return this.attachShadow({mode: 'open', delegatesFocus: true});\n  }\n\n  protected render() {\n    const classes = {\n      'mdc-fab--mini': this.mini,\n      'mdc-fab--exited': this.exited,\n      'mdc-fab--extended': this.extended,\n      'icon-end': this.showIconAtEnd,\n    };\n    const showLabel = this.label !== '' && this.extended;\n\n    let iconTemplate: TemplateResult|string = '';\n\n    if (this.icon) {\n      iconTemplate = html`\n        <span class=\"material-icons mdc-fab__icon\">${this.icon}</span>`;\n    }\n\n    let label = html``;\n\n    if (showLabel) {\n      label = html`<span class=\"mdc-fab__label\">${this.label}</span>`;\n    }\n\n    return html`\n      <button\n          class=\"mdc-fab ${classMap(classes)}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${this.label || this.icon}\"\n          .ripple=\"${ripple()}\">\n        <div class=\"mdc-fab__ripple\"></div>\n        ${this.showIconAtEnd ? label : ''}\n        <slot name=\"icon\">\n          ${iconTemplate}\n        </slot>\n        ${!this.showIconAtEnd ? label : ''}\n      </button>`;\n  }\n}\n","import \"@material/mwc-fab\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  SelectionChangedEvent,\n} from \"../../../../components/data-table/ha-data-table\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-icon\";\nimport \"../../../../components/ha-relative-time\";\nimport type { LovelaceConfig } from \"../../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\nimport type { Lovelace } from \"../../types\";\nimport { addEntitiesToLovelaceView } from \"../add-entities-to-view\";\nimport \"../../../../components/ha-svg-icon\";\nimport { mdiPlus } from \"@mdi/js\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property() public lovelace?: Lovelace;\n\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow?: boolean;\n\n  @property() private _unusedEntities: string[] = [];\n\n  @property() private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTableColumnContainer = {\n      icon: {\n        title: \"\",\n        type: \"icon\",\n        template: (_icon, entity: any) => html`\n          <state-badge\n            @click=${this._handleEntityClicked}\n            .hass=${this.hass!}\n            .stateObj=${entity.stateObj}\n          ></state-badge>\n        `,\n      },\n      name: {\n        title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity\"),\n        sortable: true,\n        filterable: true,\n        grows: true,\n        direction: \"asc\",\n        template: (name, entity: any) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            ${name}\n            ${narrow\n              ? html`\n                  <div class=\"secondary\">\n                    ${entity.stateObj.entity_id}\n                  </div>\n                `\n              : \"\"}\n          </div>\n        `,\n      },\n    };\n\n    if (narrow) {\n      return columns;\n    }\n\n    columns.entity_id = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity_id\"),\n      sortable: true,\n      filterable: true,\n      width: \"30%\",\n    };\n    columns.domain = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.domain\"),\n      sortable: true,\n      filterable: true,\n      width: \"15%\",\n    };\n    columns.last_changed = {\n      title: this.hass!.localize(\n        \"ui.panel.lovelace.unused_entities.last_changed\"\n      ),\n      type: \"numeric\",\n      sortable: true,\n      width: \"15%\",\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      ${!this.narrow\n        ? html`\n            <ha-card\n              header=\"${this.hass.localize(\n                \"ui.panel.lovelace.unused_entities.title\"\n              )}\"\n            >\n              <div class=\"card-content\">\n                ${this.hass.localize(\n                  \"ui.panel.lovelace.unused_entities.available_entities\"\n                )}\n                ${this.lovelace.mode === \"storage\"\n                  ? html`\n                      <br />${this.hass.localize(\n                        \"ui.panel.lovelace.unused_entities.select_to_add\"\n                      )}\n                    `\n                  : \"\"}\n              </div>\n            </ha-card>\n          `\n        : \"\"}\n      <ha-data-table\n        .columns=${this._columns(this.narrow!)}\n        .data=${this._unusedEntities.map((entity) => {\n          const stateObj = this.hass!.states[entity];\n          return {\n            icon: \"\",\n            entity_id: entity,\n            stateObj,\n            name: computeStateName(stateObj),\n            domain: computeDomain(entity),\n            last_changed: stateObj!.last_changed,\n          };\n        })}\n        .id=${\"entity_id\"}\n        selectable\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n\n      ${this._selectedEntities.length\n        ? html`\n            <mwc-fab\n              class=\"${classMap({\n                rtl: computeRTL(this.hass),\n              })}\"\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\n              @click=${this._addToLovelaceView}\n            >\n              <ha-svg-icon slot=\"icon\" path=${mdiPlus}></ha-svg-icon>\n            </mwc-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    const unusedEntities = computeUnusedEntities(this.hass, this._config!);\n    this._unusedEntities = [...unusedEntities].sort();\n  }\n\n  private _handleSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedEntities = ev.detail.value;\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = ((ev.target as HTMLElement).closest(\n      \".mdc-data-table__row\"\n    ) as any).rowId;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  private _addToLovelaceView(): void {\n    addEntitiesToLovelaceView(\n      this,\n      this.hass,\n      this._selectedEntities,\n      this.lovelace!.config,\n      this.lovelace!.saveConfig\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        display: flex;\n        flex-direction: column;\n      }\n      ha-card {\n        --ha-card-box-shadow: none;\n        --ha-card-border-radius: 0;\n      }\n      ha-data-table {\n        --data-table-border-width: 0;\n        flex-grow: 1;\n        margin-top: -20px;\n      }\n      mwc-fab {\n        position: absolute;\n        right: 16px;\n        bottom: 16px;\n        z-index: 1;\n      }\n      mwc-fab.rtl {\n        left: 16px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n"],"mappings":";AAoBA;AAgCA;;AAWA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AAnDA;;ACmCA;AACA;AACA;;AAIA;AAOA;AACA;AACA;;AAGA;;AAGA;;AAMA;;AAyBA;AACA;;AAKA;AAqBA;;AAGA;;;AAKA;AAGA;AAEA;AAIA;;;;;AAMA;AACA;AAWA;;AAEA;;;AAGA;;AAGA;AAGA;AAGA;;AAEA;;AAGA;AA9DA;;;;;;;;;;;;;;;;;;;;;;;;;AA7FA","sourceRoot":""}
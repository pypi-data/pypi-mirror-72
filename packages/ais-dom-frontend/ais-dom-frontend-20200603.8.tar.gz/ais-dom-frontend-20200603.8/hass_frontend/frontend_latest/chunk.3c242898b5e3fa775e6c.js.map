{"version":3,"file":"chunk.3c242898b5e3fa775e6c.js","sources":["webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack:///./src/components/ha-icon-input.ts","webpack:///./src/panels/lovelace/badges/hui-error-badge.ts","webpack:///./src/panels/lovelace/editor/view-editor/hui-view-editor.ts","webpack:///./src/panels/lovelace/editor/view-editor/hui-view-visibility-editor.ts","webpack:///./src/panels/lovelace/editor/view-editor/hui-dialog-edit-view.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function (node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function (node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public hass?: HomeAssistant;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-dropdown-menu\n        .label=${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`}\n        dynamic-align\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=${this.value}\n          attr-for-selected=\"theme\"\n          @iron-select=${this._changed}\n        >\n          <paper-item theme=\"remove\"\n            >${this.hass!.localize(\n              \"ui.panel.lovelace.editor.card.generic.no_theme\"\n            )}</paper-item\n          >\n          ${Object.keys(this.hass!.themes.themes)\n            .sort()\n            .map((theme) => {\n              return html` <paper-item theme=${theme}>${theme}</paper-item> `;\n            })}\n        </paper-listbox>\n      </paper-dropdown-menu>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-dropdown-menu {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.selected === \"\") {\n      return;\n    }\n    this.value = ev.target.selected === \"remove\" ? \"\" : ev.target.selected;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-input\")\nexport class HaIconInput extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .value=${this.value}\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        @value-changed=${this._valueChanged}\n        .disabled=${this.disabled}\n        auto-validate\n        .errorMessage=${this.errorMessage}\n        pattern=\"^\\\\S+:\\\\S+$\"\n      >\n        ${this.value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this.value || this.placeholder} slot=\"suffix\">\n              </ha-icon>\n            `\n          : \"\"}\n      </paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    this.value = ev.detail.value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: ev.detail.value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  static get styles() {\n    return css`\n      ha-icon {\n        position: relative;\n        bottom: 4px;\n      }\n    `;\n  }\n}\n","import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport \"../../../components/ha-label-badge\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceBadge } from \"../types\";\nimport { ErrorBadgeConfig } from \"./types\";\n\nexport const createErrorBadgeElement = (config) => {\n  const el = document.createElement(\"hui-error-badge\");\n  el.setConfig(config);\n  return el;\n};\n\nexport const createErrorBadgeConfig = (error) => ({\n  type: \"error\",\n  error,\n});\n\n@customElement(\"hui-error-badge\")\nexport class HuiErrorBadge extends LitElement implements LovelaceBadge {\n  public hass?: HomeAssistant;\n\n  @property() private _config?: ErrorBadgeConfig;\n\n  public setConfig(config: ErrorBadgeConfig): void {\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config) {\n      return html``;\n    }\n\n    return html`\n      <ha-label-badge\n        label=\"Error\"\n        icon=\"hass:alert\"\n        description=${this._config.error}\n      ></ha-label-badge>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        --ha-label-badge-color: var(--label-badge-red, #fce588);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-error-badge\": HuiErrorBadge;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { slugify } from \"../../../../common/string/slugify\";\nimport \"../../../../components/ha-switch\";\nimport \"../../../../components/ha-icon-input\";\nimport { LovelaceViewConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"../../components/hui-theme-select-editor\";\nimport { configElementStyle } from \"../config-elements/config-elements-style\";\nimport { EditorTarget } from \"../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"view-config-changed\": {\n      config: LovelaceViewConfig;\n    };\n  }\n}\n\n@customElement(\"hui-view-editor\")\nexport class HuiViewEditor extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public isNew!: boolean;\n\n  @property() private _config!: LovelaceViewConfig;\n\n  private _suggestedPath = false;\n\n  get _path(): string {\n    if (!this._config) {\n      return \"\";\n    }\n    return this._config.path || \"\";\n  }\n\n  get _title(): string {\n    if (!this._config) {\n      return \"\";\n    }\n    return this._config.title || \"\";\n  }\n\n  get _icon(): string {\n    if (!this._config) {\n      return \"\";\n    }\n    return this._config.icon || \"\";\n  }\n\n  get _theme(): string {\n    if (!this._config) {\n      return \"\";\n    }\n    return this._config.theme || \"Backend-selected\";\n  }\n\n  get _panel(): boolean {\n    if (!this._config) {\n      return false;\n    }\n    return this._config.panel || false;\n  }\n\n  set config(config: LovelaceViewConfig) {\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )}  (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._title}\n          .configValue=${\"title\"}\n          @value-changed=${this._valueChanged}\n          @blur=${this._handleTitleBlur}\n        ></paper-input>\n        <ha-icon-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.icon\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._icon}\n          .placeholder=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n        ></ha-icon-input>\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.url\"\n          )}  (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._path}\n          .configValue=${\"path\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <hui-theme-select-editor\n          .hass=${this.hass}\n          .value=${this._theme}\n          .configValue=${\"theme\"}\n          @value-changed=${this._valueChanged}\n        ></hui-theme-select-editor>\n        <ha-switch\n          .checked=${this._panel !== false}\n          .configValue=${\"panel\"}\n          @change=${this._valueChanged}\n          >${this.hass.localize(\n            \"ui.panel.lovelace.editor.view.panel_mode.title\"\n          )}</ha-switch\n        >\n        <span class=\"panel\"\n          >${this.hass.localize(\n            \"ui.panel.lovelace.editor.view.panel_mode.description\"\n          )}</span\n        >\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: Event): void {\n    const target = ev.currentTarget! as EditorTarget;\n\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n\n    let newConfig;\n\n    if (target.configValue) {\n      newConfig = {\n        ...this._config,\n        [target.configValue!]:\n          target.checked !== undefined ? target.checked : target.value,\n      };\n    }\n\n    fireEvent(this, \"view-config-changed\", { config: newConfig });\n  }\n\n  private _handleTitleBlur(ev) {\n    if (\n      !this.isNew ||\n      this._suggestedPath ||\n      this._config.path ||\n      !ev.currentTarget.value\n    ) {\n      return;\n    }\n\n    const config = { ...this._config, path: slugify(ev.currentTarget.value) };\n    fireEvent(this, \"view-config-changed\", { config });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .panel {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-view-editor\": HuiViewEditor;\n  }\n}\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { compare } from \"../../../../common/string/compare\";\nimport { HaSwitch } from \"../../../../components/ha-switch\";\nimport { LovelaceViewConfig, ShowViewConfig } from \"../../../../data/lovelace\";\nimport { fetchUsers, User } from \"../../../../data/user\";\nimport { HomeAssistant } from \"../../../../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"view-visibility-changed\": {\n      visible: ShowViewConfig[];\n    };\n  }\n}\n\n@customElement(\"hui-view-visibility-editor\")\nexport class HuiViewVisibilityEditor extends LitElement {\n  set config(config: LovelaceViewConfig) {\n    this._config = config;\n    this._visible =\n      this._config.visible === undefined ? true : this._config.visible;\n  }\n\n  @property() public hass!: HomeAssistant;\n\n  @property() public _config!: LovelaceViewConfig;\n\n  @property() private _users!: User[];\n\n  @property() private _visible!: boolean | ShowViewConfig[];\n\n  private _sortedUsers = memoizeOne((users: User[]) => {\n    return users.sort((a, b) => compare(a.name, b.name));\n  });\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n\n    fetchUsers(this.hass).then((users) => {\n      this._users = users.filter((user) => !user.system_generated);\n      fireEvent(this, \"iron-resize\");\n    });\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._users) {\n      return html``;\n    }\n\n    return html`\n      <p>\n        ${this.hass.localize(\n          \"ui.panel.lovelace.editor.edit_view.visibility.select_users\"\n        )}\n      </p>\n      ${this._sortedUsers(this._users).map(\n        (user) => html`\n          <paper-item>\n            <paper-item-body>${user.name}</paper-item-body>\n            <ha-switch\n              .userId=\"${user.id}\"\n              @change=${this.valChange}\n              .checked=${this.checkUser(user.id)}\n            ></ha-switch>\n          </paper-item>\n        `\n      )}\n    `;\n  }\n\n  protected checkUser(userId: string): boolean {\n    if (this._visible === undefined) {\n      return true;\n    }\n    if (typeof this._visible === \"boolean\") {\n      return this._visible as boolean;\n    }\n    return (this._visible as ShowViewConfig[]).some((u) => u.user === userId);\n  }\n\n  private valChange(ev: Event): void {\n    const userId = (ev.currentTarget as any).userId;\n    const checked = (ev.currentTarget as HaSwitch).checked;\n\n    let newVisible: ShowViewConfig[] = [];\n\n    if (typeof this._visible === \"boolean\") {\n      const lastValue = this._visible as boolean;\n      if (lastValue) {\n        newVisible = this._users.map((u) => {\n          return {\n            user: u.id,\n          };\n        });\n      }\n    } else {\n      newVisible = [...this._visible];\n    }\n\n    if (checked === true) {\n      const newEntry: ShowViewConfig = {\n        user: userId,\n      };\n      newVisible.push(newEntry);\n    } else {\n      newVisible = (newVisible as ShowViewConfig[]).filter(\n        (c) => c.user !== userId\n      );\n    }\n\n    // this removes users that doesn't exists in system but had view permissions\n    this._visible = newVisible.filter((c) =>\n      this._users.some((u) => u.id === c.user)\n    );\n\n    fireEvent(this, \"view-visibility-changed\", { visible: this._visible });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-view-visibility-editor\": HuiViewVisibilityEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"../../../../components/ha-icon-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport \"@polymer/paper-tabs/paper-tabs\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { navigate } from \"../../../../common/navigate\";\nimport \"../../../../components/dialog/ha-paper-dialog\";\nimport type { HaPaperDialog } from \"../../../../components/dialog/ha-paper-dialog\";\nimport type {\n  LovelaceBadgeConfig,\n  LovelaceCardConfig,\n  LovelaceViewConfig,\n} from \"../../../../data/lovelace\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"../../components/hui-entity-editor\";\nimport { addView, deleteView, replaceView } from \"../config-util\";\nimport \"../hui-badge-preview\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport {\n  EntitiesEditorEvent,\n  ViewEditEvent,\n  ViewVisibilityChangeEvent,\n} from \"../types\";\nimport \"./hui-view-editor\";\nimport \"./hui-view-visibility-editor\";\nimport { EditViewDialogParams } from \"./show-edit-view-dialog\";\n\n@customElement(\"hui-dialog-edit-view\")\nexport class HuiDialogEditView extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _params?: EditViewDialogParams;\n\n  @property() private _config?: LovelaceViewConfig;\n\n  @property() private _badges?: LovelaceBadgeConfig[];\n\n  @property() private _cards?: LovelaceCardConfig[];\n\n  @property() private _saving = false;\n\n  @property() private _curTab?: string;\n\n  private _curTabIndex = 0;\n\n  public async showDialog(params: EditViewDialogParams): Promise<void> {\n    // Wait till dialog is rendered.\n    this._params = params;\n\n    if (this._dialog == null) {\n      await this.updateComplete;\n    }\n\n    if (this._params.viewIndex === undefined) {\n      this._config = {};\n      this._badges = [];\n      this._cards = [];\n    } else {\n      const {\n        cards,\n        badges,\n        ...viewConfig\n      } = this._params.lovelace!.config.views[this._params.viewIndex];\n      this._config = viewConfig;\n      this._badges = badges ? processEditorEntities(badges) : [];\n      this._cards = cards;\n    }\n\n    this._dialog.open();\n  }\n\n  private get _dialog(): HaPaperDialog {\n    return this.shadowRoot!.querySelector(\"ha-paper-dialog\")!;\n  }\n\n  private get _viewConfigTitle(): string {\n    if (!this._config || !this._config.title) {\n      return this.hass!.localize(\"ui.panel.lovelace.editor.edit_view.header\");\n    }\n\n    return this.hass!.localize(\n      \"ui.panel.lovelace.editor.edit_view.header_name\",\n      \"name\",\n      this._config.title\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    let content;\n    switch (this._curTab) {\n      case \"tab-settings\":\n        content = html`\n          <hui-view-editor\n            .isNew=${this._params.viewIndex === undefined}\n            .hass=${this.hass}\n            .config=\"${this._config}\"\n            @view-config-changed=\"${this._viewConfigChanged}\"\n          ></hui-view-editor>\n        `;\n        break;\n      case \"tab-badges\":\n        content = html`\n          ${this._badges?.length\n            ? html`\n                <div class=\"preview-badges\">\n                  ${this._badges.map((badgeConfig) => {\n                    return html`\n                      <hui-badge-preview\n                        .hass=${this.hass}\n                        .config=${badgeConfig}\n                      ></hui-badge-preview>\n                    `;\n                  })}\n                </div>\n              `\n            : \"\"}\n          <hui-entity-editor\n            .hass=${this.hass}\n            .entities=\"${this._badges}\"\n            @entities-changed=\"${this._badgesChanged}\"\n          ></hui-entity-editor>\n        `;\n        break;\n      case \"tab-visibility\":\n        content = html`\n          <hui-view-visibility-editor\n            .hass=\"${this.hass}\"\n            .config=\"${this._config}\"\n            @view-visibility-changed=\"${this._viewVisibilityChanged}\"\n          ></hui-view-visibility-editor>\n        `;\n        break;\n      case \"tab-cards\":\n        content = html` Cards `;\n        break;\n    }\n    return html`\n      <ha-paper-dialog with-backdrop modal>\n        <h2>\n          ${this._viewConfigTitle}\n        </h2>\n        <paper-tabs\n          scrollable\n          hide-scroll-buttons\n          .selected=\"${this._curTabIndex}\"\n          @selected-item-changed=\"${this._handleTabSelected}\"\n        >\n          <paper-tab id=\"tab-settings\"\n            >${this.hass!.localize(\n              \"ui.panel.lovelace.editor.edit_view.tab_settings\"\n            )}</paper-tab\n          >\n          <paper-tab id=\"tab-badges\"\n            >${this.hass!.localize(\n              \"ui.panel.lovelace.editor.edit_view.tab_badges\"\n            )}</paper-tab\n          >\n          <paper-tab id=\"tab-visibility\"\n            >${this.hass!.localize(\n              \"ui.panel.lovelace.editor.edit_view.tab_visibility\"\n            )}</paper-tab\n          >\n        </paper-tabs>\n        <paper-dialog-scrollable> ${content} </paper-dialog-scrollable>\n        <div class=\"paper-dialog-buttons\">\n          ${this._params.viewIndex !== undefined\n            ? html`\n                <mwc-button class=\"warning\" @click=\"${this._deleteConfirm}\">\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.edit_view.delete\"\n                  )}\n                </mwc-button>\n              `\n            : \"\"}\n          <mwc-button @click=\"${this._closeDialog}\"\n            >${this.hass!.localize(\"ui.common.cancel\")}</mwc-button\n          >\n          <mwc-button\n            ?disabled=\"${!this._config || this._saving}\"\n            @click=\"${this._save}\"\n          >\n            <paper-spinner\n              ?active=\"${this._saving}\"\n              alt=\"Saving\"\n            ></paper-spinner>\n            ${this.hass!.localize(\"ui.common.save\")}</mwc-button\n          >\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private async _delete(): Promise<void> {\n    if (!this._params) {\n      return;\n    }\n    try {\n      await this._params.lovelace!.saveConfig(\n        deleteView(this._params.lovelace!.config, this._params.viewIndex!)\n      );\n      this._closeDialog();\n      navigate(this, `/${window.location.pathname.split(\"/\")[1]}`);\n    } catch (err) {\n      showAlertDialog(this, {\n        text: `Deleting failed: ${err.message}`,\n      });\n    }\n  }\n\n  private _deleteConfirm(): void {\n    showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        `ui.panel.lovelace.views.confirm_delete${\n          this._cards?.length ? `_existing_cards` : \"\"\n        }`\n      ),\n      text: this.hass!.localize(\n        `ui.panel.lovelace.views.confirm_delete${\n          this._cards?.length ? \"_existing_cards\" : \"\"\n        }_text`,\n        \"name\",\n        this._config?.title || \"Unnamed view\",\n        \"number\",\n        this._cards?.length || 0\n      ),\n      confirm: () => this._delete(),\n    });\n  }\n\n  private async _resizeDialog(): Promise<void> {\n    await this.updateComplete;\n    fireEvent(this._dialog as HTMLElement, \"iron-resize\");\n  }\n\n  private _closeDialog(): void {\n    this._curTabIndex = 0;\n    this._params = undefined;\n    this._config = {};\n    this._badges = [];\n    this._dialog.close();\n  }\n\n  private _handleTabSelected(ev: CustomEvent): void {\n    if (!ev.detail.value) {\n      return;\n    }\n    this._curTab = ev.detail.value.id;\n    this._resizeDialog();\n  }\n\n  private async _save(): Promise<void> {\n    if (!this._params || !this._config) {\n      return;\n    }\n    if (!this._isConfigChanged()) {\n      this._closeDialog();\n      return;\n    }\n\n    this._saving = true;\n\n    const viewConf: LovelaceViewConfig = {\n      ...this._config,\n      badges: this._badges,\n      cards: this._cards,\n    };\n\n    const lovelace = this._params.lovelace!;\n\n    try {\n      await lovelace.saveConfig(\n        this._creatingView\n          ? addView(lovelace.config, viewConf)\n          : replaceView(lovelace.config, this._params.viewIndex!, viewConf)\n      );\n      if (this._params.saveCallback) {\n        this._params.saveCallback(\n          this._params.viewIndex || lovelace.config.views.length,\n          viewConf\n        );\n      }\n      this._closeDialog();\n    } catch (err) {\n      showAlertDialog(this, {\n        text: `Saving failed: ${err.message}`,\n      });\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  private _viewConfigChanged(ev: ViewEditEvent): void {\n    if (ev.detail && ev.detail.config) {\n      this._config = ev.detail.config;\n    }\n  }\n\n  private _viewVisibilityChanged(\n    ev: HASSDomEvent<ViewVisibilityChangeEvent>\n  ): void {\n    if (ev.detail.visible && this._config) {\n      this._config.visible = ev.detail.visible;\n    }\n  }\n\n  private _badgesChanged(ev: EntitiesEditorEvent): void {\n    if (!this._badges || !this.hass || !ev.detail || !ev.detail.entities) {\n      return;\n    }\n    this._badges = processEditorEntities(ev.detail.entities);\n    this._resizeDialog();\n  }\n\n  private _isConfigChanged(): boolean {\n    return (\n      this._creatingView ||\n      JSON.stringify(this._config) !==\n        JSON.stringify(\n          this._params!.lovelace!.config.views[this._params!.viewIndex!]\n        )\n    );\n  }\n\n  private get _creatingView(): boolean {\n    return this._params!.viewIndex === undefined;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* overrule the ha-style-dialog max-height on small screens */\n          ha-paper-dialog {\n            max-height: 100%;\n            height: 100%;\n          }\n        }\n        @media all and (min-width: 660px) {\n          ha-paper-dialog {\n            width: 650px;\n          }\n        }\n        ha-paper-dialog {\n          max-width: 650px;\n        }\n        paper-tabs {\n          --paper-tabs-selection-bar-color: var(--primary-color);\n          text-transform: uppercase;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n        }\n        mwc-button paper-spinner {\n          width: 14px;\n          height: 14px;\n          margin-right: 20px;\n        }\n        mwc-button.warning {\n          margin-right: auto;\n        }\n        paper-spinner {\n          display: none;\n        }\n        paper-spinner[active] {\n          display: block;\n        }\n        paper-dialog-scrollable {\n          margin-top: 0;\n        }\n        .hidden {\n          display: none;\n        }\n        .error {\n          color: var(--error-color);\n          border-bottom: 1px solid var(--error-color);\n        }\n        .preview-badges {\n          display: flex;\n          justify-content: center;\n          margin: 12px 16px;\n          flex-wrap: wrap;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-edit-view\": HuiDialogEditView;\n  }\n}\n"],"mappings":";AAgBA;;ACWA;;;;;AAUA;;AAEA;;;AAGA;;AAIA;;;AA7BA;;;;AAAA;;ACUA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AAEA;;AAGA;;AA5BA;;;;;AAAA;;;;AC+BA;;AAPA;;;;AAXA;ACyDA;;;AAGA;AAKA;AACA;AACA;AACA;;;AAGA;AAKA;AACA;AACA;AACA;;;AAGA;AAKA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAKA;;;AArDA;;;;AAlDA;;ACmCA;;AAIA;;AAGA;;AAEA;AACA;AACA;;;;AAhBA;;;;AA9BA;;ACoFA;AACA;AACA;AACA;;AAGA;AAGA;;AAGA;;AAGA;AACA;;;;AAMA;;AAEA;AACA;AACA;;AAGA;;AAIA;AACA;AACA;;AAGA;;;AAQA;;;;;AAKA;AACA;;;AAGA;;;AAKA;;;AAKA;;;AAKA;;AAEA;AAEA;AACA;;AAKA;AACA;AACA;;;AAGA;AACA;;;AAGA;;;AAGA;;;;AAjKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sourceRoot":""}
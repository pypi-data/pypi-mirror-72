{"version":3,"file":"chunk.bccc5d9cfa0f9f2ce486.js","sources":["webpack:///./src/components/ha-card.ts","webpack:///./src/panels/config/ha-config-section.ts","webpack:///./src/components/map/ha-locations-editor.ts","webpack:///./src/panels/config/zone/ha-config-zone.ts"],"sourcesContent":["import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\n@customElement(\"ha-card\")\nclass HaCard extends LitElement {\n  @property() public header?: string;\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 2px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0 2px 2px 0 rgba(0, 0, 0, 0.14),\n          0 1px 5px 0 rgba(0, 0, 0, 0.12),\n          0 3px 1px -2px rgba(0, 0, 0, 0.2)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        padding: 24px 16px 16px;\n        display: block;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html` <div class=\"card-header\">${this.header}</div> `\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { css, customElement, html, LitElement, property } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: !this.isWide,\n            horizontal: this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        max-width: 400px;\n        margin-right: 40px;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n    `;\n  }\n}\n","import {\n  Circle,\n  DivIcon,\n  DragEndEvent,\n  LatLng,\n  Map,\n  Marker,\n  MarkerOptions,\n} from \"leaflet\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport {\n  LeafletModuleType,\n  setupLeafletMap,\n} from \"../../common/dom/setup-leaflet-map\";\nimport { defaultRadiusColor } from \"../../data/zone\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"location-updated\": { id: string; location: [number, number] };\n    \"radius-updated\": { id: string; radius: number };\n    \"marker-clicked\": { id: string };\n  }\n}\n\nexport interface MarkerLocation {\n  latitude: number;\n  longitude: number;\n  radius?: number;\n  name?: string;\n  id: string;\n  icon?: string;\n  radius_color?: string;\n  location_editable?: boolean;\n  radius_editable?: boolean;\n}\n\n@customElement(\"ha-locations-editor\")\nexport class HaLocationsEditor extends LitElement {\n  @property() public locations?: MarkerLocation[];\n\n  public fitZoom = 16;\n\n  // eslint-disable-next-line\n  private Leaflet?: LeafletModuleType;\n\n  // eslint-disable-next-line\n  private _leafletMap?: Map;\n\n  private _locationMarkers?: { [key: string]: Marker | Circle };\n\n  private _circles: { [key: string]: Circle } = {};\n\n  public fitMap(): void {\n    if (\n      !this._leafletMap ||\n      !this._locationMarkers ||\n      !Object.keys(this._locationMarkers).length\n    ) {\n      return;\n    }\n    const bounds = this.Leaflet!.latLngBounds(\n      Object.values(this._locationMarkers).map((item) => item.getLatLng())\n    );\n    this._leafletMap.fitBounds(bounds.pad(0.5));\n  }\n\n  public fitMarker(id: string): void {\n    if (!this._leafletMap || !this._locationMarkers) {\n      return;\n    }\n    const marker = this._locationMarkers[id];\n    if (!marker) {\n      return;\n    }\n    if ((marker as Circle).getBounds) {\n      this._leafletMap.fitBounds((marker as Circle).getBounds());\n      (marker as Circle).bringToFront();\n    } else {\n      const circle = this._circles[id];\n      if (circle) {\n        this._leafletMap.fitBounds(circle.getBounds());\n      } else {\n        this._leafletMap.setView(marker.getLatLng(), this.fitZoom);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html` <div id=\"map\"></div> `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._initMap();\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    // Still loading.\n    if (!this.Leaflet) {\n      return;\n    }\n\n    if (changedProps.has(\"locations\")) {\n      this._updateMarkers();\n    }\n  }\n\n  private get _mapEl(): HTMLDivElement {\n    return this.shadowRoot!.querySelector(\"div\")!;\n  }\n\n  private async _initMap(): Promise<void> {\n    [this._leafletMap, this.Leaflet] = await setupLeafletMap(\n      this._mapEl,\n      false,\n      true\n    );\n    this._updateMarkers();\n    this.fitMap();\n    this._leafletMap.invalidateSize();\n  }\n\n  private _updateLocation(ev: DragEndEvent) {\n    const marker = ev.target;\n    const latlng: LatLng = marker.getLatLng();\n    let longitude: number = latlng.lng;\n    if (Math.abs(longitude) > 180.0) {\n      // Normalize longitude if map provides values beyond -180 to +180 degrees.\n      longitude = (((longitude % 360.0) + 540.0) % 360.0) - 180.0;\n    }\n    const location: [number, number] = [latlng.lat, longitude];\n    fireEvent(\n      this,\n      \"location-updated\",\n      { id: marker.id, location },\n      { bubbles: false }\n    );\n  }\n\n  private _updateRadius(ev: DragEndEvent) {\n    const marker = ev.target;\n    const circle = this._locationMarkers![marker.id] as Circle;\n    fireEvent(\n      this,\n      \"radius-updated\",\n      { id: marker.id, radius: circle.getRadius() },\n      { bubbles: false }\n    );\n  }\n\n  private _markerClicked(ev: DragEndEvent) {\n    const marker = ev.target;\n    fireEvent(this, \"marker-clicked\", { id: marker.id }, { bubbles: false });\n  }\n\n  private _updateMarkers(): void {\n    if (this._locationMarkers) {\n      Object.values(this._locationMarkers).forEach((marker) => {\n        marker.remove();\n      });\n      this._locationMarkers = undefined;\n\n      Object.values(this._circles).forEach((circle) => circle.remove());\n      this._circles = {};\n    }\n\n    if (!this.locations || !this.locations.length) {\n      return;\n    }\n\n    this._locationMarkers = {};\n\n    this.locations.forEach((location: MarkerLocation) => {\n      let icon: DivIcon | undefined;\n      if (location.icon) {\n        // create icon\n        const el = document.createElement(\"div\");\n        el.className = \"named-icon\";\n        if (location.name) {\n          el.innerText = location.name;\n        }\n        const iconEl = document.createElement(\"ha-icon\");\n        iconEl.setAttribute(\"icon\", location.icon);\n        el.prepend(iconEl);\n\n        icon = this.Leaflet!.divIcon({\n          html: el.outerHTML,\n          iconSize: [24, 24],\n          className: \"light\",\n        });\n      }\n      if (location.radius) {\n        const circle = this.Leaflet!.circle(\n          [location.latitude, location.longitude],\n          {\n            color: location.radius_color || defaultRadiusColor,\n            radius: location.radius,\n          }\n        );\n        circle.addTo(this._leafletMap!);\n        if (location.radius_editable || location.location_editable) {\n          // @ts-ignore\n          circle.editing.enable();\n          // @ts-ignore\n          const moveMarker = circle.editing._moveMarker;\n          // @ts-ignore\n          const resizeMarker = circle.editing._resizeMarkers[0];\n          if (icon) {\n            moveMarker.setIcon(icon);\n          }\n          resizeMarker.id = moveMarker.id = location.id;\n          moveMarker\n            .addEventListener(\n              \"dragend\",\n              // @ts-ignore\n              (ev: DragEndEvent) => this._updateLocation(ev)\n            )\n            .addEventListener(\n              \"click\",\n              // @ts-ignore\n              (ev: MouseEvent) => this._markerClicked(ev)\n            );\n          if (location.radius_editable) {\n            resizeMarker.addEventListener(\n              \"dragend\",\n              // @ts-ignore\n              (ev: DragEndEvent) => this._updateRadius(ev)\n            );\n          } else {\n            resizeMarker.remove();\n          }\n          this._locationMarkers![location.id] = circle;\n        } else {\n          this._circles[location.id] = circle;\n        }\n      }\n      if (\n        !location.radius ||\n        (!location.radius_editable && !location.location_editable)\n      ) {\n        const options: MarkerOptions = {\n          title: location.name,\n        };\n\n        if (icon) {\n          options.icon = icon;\n        }\n\n        const marker = this.Leaflet!.marker(\n          [location.latitude, location.longitude],\n          options\n        )\n          .addEventListener(\n            \"dragend\",\n            // @ts-ignore\n            (ev: DragEndEvent) => this._updateLocation(ev)\n          )\n          .addEventListener(\n            \"click\",\n            // @ts-ignore\n            (ev: MouseEvent) => this._markerClicked(ev)\n          )\n          .addTo(this._leafletMap);\n        marker.id = location.id;\n\n        this._locationMarkers![location.id] = marker;\n      }\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: block;\n        height: 300px;\n      }\n      #map {\n        height: 100%;\n      }\n      .light {\n        color: #000000;\n      }\n      .leaflet-marker-draggable {\n        cursor: move !important;\n      }\n      .leaflet-edit-resize {\n        border-radius: 50%;\n        cursor: nesw-resize !important;\n      }\n      .named-icon {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        text-align: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-locations-editor\": HaLocationsEditor;\n  }\n}\n","import \"@material/mwc-fab\";\nimport \"@material/mwc-icon-button\";\nimport { mdiPencil, mdiPencilOff, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { ifDefined } from \"lit-html/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { navigate } from \"../../../common/navigate\";\nimport { compare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/map/ha-locations-editor\";\nimport type {\n  HaLocationsEditor,\n  MarkerLocation,\n} from \"../../../components/map/ha-locations-editor\";\nimport { saveCoreConfig } from \"../../../data/core\";\nimport { subscribeEntityRegistry } from \"../../../data/entity_registry\";\nimport {\n  createZone,\n  defaultRadiusColor,\n  deleteZone,\n  fetchZones,\n  homeRadiusColor,\n  passiveRadiusColor,\n  updateZone,\n  Zone,\n  ZoneMutableParams,\n} from \"../../../data/zone\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showZoneDetailDialog } from \"./show-dialog-zone-detail\";\n\n@customElement(\"ha-config-zone\")\nexport class HaConfigZone extends SubscribeMixin(LitElement) {\n  @property() public hass!: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow?: boolean;\n\n  @property() public route!: Route;\n\n  @property() private _storageItems?: Zone[];\n\n  @property() private _stateItems?: HassEntity[];\n\n  @property() private _activeEntry = \"\";\n\n  @property() private _canEditCore = false;\n\n  @query(\"ha-locations-editor\") private _map?: HaLocationsEditor;\n\n  private _regEntities: string[] = [];\n\n  private _getZones = memoizeOne(\n    (storageItems: Zone[], stateItems: HassEntity[]): MarkerLocation[] => {\n      const stateLocations: MarkerLocation[] = stateItems.map((state) => {\n        return {\n          id: state.entity_id,\n          icon: state.attributes.icon,\n          name: state.attributes.friendly_name || state.entity_id,\n          latitude: state.attributes.latitude,\n          longitude: state.attributes.longitude,\n          radius: state.attributes.radius,\n          radius_color:\n            state.entity_id === \"zone.home\"\n              ? homeRadiusColor\n              : state.attributes.passive\n              ? passiveRadiusColor\n              : defaultRadiusColor,\n          location_editable:\n            state.entity_id === \"zone.home\" && this._canEditCore,\n          radius_editable: false,\n        };\n      });\n      const storageLocations: MarkerLocation[] = storageItems.map((zone) => {\n        return {\n          ...zone,\n          radius_color: zone.passive ? passiveRadiusColor : defaultRadiusColor,\n          location_editable: true,\n          radius_editable: true,\n        };\n      });\n      return storageLocations.concat(stateLocations);\n    }\n  );\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._regEntities = entities.map(\n          (registryEntry) => registryEntry.entity_id\n        );\n        this._filterStates();\n      }),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      this._storageItems === undefined ||\n      this._stateItems === undefined\n    ) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n    const hass = this.hass;\n    const listBox =\n      this._storageItems.length === 0 && this._stateItems.length === 0\n        ? html`\n            <div class=\"empty\">\n              ${hass.localize(\"ui.panel.config.zone.no_zones_created_yet\")}\n              <br />\n              <mwc-button @click=${this._createZone}>\n                ${hass.localize(\"ui.panel.config.zone.create_zone\")}</mwc-button\n              >\n            </div>\n          `\n        : html`\n            <paper-listbox\n              attr-for-selected=\"data-id\"\n              .selected=${this._activeEntry || \"\"}\n            >\n              ${this._storageItems.map((entry) => {\n                return html`\n                  <paper-icon-item\n                    data-id=${entry.id}\n                    @click=${this._itemClicked}\n                    .entry=${entry}\n                  >\n                    <ha-icon .icon=${entry.icon} slot=\"item-icon\"></ha-icon>\n                    <paper-item-body>\n                      ${entry.name}\n                    </paper-item-body>\n                    ${!this.narrow\n                      ? html`\n                          <mwc-icon-button\n                            .entry=${entry}\n                            @click=${this._openEditEntry}\n                          >\n                            <ha-svg-icon .path=${mdiPencil}></ha-svg-icon>\n                          </mwc-icon-button>\n                        `\n                      : \"\"}\n                  </paper-icon-item>\n                `;\n              })}\n              ${this._stateItems.map((state) => {\n                return html`\n                  <paper-icon-item\n                    data-id=${state.entity_id}\n                    @click=${this._stateItemClicked}\n                  >\n                    <ha-icon .icon=${state.attributes.icon} slot=\"item-icon\">\n                    </ha-icon>\n                    <paper-item-body>\n                      ${state.attributes.friendly_name || state.entity_id}\n                    </paper-item-body>\n                    <div style=\"display:inline-block\">\n                      <mwc-icon-button\n                        .entityId=${state.entity_id}\n                        @click=${this._openCoreConfig}\n                        disabled=${ifDefined(\n                          state.entity_id === \"zone.home\" &&\n                            this.narrow &&\n                            this._canEditCore\n                            ? undefined\n                            : true\n                        )}\n                      >\n                        <ha-svg-icon\n                          .path=${state.entity_id === \"zone.home\" &&\n                          this.narrow &&\n                          this._canEditCore\n                            ? mdiPencil\n                            : mdiPencilOff}\n                        ></ha-svg-icon>\n                      </mwc-icon-button>\n                      <paper-tooltip position=\"left\">\n                        ${state.entity_id === \"zone.home\"\n                          ? this.hass.localize(\n                              `ui.panel.config.zone.${\n                                this.narrow\n                                  ? \"edit_home_zone_narrow\"\n                                  : \"edit_home_zone\"\n                              }`\n                            )\n                          : this.hass.localize(\n                              \"ui.panel.config.zone.configured_in_yaml\"\n                            )}\n                      </paper-tooltip>\n                    </div>\n                  </paper-icon-item>\n                `;\n              })}\n            </paper-listbox>\n          `;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        back-path=\"/config\"\n        .tabs=${configSections.persons}\n      >\n        ${this.narrow\n          ? html`\n              <ha-config-section .isWide=${this.isWide}>\n                <span slot=\"introduction\">\n                  ${hass.localize(\"ui.panel.config.zone.introduction\")}\n                </span>\n                <ha-card>${listBox}</ha-card>\n              </ha-config-section>\n            `\n          : \"\"}\n        ${!this.narrow\n          ? html`\n              <div class=\"flex\">\n                <ha-locations-editor\n                  .locations=${this._getZones(\n                    this._storageItems,\n                    this._stateItems\n                  )}\n                  @location-updated=${this._locationUpdated}\n                  @radius-updated=${this._radiusUpdated}\n                  @marker-clicked=${this._markerClicked}\n                ></ha-locations-editor>\n                <div class=\"overflow\">\n                  ${listBox}\n                </div>\n              </div>\n            `\n          : \"\"}\n      </hass-tabs-subpage>\n\n      <mwc-fab\n        ?is-wide=${this.isWide}\n        ?narrow=${this.narrow}\n        title=\"${hass.localize(\"ui.panel.config.zone.add_zone\")}\"\n        @click=${this._createZone}\n      >\n        <ha-svg-icon slot=\"icon\" path=${mdiPlus}></ha-svg-icon>\n      </mwc-fab>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._canEditCore =\n      Boolean(this.hass.user?.is_admin) &&\n      [\"storage\", \"default\"].includes(this.hass.config.config_source);\n    this._fetchData();\n    if (this.route.path === \"/new\") {\n      navigate(this, \"/config/zone\", true);\n      this._createZone();\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (oldHass && this._stateItems) {\n      this._getStates(oldHass);\n    }\n  }\n\n  private async _fetchData() {\n    this._storageItems = (await fetchZones(this.hass!)).sort((ent1, ent2) =>\n      compare(ent1.name, ent2.name)\n    );\n    this._getStates();\n  }\n\n  private _getStates(oldHass?: HomeAssistant) {\n    let changed = false;\n    const tempStates = Object.values(this.hass!.states).filter((entity) => {\n      if (computeStateDomain(entity) !== \"zone\") {\n        return false;\n      }\n      if (oldHass?.states[entity.entity_id] !== entity) {\n        changed = true;\n      }\n      if (this._regEntities.includes(entity.entity_id)) {\n        return false;\n      }\n      return true;\n    });\n\n    if (changed) {\n      this._stateItems = tempStates;\n    }\n  }\n\n  private _filterStates() {\n    if (!this._stateItems) {\n      return;\n    }\n    const tempStates = this._stateItems.filter(\n      (entity) => !this._regEntities.includes(entity.entity_id)\n    );\n    if (tempStates.length !== this._stateItems.length) {\n      this._stateItems = tempStates;\n    }\n  }\n\n  private async _locationUpdated(ev: CustomEvent) {\n    this._activeEntry = ev.detail.id;\n    if (ev.detail.id === \"zone.home\" && this._canEditCore) {\n      await saveCoreConfig(this.hass, {\n        latitude: ev.detail.location[0],\n        longitude: ev.detail.location[1],\n      });\n      return;\n    }\n    const entry = this._storageItems!.find((item) => item.id === ev.detail.id);\n    if (!entry) {\n      return;\n    }\n    this._updateEntry(entry, {\n      latitude: ev.detail.location[0],\n      longitude: ev.detail.location[1],\n    });\n  }\n\n  private _radiusUpdated(ev: CustomEvent) {\n    this._activeEntry = ev.detail.id;\n    const entry = this._storageItems!.find((item) => item.id === ev.detail.id);\n    if (!entry) {\n      return;\n    }\n    this._updateEntry(entry, {\n      radius: ev.detail.radius,\n    });\n  }\n\n  private _markerClicked(ev: CustomEvent) {\n    this._activeEntry = ev.detail.id;\n  }\n\n  private _createZone() {\n    this._openDialog();\n  }\n\n  private _itemClicked(ev: Event) {\n    if (this.narrow) {\n      this._openEditEntry(ev);\n      return;\n    }\n    const entry: Zone = (ev.currentTarget! as any).entry;\n    this._zoomZone(entry.id);\n  }\n\n  private _stateItemClicked(ev: Event) {\n    const entityId = (ev.currentTarget! as HTMLElement).getAttribute(\n      \"data-id\"\n    )!;\n    this._zoomZone(entityId);\n  }\n\n  private _zoomZone(id: string) {\n    this._map?.fitMarker(id);\n  }\n\n  private _openEditEntry(ev: Event) {\n    const entry: Zone = (ev.currentTarget! as any).entry;\n    this._openDialog(entry);\n  }\n\n  private async _openCoreConfig(ev: Event) {\n    const entityId: string = (ev.currentTarget! as any).entityId;\n    if (entityId !== \"zone.home\" || !this.narrow || !this._canEditCore) {\n      return;\n    }\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.zone.go_to_core_config\"),\n        text: this.hass.localize(\"ui.panel.config.zone.home_zone_core_config\"),\n        confirmText: this.hass!.localize(\"ui.common.yes\"),\n        dismissText: this.hass!.localize(\"ui.common.no\"),\n      }))\n    ) {\n      return;\n    }\n    navigate(this, \"/config/core\");\n  }\n\n  private async _createEntry(values: ZoneMutableParams) {\n    const created = await createZone(this.hass!, values);\n    this._storageItems = this._storageItems!.concat(\n      created\n    ).sort((ent1, ent2) => compare(ent1.name, ent2.name));\n    if (this.narrow) {\n      return;\n    }\n    await this.updateComplete;\n    this._activeEntry = created.id;\n    this._map?.fitMarker(created.id);\n  }\n\n  private async _updateEntry(\n    entry: Zone,\n    values: Partial<ZoneMutableParams>,\n    fitMap = false\n  ) {\n    const updated = await updateZone(this.hass!, entry!.id, values);\n    this._storageItems = this._storageItems!.map((ent) =>\n      ent === entry ? updated : ent\n    );\n    if (this.narrow || !fitMap) {\n      return;\n    }\n    await this.updateComplete;\n    this._activeEntry = entry.id;\n    this._map?.fitMarker(entry.id);\n  }\n\n  private async _removeEntry(entry: Zone) {\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass!.localize(\"ui.panel.config.zone.confirm_delete\"),\n        text: this.hass!.localize(\"ui.panel.config.zone.confirm_delete2\"),\n        dismissText: this.hass!.localize(\"ui.common.no\"),\n        confirmText: this.hass!.localize(\"ui.common.yes\"),\n      }))\n    ) {\n      return false;\n    }\n\n    try {\n      await deleteZone(this.hass!, entry!.id);\n      this._storageItems = this._storageItems!.filter((ent) => ent !== entry);\n      if (!this.narrow) {\n        this._map?.fitMap();\n      }\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  private async _openDialog(entry?: Zone) {\n    showZoneDetailDialog(this, {\n      entry,\n      createEntry: (values) => this._createEntry(values),\n      updateEntry: entry\n        ? (values) => this._updateEntry(entry, values, true)\n        : undefined,\n      removeEntry: entry ? () => this._removeEntry(entry) : undefined,\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      hass-loading-screen {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n      }\n      a {\n        color: var(--primary-color);\n      }\n      ha-card {\n        max-width: 600px;\n        margin: 16px auto;\n        overflow: hidden;\n      }\n      ha-icon,\n      mwc-icon-button:not([disabled]) {\n        color: var(--secondary-text-color);\n      }\n      mwc-icon-button {\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      .empty {\n        text-align: center;\n        padding: 8px;\n      }\n      .flex {\n        display: flex;\n        height: 100%;\n      }\n      .overflow {\n        height: 100%;\n        overflow: auto;\n      }\n      ha-locations-editor {\n        flex-grow: 1;\n        height: 100%;\n      }\n      .flex paper-listbox,\n      .flex .empty {\n        border-left: 1px solid var(--divider-color);\n        width: 250px;\n        min-height: 100%;\n        box-sizing: border-box;\n      }\n      paper-icon-item {\n        padding-top: 4px;\n        padding-bottom: 4px;\n      }\n      .overflow paper-icon-item:last-child {\n        margin-bottom: 80px;\n      }\n      paper-icon-item.iron-selected:before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        pointer-events: none;\n        content: \"\";\n        background-color: var(--sidebar-selected-icon-color);\n        opacity: 0.12;\n        transition: opacity 15ms linear;\n        will-change: opacity;\n      }\n      ha-card {\n        margin-bottom: 100px;\n      }\n      ha-card paper-item {\n        cursor: pointer;\n      }\n      mwc-fab {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n        z-index: 1;\n      }\n      mwc-fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      mwc-fab[narrow] {\n        bottom: 84px;\n      }\n    `;\n  }\n}\n"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AAEA;;AArDA;;ACDA;;;;AAMA;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AC4CA;;ACoFA;;AAEA;AACA;;;AAIA;;;AAGA;;AAEA;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAGA;AACA;;AAEA;;;;;AAOA;;AAGA;AACA;;AAEA;;;AAGA;;;;AAIA;AACA;AACA;;;AASA;;;;AAQA;;;;;;AAmBA;;AAEA;AACA;AACA;;AAEA;;AAEA;AAEA;;AAEA;;AAEA;;AAGA;AACA;;;AAIA;AAIA;AACA;AACA;;;AAGA;;;;;;;AAQA;AACA;AACA;AACA;;AAEA;;AAjNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sourceRoot":""}
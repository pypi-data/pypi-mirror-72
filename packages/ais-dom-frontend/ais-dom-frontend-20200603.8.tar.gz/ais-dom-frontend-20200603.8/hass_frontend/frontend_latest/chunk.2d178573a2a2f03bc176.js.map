{"version":3,"file":"chunk.2d178573a2a2f03bc176.js","sources":["webpack:///./src/common/entity/compute_state_name.ts","webpack:///./node_modules/@polymer/iron-image/iron-image.js","webpack:///./src/panels/map/ha-entity-marker.js","webpack:///./src/panels/map/ha-panel-map.js"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeObjectId } from \"./compute_object_id\";\n\nexport const computeStateName = (stateObj: HassEntity): string => {\n  return stateObj.attributes.friendly_name === undefined\n    ? computeObjectId(stateObj.entity_id).replace(/_/g, \" \")\n    : stateObj.attributes.friendly_name || \"\";\n};\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {resolveUrl} from '@polymer/polymer/lib/utils/resolve-url.js';\n\n/**\n`iron-image` is an element for displaying an image that provides useful sizing and\npreloading options not found on the standard `<img>` tag.\n\nThe `sizing` option allows the image to be either cropped (`cover`) or\nletterboxed (`contain`) to fill a fixed user-size placed on the element.\n\nThe `preload` option prevents the browser from rendering the image until the\nimage is fully loaded.  In the interim, either the element's CSS `background-color`\ncan be be used as the placeholder, or the `placeholder` property can be\nset to a URL (preferably a data-URI, for instant rendering) for an\nplaceholder image.\n\nThe `fade` option (only valid when `preload` is set) will cause the placeholder\nimage/color to be faded out once the image is rendered.\n\nExamples:\n\n  Basically identical to `<img src=\"...\">` tag:\n\n    <iron-image src=\"http://lorempixel.com/400/400\"></iron-image>\n\n  Will letterbox the image to fit:\n\n    <iron-image style=\"width:400px; height:400px;\" sizing=\"contain\"\n      src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will crop the image to fit:\n\n    <iron-image style=\"width:400px; height:400px;\" sizing=\"cover\"\n      src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will show light-gray background until the image loads:\n\n    <iron-image style=\"width:400px; height:400px; background-color: lightgray;\"\n      sizing=\"cover\" preload src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will show a base-64 encoded placeholder image until the image loads:\n\n    <iron-image style=\"width:400px; height:400px;\" placeholder=\"data:image/gif;base64,...\"\n      sizing=\"cover\" preload src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will fade the light-gray background out once the image is loaded:\n\n    <iron-image style=\"width:400px; height:400px; background-color: lightgray;\"\n      sizing=\"cover\" preload fade src=\"http://lorempixel.com/600/400\"></iron-image>\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-image-placeholder` | Mixin applied to #placeholder | `{}`\n`--iron-image-width` | Sets the width of the wrapped image | `auto`\n`--iron-image-height` | Sets the height of the wrapped image | `auto`\n\n@group Iron Elements\n@element iron-image\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        overflow: hidden;\n        position: relative;\n      }\n\n      #baseURIAnchor {\n        display: none;\n      }\n\n      #sizedImgDiv {\n        position: absolute;\n        top: 0px;\n        right: 0px;\n        bottom: 0px;\n        left: 0px;\n\n        display: none;\n      }\n\n      #img {\n        display: block;\n        width: var(--iron-image-width, auto);\n        height: var(--iron-image-height, auto);\n      }\n\n      :host([sizing]) #sizedImgDiv {\n        display: block;\n      }\n\n      :host([sizing]) #img {\n        display: none;\n      }\n\n      #placeholder {\n        position: absolute;\n        top: 0px;\n        right: 0px;\n        bottom: 0px;\n        left: 0px;\n\n        background-color: inherit;\n        opacity: 1;\n\n        @apply --iron-image-placeholder;\n      }\n\n      #placeholder.faded-out {\n        transition: opacity 0.5s linear;\n        opacity: 0;\n      }\n    </style>\n\n    <a id=\"baseURIAnchor\" href=\"#\"></a>\n    <div id=\"sizedImgDiv\" role=\"img\" hidden$=\"[[_computeImgDivHidden(sizing)]]\" aria-hidden$=\"[[_computeImgDivARIAHidden(alt)]]\" aria-label$=\"[[_computeImgDivARIALabel(alt, src)]]\"></div>\n    <img id=\"img\" alt$=\"[[alt]]\" hidden$=\"[[_computeImgHidden(sizing)]]\" crossorigin$=\"[[crossorigin]]\" on-load=\"_imgOnLoad\" on-error=\"_imgOnError\">\n    <div id=\"placeholder\" hidden$=\"[[_computePlaceholderHidden(preload, fade, loading, loaded)]]\" class$=\"[[_computePlaceholderClassName(preload, fade, loading, loaded)]]\"></div>\n`,\n\n  is: 'iron-image',\n\n  properties: {\n    /**\n     * The URL of an image.\n     */\n    src: {type: String, value: ''},\n\n    /**\n     * A short text alternative for the image.\n     */\n    alt: {type: String, value: null},\n\n    /**\n     * CORS enabled images support:\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\n     */\n    crossorigin: {type: String, value: null},\n\n    /**\n     * When true, the image is prevented from loading and any placeholder is\n     * shown.  This may be useful when a binding to the src property is known to\n     * be invalid, to prevent 404 requests.\n     */\n    preventLoad: {type: Boolean, value: false},\n\n    /**\n     * Sets a sizing option for the image.  Valid values are `contain` (full\n     * aspect ratio of the image is contained within the element and\n     * letterboxed) or `cover` (image is cropped in order to fully cover the\n     * bounds of the element), or `null` (default: image takes natural size).\n     */\n    sizing: {type: String, value: null, reflectToAttribute: true},\n\n    /**\n     * When a sizing option is used (`cover` or `contain`), this determines\n     * how the image is aligned within the element bounds.\n     */\n    position: {type: String, value: 'center'},\n\n    /**\n     * When `true`, any change to the `src` property will cause the\n     * `placeholder` image to be shown until the new image has loaded.\n     */\n    preload: {type: Boolean, value: false},\n\n    /**\n     * This image will be used as a background/placeholder until the src image\n     * has loaded.  Use of a data-URI for placeholder is encouraged for instant\n     * rendering.\n     */\n    placeholder: {type: String, value: null, observer: '_placeholderChanged'},\n\n    /**\n     * When `preload` is true, setting `fade` to true will cause the image to\n     * fade into place.\n     */\n    fade: {type: Boolean, value: false},\n\n    /**\n     * Read-only value that is true when the image is loaded.\n     */\n    loaded: {notify: true, readOnly: true, type: Boolean, value: false},\n\n    /**\n     * Read-only value that tracks the loading state of the image when the\n     * `preload` option is used.\n     */\n    loading: {notify: true, readOnly: true, type: Boolean, value: false},\n\n    /**\n     * Read-only value that indicates that the last set `src` failed to load.\n     */\n    error: {notify: true, readOnly: true, type: Boolean, value: false},\n\n    /**\n     * Can be used to set the width of image (e.g. via binding); size may also\n     * be set via CSS.\n     */\n    width: {observer: '_widthChanged', type: Number, value: null},\n\n    /**\n     * Can be used to set the height of image (e.g. via binding); size may also\n     * be set via CSS.\n     *\n     * @attribute height\n     * @type number\n     * @default null\n     */\n    height: {observer: '_heightChanged', type: Number, value: null},\n  },\n\n  observers: [\n    '_transformChanged(sizing, position)',\n    '_loadStateObserver(src, preventLoad)'\n  ],\n\n  created: function() {\n    this._resolvedSrc = '';\n  },\n\n  _imgOnLoad: function() {\n    if (this.$.img.src !== this._resolveSrc(this.src)) {\n      return;\n    }\n\n    this._setLoading(false);\n    this._setLoaded(true);\n    this._setError(false);\n  },\n\n  _imgOnError: function() {\n    if (this.$.img.src !== this._resolveSrc(this.src)) {\n      return;\n    }\n\n    this.$.img.removeAttribute('src');\n    this.$.sizedImgDiv.style.backgroundImage = '';\n\n    this._setLoading(false);\n    this._setLoaded(false);\n    this._setError(true);\n  },\n\n  _computePlaceholderHidden: function() {\n    return !this.preload || (!this.fade && !this.loading && this.loaded);\n  },\n\n  _computePlaceholderClassName: function() {\n    return (this.preload && this.fade && !this.loading && this.loaded) ?\n        'faded-out' :\n        '';\n  },\n\n  _computeImgDivHidden: function() {\n    return !this.sizing;\n  },\n\n  _computeImgDivARIAHidden: function() {\n    return this.alt === '' ? 'true' : undefined;\n  },\n\n  _computeImgDivARIALabel: function() {\n    if (this.alt !== null) {\n      return this.alt;\n    }\n\n    // Polymer.ResolveUrl.resolveUrl will resolve '' relative to a URL x to\n    // that URL x, but '' is the default for src.\n    if (this.src === '') {\n      return '';\n    }\n\n    // NOTE: Use of `URL` was removed here because IE11 doesn't support\n    // constructing it. If this ends up being problematic, we should\n    // consider reverting and adding the URL polyfill as a dev dependency.\n    var resolved = this._resolveSrc(this.src);\n    // Remove query parts, get file name.\n    return resolved.replace(/[?|#].*/g, '').split('/').pop();\n  },\n\n  _computeImgHidden: function() {\n    return !!this.sizing;\n  },\n\n  _widthChanged: function() {\n    this.style.width = isNaN(this.width) ? this.width : this.width + 'px';\n  },\n\n  _heightChanged: function() {\n    this.style.height = isNaN(this.height) ? this.height : this.height + 'px';\n  },\n\n  _loadStateObserver: function(src, preventLoad) {\n    var newResolvedSrc = this._resolveSrc(src);\n    if (newResolvedSrc === this._resolvedSrc) {\n      return;\n    }\n\n    this._resolvedSrc = '';\n    this.$.img.removeAttribute('src');\n    this.$.sizedImgDiv.style.backgroundImage = '';\n\n    if (src === '' || preventLoad) {\n      this._setLoading(false);\n      this._setLoaded(false);\n      this._setError(false);\n    } else {\n      this._resolvedSrc = newResolvedSrc;\n      this.$.img.src = this._resolvedSrc;\n      this.$.sizedImgDiv.style.backgroundImage =\n          'url(\"' + this._resolvedSrc + '\")';\n\n      this._setLoading(true);\n      this._setLoaded(false);\n      this._setError(false);\n    }\n  },\n\n  _placeholderChanged: function() {\n    this.$.placeholder.style.backgroundImage =\n        this.placeholder ? 'url(\"' + this.placeholder + '\")' : '';\n  },\n\n  _transformChanged: function() {\n    var sizedImgDivStyle = this.$.sizedImgDiv.style;\n    var placeholderStyle = this.$.placeholder.style;\n\n    sizedImgDivStyle.backgroundSize = placeholderStyle.backgroundSize =\n        this.sizing;\n\n    sizedImgDivStyle.backgroundPosition = placeholderStyle.backgroundPosition =\n        this.sizing ? this.position : '';\n\n    sizedImgDivStyle.backgroundRepeat = placeholderStyle.backgroundRepeat =\n        this.sizing ? 'no-repeat' : '';\n  },\n\n  _resolveSrc: function(testSrc) {\n    var resolved = resolveUrl(testSrc, this.$.baseURIAnchor.href);\n    // NOTE: Use of `URL` was removed here because IE11 doesn't support\n    // constructing it. If this ends up being problematic, we should\n    // consider reverting and adding the URL polyfill as a dev dependency.\n    if (resolved.length >= 2 && resolved[0] === '/' && resolved[1] !== '/') {\n      // In IE location.origin might not work\n      // https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7\n      resolved = (location.origin || location.protocol + '//' + location.host) +\n          resolved;\n    }\n    return resolved;\n  }\n});\n","import \"@polymer/iron-image/iron-image\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { EventsMixin } from \"../../mixins/events-mixin\";\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaEntityMarker extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style include=\"iron-positioning\"></style>\n      <style>\n        .marker {\n          vertical-align: top;\n          position: relative;\n          display: block;\n          margin: 0 auto;\n          width: 2.5em;\n          text-align: center;\n          height: 2.5em;\n          line-height: 2.5em;\n          font-size: 1.5em;\n          border-radius: 50%;\n          border: 0.1em solid var(--ha-marker-color, var(--primary-color));\n          color: rgb(76, 76, 76);\n          background-color: white;\n        }\n        iron-image {\n          border-radius: 50%;\n        }\n      </style>\n\n      <div class=\"marker\" style$=\"border-color:{{entityColor}}\">\n        <template is=\"dom-if\" if=\"[[entityName]]\">[[entityName]]</template>\n        <template is=\"dom-if\" if=\"[[entityPicture]]\">\n          <iron-image\n            sizing=\"cover\"\n            class=\"fit\"\n            src=\"[[entityPicture]]\"\n          ></iron-image>\n        </template>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      entityId: {\n        type: String,\n        value: \"\",\n      },\n\n      entityName: {\n        type: String,\n        value: null,\n      },\n\n      entityPicture: {\n        type: String,\n        value: null,\n      },\n\n      entityColor: {\n        type: String,\n        value: null,\n      },\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.addEventListener(\"click\", (ev) => this.badgeTap(ev));\n  }\n\n  badgeTap(ev) {\n    ev.stopPropagation();\n    if (this.entityId) {\n      this.fire(\"hass-more-info\", { entityId: this.entityId });\n    }\n  }\n}\n\ncustomElements.define(\"ha-entity-marker\", HaEntityMarker);\n","import \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { setupLeafletMap } from \"../../common/dom/setup-leaflet-map\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { navigate } from \"../../common/navigate\";\nimport \"../../components/ha-icon\";\nimport \"../../components/ha-menu-button\";\nimport { defaultRadiusColor } from \"../../data/zone\";\nimport LocalizeMixin from \"../../mixins/localize-mixin\";\nimport \"./ha-entity-marker\";\nimport \"../../styles/polymer-ha-style\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaPanelMap extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style include=\"ha-style\">\n        #map {\n          height: calc(100% - 64px);\n          width: 100%;\n          z-index: 0;\n        }\n\n        .light {\n          color: #000000;\n        }\n      </style>\n\n      <app-toolbar>\n        <ha-menu-button hass=\"[[hass]]\" narrow=\"[[narrow]]\"></ha-menu-button>\n        <div main-title>[[localize('panel.map')]]</div>\n        <template is=\"dom-if\" if=\"[[computeShowEditZone(hass)]]\">\n          <ha-icon-button\n            icon=\"hass:pencil\"\n            on-click=\"openZonesEditor\"\n          ></ha-icon-button>\n        </template>\n      </app-toolbar>\n\n      <div id=\"map\"></div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n        observer: \"drawEntities\",\n      },\n      narrow: Boolean,\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.loadMap();\n  }\n\n  async loadMap() {\n    [this._map, this.Leaflet] = await setupLeafletMap(this.$.map);\n    this.drawEntities(this.hass);\n    this._map.invalidateSize();\n    this.fitMap();\n  }\n\n  disconnectedCallback() {\n    if (this._map) {\n      this._map.remove();\n    }\n  }\n\n  computeShowEditZone(hass) {\n    return !__DEMO__ && hass.user.is_admin;\n  }\n\n  openZonesEditor() {\n    navigate(this, \"/config/zone\");\n  }\n\n  fitMap() {\n    var bounds;\n\n    if (this._mapItems.length === 0) {\n      this._map.setView(\n        new this.Leaflet.LatLng(\n          this.hass.config.latitude,\n          this.hass.config.longitude\n        ),\n        14\n      );\n    } else {\n      bounds = new this.Leaflet.latLngBounds(\n        this._mapItems.map((item) => item.getLatLng())\n      );\n      this._map.fitBounds(bounds.pad(0.5));\n    }\n  }\n\n  drawEntities(hass) {\n    /* eslint-disable vars-on-top */\n    var map = this._map;\n    if (!map) return;\n\n    if (this._mapItems) {\n      this._mapItems.forEach(function (marker) {\n        marker.remove();\n      });\n    }\n    var mapItems = (this._mapItems = []);\n\n    if (this._mapZones) {\n      this._mapZones.forEach(function (marker) {\n        marker.remove();\n      });\n    }\n    var mapZones = (this._mapZones = []);\n\n    Object.keys(hass.states).forEach((entityId) => {\n      var entity = hass.states[entityId];\n\n      if (\n        (entity.attributes.hidden && computeStateDomain(entity) !== \"zone\") ||\n        // entity.state === \"home\" ||\n        !(\"latitude\" in entity.attributes) ||\n        !(\"longitude\" in entity.attributes)\n      ) {\n        return;\n      }\n\n      var title = computeStateName(entity);\n      var icon;\n\n      if (computeStateDomain(entity) === \"zone\") {\n        // DRAW ZONE\n        if (entity.attributes.passive) return;\n\n        // create icon\n        var iconHTML = \"\";\n        if (entity.attributes.icon) {\n          const el = document.createElement(\"ha-icon\");\n          el.setAttribute(\"icon\", entity.attributes.icon);\n          iconHTML = el.outerHTML;\n        } else {\n          const el = document.createElement(\"span\");\n          el.innerHTML = title;\n          iconHTML = el.outerHTML;\n        }\n\n        icon = this.Leaflet.divIcon({\n          html: iconHTML,\n          iconSize: [24, 24],\n          className: \"light\",\n        });\n\n        // create marker with the icon\n        mapZones.push(\n          this.Leaflet.marker(\n            [entity.attributes.latitude, entity.attributes.longitude],\n            {\n              icon: icon,\n              interactive: false,\n              title: title,\n            }\n          ).addTo(map)\n        );\n\n        // create circle around it\n        mapZones.push(\n          this.Leaflet.circle(\n            [entity.attributes.latitude, entity.attributes.longitude],\n            {\n              interactive: false,\n              color: defaultRadiusColor,\n              radius: entity.attributes.radius,\n            }\n          ).addTo(map)\n        );\n\n        return;\n      }\n\n      // DRAW ENTITY\n      // create icon\n      var entityPicture = entity.attributes.entity_picture || \"\";\n      var entityName = title\n        .split(\" \")\n        .map(function (part) {\n          return part.substr(0, 1);\n        })\n        .join(\"\");\n      /* Leaflet clones this element before adding it to the map. This messes up\n         our Polymer object and we can't pass data through. Thus we hack like this. */\n      icon = this.Leaflet.divIcon({\n        html:\n          \"<ha-entity-marker entity-id='\" +\n          entity.entity_id +\n          \"' entity-name='\" +\n          entityName +\n          \"' entity-picture='\" +\n          entityPicture +\n          \"'></ha-entity-marker>\",\n        iconSize: [45, 45],\n        className: \"\",\n      });\n\n      // create market with the icon\n      mapItems.push(\n        this.Leaflet.marker(\n          [entity.attributes.latitude, entity.attributes.longitude],\n          {\n            icon: icon,\n            title: computeStateName(entity),\n          }\n        ).addTo(map)\n      );\n\n      // create circle around if entity has accuracy\n      if (entity.attributes.gps_accuracy) {\n        mapItems.push(\n          this.Leaflet.circle(\n            [entity.attributes.latitude, entity.attributes.longitude],\n            {\n              interactive: false,\n              color: \"#0288D1\",\n              radius: entity.attributes.gps_accuracy,\n            }\n          ).addTo(map)\n        );\n      }\n    });\n  }\n}\n\ncustomElements.define(\"ha-panel-map\", HaPanelMap);\n"],"mappings":";AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;;;;;;;;;;;;;;;;;;;;;;;;;ACCA","sourceRoot":""}
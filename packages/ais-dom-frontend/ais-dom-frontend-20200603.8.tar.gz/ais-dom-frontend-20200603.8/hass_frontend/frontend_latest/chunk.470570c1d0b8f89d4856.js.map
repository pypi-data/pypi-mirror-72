{"version":3,"file":"chunk.470570c1d0b8f89d4856.js","sources":["webpack:///./src/components/ha-switch.ts","webpack:///./src/dialogs/generic/dialog-box.ts"],"sourcesContent":["import { ripple } from \"@material/mwc-ripple/ripple-directive\";\nimport \"@material/mwc-switch\";\nimport type { Switch } from \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  property,\n  query,\n} from \"lit-element\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { Constructor } from \"../types\";\n\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport \"../../components/dialog/ha-paper-dialog\";\nimport \"../../components/ha-switch\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport { DialogParams } from \"./show-dialog-box\";\n\n@customElement(\"dialog-box\")\nclass DialogBox extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _params?: DialogParams;\n\n  @property() private _value?: string;\n\n  public async showDialog(params: DialogParams): Promise<void> {\n    this._params = params;\n    if (params.prompt) {\n      this._value = params.defaultValue;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    const confirmPrompt = this._params.confirmation || this._params.prompt;\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        modal\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>\n          ${this._params.title\n            ? this._params.title\n            : this._params.confirmation &&\n              this.hass.localize(\n                \"ui.dialogs.generic.default_confirmation_title\"\n              )}\n        </h2>\n        <paper-dialog-scrollable>\n          ${this._params.text\n            ? html`\n                <p\n                  class=${classMap({\n                    \"no-bottom-padding\": Boolean(this._params.prompt),\n                  })}\n                >\n                  ${this._params.text}\n                </p>\n              `\n            : \"\"}\n          ${this._params.prompt\n            ? html`\n                <paper-input\n                  autofocus\n                  .value=${this._value}\n                  @value-changed=${this._valueChanged}\n                  @keyup=${this._handleKeyUp}\n                  .label=${this._params.inputLabel\n                    ? this._params.inputLabel\n                    : \"\"}\n                  .type=${this._params.inputType\n                    ? this._params.inputType\n                    : \"text\"}\n                ></paper-input>\n              `\n            : \"\"}\n        </paper-dialog-scrollable>\n        <div class=\"paper-dialog-buttons\">\n          ${confirmPrompt &&\n          html`\n            <mwc-button @click=\"${this._dismiss}\">\n              ${this._params.dismissText\n                ? this._params.dismissText\n                : this.hass.localize(\"ui.dialogs.generic.cancel\")}\n            </mwc-button>\n          `}\n          <mwc-button @click=\"${this._confirm}\">\n            ${this._params.confirmText\n              ? this._params.confirmText\n              : this.hass.localize(\"ui.dialogs.generic.ok\")}\n          </mwc-button>\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    this._value = ev.detail.value;\n  }\n\n  private async _dismiss(): Promise<void> {\n    if (this._params!.cancel) {\n      this._params!.cancel();\n    }\n    this._params = undefined;\n  }\n\n  private _handleKeyUp(ev: KeyboardEvent) {\n    if (ev.keyCode === 13) {\n      this._confirm();\n    }\n  }\n\n  private async _confirm(): Promise<void> {\n    if (this._params!.confirm) {\n      this._params!.confirm(this._value);\n    }\n    this._dismiss();\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        :host([inert]) {\n          pointer-events: initial !important;\n          cursor: initial !important;\n        }\n        ha-paper-dialog {\n          min-width: 400px;\n          max-width: 500px;\n        }\n        @media (max-width: 400px) {\n          ha-paper-dialog {\n            min-width: initial;\n          }\n        }\n        a {\n          color: var(--primary-color);\n        }\n        p {\n          margin: 0;\n          padding-top: 6px;\n          padding-bottom: 24px;\n          color: var(--primary-text-color);\n        }\n        .no-bottom-padding {\n          padding-bottom: 0;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-box\": DialogBox;\n  }\n}\n"],"mappings":";AAeA;;;;;AAkCA;;;;;;;;AAUA;;;;;;AAzCA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AC6BA;;;AAGA;;;AAQA;;AAGA;;AAIA;;AAGA;AACA;;;AAIA;AACA;AACA;AACA;AAGA;;AAKA;;;AAGA;AAEA;AACA;;;AAKA;AACA;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApFA","sourceRoot":""}
{"version":3,"file":"chunk.ae944910c48cda7a3857.js","sources":["webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/panels/aisgalery/ha-dialog-aisgalery.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function (node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function (node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"../../components/dialog/ha-paper-dialog\";\nimport \"@vaadin/vaadin-upload\";\nimport { loadTokens } from \"../../common/auth/token_storage\";\nimport {\n  LitElement,\n  html,\n  property,\n  CSSResult,\n  css,\n  customElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../types\";\nimport { haStyleDialog } from \"../../resources/styles\";\n\n@customElement(\"ha-dialog-aisgalery\")\nexport class HaDialogAisgalery extends LitElement {\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        :host {\n          z-index: 103;\n        }\n\n        ha-icon-button {\n          color: var(--secondary-text-color);\n        }\n\n        ha-icon-button[active] {\n          color: var(--primary-color);\n        }\n\n        ha-paper-dialog {\n          width: 450px;\n          height: 350px;\n        }\n        a.button {\n          text-decoration: none;\n        }\n        a.button > mwc-button {\n          width: 100%;\n        }\n        .onboarding {\n          padding: 0 24px;\n        }\n        paper-dialog-scrollable.top-border::before {\n          content: \"\";\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          height: 1px;\n          background: var(--divider-color);\n        }\n      `,\n    ];\n  }\n  @property() public hass!: HomeAssistant;\n  @property() private _opened = false;\n\n  constructor() {\n    super();\n    this.loadVaadin();\n  }\n\n  public async showDialog(): Promise<void> {\n    this._opened = true;\n    this.loadVaadin();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <style>\n        paper-dialog-scrollable {\n          --paper-dialog-scrollable: {\n            -webkit-overflow-scrolling: auto;\n            max-height: 50vh !important;\n          }\n        }\n\n        paper-dialog-scrollable.can-scroll {\n          --paper-dialog-scrollable: {\n            -webkit-overflow-scrolling: touch;\n            max-height: 50vh !important;\n          }\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          paper-dialog-scrollable {\n            --paper-dialog-scrollable: {\n              -webkit-overflow-scrolling: auto;\n              max-height: calc(100vh - 175px) !important;\n            }\n          }\n\n          paper-dialog-scrollable.can-scroll {\n            --paper-dialog-scrollable: {\n              -webkit-overflow-scrolling: touch;\n              max-height: calc(75vh - 175px) !important;\n            }\n          }\n        }\n        app-toolbar {\n          margin: 0;\n          padding: 0 16px;\n          color: var(--primary-text-color);\n          background-color: var(--secondary-background-color);\n        }\n        app-toolbar [main-title] {\n          margin-left: 16px;\n        }\n      </style>\n      <dom-module id=\"my-button\" theme-for=\"vaadin-button\">\n        <template>\n          <style>\n            :host {\n              color: var(--primary-color);\n              border: 1px solid;\n            }\n          </style>\n        </template>\n      </dom-module>\n      <ha-paper-dialog\n        with-backdrop\n        .opened=${this._opened}\n        @opened-changed=${this._openedChanged}\n      >\n        <app-toolbar>\n          <ha-icon-button icon=\"hass:close\" dialog-dismiss=\"\"></ha-icon-button>\n          <div main-title=\"\">Dodawanie zdjęć</div>\n        </app-toolbar>\n        <vaadin-upload\n          capture=\"camera\"\n          accept=\"image/*\"\n          noAuto=\"false\"\n          style=\"text-align: center;\"\n        >\n          <span slot=\"drop-label\" style=\"color:white;\"\n            >Możesz przeciągnąć i upuścić tu.</span\n          >\n        </vaadin-upload>\n      </ha-paper-dialog>\n    `;\n  }\n\n  protected async loadVaadin() {\n    customElements.whenDefined(\"vaadin-upload\").then(async () => {\n      const upload = this.shadowRoot!.querySelector(\"vaadin-upload\");\n      const tokens = loadTokens();\n      if (upload !== null) {\n        upload.set(\"i18n.addFiles.many\", \"Wyślij zdjęcie [plik 5MB max] ...\");\n        upload.set(\n          \"i18n.fileIsTooBig\",\n          \"Plik jest za duży. Maksymalnie można przesłać 5MB\"\n        );\n        upload.set(\"method\", \"POST\");\n        upload.set(\"withCredentials\", true);\n        upload.set(\"target\", \"api/ais_file/upload\");\n        upload.set(\"headers\", {\n          authorization: \"Bearer \" + tokens.access_token,\n        });\n        upload.addEventListener(\"file-reject\", function (event) {\n          console.log(event.detail.file.name + \" error: \" + event.detail.error);\n        });\n      }\n    });\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n  }\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n  }\n\n  private _openedChanged(ev: CustomEvent) {\n    this._opened = ev.detail.value;\n    this.loadVaadin();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-aisgalery\": HaDialogAisgalery;\n  }\n}\n"],"mappings":";AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA;AACA;;;;;;;;;;;;;;;;;AA9GA","sourceRoot":""}
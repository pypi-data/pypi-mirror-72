{"version":3,"file":"chunk.8c082942c8ca28100c6b.js","sources":["webpack:///./node_modules/@polymer/paper-item/paper-icon-item.js","webpack:///./node_modules/@polymer/app-layout/app-header-layout/app-header-layout.js","webpack:///./src/panels/config/dashboard/ha-config-dashboard.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/typography.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/*\n`<paper-icon-item>` is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area, according to Material\nDesign. This is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<paper-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.\n\n    <paper-icon-item>\n      <iron-icon icon=\"favorite\" slot=\"item-icon\"></iron-icon>\n      Favorite\n    </paper-icon-item>\n    <paper-icon-item>\n      <div class=\"avatar\" slot=\"item-icon\"></div>\n      Avatar\n    </paper-icon-item>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-icon-width` | Width of the icon area | `56px`\n`--paper-item-icon` | Mixin applied to the icon area | `{}`\n`--paper-icon-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\"></style>\n    <style>\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n        @apply --paper-icon-item;\n      }\n\n      .content-icon {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n\n        width: var(--paper-item-icon-width, 56px);\n        @apply --paper-item-icon;\n      }\n    </style>\n\n    <div id=\"contentIcon\" class=\"content-icon\">\n      <slot name=\"item-icon\"></slot>\n    </div>\n    <slot></slot>\n`,\n\n  is: 'paper-icon-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {AppLayoutBehavior} from '../app-layout-behavior/app-layout-behavior.js';\n\n/**\napp-header-layout is a wrapper element that positions an app-header and other\ncontent. This element uses the document scroll by default, but it can also\ndefine its own scrolling region.\n\nUsing the document scroll:\n\n```html\n<app-header-layout>\n  <app-header slot=\"header\" fixed condenses effects=\"waterfall\">\n    <app-toolbar>\n      <div main-title>App name</div>\n    </app-toolbar>\n  </app-header>\n  <div>\n    main content\n  </div>\n</app-header-layout>\n```\n\nUsing an own scrolling region:\n\n```html\n<app-header-layout has-scrolling-region style=\"width: 300px; height: 400px;\">\n  <app-header slot=\"header\" fixed condenses effects=\"waterfall\">\n    <app-toolbar>\n      <div main-title>App name</div>\n    </app-toolbar>\n  </app-header>\n  <div>\n    main content\n  </div>\n</app-header-layout>\n```\n\nAdd the `fullbleed` attribute to app-header-layout to make it fit the size of\nits container:\n\n```html\n<app-header-layout fullbleed>\n ...\n</app-header-layout>\n```\n\n@group App Elements\n@element app-header-layout\n@demo app-header-layout/demo/simple.html Simple Demo\n@demo app-header-layout/demo/scrolling-region.html Scrolling Region\n@demo app-header-layout/demo/music.html Music Demo\n@demo app-header-layout/demo/footer.html Footer Demo\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n        position: relative;\n        z-index: 0;\n      }\n\n      #wrapper ::slotted([slot=header]) {\n        @apply --layout-fixed-top;\n        z-index: 1;\n      }\n\n      #wrapper.initializing ::slotted([slot=header]) {\n        position: relative;\n      }\n\n      :host([has-scrolling-region]) {\n        height: 100%;\n      }\n\n      :host([has-scrolling-region]) #wrapper ::slotted([slot=header]) {\n        position: absolute;\n      }\n\n      :host([has-scrolling-region]) #wrapper.initializing ::slotted([slot=header]) {\n        position: relative;\n      }\n\n      :host([has-scrolling-region]) #wrapper #contentContainer {\n        @apply --layout-fit;\n        overflow-y: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n        position: relative;\n      }\n\n      :host([fullbleed]) {\n        @apply --layout-vertical;\n        @apply --layout-fit;\n      }\n\n      :host([fullbleed]) #wrapper,\n      :host([fullbleed]) #wrapper #contentContainer {\n        @apply --layout-vertical;\n        @apply --layout-flex;\n      }\n\n      #contentContainer {\n        /* Create a stacking context here so that all children appear below the header. */\n        position: relative;\n        z-index: 0;\n      }\n\n      @media print {\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          overflow-y: visible;\n        }\n      }\n\n    </style>\n\n    <div id=\"wrapper\" class=\"initializing\">\n      <slot id=\"headerSlot\" name=\"header\"></slot>\n\n      <div id=\"contentContainer\">\n        <slot></slot>\n      </div>\n    </div>\n`,\n\n  is: 'app-header-layout',\n  behaviors: [AppLayoutBehavior],\n\n  properties: {\n    /**\n     * If true, the current element will have its own scrolling region.\n     * Otherwise, it will use the document scroll to control the header.\n     */\n    hasScrollingRegion: {type: Boolean, value: false, reflectToAttribute: true}\n  },\n\n  observers: ['resetLayout(isAttached, hasScrollingRegion)'],\n\n  /**\n   * A reference to the app-header element.\n   *\n   * @property header\n   */\n  get header() {\n    return dom(this.$.headerSlot).getDistributedNodes()[0];\n  },\n\n  _updateLayoutStates: function() {\n    var header = this.header;\n    if (!this.isAttached || !header) {\n      return;\n    }\n    // Remove the initializing class, which staticly positions the header and\n    // the content until the height of the header can be read.\n    this.$.wrapper.classList.remove('initializing');\n    // Update scroll target.\n    header.scrollTarget = this.hasScrollingRegion ?\n        this.$.contentContainer :\n        this.ownerDocument.documentElement;\n    // Get header height here so that style reads are batched together before\n    // style writes (i.e. getBoundingClientRect() below).\n    var headerHeight = header.offsetHeight;\n    // Update the header position.\n    if (!this.hasScrollingRegion) {\n      requestAnimationFrame(function() {\n        var rect = this.getBoundingClientRect();\n        var rightOffset = document.documentElement.clientWidth - rect.right;\n        header.style.left = rect.left + 'px';\n        header.style.right = rightOffset + 'px';\n      }.bind(this));\n    } else {\n      header.style.left = '';\n      header.style.right = '';\n    }\n    // Update the content container position.\n    var containerStyle = this.$.contentContainer.style;\n    if (header.fixed && !header.condenses && this.hasScrollingRegion) {\n      // If the header size does not change and we're using a scrolling region,\n      // exclude the header area from the scrolling region so that the header\n      // doesn't overlap the scrollbar.\n      containerStyle.marginTop = headerHeight + 'px';\n      containerStyle.paddingTop = '';\n    } else {\n      containerStyle.paddingTop = headerHeight + 'px';\n      containerStyle.marginTop = '';\n    }\n  }\n});\n","import \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  css,\n  CSSResultArray,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-menu-button\";\nimport { CloudStatus } from \"../../../data/cloud\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections, aisConfigSections } from \"../ha-panel-config\";\nimport \"./ha-config-navigation\";\n\n@customElement(\"ha-config-dashboard\")\nclass HaConfigDashboard extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public cloudStatus?: CloudStatus;\n\n  @property() public showAdvanced!: boolean;\n\n  protected render(): TemplateResult {\n    return html`\n      <app-header-layout has-scrolling-region>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n          </app-toolbar>\n        </app-header>\n\n        <ha-config-section .narrow=${this.narrow} .isWide=${this.isWide}>\n          <div slot=\"header\">\n            ${this.hass.localize(\"ui.panel.config.header\")}\n          </div>\n\n          <div slot=\"introduction\">\n            ${this.hass.localize(\"ui.panel.config.introduction\")}\n          </div>\n\n          ${Object.values(aisConfigSections).map(\n            (section) => html`\n              <ha-card>\n                <ha-config-navigation\n                  .hass=${this.hass}\n                  .showAdvanced=${this.showAdvanced}\n                  .pages=${section}\n                ></ha-config-navigation>\n              </ha-card>\n            `\n          )}\n          ${this.cloudStatus && isComponentLoaded(this.hass, \"cloud\")\n            ? html`\n                <ha-card>\n                  <ha-config-navigation\n                    .hass=${this.hass}\n                    .showAdvanced=${this.showAdvanced}\n                    .pages=${[\n                      {\n                        component: \"cloud\",\n                        path: \"/config/cloud\",\n                        translationKey: \"ui.panel.config.cloud.caption\",\n                        info: this.cloudStatus,\n                        icon: \"hass:cloud-lock\",\n                      },\n                    ]}\n                  ></ha-config-navigation>\n                </ha-card>\n              `\n            : \"\"}\n          ${Object.values(configSections).map(\n            (section) => html`\n              <ha-card>\n                <ha-config-navigation\n                  .hass=${this.hass}\n                  .showAdvanced=${this.showAdvanced}\n                  .pages=${section}\n                ></ha-config-navigation>\n              </ha-card>\n            `\n          )}\n          ${!this.showAdvanced\n            ? html`\n                <div class=\"promo-advanced\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.advanced_mode.hint_enable\"\n                  )}\n                  <a href=\"/profile\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.advanced_mode.link_profile_page\"\n                    )}</a\n                  >.\n                </div>\n              `\n            : \"\"}\n        </ha-config-section>\n      </app-header-layout>\n    `;\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        app-header {\n          --app-header-background-color: var(--primary-color);\n        }\n        ha-card:last-child {\n          margin-bottom: 24px;\n        }\n        ha-config-section {\n          margin-top: -20px;\n        }\n        ha-card {\n          overflow: hidden;\n        }\n        ha-card a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n        .promo-advanced {\n          text-align: center;\n          color: var(--secondary-text-color);\n          margin-bottom: 24px;\n        }\n        .promo-advanced a {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-dashboard\": HaConfigDashboard;\n  }\n}\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqEA;;;;;AC7GA;AACA;;;;;AAKA;;AAEA;;;;AAIA;;;AAGA;;;AAIA;AACA;AACA;;;;AAKA;;;AAIA;AACA;AACA;;;AAYA;AACA;;;AAIA;AACA;AACA;;;;AAKA;;AAGA;;AAIA;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;AA5FA","sourceRoot":""}
{"version":3,"file":"chunk.441d8ff75f4644c0a8ef.js","sources":["webpack:///./src/components/ha-card.ts","webpack:///./src/panels/config/ha-config-section.ts","webpack:///src/mwc-fab-base.ts","webpack:///./src/panels/config/person/ha-config-person.ts"],"sourcesContent":["import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\n@customElement(\"ha-card\")\nclass HaCard extends LitElement {\n  @property() public header?: string;\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 2px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0 2px 2px 0 rgba(0, 0, 0, 0.14),\n          0 1px 5px 0 rgba(0, 0, 0, 0.12),\n          0 3px 1px -2px rgba(0, 0, 0, 0.2)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        padding: 24px 16px 16px;\n        display: block;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html` <div class=\"card-header\">${this.header}</div> `\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { css, customElement, html, LitElement, property } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: !this.isWide,\n            horizontal: this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        max-width: 400px;\n        margin-right: 40px;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n    `;\n  }\n}\n","/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport {ripple} from '@material/mwc-ripple/ripple-directive.js';\nimport {html, LitElement, property, TemplateResult} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map.js';\n\nexport class FabBase extends LitElement {\n  @property({type: Boolean}) mini = false;\n\n  @property({type: Boolean}) exited = false;\n\n  @property({type: Boolean}) disabled = false;\n\n  @property({type: Boolean}) extended = false;\n\n  @property({type: Boolean}) showIconAtEnd = false;\n\n  @property() icon = '';\n\n  @property() label = '';\n\n  protected createRenderRoot() {\n    return this.attachShadow({mode: 'open', delegatesFocus: true});\n  }\n\n  protected render() {\n    const classes = {\n      'mdc-fab--mini': this.mini,\n      'mdc-fab--exited': this.exited,\n      'mdc-fab--extended': this.extended,\n      'icon-end': this.showIconAtEnd,\n    };\n    const showLabel = this.label !== '' && this.extended;\n\n    let iconTemplate: TemplateResult|string = '';\n\n    if (this.icon) {\n      iconTemplate = html`\n        <span class=\"material-icons mdc-fab__icon\">${this.icon}</span>`;\n    }\n\n    let label = html``;\n\n    if (showLabel) {\n      label = html`<span class=\"mdc-fab__label\">${this.label}</span>`;\n    }\n\n    return html`\n      <button\n          class=\"mdc-fab ${classMap(classes)}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${this.label || this.icon}\"\n          .ripple=\"${ripple()}\">\n        <div class=\"mdc-fab__ripple\"></div>\n        ${this.showIconAtEnd ? label : ''}\n        <slot name=\"icon\">\n          ${iconTemplate}\n        </slot>\n        ${!this.showIconAtEnd ? label : ''}\n      </button>`;\n  }\n}\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { compare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-card\";\nimport \"@material/mwc-fab\";\nimport {\n  createPerson,\n  deletePerson,\n  fetchPersons,\n  Person,\n  updatePerson,\n} from \"../../../data/person\";\nimport { fetchUsers, User } from \"../../../data/user\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport {\n  loadPersonDetailDialog,\n  showPersonDetailDialog,\n} from \"./show-dialog-person-detail\";\nimport \"../../../components/ha-svg-icon\";\nimport { mdiPlus } from \"@mdi/js\";\n\nclass HaConfigPerson extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow?: boolean;\n\n  @property() public route!: Route;\n\n  @property() private _storageItems?: Person[];\n\n  @property() private _configItems?: Person[];\n\n  private _usersLoad?: Promise<User[]>;\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      this._storageItems === undefined ||\n      this._configItems === undefined\n    ) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n    const hass = this.hass;\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        back-path=\"/config\"\n        .tabs=${configSections.persons}\n      >\n        <ha-config-section .isWide=${this.isWide}>\n          <span slot=\"header\"\n            >${hass.localize(\"ui.panel.config.person.caption\")}</span\n          >\n          <span slot=\"introduction\">\n            ${hass.localize(\"ui.panel.config.person.introduction\")}\n            ${this._configItems.length > 0\n              ? html`\n                  <p>\n                    ${hass.localize(\n                      \"ui.panel.config.person.note_about_persons_configured_in_yaml\"\n                    )}\n                  </p>\n                `\n              : \"\"}\n          </span>\n          <ha-card class=\"storage\">\n            ${this._storageItems.map((entry) => {\n              return html`\n                <paper-item @click=${this._openEditEntry} .entry=${entry}>\n                  <paper-item-body>\n                    ${entry.name}\n                  </paper-item-body>\n                </paper-item>\n              `;\n            })}\n            ${this._storageItems.length === 0\n              ? html`\n                  <div class=\"empty\">\n                    ${hass.localize(\n                      \"ui.panel.config.person.no_persons_created_yet\"\n                    )}\n                    <mwc-button @click=${this._createPerson}>\n                      ${hass.localize(\n                        \"ui.panel.config.person.create_person\"\n                      )}</mwc-button\n                    >\n                  </div>\n                `\n              : html``}\n          </ha-card>\n          ${this._configItems.length > 0\n            ? html`\n                <ha-card header=\"Configuration.yaml persons\">\n                  ${this._configItems.map((entry) => {\n                    return html`\n                      <paper-item>\n                        <paper-item-body>\n                          ${entry.name}\n                        </paper-item-body>\n                      </paper-item>\n                    `;\n                  })}\n                </ha-card>\n              `\n            : \"\"}\n        </ha-config-section>\n      </hass-tabs-subpage>\n\n      <mwc-fab\n        ?is-wide=${this.isWide}\n        ?narrow=${this.narrow}\n        title=\"${hass.localize(\"ui.panel.config.person.add_person\")}\"\n        @click=${this._createPerson}\n      >\n        <ha-svg-icon slot=\"icon\" path=${mdiPlus}></ha-svg-icon>\n      </mwc-fab>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n    loadPersonDetailDialog();\n  }\n\n  private async _fetchData() {\n    this._usersLoad = fetchUsers(this.hass!);\n    const personData = await fetchPersons(this.hass!);\n\n    this._storageItems = personData.storage.sort((ent1, ent2) =>\n      compare(ent1.name, ent2.name)\n    );\n    this._configItems = personData.config.sort((ent1, ent2) =>\n      compare(ent1.name, ent2.name)\n    );\n  }\n\n  private _createPerson() {\n    this._openDialog();\n  }\n\n  private _openEditEntry(ev: MouseEvent) {\n    const entry: Person = (ev.currentTarget! as any).entry;\n    this._openDialog(entry);\n  }\n\n  private _allowedUsers(users: User[], currentPerson?: Person) {\n    const used = new Set();\n    for (const coll of [this._configItems, this._storageItems]) {\n      for (const pers of coll!) {\n        if (pers.user_id) {\n          used.add(pers.user_id);\n        }\n      }\n    }\n    const currentUserId = currentPerson ? currentPerson.user_id : undefined;\n    return users.filter(\n      (user) => user.id === currentUserId || !used.has(user.id)\n    );\n  }\n\n  private async _openDialog(entry?: Person) {\n    const users = await this._usersLoad!;\n\n    showPersonDetailDialog(this, {\n      entry,\n      users: this._allowedUsers(users, entry),\n      createEntry: async (values) => {\n        const created = await createPerson(this.hass!, values);\n        this._storageItems = this._storageItems!.concat(\n          created\n        ).sort((ent1, ent2) => compare(ent1.name, ent2.name));\n      },\n      updateEntry: async (values) => {\n        const updated = await updatePerson(this.hass!, entry!.id, values);\n        this._storageItems = this._storageItems!.map((ent) =>\n          ent === entry ? updated : ent\n        );\n      },\n      removeEntry: async () => {\n        if (\n          !(await showConfirmationDialog(this, {\n            title: this.hass!.localize(\"ui.panel.config.person.confirm_delete\"),\n            text: this.hass!.localize(\"ui.panel.config.person.confirm_delete2\"),\n            dismissText: this.hass!.localize(\"ui.common.no\"),\n            confirmText: this.hass!.localize(\"ui.common.yes\"),\n          }))\n        ) {\n          return false;\n        }\n\n        try {\n          await deletePerson(this.hass!, entry!.id);\n          this._storageItems = this._storageItems!.filter(\n            (ent) => ent !== entry\n          );\n          return true;\n        } catch (err) {\n          return false;\n        }\n      },\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n      ha-card {\n        max-width: 600px;\n        margin: 16px auto;\n        overflow: hidden;\n      }\n      .empty {\n        text-align: center;\n        padding: 8px;\n      }\n      paper-item {\n        padding-top: 4px;\n        padding-bottom: 4px;\n      }\n      ha-card.storage paper-item {\n        cursor: pointer;\n      }\n      mwc-fab {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n        z-index: 1;\n      }\n      mwc-fab[narrow] {\n        bottom: 84px;\n      }\n      mwc-fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-config-person\", HaConfigPerson);\n"],"mappings":";AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AAEA;;AArDA;;ACDA;;;;AAMA;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACgDA;;AAWA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AAnDA;;ACuCA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;AAGA;;AAKA;;;AAGA;AAEA;;AAEA;;;;AAKA;;AAGA;AAGA;AACA;;;AAMA;;AAEA;;AAGA;;;AAIA;;;;;AAOA;;;;;AAKA;AACA;AACA;AACA;;AAEA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtGA","sourceRoot":""}
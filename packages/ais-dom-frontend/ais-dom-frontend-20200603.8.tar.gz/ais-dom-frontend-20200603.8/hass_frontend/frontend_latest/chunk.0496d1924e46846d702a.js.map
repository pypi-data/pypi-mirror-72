{"version":3,"file":"chunk.0496d1924e46846d702a.js","sources":["webpack:///./src/components/ha-switch.ts","webpack:///src/mwc-switch-base.ts","webpack:///./src/components/ha-dialog.ts","webpack:///./src/panels/config/users/dialog-user-detail.ts"],"sourcesContent":["import { ripple } from \"@material/mwc-ripple/ripple-directive\";\nimport \"@material/mwc-switch\";\nimport type { Switch } from \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  property,\n  query,\n} from \"lit-element\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { Constructor } from \"../types\";\n\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport {addHasRemoveClass, FormElement, HTMLElementWithRipple} from '@material/mwc-base/form-element.js';\nimport {observer} from '@material/mwc-base/observer.js';\nimport {ripple} from '@material/mwc-ripple/ripple-directive.js';\nimport {MDCSwitchAdapter} from '@material/switch/adapter';\nimport MDCSwitchFoundation from '@material/switch/foundation.js';\nimport {html, property, query} from 'lit-element';\n\nexport class SwitchBase extends FormElement {\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setChecked(value);\n  })\n  checked = false;\n\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setDisabled(value);\n  })\n  disabled = false;\n\n  @query('.mdc-switch') protected mdcRoot!: HTMLElement;\n\n  @query('input') protected formElement!: HTMLInputElement;\n\n  protected mdcFoundation!: MDCSwitchFoundation;\n\n  private _changeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n\n  protected readonly mdcFoundationClass = MDCSwitchFoundation;\n\n  protected createAdapter(): MDCSwitchAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      setNativeControlChecked: (checked: boolean) => {\n        this.formElement.checked = checked;\n      },\n      setNativeControlDisabled: (disabled: boolean) => {\n        this.formElement.disabled = disabled;\n      },\n      setNativeControlAttr: (attr, value) => {\n        this.formElement.setAttribute(attr, value);\n      },\n    };\n  }\n\n  get ripple() {\n    return this.rippleNode.ripple;\n  }\n\n  @query('.mdc-switch__thumb-underlay')\n  protected rippleNode!: HTMLElementWithRipple;\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__thumb-underlay\" .ripple=\"${ripple({\n      interactionNode: this\n    })}\">\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._changeHandler}\">\n          </div>\n        </div>\n      </div>`;\n  }\n}\n","import \"@material/mwc-dialog\";\nimport type { Dialog } from \"@material/mwc-dialog\";\nimport { style } from \"@material/mwc-dialog/mwc-dialog-css\";\nimport \"./ha-icon-button\";\nimport { css, CSSResult, customElement, html } from \"lit-element\";\nimport type { Constructor, HomeAssistant } from \"../types\";\nimport { mdiClose } from \"@mdi/js\";\n\nconst MwcDialog = customElements.get(\"mwc-dialog\") as Constructor<Dialog>;\n\nexport const createCloseHeading = (hass: HomeAssistant, title: string) => html`\n  ${title}\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"close_button\"\n  >\n    <ha-svg-icon path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends MwcDialog {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .close_button {\n          position: absolute;\n          right: 16px;\n          top: 12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-switch\";\nimport {\n  SYSTEM_GROUP_ID_ADMIN,\n  SYSTEM_GROUP_ID_USER,\n} from \"../../../data/user\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { UserDetailDialogParams } from \"./show-dialog-user-detail\";\n\n@customElement(\"dialog-user-detail\")\nclass DialogUserDetail extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _name!: string;\n\n  @property() private _isAdmin?: boolean;\n\n  @property() private _error?: string;\n\n  @property() private _params?: UserDetailDialogParams;\n\n  @property() private _submitting = false;\n\n  public async showDialog(params: UserDetailDialogParams): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._name = params.entry.name || \"\";\n    this._isAdmin = params.entry.group_ids[0] === SYSTEM_GROUP_ID_ADMIN;\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const user = this._params.entry;\n    return html`\n      <ha-dialog\n        open\n        @closing=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(this.hass, user.name)}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          <div class=\"secondary\">\n            ${this.hass.localize(\"ui.panel.config.users.editor.id\")}: ${user.id}\n          </div>\n          <div>\n            ${user.is_owner\n              ? html`\n                  <span class=\"state\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.users.editor.owner\"\n                    )}</span\n                  >\n                `\n              : \"\"}\n            ${user.system_generated\n              ? html`\n                  <span class=\"state\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.users.editor.system_generated\"\n                    )}\n                  </span>\n                `\n              : \"\"}\n            ${user.is_active\n              ? html`\n                  <span class=\"state\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.users.editor.active\"\n                    )}</span\n                  >\n                `\n              : \"\"}\n          </div>\n          <div class=\"form\">\n            <paper-input\n              .value=${this._name}\n              .disabled=${user.system_generated}\n              @value-changed=${this._nameChanged}\n              label=\"${this.hass!.localize(\n                \"ui.panel.config.users.editor.name\"\n              )}\"\n            ></paper-input>\n            <ha-switch\n              .disabled=${user.system_generated}\n              .checked=${this._isAdmin}\n              @change=${this._adminChanged}\n            >\n              ${this.hass.localize(\"ui.panel.config.users.editor.admin\")}\n            </ha-switch>\n            ${!this._isAdmin\n              ? html`\n                  <br />\n                  ${this.hass.localize(\n                    \"ui.panel.config.users.users_privileges_note\"\n                  )}\n                `\n              : \"\"}\n          </div>\n        </div>\n\n        <div slot=\"secondaryAction\">\n          <mwc-button\n            class=\"warning\"\n            @click=${this._deleteEntry}\n            .disabled=${this._submitting || user.system_generated}\n          >\n            ${this.hass!.localize(\"ui.panel.config.users.editor.delete_user\")}\n          </mwc-button>\n          ${user.system_generated\n            ? html`\n                <paper-tooltip position=\"right\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.users.editor.system_generated_users_not_removable\"\n                  )}\n                </paper-tooltip>\n              `\n            : \"\"}\n        </div>\n        <div slot=\"primaryAction\">\n          <mwc-button\n            @click=${this._updateEntry}\n            .disabled=${!this._name ||\n            this._submitting ||\n            user.system_generated}\n          >\n            ${this.hass!.localize(\"ui.panel.config.users.editor.update_user\")}\n          </mwc-button>\n          ${user.system_generated\n            ? html`\n                <paper-tooltip position=\"left\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.users.editor.system_generated_users_not_editable\"\n                  )}\n                </paper-tooltip>\n              `\n            : \"\"}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _nameChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._name = ev.detail.value;\n  }\n\n  private async _adminChanged(ev): Promise<void> {\n    this._isAdmin = ev.target.checked;\n  }\n\n  private async _updateEntry() {\n    this._submitting = true;\n    try {\n      await this._params!.updateEntry({\n        name: this._name.trim(),\n        group_ids: [\n          this._isAdmin ? SYSTEM_GROUP_ID_ADMIN : SYSTEM_GROUP_ID_USER,\n        ],\n      });\n      this._close();\n    } catch (err) {\n      this._error = err?.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteEntry() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeEntry()) {\n        this._params = undefined;\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _close(): void {\n    this._params = undefined;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n        }\n        .form {\n          padding-top: 16px;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n        .state {\n          background-color: rgba(var(--rgb-primary-text-color), 0.15);\n          border-radius: 16px;\n          padding: 4px 8px;\n          margin-top: 8px;\n          display: inline-block;\n        }\n        .state:not(:first-child) {\n          margin-left: 8px;\n        }\n        ha-switch {\n          margin-top: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-user-detail\": DialogUserDetail;\n  }\n}\n"],"mappings":";AAeA;;;;;AAkCA;;;;;;;;AAUA;;;;;;AAzCA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AC0DA;;;;;;;AASA;;;AAzDA;ACjBA;;AAEA;;;;AAIA;;AAKA;;;;;;;;;;;;;;;;AAAA;;;AC+BA;;;AAGA;;;AAGA;;AAEA;;;AAGA;;AAGA;;AAKA;AACA;;AAGA;;AAKA;AACA;;AAGA;;AAKA;;;;AAIA;AACA;AACA;AACA;;;AAKA;AACA;AACA;;AAEA;;AAEA;;AAGA;;;;;;;;AAWA;AACA;;AAEA;;AAEA;;AAGA;;AAKA;;;;AAIA;AACA;;AAIA;;AAEA;;AAGA;;AAKA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAxIA","sourceRoot":""}
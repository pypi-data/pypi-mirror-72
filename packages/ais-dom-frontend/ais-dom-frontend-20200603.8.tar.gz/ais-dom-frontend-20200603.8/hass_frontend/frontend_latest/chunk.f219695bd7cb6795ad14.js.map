{"version":3,"file":"chunk.f219695bd7cb6795ad14.js","sources":["webpack:///./src/resources/render-markdown.ts","webpack:///./src/components/ha-markdown.ts"],"sourcesContent":["import { wrap } from \"comlink\";\n\nimport type { api } from \"./markdown_worker\";\n\ntype RenderMarkdownType = api[\"renderMarkdown\"];\ntype renderMarkdownParamTypes = Parameters<RenderMarkdownType>;\n\nlet worker: any | undefined;\n\nexport const renderMarkdown = async (\n  content: renderMarkdownParamTypes[0],\n  markedOptions: renderMarkdownParamTypes[1],\n  hassOptions?: renderMarkdownParamTypes[2]\n): Promise<ReturnType<RenderMarkdownType>> => {\n  if (!worker) {\n    worker = wrap(new Worker(\"./markdown_worker\", { type: \"module\" }));\n  }\n\n  return await worker.renderMarkdown(content, markedOptions, hassOptions);\n};\n","import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\nimport \"./ha-markdown-element\";\n\n@customElement(\"ha-markdown\")\nclass HaMarkdown extends LitElement {\n  @property() public content?;\n\n  @property({ type: Boolean }) public allowSvg = false;\n\n  @property({ type: Boolean }) public breaks = false;\n\n  protected render(): TemplateResult {\n    if (!this.content) {\n      return html``;\n    }\n\n    return html`<ha-markdown-element\n      .content=${this.content}\n      .allowSvg=${this.allowSvg}\n      .breaks=${this.breaks}\n    ></ha-markdown-element>`;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: block;\n      }\n      ha-markdown-element {\n        -ms-user-select: text;\n        -webkit-user-select: text;\n        -moz-user-select: text;\n      }\n      ha-markdown-element > *:first-child {\n        margin-top: 0;\n      }\n      ha-markdown-element > *:last-child {\n        margin-bottom: 0;\n      }\n      ha-markdown-element a {\n        color: var(--primary-color);\n      }\n      ha-markdown-element img {\n        max-width: 100%;\n      }\n      ha-markdown-element code,\n      pre {\n        background-color: var(--markdown-code-background-color, #f6f8fa);\n        border-radius: 3px;\n      }\n      ha-markdown-element code {\n        font-size: 85%;\n        padding: 0.2em 0.4em;\n      }\n      ha-markdown-element pre code {\n        padding: 0;\n      }\n      ha-markdown-element pre {\n        padding: 16px;\n        overflow: auto;\n        line-height: 1.45;\n      }\n      ha-markdown-element h2 {\n        font-size: 1.5em !important;\n        font-weight: bold !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-markdown\": HaMarkdown;\n  }\n}\n"],"mappings":"AAAA;AC0BA;AACA;AACA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AATA","sourceRoot":""}
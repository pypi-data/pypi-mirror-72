{"version":3,"file":"chunk.e1ba2a4f5bce45d0254e.js","sources":["webpack:///./node_modules/@polymer/paper-behaviors/paper-inky-focus-behavior.js","webpack:///./node_modules/@polymer/paper-slider/paper-slider.js","webpack:///./node_modules/@polymer/paper-progress/paper-progress.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronButtonState} from '@polymer/iron-behaviors/iron-button-state.js';\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\n\nimport {PaperRippleBehavior} from './paper-ripple-behavior.js';\n\n/**\n * `PaperInkyFocusBehavior` implements a ripple when the element has keyboard\n * focus.\n *\n * @polymerBehavior PaperInkyFocusBehavior\n */\nexport const PaperInkyFocusBehaviorImpl = {\n  observers: ['_focusedChanged(receivedFocusFromKeyboard)'],\n\n  _focusedChanged: function(receivedFocusFromKeyboard) {\n    if (receivedFocusFromKeyboard) {\n      this.ensureRipple();\n    }\n    if (this.hasRipple()) {\n      this._ripple.holdDown = receivedFocusFromKeyboard;\n    }\n  },\n\n  _createRipple: function() {\n    var ripple = PaperRippleBehavior._createRipple();\n    ripple.id = 'ink';\n    ripple.setAttribute('center', '');\n    ripple.classList.add('circle');\n    return ripple;\n  }\n};\n\n/** @polymerBehavior */\nexport const PaperInkyFocusBehavior = [\n  IronButtonState,\n  IronControlState,\n  PaperRippleBehavior,\n  PaperInkyFocusBehaviorImpl\n];\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-input/paper-input.js';\nimport '@polymer/paper-progress/paper-progress.js';\nimport '@polymer/paper-styles/color.js';\n\nimport {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {IronRangeBehavior} from '@polymer/iron-range-behavior/iron-range-behavior.js';\nimport {PaperInkyFocusBehavior, PaperInkyFocusBehaviorImpl} from '@polymer/paper-behaviors/paper-inky-focus-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {setTouchAction} from '@polymer/polymer/lib/utils/gestures.js';\nimport {html} from '@polymer/polymer/polymer-legacy.js';\n\nconst template = html`\n  <style>\n    :host {\n      @apply --layout;\n      @apply --layout-justified;\n      @apply --layout-center;\n      width: 200px;\n      cursor: default;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n      --paper-progress-active-color: var(--paper-slider-active-color, var(--google-blue-700));\n      --paper-progress-secondary-color: var(--paper-slider-secondary-color, var(--google-blue-300));\n      --paper-progress-disabled-active-color: var(--paper-slider-disabled-active-color, var(--paper-grey-400));\n      --paper-progress-disabled-secondary-color: var(--paper-slider-disabled-secondary-color, var(--paper-grey-400));\n      --calculated-paper-slider-height: var(--paper-slider-height, 2px);\n    }\n\n    /* focus shows the ripple */\n    :host(:focus) {\n      outline: none;\n    }\n\n    /**\n      * NOTE(keanulee): Though :host-context is not universally supported, some pages\n      * still rely on paper-slider being flipped when dir=\"rtl\" is set on body. For full\n      * compatibility, dir=\"rtl\" must be explicitly set on paper-slider.\n      */\n    :dir(rtl) #sliderContainer {\n      -webkit-transform: scaleX(-1);\n      transform: scaleX(-1);\n    }\n\n    /**\n      * NOTE(keanulee): This is separate from the rule above because :host-context may\n      * not be recognized.\n      */\n    :host([dir=\"rtl\"]) #sliderContainer {\n      -webkit-transform: scaleX(-1);\n      transform: scaleX(-1);\n    }\n\n    /**\n      * NOTE(keanulee): Needed to override the :host-context rule (where supported)\n      * to support LTR sliders in RTL pages.\n      */\n    :host([dir=\"ltr\"]) #sliderContainer {\n      -webkit-transform: scaleX(1);\n      transform: scaleX(1);\n    }\n\n    #sliderContainer {\n      position: relative;\n      width: 100%;\n      height: calc(30px + var(--calculated-paper-slider-height));\n      margin-left: calc(15px + var(--calculated-paper-slider-height)/2);\n      margin-right: calc(15px + var(--calculated-paper-slider-height)/2);\n    }\n\n    #sliderContainer:focus {\n      outline: 0;\n    }\n\n    #sliderContainer.editable {\n      margin-top: 12px;\n      margin-bottom: 12px;\n    }\n\n    .bar-container {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      overflow: hidden;\n    }\n\n    .ring > .bar-container {\n      left: calc(5px + var(--calculated-paper-slider-height)/2);\n      transition: left 0.18s ease;\n    }\n\n    .ring.expand.dragging > .bar-container {\n      transition: none;\n    }\n\n    .ring.expand:not(.pin) > .bar-container {\n      left: calc(8px + var(--calculated-paper-slider-height)/2);\n    }\n\n    #sliderBar {\n      padding: 15px 0;\n      width: 100%;\n      background-color: var(--paper-slider-bar-color, transparent);\n      --paper-progress-container-color: var(--paper-slider-container-color, var(--paper-grey-400));\n      --paper-progress-height: var(--calculated-paper-slider-height);\n    }\n\n    .slider-markers {\n      position: absolute;\n      /* slider-knob is 30px + the slider-height so that the markers should start at a offset of 15px*/\n      top: 15px;\n      height: var(--calculated-paper-slider-height);\n      left: 0;\n      right: -1px;\n      box-sizing: border-box;\n      pointer-events: none;\n      @apply --layout-horizontal;\n    }\n\n    .slider-marker {\n      @apply --layout-flex;\n    }\n    .slider-markers::after,\n    .slider-marker::after {\n      content: \"\";\n      display: block;\n      margin-left: -1px;\n      width: 2px;\n      height: var(--calculated-paper-slider-height);\n      border-radius: 50%;\n      background-color: var(--paper-slider-markers-color, #000);\n    }\n\n    .slider-knob {\n      position: absolute;\n      left: 0;\n      top: 0;\n      margin-left: calc(-15px - var(--calculated-paper-slider-height)/2);\n      width: calc(30px + var(--calculated-paper-slider-height));\n      height: calc(30px + var(--calculated-paper-slider-height));\n    }\n\n    .transiting > .slider-knob {\n      transition: left 0.08s ease;\n    }\n\n    .slider-knob:focus {\n      outline: none;\n    }\n\n    .slider-knob.dragging {\n      transition: none;\n    }\n\n    .snaps > .slider-knob.dragging {\n      transition: -webkit-transform 0.08s ease;\n      transition: transform 0.08s ease;\n    }\n\n    .slider-knob-inner {\n      margin: 10px;\n      width: calc(100% - 20px);\n      height: calc(100% - 20px);\n      background-color: var(--paper-slider-knob-color, var(--google-blue-700));\n      border: 2px solid var(--paper-slider-knob-color, var(--google-blue-700));\n      border-radius: 50%;\n\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n\n      transition-property: -webkit-transform, background-color, border;\n      transition-property: transform, background-color, border;\n      transition-duration: 0.18s;\n      transition-timing-function: ease;\n    }\n\n    .expand:not(.pin) > .slider-knob > .slider-knob-inner {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n\n    .ring > .slider-knob > .slider-knob-inner {\n      background-color: var(--paper-slider-knob-start-color, transparent);\n      border: 2px solid var(--paper-slider-knob-start-border-color, var(--paper-grey-400));\n    }\n\n    .slider-knob-inner::before {\n      background-color: var(--paper-slider-pin-color, var(--google-blue-700));\n    }\n\n    .pin > .slider-knob > .slider-knob-inner::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 50%;\n      margin-left: -13px;\n      width: 26px;\n      height: 26px;\n      border-radius: 50% 50% 50% 0;\n\n      -webkit-transform: rotate(-45deg) scale(0) translate(0);\n      transform: rotate(-45deg) scale(0) translate(0);\n    }\n\n    .slider-knob-inner::before,\n    .slider-knob-inner::after {\n      transition: -webkit-transform .18s ease, background-color .18s ease;\n      transition: transform .18s ease, background-color .18s ease;\n    }\n\n    .pin.ring > .slider-knob > .slider-knob-inner::before {\n      background-color: var(--paper-slider-pin-start-color, var(--paper-grey-400));\n    }\n\n    .pin.expand > .slider-knob > .slider-knob-inner::before {\n      -webkit-transform: rotate(-45deg) scale(1) translate(17px, -17px);\n      transform: rotate(-45deg) scale(1) translate(17px, -17px);\n    }\n\n    .pin > .slider-knob > .slider-knob-inner::after {\n      content: attr(value);\n      position: absolute;\n      top: 0;\n      left: 50%;\n      margin-left: -16px;\n      width: 32px;\n      height: 26px;\n      text-align: center;\n      color: var(--paper-slider-font-color, #fff);\n      font-size: 10px;\n\n      -webkit-transform: scale(0) translate(0);\n      transform: scale(0) translate(0);\n    }\n\n    .pin.expand > .slider-knob > .slider-knob-inner::after {\n      -webkit-transform: scale(1) translate(0, -17px);\n      transform: scale(1) translate(0, -17px);\n    }\n\n    /* paper-input */\n    .slider-input {\n      width: 50px;\n      overflow: hidden;\n      --paper-input-container-input: {\n        text-align: center;\n        @apply --paper-slider-input-container-input;\n      };\n      @apply --paper-slider-input;\n    }\n\n    /* disabled state */\n    #sliderContainer.disabled {\n      pointer-events: none;\n    }\n\n    .disabled > .slider-knob > .slider-knob-inner {\n      background-color: var(--paper-slider-disabled-knob-color, var(--paper-grey-400));\n      border: 2px solid var(--paper-slider-disabled-knob-color, var(--paper-grey-400));\n      -webkit-transform: scale3d(0.75, 0.75, 1);\n      transform: scale3d(0.75, 0.75, 1);\n    }\n\n    .disabled.ring > .slider-knob > .slider-knob-inner {\n      background-color: var(--paper-slider-knob-start-color, transparent);\n      border: 2px solid var(--paper-slider-knob-start-border-color, var(--paper-grey-400));\n    }\n\n    paper-ripple {\n      color: var(--paper-slider-knob-color, var(--google-blue-700));\n    }\n  </style>\n\n  <div id=\"sliderContainer\" class\\$=\"[[_getClassNames(disabled, pin, snaps, immediateValue, min, expand, dragging, transiting, editable)]]\">\n    <div class=\"bar-container\">\n      <paper-progress disabled\\$=\"[[disabled]]\" id=\"sliderBar\" aria-hidden=\"true\" min=\"[[min]]\" max=\"[[max]]\" step=\"[[step]]\" value=\"[[immediateValue]]\" secondary-progress=\"[[secondaryProgress]]\" on-down=\"_bardown\" on-up=\"_resetKnob\" on-track=\"_bartrack\" on-tap=\"_barclick\">\n      </paper-progress>\n    </div>\n\n    <template is=\"dom-if\" if=\"[[snaps]]\">\n      <div class=\"slider-markers\">\n        <template is=\"dom-repeat\" items=\"[[markers]]\">\n          <div class=\"slider-marker\"></div>\n        </template>\n      </div>\n    </template>\n\n    <div id=\"sliderKnob\" class=\"slider-knob\" on-down=\"_knobdown\" on-up=\"_resetKnob\" on-track=\"_onTrack\" on-transitionend=\"_knobTransitionEnd\">\n        <div class=\"slider-knob-inner\" value\\$=\"[[immediateValue]]\"></div>\n    </div>\n  </div>\n\n  <template is=\"dom-if\" if=\"[[editable]]\">\n    <paper-input id=\"input\" type=\"number\" step=\"[[step]]\" min=\"[[min]]\" max=\"[[max]]\" class=\"slider-input\" disabled\\$=\"[[disabled]]\" value=\"[[immediateValue]]\" on-change=\"_changeValue\" on-keydown=\"_inputKeyDown\" no-label-float>\n    </paper-input>\n  </template>\n`;\ntemplate.setAttribute('strip-whitespace', '');\n\n/**\nMaterial design:\n[Sliders](https://www.google.com/design/spec/components/sliders.html)\n\n`paper-slider` allows user to select a value from a range of values by\nmoving the slider thumb.  The interactive nature of the slider makes it a\ngreat choice for settings that reflect intensity levels, such as volume,\nbrightness, or color saturation.\n\nExample:\n\n    <paper-slider></paper-slider>\n\nUse `min` and `max` to specify the slider range.  Default is 0 to 100.\n\nExample:\n\n    <paper-slider min=\"10\" max=\"200\" value=\"110\"></paper-slider>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-slider-container-color` | The background color of the bar | `--paper-grey-400`\n`--paper-slider-bar-color` | The background color of the slider | `transparent`\n`--paper-slider-active-color` | The progress bar color | `--google-blue-700`\n`--paper-slider-secondary-color` | The secondary progress bar color | `--google-blue-300`\n`--paper-slider-knob-color` | The knob color | `--google-blue-700`\n`--paper-slider-disabled-knob-color` | The disabled knob color | `--paper-grey-400`\n`--paper-slider-pin-color` | The pin color | `--google-blue-700`\n`--paper-slider-font-color` | The pin's text color | `#fff`\n`--paper-slider-markers-color` | The snaps markers color | `#000`\n`--paper-slider-disabled-active-color` | The disabled progress bar color | `--paper-grey-400`\n`--paper-slider-disabled-secondary-color` | The disabled secondary progress bar color | `--paper-grey-400`\n`--paper-slider-knob-start-color` | The fill color of the knob at the far left | `transparent`\n`--paper-slider-knob-start-border-color` | The border color of the knob at the far left | `--paper-grey-400`\n`--paper-slider-pin-start-color` | The color of the pin at the far left | `--paper-grey-400`\n`--paper-slider-height` | Height of the progress bar | `2px`\n`--paper-slider-input` | Mixin applied to the input in editable mode | `{}`\n`--paper-slider-input-container-input` | Mixin applied to the paper-input-container-input in editable mode | `{}`\n\n@group Paper Elements\n@element paper-slider\n@demo demo/index.html\n*/\nPolymer({\n  _template: template,\n\n  is: 'paper-slider',\n\n  behaviors: [\n    IronA11yKeysBehavior,\n    IronFormElementBehavior,\n    PaperInkyFocusBehavior,\n    IronRangeBehavior\n  ],\n\n  properties: {\n    value: {\n      type: Number,\n      value: 0,\n    },\n\n    /**\n     * If true, the slider thumb snaps to tick marks evenly spaced based\n     * on the `step` property value.\n     */\n    snaps: {\n      type: Boolean,\n      value: false,\n      notify: true,\n    },\n\n    /**\n     * If true, a pin with numeric value label is shown when the slider thumb\n     * is pressed. Use for settings for which users need to know the exact\n     * value of the setting.\n     */\n    pin: {\n      type: Boolean,\n      value: false,\n      notify: true,\n    },\n\n    /**\n     * The number that represents the current secondary progress.\n     */\n    secondaryProgress: {\n      type: Number,\n      value: 0,\n      notify: true,\n      observer: '_secondaryProgressChanged',\n    },\n\n    /**\n     * If true, an input is shown and user can use it to set the slider value.\n     */\n    editable: {\n      type: Boolean,\n      value: false,\n    },\n\n    /**\n     * The immediate value of the slider.  This value is updated while the user\n     * is dragging the slider.\n     */\n    immediateValue: {\n      type: Number,\n      value: 0,\n      readOnly: true,\n      notify: true,\n    },\n\n    /**\n     * The maximum number of markers\n     */\n    maxMarkers: {\n      type: Number,\n      value: 0,\n      notify: true,\n    },\n\n    /**\n     * If true, the knob is expanded\n     */\n    expand: {\n      type: Boolean,\n      value: false,\n      readOnly: true,\n    },\n\n    /**\n     * If true, a touchmove on the slider bar doesn't drag the slider thunb.\n     * Tapping on the slider bar still updates the slider's position\n     */\n    ignoreBarTouch: {\n      type: Boolean,\n      value: false,\n    },\n\n    /**\n     * True when the user is dragging the slider.\n     */\n    dragging: {\n      type: Boolean,\n      value: false,\n      readOnly: true,\n      notify: true,\n    },\n\n    transiting: {\n      type: Boolean,\n      value: false,\n      readOnly: true,\n    },\n\n    markers: {\n      type: Array,\n      readOnly: true,\n      value: function() {\n        return [];\n      },\n    },\n  },\n\n  observers: [\n    '_updateKnob(value, min, max, snaps, step)',\n    '_valueChanged(value)',\n    '_immediateValueChanged(immediateValue)',\n    '_updateMarkers(maxMarkers, min, max, snaps)',\n  ],\n\n  hostAttributes: {\n    role: 'slider',\n    tabindex: 0,\n  },\n\n  /** @type {!Object} */\n  keyBindings: {\n    'left': '_leftKey',\n    'right': '_rightKey',\n    'down pagedown home': '_decrementKey',\n    'up pageup end': '_incrementKey',\n  },\n\n  ready: function() {\n    if (this.ignoreBarTouch) {\n      setTouchAction(this.$.sliderBar, 'auto');\n    }\n  },\n\n  /**\n   * Increases value by `step` but not above `max`.\n   * @method increment\n   */\n  increment: function() {\n    this.value = this._clampValue(this.value + this.step);\n  },\n\n  /**\n   * Decreases value by `step` but not below `min`.\n   * @method decrement\n   */\n  decrement: function() {\n    this.value = this._clampValue(this.value - this.step);\n  },\n\n  _updateKnob: function(value, min, max, snaps, step) {\n    this.setAttribute('aria-valuemin', min);\n    this.setAttribute('aria-valuemax', max);\n    this.setAttribute('aria-valuenow', value);\n\n    this._positionKnob(this._calcRatio(value) * 100);\n  },\n\n  _valueChanged: function() {\n    this.fire('value-change', {composed: true});\n  },\n\n  _immediateValueChanged: function() {\n    if (this.dragging) {\n      this.fire('immediate-value-change', {composed: true});\n    } else {\n      this.value = this.immediateValue;\n    }\n  },\n\n  _secondaryProgressChanged: function() {\n    this.secondaryProgress = this._clampValue(this.secondaryProgress);\n  },\n\n  _expandKnob: function() {\n    this._setExpand(true);\n  },\n\n  _resetKnob: function() {\n    this.cancelDebouncer('expandKnob');\n    this._setExpand(false);\n  },\n\n  _positionKnob: function(ratio) {\n    this._setImmediateValue(this._calcStep(this._calcKnobPosition(ratio)));\n    this._setRatio(this._calcRatio(this.immediateValue) * 100);\n\n    this.$.sliderKnob.style.left = this.ratio + '%';\n    if (this.dragging) {\n      this._knobstartx = (this.ratio * this._w) / 100;\n      this.translate3d(0, 0, 0, this.$.sliderKnob);\n    }\n  },\n\n  _calcKnobPosition: function(ratio) {\n    return (this.max - this.min) * ratio / 100 + this.min;\n  },\n\n  _onTrack: function(event) {\n    event.stopPropagation();\n    switch (event.detail.state) {\n      case 'start':\n        this._trackStart(event);\n        break;\n      case 'track':\n        this._trackX(event);\n        break;\n      case 'end':\n        this._trackEnd();\n        break;\n    }\n  },\n\n  _trackStart: function(event) {\n    this._setTransiting(false);\n    this._w = this.$.sliderBar.offsetWidth;\n    this._x = this.ratio * this._w / 100;\n    this._startx = this._x;\n    this._knobstartx = this._startx;\n    this._minx = -this._startx;\n    this._maxx = this._w - this._startx;\n    this.$.sliderKnob.classList.add('dragging');\n    this._setDragging(true);\n  },\n\n  _trackX: function(event) {\n    if (!this.dragging) {\n      this._trackStart(event);\n    }\n\n    var direction = this._isRTL ? -1 : 1;\n    var dx =\n        Math.min(this._maxx, Math.max(this._minx, event.detail.dx * direction));\n    this._x = this._startx + dx;\n\n    var immediateValue =\n        this._calcStep(this._calcKnobPosition(this._x / this._w * 100));\n    this._setImmediateValue(immediateValue);\n\n    // update knob's position\n    var translateX =\n        ((this._calcRatio(this.immediateValue) * this._w) - this._knobstartx);\n    this.translate3d(translateX + 'px', 0, 0, this.$.sliderKnob);\n  },\n\n  _trackEnd: function() {\n    var s = this.$.sliderKnob.style;\n\n    this.$.sliderKnob.classList.remove('dragging');\n    this._setDragging(false);\n    this._resetKnob();\n    this.value = this.immediateValue;\n\n    s.transform = s.webkitTransform = '';\n\n    this.fire('change', {composed: true});\n  },\n\n  _knobdown: function(event) {\n    this._expandKnob();\n\n    // cancel selection\n    event.preventDefault();\n\n    // set the focus manually because we will called prevent default\n    this.focus();\n  },\n\n  _bartrack: function(event) {\n    if (this._allowBarEvent(event)) {\n      this._onTrack(event);\n    }\n  },\n\n  _barclick: function(event) {\n    this._w = this.$.sliderBar.offsetWidth;\n    var rect = this.$.sliderBar.getBoundingClientRect();\n    var ratio = (event.detail.x - rect.left) / this._w * 100;\n    if (this._isRTL) {\n      ratio = 100 - ratio;\n    }\n    var prevRatio = this.ratio;\n\n    this._setTransiting(true);\n    this._positionKnob(ratio);\n\n    // if the ratio doesn't change, sliderKnob's animation won't start\n    // and `_knobTransitionEnd` won't be called\n    // Therefore, we need to manually update the `transiting` state\n    if (prevRatio === this.ratio) {\n      this._setTransiting(false);\n    }\n\n    this.async(function() {\n      this.fire('change', {composed: true});\n    });\n\n    // cancel selection\n    event.preventDefault();\n\n    // set the focus manually because we will called prevent default\n    this.focus();\n  },\n\n  _bardown: function(event) {\n    if (this._allowBarEvent(event)) {\n      this.debounce('expandKnob', this._expandKnob, 60);\n      this._barclick(event);\n    }\n  },\n\n  _knobTransitionEnd: function(event) {\n    if (event.target === this.$.sliderKnob) {\n      this._setTransiting(false);\n    }\n  },\n\n  _updateMarkers: function(maxMarkers, min, max, snaps) {\n    if (!snaps) {\n      this._setMarkers([]);\n    }\n    var steps = Math.round((max - min) / this.step);\n    if (steps > maxMarkers) {\n      steps = maxMarkers;\n    }\n    if (steps < 0 || !isFinite(steps)) {\n      steps = 0;\n    }\n    this._setMarkers(new Array(steps));\n  },\n\n  _mergeClasses: function(classes) {\n    return Object.keys(classes)\n        .filter(function(className) {\n          return classes[className];\n        })\n        .join(' ');\n  },\n\n  _getClassNames: function() {\n    return this._mergeClasses({\n      disabled: this.disabled,\n      pin: this.pin,\n      snaps: this.snaps,\n      ring: this.immediateValue <= this.min,\n      expand: this.expand,\n      dragging: this.dragging,\n      transiting: this.transiting,\n      editable: this.editable\n    });\n  },\n\n  _allowBarEvent: function(event) {\n    return (\n        !this.ignoreBarTouch ||\n        (event.detail.sourceEvent instanceof MouseEvent))\n  },\n\n  get _isRTL() {\n    if (this.__isRTL === undefined) {\n      this.__isRTL = window.getComputedStyle(this)['direction'] === 'rtl';\n    }\n    return this.__isRTL;\n  },\n\n  _leftKey: function(event) {\n    if (this._isRTL)\n      this._incrementKey(event);\n    else\n      this._decrementKey(event);\n  },\n\n  _rightKey: function(event) {\n    if (this._isRTL)\n      this._decrementKey(event);\n    else\n      this._incrementKey(event);\n  },\n\n  _incrementKey: function(event) {\n    if (!this.disabled) {\n      if (event.detail.key === 'end') {\n        this.value = this.max;\n      } else {\n        this.increment();\n      }\n      this.fire('change');\n      event.preventDefault();\n    }\n  },\n\n  _decrementKey: function(event) {\n    if (!this.disabled) {\n      if (event.detail.key === 'home') {\n        this.value = this.min;\n      } else {\n        this.decrement();\n      }\n      this.fire('change');\n      event.preventDefault();\n    }\n  },\n\n  _changeValue: function(event) {\n    this.value = event.target.value;\n    this.fire('change', {composed: true});\n  },\n\n  _inputKeyDown: function(event) {\n    event.stopPropagation();\n  },\n\n  // create the element ripple inside the `sliderKnob`\n  _createRipple: function() {\n    this._rippleContainer = this.$.sliderKnob;\n    return PaperInkyFocusBehaviorImpl._createRipple.call(this);\n  },\n\n  // Hide the ripple when user is not interacting with keyboard.\n  // This behavior is different from other ripple-y controls, but is\n  // according to spec:\n  // https://www.google.com/design/spec/components/sliders.html\n  _focusedChanged: function(receivedFocusFromKeyboard) {\n    if (receivedFocusFromKeyboard) {\n      this.ensureRipple();\n    }\n    if (this.hasRipple()) {\n      // note, ripple must be un-hidden prior to setting `holdDown`\n      if (receivedFocusFromKeyboard) {\n        this._ripple.style.display = '';\n      } else {\n        this._ripple.style.display = 'none';\n      }\n      this._ripple.holdDown = receivedFocusFromKeyboard;\n    }\n  }\n  /**\n   * Fired when the slider's value changes.\n   *\n   * @event value-change\n   */\n\n  /**\n   * Fired when the slider's immediateValue changes. Only occurs while the\n   * user is dragging.\n   *\n   * To detect changes to immediateValue that happen for any input (i.e.\n   * dragging, tapping, clicking, etc.) listen for immediate-value-changed\n   * instead.\n   *\n   * @event immediate-value-change\n   */\n\n  /**\n   * Fired when the slider's value changes due to user interaction.\n   *\n   * Changes to the slider's value due to changes in an underlying\n   * bound variable will not trigger this event.\n   *\n   * @event change\n   */\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/color.js';\n\nimport {IronRangeBehavior} from '@polymer/iron-range-behavior/iron-range-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design: [Progress &\nactivity](https://www.google.com/design/spec/components/progress-activity.html)\n\nThe progress bars are for situations where the percentage completed can be\ndetermined. They give users a quick sense of how much longer an operation\nwill take.\n\nExample:\n\n    <paper-progress value=\"10\"></paper-progress>\n\nThere is also a secondary progress which is useful for displaying intermediate\nprogress, such as the buffer level during a streaming playback progress bar.\n\nExample:\n\n    <paper-progress value=\"10\" secondary-progress=\"30\"></paper-progress>\n\n### Styling progress bar:\n\nTo change the active progress bar color:\n\n    paper-progress {\n       --paper-progress-active-color: #e91e63;\n    }\n\nTo change the secondary progress bar color:\n\n    paper-progress {\n      --paper-progress-secondary-color: #f8bbd0;\n    }\n\nTo change the progress bar background color:\n\n    paper-progress {\n      --paper-progress-container-color: #64ffda;\n    }\n\nAdd the class `transiting` to a paper-progress to animate the progress bar when\nthe value changed. You can also customize the transition:\n\n    paper-progress {\n      --paper-progress-transition-duration: 0.08s;\n      --paper-progress-transition-timing-function: ease;\n      --paper-progress-transition-delay: 0s;\n    }\n\nTo change the duration of the indeterminate cycle:\n\n    paper-progress {\n      --paper-progress-indeterminate-cycle-duration: 2s;\n    }\n\nThe following mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|---------\n`--paper-progress-container` | Mixin applied to container | `{}`\n`--paper-progress-transition-duration` | Duration of the transition | `0.08s`\n`--paper-progress-transition-timing-function` | The timing function for the transition | `ease`\n`--paper-progress-transition-delay` | delay for the transition | `0s`\n`--paper-progress-container-color` | Color of the container | `--google-grey-300`\n`--paper-progress-active-color` | The color of the active bar | `--google-green-500`\n`--paper-progress-secondary-color` | The color of the secondary bar | `--google-green-100`\n`--paper-progress-disabled-active-color` | The color of the active bar if disabled | `--google-grey-500`\n`--paper-progress-disabled-secondary-color` | The color of the secondary bar if disabled  | `--google-grey-300`\n`--paper-progress-height` | The height of the progress bar | `4px`\n`--paper-progress-indeterminate-cycle-duration` | Duration of an indeterminate cycle | `2s`\n\n@group Paper Elements\n@element paper-progress\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        width: 200px;\n        position: relative;\n        overflow: hidden;\n      }\n\n      :host([hidden]), [hidden] {\n        display: none !important;\n      }\n\n      #progressContainer {\n        @apply --paper-progress-container;\n        position: relative;\n      }\n\n      #progressContainer,\n      /* the stripe for the indeterminate animation*/\n      .indeterminate::after {\n        height: var(--paper-progress-height, 4px);\n      }\n\n      #primaryProgress,\n      #secondaryProgress,\n      .indeterminate::after {\n        @apply --layout-fit;\n      }\n\n      #progressContainer,\n      .indeterminate::after {\n        background: var(--paper-progress-container-color, var(--google-grey-300));\n      }\n\n      :host(.transiting) #primaryProgress,\n      :host(.transiting) #secondaryProgress {\n        -webkit-transition-property: -webkit-transform;\n        transition-property: transform;\n\n        /* Duration */\n        -webkit-transition-duration: var(--paper-progress-transition-duration, 0.08s);\n        transition-duration: var(--paper-progress-transition-duration, 0.08s);\n\n        /* Timing function */\n        -webkit-transition-timing-function: var(--paper-progress-transition-timing-function, ease);\n        transition-timing-function: var(--paper-progress-transition-timing-function, ease);\n\n        /* Delay */\n        -webkit-transition-delay: var(--paper-progress-transition-delay, 0s);\n        transition-delay: var(--paper-progress-transition-delay, 0s);\n      }\n\n      #primaryProgress,\n      #secondaryProgress {\n        @apply --layout-fit;\n        -webkit-transform-origin: left center;\n        transform-origin: left center;\n        -webkit-transform: scaleX(0);\n        transform: scaleX(0);\n        will-change: transform;\n      }\n\n      #primaryProgress {\n        background: var(--paper-progress-active-color, var(--google-green-500));\n      }\n\n      #secondaryProgress {\n        background: var(--paper-progress-secondary-color, var(--google-green-100));\n      }\n\n      :host([disabled]) #primaryProgress {\n        background: var(--paper-progress-disabled-active-color, var(--google-grey-500));\n      }\n\n      :host([disabled]) #secondaryProgress {\n        background: var(--paper-progress-disabled-secondary-color, var(--google-grey-300));\n      }\n\n      :host(:not([disabled])) #primaryProgress.indeterminate {\n        -webkit-transform-origin: right center;\n        transform-origin: right center;\n        -webkit-animation: indeterminate-bar var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;\n        animation: indeterminate-bar var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;\n      }\n\n      :host(:not([disabled])) #primaryProgress.indeterminate::after {\n        content: \"\";\n        -webkit-transform-origin: center center;\n        transform-origin: center center;\n\n        -webkit-animation: indeterminate-splitter var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;\n        animation: indeterminate-splitter var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;\n      }\n\n      @-webkit-keyframes indeterminate-bar {\n        0% {\n          -webkit-transform: scaleX(1) translateX(-100%);\n        }\n        50% {\n          -webkit-transform: scaleX(1) translateX(0%);\n        }\n        75% {\n          -webkit-transform: scaleX(1) translateX(0%);\n          -webkit-animation-timing-function: cubic-bezier(.28,.62,.37,.91);\n        }\n        100% {\n          -webkit-transform: scaleX(0) translateX(0%);\n        }\n      }\n\n      @-webkit-keyframes indeterminate-splitter {\n        0% {\n          -webkit-transform: scaleX(.75) translateX(-125%);\n        }\n        30% {\n          -webkit-transform: scaleX(.75) translateX(-125%);\n          -webkit-animation-timing-function: cubic-bezier(.42,0,.6,.8);\n        }\n        90% {\n          -webkit-transform: scaleX(.75) translateX(125%);\n        }\n        100% {\n          -webkit-transform: scaleX(.75) translateX(125%);\n        }\n      }\n\n      @keyframes indeterminate-bar {\n        0% {\n          transform: scaleX(1) translateX(-100%);\n        }\n        50% {\n          transform: scaleX(1) translateX(0%);\n        }\n        75% {\n          transform: scaleX(1) translateX(0%);\n          animation-timing-function: cubic-bezier(.28,.62,.37,.91);\n        }\n        100% {\n          transform: scaleX(0) translateX(0%);\n        }\n      }\n\n      @keyframes indeterminate-splitter {\n        0% {\n          transform: scaleX(.75) translateX(-125%);\n        }\n        30% {\n          transform: scaleX(.75) translateX(-125%);\n          animation-timing-function: cubic-bezier(.42,0,.6,.8);\n        }\n        90% {\n          transform: scaleX(.75) translateX(125%);\n        }\n        100% {\n          transform: scaleX(.75) translateX(125%);\n        }\n      }\n    </style>\n\n    <div id=\"progressContainer\">\n      <div id=\"secondaryProgress\" hidden\\$=\"[[_hideSecondaryProgress(secondaryRatio)]]\"></div>\n      <div id=\"primaryProgress\"></div>\n    </div>\n`,\n\n  is: 'paper-progress',\n  behaviors: [IronRangeBehavior],\n\n  properties: {\n    /**\n     * The number that represents the current secondary progress.\n     */\n    secondaryProgress: {type: Number, value: 0},\n\n    /**\n     * The secondary ratio\n     */\n    secondaryRatio: {type: Number, value: 0, readOnly: true},\n\n    /**\n     * Use an indeterminate progress indicator.\n     */\n    indeterminate:\n        {type: Boolean, value: false, observer: '_toggleIndeterminate'},\n\n    /**\n     * True if the progress is disabled.\n     */\n    disabled: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true,\n      observer: '_disabledChanged'\n    }\n  },\n\n  observers:\n      ['_progressChanged(secondaryProgress, value, min, max, indeterminate)'],\n\n  hostAttributes: {role: 'progressbar'},\n\n  _toggleIndeterminate: function(indeterminate) {\n    // If we use attribute/class binding, the animation sometimes doesn't\n    // translate properly on Safari 7.1. So instead, we toggle the class here in\n    // the update method.\n    this.toggleClass('indeterminate', indeterminate, this.$.primaryProgress);\n  },\n\n  _transformProgress: function(progress, ratio) {\n    var transform = 'scaleX(' + (ratio / 100) + ')';\n    progress.style.transform = progress.style.webkitTransform = transform;\n  },\n\n  _mainRatioChanged: function(ratio) {\n    this._transformProgress(this.$.primaryProgress, ratio);\n  },\n\n  _progressChanged: function(\n      secondaryProgress, value, min, max, indeterminate) {\n    secondaryProgress = this._clampValue(secondaryProgress);\n    value = this._clampValue(value);\n\n    var secondaryRatio = this._calcRatio(secondaryProgress) * 100;\n    var mainRatio = this._calcRatio(value) * 100;\n\n    this._setSecondaryRatio(secondaryRatio);\n    this._transformProgress(this.$.secondaryProgress, secondaryRatio);\n    this._transformProgress(this.$.primaryProgress, mainRatio);\n\n    this.secondaryProgress = secondaryProgress;\n\n    if (indeterminate) {\n      this.removeAttribute('aria-valuenow');\n    } else {\n      this.setAttribute('aria-valuenow', value);\n    }\n    this.setAttribute('aria-valuemin', min);\n    this.setAttribute('aria-valuemax', max);\n  },\n\n  _disabledChanged: function(disabled) {\n    this.setAttribute('aria-disabled', disabled ? 'true' : 'false');\n  },\n\n  _hideSecondaryProgress: function(secondaryRatio) {\n    return secondaryRatio === 0;\n  }\n});\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACyTA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA","sourceRoot":""}
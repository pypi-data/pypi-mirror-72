{"version":3,"file":"chunk.a227510dcd37788a542e.js","sources":["webpack:///./src/common/string/compare.ts","webpack:///./src/components/user/ha-user-badge.ts","webpack:///./src/components/ha-sidebar.ts"],"sourcesContent":["export const compare = (a: string, b: string) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n};\n\nexport const caseInsensitiveCompare = (a: string, b: string) =>\n  compare(a.toLowerCase(), b.toLowerCase());\n","import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { toggleAttribute } from \"../../common/dom/toggle_attribute\";\nimport { User } from \"../../data/user\";\nimport { CurrentUser } from \"../../types\";\n\nconst computeInitials = (name: string) => {\n  if (!name) {\n    return \"user\";\n  }\n  return (\n    name\n      .trim()\n      // Split by space and take first 3 words\n      .split(\" \")\n      .slice(0, 3)\n      // Of each word, take first letter\n      .map((s) => s.substr(0, 1))\n      .join(\"\")\n  );\n};\n\n@customElement(\"ha-user-badge\")\nclass StateBadge extends LitElement {\n  @property() public user?: User | CurrentUser;\n\n  protected render(): TemplateResult {\n    const user = this.user;\n    const initials = user ? computeInitials(user.name) : \"?\";\n    return html` ${initials} `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    toggleAttribute(\n      this,\n      \"long\",\n      (this.user ? computeInitials(this.user.name) : \"?\").length > 2\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: inline-block;\n        box-sizing: border-box;\n        width: 40px;\n        line-height: 40px;\n        border-radius: 50%;\n        text-align: center;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--primary-text-color);\n        overflow: hidden;\n      }\n\n      :host([long]) {\n        font-size: 80%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-user-badge\": StateBadge;\n  }\n}\n","import { mdiBell, mdiCellphoneSettingsVariant } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"./ha-icon-button\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport type { PaperIconItemElement } from \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport {\n  css,\n  CSSResult,\n  eventOptions,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { compare } from \"../common/string/compare\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport { getDefaultPanel } from \"../data/panel\";\nimport {\n  PersistentNotification,\n  subscribeNotifications,\n} from \"../data/persistent_notification\";\nimport {\n  ExternalConfig,\n  getExternalConfig,\n} from \"../external_app/external_config\";\nimport type { HomeAssistant, PanelInfo } from \"../types\";\nimport \"./ha-svg-icon\";\nimport \"./ha-icon\";\nimport \"./ha-menu-button\";\nimport \"./user/ha-user-badge\";\n\nconst SHOW_AFTER_SPACER = [\n  \"config\",\n  \"developer-tools\",\n  \"hassio\",\n  \"aishelp\",\n  \"aisdocs\",\n];\n\nconst SUPPORT_SCROLL_IF_NEEDED = \"scrollIntoViewIfNeeded\" in document.body;\n\nconst SORT_VALUE_URL_PATHS = {\n  aisaudio: 1,\n  aisgalery: 2,\n  aiszigbee: 3,\n  map: 4,\n  logbook: 5,\n  history: 6,\n  \"developer-tools\": 9,\n  hassio: 10,\n  config: 11,\n  aishelp: 12,\n  aisdocs: 13,\n};\n\nconst panelSorter = (a: PanelInfo, b: PanelInfo) => {\n  // Put all the Lovelace at the top.\n  const aLovelace = a.component_name === \"lovelace\";\n  const bLovelace = b.component_name === \"lovelace\";\n\n  if (aLovelace && bLovelace) {\n    return compare(a.title!, b.title!);\n  }\n  if (aLovelace && !bLovelace) {\n    return -1;\n  }\n  if (bLovelace) {\n    return 1;\n  }\n\n  const aBuiltIn = a.url_path in SORT_VALUE_URL_PATHS;\n  const bBuiltIn = b.url_path in SORT_VALUE_URL_PATHS;\n  if (aBuiltIn && bBuiltIn) {\n    return SORT_VALUE_URL_PATHS[a.url_path] - SORT_VALUE_URL_PATHS[b.url_path];\n  }\n  if (aBuiltIn) {\n    return -1;\n  }\n  if (bBuiltIn) {\n    return 1;\n  }\n  // both not built in, sort by title\n  return compare(a.title!, b.title!);\n};\n\nconst computePanels = (hass: HomeAssistant): [PanelInfo[], PanelInfo[]] => {\n  const panels = hass.panels;\n  if (!panels) {\n    return [[], []];\n  }\n\n  const beforeSpacer: PanelInfo[] = [];\n  const afterSpacer: PanelInfo[] = [];\n\n  Object.values(panels).forEach((panel) => {\n    if (!panel.title || panel.url_path === hass.defaultPanel) {\n      return;\n    }\n    (SHOW_AFTER_SPACER.includes(panel.url_path)\n      ? afterSpacer\n      : beforeSpacer\n    ).push(panel);\n  });\n\n  beforeSpacer.sort(panelSorter);\n  afterSpacer.sort(panelSorter);\n\n  return [beforeSpacer, afterSpacer];\n};\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaSidebar extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property({ type: Boolean }) public alwaysExpand = false;\n\n  @property({ type: Boolean, reflect: true }) public expanded = false;\n\n  @property() private _externalConfig?: ExternalConfig;\n\n  @property() private _notifications?: PersistentNotification[];\n\n  // property used only in css\n  // @ts-ignore\n  @property({ type: Boolean, reflect: true }) private _rtl = false;\n\n  private _mouseLeaveTimeout?: number;\n\n  private _tooltipHideTimeout?: number;\n\n  private _recentKeydownActiveUntil = 0;\n\n  protected render() {\n    const hass = this.hass;\n\n    if (!hass) {\n      return html``;\n    }\n\n    const [beforeSpacer, afterSpacer] = computePanels(hass);\n\n    let notificationCount = this._notifications\n      ? this._notifications.length\n      : 0;\n    for (const entityId in hass.states) {\n      if (computeDomain(entityId) === \"configurator\") {\n        notificationCount++;\n      }\n    }\n\n    const defaultPanel = getDefaultPanel(hass);\n\n    return html`\n      <div class=\"menu\">\n        ${!this.narrow\n          ? html`\n              <ha-icon-button\n                aria-label=${hass.localize(\"ui.sidebar.sidebar_toggle\")}\n                .icon=${hass.dockedSidebar === \"docked\"\n                  ? \"hass:menu-open\"\n                  : \"hass:menu\"}\n                @click=${this._toggleSidebar}\n              ></ha-icon-button>\n            `\n          : \"\"}\n        <span class=\"title\">Asystent domowy</span>\n      </div>\n      <paper-listbox\n        attr-for-selected=\"data-panel\"\n        .selected=${hass.panelUrl}\n        @focusin=${this._listboxFocusIn}\n        @focusout=${this._listboxFocusOut}\n        @scroll=${this._listboxScroll}\n        @keydown=${this._listboxKeydown}\n      >\n        ${this._renderPanel(\n          defaultPanel.url_path,\n          defaultPanel.icon || \"hass:view-dashboard\",\n          defaultPanel.title || hass.localize(\"panel.states\")\n        )}\n        ${beforeSpacer.map((panel) =>\n          this._renderPanel(\n            panel.url_path,\n            panel.icon,\n            hass.localize(`panel.${panel.title}`) || panel.title\n          )\n        )}\n        <div class=\"spacer\" disabled></div>\n\n        ${afterSpacer.map((panel) =>\n          this._renderPanel(\n            panel.url_path,\n            panel.icon,\n            hass.localize(`panel.${panel.title}`) || panel.title\n          )\n        )}\n        ${this._externalConfig && this._externalConfig.hasSettingsScreen\n          ? html`\n              <a\n                aria-role=\"option\"\n                aria-label=${hass.localize(\n                  \"ui.sidebar.external_app_configuration\"\n                )}\n                href=\"#external-app-configuration\"\n                tabindex=\"-1\"\n                @click=${this._handleExternalAppConfiguration}\n                @mouseenter=${this._itemMouseEnter}\n                @mouseleave=${this._itemMouseLeave}\n              >\n                <paper-icon-item>\n                  <ha-svg-icon\n                    slot=\"item-icon\"\n                    .path=${mdiCellphoneSettingsVariant}\n                  ></ha-svg-icon>\n                  <span class=\"item-text\">\n                    ${hass.localize(\"ui.sidebar.external_app_configuration\")}\n                  </span>\n                </paper-icon-item>\n              </a>\n            `\n          : \"\"}\n      </paper-listbox>\n\n      <div class=\"divider\"></div>\n\n      <div\n        class=\"notifications-container\"\n        @mouseenter=${this._itemMouseEnter}\n        @mouseleave=${this._itemMouseLeave}\n      >\n        <paper-icon-item\n          class=\"notifications\"\n          aria-role=\"option\"\n          @click=${this._handleShowNotificationDrawer}\n        >\n          <ha-svg-icon slot=\"item-icon\" .path=${mdiBell}></ha-svg-icon>\n          ${!this.expanded && notificationCount > 0\n            ? html`\n                <span class=\"notification-badge\" slot=\"item-icon\">\n                  ${notificationCount}\n                </span>\n              `\n            : \"\"}\n          <span class=\"item-text\">\n            ${hass.localize(\"ui.notification_drawer.title\")}\n          </span>\n          ${this.expanded && notificationCount > 0\n            ? html`\n                <span class=\"notification-badge\">${notificationCount}</span>\n              `\n            : \"\"}\n        </paper-icon-item>\n      </div>\n\n      <a\n        class=${classMap({\n          profile: true,\n          // Mimick behavior that paper-listbox provides\n          \"iron-selected\": hass.panelUrl === \"profile\",\n        })}\n        href=\"/profile\"\n        data-panel=\"panel\"\n        tabindex=\"-1\"\n        aria-role=\"option\"\n        aria-label=${hass.localize(\"panel.profile\")}\n        @mouseenter=${this._itemMouseEnter}\n        @mouseleave=${this._itemMouseLeave}\n      >\n        <paper-icon-item>\n          <ha-user-badge slot=\"item-icon\" .user=${hass.user}></ha-user-badge>\n\n          <span class=\"item-text\">\n            ${hass.user ? hass.user.name : \"\"}\n          </span>\n        </paper-icon-item>\n      </a>\n      <div disabled class=\"bottom-spacer\"></div>\n      <div class=\"tooltip\"></div>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (\n      changedProps.has(\"expanded\") ||\n      changedProps.has(\"narrow\") ||\n      changedProps.has(\"alwaysExpand\") ||\n      changedProps.has(\"_externalConfig\") ||\n      changedProps.has(\"_notifications\")\n    ) {\n      return true;\n    }\n    if (!this.hass || !changedProps.has(\"hass\")) {\n      return false;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant;\n    if (!oldHass) {\n      return true;\n    }\n    const hass = this.hass;\n    return (\n      hass.panels !== oldHass.panels ||\n      hass.panelUrl !== oldHass.panelUrl ||\n      hass.user !== oldHass.user ||\n      hass.localize !== oldHass.localize ||\n      hass.states !== oldHass.states ||\n      hass.defaultPanel !== oldHass.defaultPanel\n    );\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n\n    if (this.hass && this.hass.auth.external) {\n      getExternalConfig(this.hass.auth.external).then((conf) => {\n        this._externalConfig = conf;\n      });\n    }\n    subscribeNotifications(this.hass.connection, (notifications) => {\n      this._notifications = notifications;\n    });\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"alwaysExpand\")) {\n      this.expanded = this.alwaysExpand;\n    }\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n\n    this._rtl = computeRTL(this.hass);\n\n    if (!SUPPORT_SCROLL_IF_NEEDED) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.panelUrl !== this.hass.panelUrl) {\n      const selectedEl = this.shadowRoot!.querySelector(\".iron-selected\");\n      if (selectedEl) {\n        // @ts-ignore\n        selectedEl.scrollIntoViewIfNeeded();\n      }\n    }\n  }\n\n  private get _tooltip() {\n    return this.shadowRoot!.querySelector(\".tooltip\")! as HTMLDivElement;\n  }\n\n  private _itemMouseEnter(ev: MouseEvent) {\n    // On keypresses on the listbox, we're going to ignore mouse enter events\n    // for 100ms so that we ignore it when pressing down arrow scrolls the\n    // sidebar causing the mouse to hover a new icon\n    if (\n      this.expanded ||\n      new Date().getTime() < this._recentKeydownActiveUntil\n    ) {\n      return;\n    }\n    if (this._mouseLeaveTimeout) {\n      clearTimeout(this._mouseLeaveTimeout);\n      this._mouseLeaveTimeout = undefined;\n    }\n    this._showTooltip(ev.currentTarget as PaperIconItemElement);\n  }\n\n  private _itemMouseLeave() {\n    if (this._mouseLeaveTimeout) {\n      clearTimeout(this._mouseLeaveTimeout);\n    }\n    this._mouseLeaveTimeout = window.setTimeout(() => {\n      this._hideTooltip();\n    }, 500);\n  }\n\n  private _listboxFocusIn(ev) {\n    if (this.expanded || ev.target.nodeName !== \"A\") {\n      return;\n    }\n    this._showTooltip(ev.target.querySelector(\"paper-icon-item\"));\n  }\n\n  private _listboxFocusOut() {\n    this._hideTooltip();\n  }\n\n  @eventOptions({\n    passive: true,\n  })\n  private _listboxScroll() {\n    // On keypresses on the listbox, we're going to ignore scroll events\n    // for 100ms so that if pressing down arrow scrolls the sidebar, the tooltip\n    // will not be hidden.\n    if (new Date().getTime() < this._recentKeydownActiveUntil) {\n      return;\n    }\n    this._hideTooltip();\n  }\n\n  private _listboxKeydown() {\n    this._recentKeydownActiveUntil = new Date().getTime() + 100;\n  }\n\n  private _showTooltip(item: PaperIconItemElement) {\n    if (this._tooltipHideTimeout) {\n      clearTimeout(this._tooltipHideTimeout);\n      this._tooltipHideTimeout = undefined;\n    }\n    const tooltip = this._tooltip;\n    const listbox = this.shadowRoot!.querySelector(\"paper-listbox\")!;\n    let top = item.offsetTop + 11;\n    if (listbox.contains(item)) {\n      top -= listbox.scrollTop;\n    }\n    tooltip.innerHTML = item.querySelector(\".item-text\")!.innerHTML;\n    tooltip.style.display = \"block\";\n    tooltip.style.top = `${top}px`;\n    tooltip.style.left = `${item.offsetLeft + item.clientWidth + 4}px`;\n  }\n\n  private _hideTooltip() {\n    // Delay it a little in case other events are pending processing.\n    if (!this._tooltipHideTimeout) {\n      this._tooltipHideTimeout = window.setTimeout(() => {\n        this._tooltipHideTimeout = undefined;\n        this._tooltip.style.display = \"none\";\n      }, 10);\n    }\n  }\n\n  private _handleShowNotificationDrawer() {\n    fireEvent(this, \"hass-show-notifications\");\n  }\n\n  private _handleExternalAppConfiguration(ev: Event) {\n    ev.preventDefault();\n    this.hass.auth.external!.fireMessage({\n      type: \"config_screen/show\",\n    });\n  }\n\n  private _toggleSidebar() {\n    fireEvent(this, \"hass-toggle-menu\");\n  }\n\n  private _renderPanel(urlPath, icon, title) {\n    return html`\n      <a\n        aria-role=\"option\"\n        href=\"${`/${urlPath}`}\"\n        data-panel=\"${urlPath}\"\n        tabindex=\"-1\"\n        @mouseenter=${this._itemMouseEnter}\n        @mouseleave=${this._itemMouseLeave}\n      >\n        <paper-icon-item>\n          <ha-icon slot=\"item-icon\" .icon=\"${icon}\"></ha-icon>\n          <span class=\"item-text\">${title}</span>\n        </paper-icon-item>\n      </a>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        height: 100%;\n        display: block;\n        overflow: hidden;\n        -ms-user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        border-right: 1px solid var(--divider-color);\n        background-color: var(--sidebar-background-color);\n        width: 64px;\n      }\n      :host([expanded]) {\n        width: 256px;\n      }\n\n      .menu {\n        box-sizing: border-box;\n        height: 65px;\n        display: flex;\n        padding: 0 8.5px;\n        border-bottom: 1px solid transparent;\n        white-space: nowrap;\n        font-weight: 400;\n        color: var(--primary-text-color);\n        border-bottom: 1px solid var(--divider-color);\n        background-color: var(--primary-background-color);\n        font-size: 20px;\n        align-items: center;\n      }\n      :host([expanded]) .menu {\n        width: 256px;\n      }\n\n      .menu ha-icon-button {\n        color: var(--sidebar-icon-color);\n      }\n      :host([expanded]) .menu ha-icon-button {\n        margin-right: 23px;\n      }\n      :host([expanded][_rtl]) .menu ha-icon-button {\n        margin-right: 0px;\n        margin-left: 23px;\n      }\n\n      .title {\n        display: none;\n      }\n      :host([expanded]) .title {\n        display: initial;\n      }\n\n      paper-listbox::-webkit-scrollbar {\n        width: 0.4rem;\n        height: 0.4rem;\n      }\n\n      paper-listbox::-webkit-scrollbar-thumb {\n        -webkit-border-radius: 4px;\n        border-radius: 4px;\n        background: var(--scrollbar-thumb-color);\n      }\n\n      paper-listbox {\n        padding: 4px 0;\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n        height: calc(100% - 196px);\n        overflow-y: auto;\n        overflow-x: hidden;\n        scrollbar-color: var(--scrollbar-thumb-color) transparent;\n        scrollbar-width: thin;\n        background: none;\n      }\n\n      a {\n        text-decoration: none;\n        color: var(--sidebar-text-color);\n        font-weight: 500;\n        font-size: 14px;\n        position: relative;\n        display: block;\n        outline: 0;\n      }\n\n      paper-icon-item {\n        box-sizing: border-box;\n        margin: 4px 8px;\n        padding-left: 12px;\n        border-radius: 4px;\n        --paper-item-min-height: 40px;\n        width: 48px;\n      }\n      :host([expanded]) paper-icon-item {\n        width: 240px;\n      }\n      :host([_rtl]) paper-icon-item {\n        padding-left: auto;\n        padding-right: 12px;\n      }\n\n      ha-icon[slot=\"item-icon\"],\n      ha-svg-icon[slot=\"item-icon\"] {\n        color: var(--sidebar-icon-color);\n      }\n\n      .iron-selected paper-icon-item::before,\n      a:not(.iron-selected):focus::before {\n        border-radius: 4px;\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        pointer-events: none;\n        content: \"\";\n        transition: opacity 15ms linear;\n        will-change: opacity;\n      }\n      .iron-selected paper-icon-item::before {\n        background-color: var(--sidebar-selected-icon-color);\n        opacity: 0.12;\n      }\n      a:not(.iron-selected):focus::before {\n        background-color: currentColor;\n        opacity: var(--dark-divider-opacity);\n        margin: 4px 8px;\n      }\n      .iron-selected paper-icon-item:focus::before,\n      .iron-selected:focus paper-icon-item::before {\n        opacity: 0.2;\n      }\n\n      .iron-selected paper-icon-item[pressed]:before {\n        opacity: 0.37;\n      }\n\n      paper-icon-item span {\n        color: var(--sidebar-text-color);\n        font-weight: 500;\n        font-size: 14px;\n      }\n\n      a.iron-selected paper-icon-item ha-icon,\n      a.iron-selected paper-icon-item ha-svg-icon {\n        color: var(--sidebar-selected-icon-color);\n      }\n\n      a.iron-selected .item-text {\n        color: var(--sidebar-selected-text-color);\n      }\n\n      paper-icon-item .item-text {\n        display: none;\n        max-width: calc(100% - 56px);\n      }\n      :host([expanded]) paper-icon-item .item-text {\n        display: block;\n      }\n\n      .divider {\n        bottom: 112px;\n        padding: 10px 0;\n      }\n      .divider::before {\n        content: \" \";\n        display: block;\n        height: 1px;\n        background-color: var(--divider-color);\n      }\n      .notifications-container {\n        display: flex;\n      }\n      .notifications {\n        cursor: pointer;\n      }\n      .notifications .item-text {\n        flex: 1;\n      }\n      .profile {\n      }\n      .profile paper-icon-item {\n        padding-left: 4px;\n      }\n      :host([_rtl]) .profile paper-icon-item {\n        padding-left: auto;\n        padding-right: 4px;\n      }\n      .profile .item-text {\n        margin-left: 8px;\n      }\n      :host([_rtl]) .profile .item-text {\n        margin-right: 8px;\n      }\n\n      .notification-badge {\n        min-width: 20px;\n        box-sizing: border-box;\n        border-radius: 50%;\n        font-weight: 400;\n        background-color: var(--accent-color);\n        line-height: 20px;\n        text-align: center;\n        padding: 0px 6px;\n        color: var(--text-primary-color);\n      }\n      ha-svg-icon + .notification-badge {\n        position: absolute;\n        bottom: 14px;\n        left: 26px;\n        font-size: 0.65em;\n      }\n\n      .spacer {\n        flex: 1;\n        pointer-events: none;\n      }\n\n      .subheader {\n        color: var(--sidebar-text-color);\n        font-weight: 500;\n        font-size: 14px;\n        padding: 16px;\n        white-space: nowrap;\n      }\n\n      .dev-tools {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        padding: 0 8px;\n        width: 256px;\n        box-sizing: border-box;\n      }\n\n      .dev-tools a {\n        color: var(--sidebar-icon-color);\n      }\n\n      .tooltip {\n        display: none;\n        position: absolute;\n        opacity: 0.9;\n        border-radius: 2px;\n        white-space: nowrap;\n        color: var(--sidebar-background-color);\n        background-color: var(--sidebar-text-color);\n        padding: 4px;\n        font-weight: 500;\n      }\n\n      :host([_rtl]) .menu ha-icon-button {\n        -webkit-transform: scaleX(-1);\n        transform: scaleX(-1);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-sidebar\": HaSidebar;\n  }\n}\n\ncustomElements.define(\"ha-sidebar\", HaSidebar);\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AC8BA;;ACqIA;;AAGA;AACA;AAGA;;;;;;;AAQA;AACA;AACA;AACA;AACA;;AAEA;AAKA;;;AASA;AAOA;;;AAIA;;;AAKA;AACA;AACA;;;;;AAKA;;;AAGA;;;;AAKA;;;;;;;AAOA;AACA;;;;;AAKA;;AAEA;AACA;;AAGA;;AAGA;;AAEA;;AAEA;AAEA;AAEA;;;;;AAKA;;;;;AASA;AACA;AACA;;;AAGA;AACA;;AAEA;;;;;;AASA;;;AAyKA;AACA;;AAEA;AACA;;;AAGA;AACA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnWA","sourceRoot":""}
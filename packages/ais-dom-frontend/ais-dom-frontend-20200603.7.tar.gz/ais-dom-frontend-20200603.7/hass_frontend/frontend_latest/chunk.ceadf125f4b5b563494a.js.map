{"version":3,"file":"chunk.ceadf125f4b5b563494a.js","sources":["webpack:///./src/mixins/subscribe-mixin.ts","webpack:///./src/panels/lovelace/cards/hui-shopping-list-card.ts"],"sourcesContent":["import { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { property, PropertyValues, UpdatingElement } from \"lit-element\";\nimport { Constructor, HomeAssistant } from \"../types\";\n\nexport interface HassSubscribeElement {\n  hassSubscribe(): UnsubscribeFunc[];\n}\n\nexport const SubscribeMixin = <T extends Constructor<UpdatingElement>>(\n  superClass: T\n) => {\n  class SubscribeClass extends superClass {\n    @property() public hass?: HomeAssistant;\n\n    private __unsubs?: Array<UnsubscribeFunc | Promise<UnsubscribeFunc>>;\n\n    public connectedCallback() {\n      super.connectedCallback();\n      this.__checkSubscribed();\n    }\n\n    public disconnectedCallback() {\n      super.disconnectedCallback();\n      if (this.__unsubs) {\n        while (this.__unsubs.length) {\n          const unsub = this.__unsubs.pop()!;\n          if (unsub instanceof Promise) {\n            unsub.then((unsubFunc) => unsubFunc());\n          } else {\n            unsub();\n          }\n        }\n        this.__unsubs = undefined;\n      }\n    }\n\n    protected updated(changedProps: PropertyValues) {\n      super.updated(changedProps);\n      if (changedProps.has(\"hass\")) {\n        this.__checkSubscribed();\n      }\n    }\n\n    protected hassSubscribe(): Array<\n      UnsubscribeFunc | Promise<UnsubscribeFunc>\n    > {\n      return [];\n    }\n\n    private __checkSubscribed(): void {\n      if (\n        this.__unsubs !== undefined ||\n        !((this as unknown) as Element).isConnected ||\n        this.hass === undefined\n      ) {\n        return;\n      }\n      this.__unsubs = this.hassSubscribe();\n    }\n  }\n  return SubscribeClass;\n};\n","import \"@polymer/paper-checkbox/paper-checkbox\";\nimport { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { repeat } from \"lit-html/directives/repeat\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon\";\nimport {\n  addItem,\n  clearItems,\n  fetchItems,\n  ShoppingListItem,\n  updateItem,\n} from \"../../../data/shopping-list\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { SensorCardConfig, ShoppingListCardConfig } from \"./types\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\n\n@customElement(\"hui-shopping-list-card\")\nclass HuiShoppingListCard extends SubscribeMixin(LitElement)\n  implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\n      /* webpackChunkName: \"hui-shopping-list-editor\" */ \"../editor/config-elements/hui-shopping-list-editor\"\n    );\n    return document.createElement(\"hui-shopping-list-card-editor\");\n  }\n\n  public static getStubConfig(): ShoppingListCardConfig {\n    return { type: \"shopping-list\" };\n  }\n\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: ShoppingListCardConfig;\n\n  @property() private _uncheckedItems?: ShoppingListItem[];\n\n  @property() private _checkedItems?: ShoppingListItem[];\n\n  public getCardSize(): number {\n    return (this._config ? (this._config.title ? 1 : 0) : 0) + 3;\n  }\n\n  public setConfig(config: ShoppingListCardConfig): void {\n    this._config = config;\n    this._uncheckedItems = [];\n    this._checkedItems = [];\n  }\n\n  public hassSubscribe(): Promise<UnsubscribeFunc>[] {\n    this._fetchData();\n    return [\n      this.hass!.connection.subscribeEvents(\n        () => this._fetchData(),\n        \"shopping_list_updated\"\n      ),\n    ];\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | SensorCardConfig\n      | undefined;\n\n    if (\n      (changedProps.has(\"hass\") && oldHass?.themes !== this.hass.themes) ||\n      (changedProps.has(\"_config\") && oldConfig?.theme !== this._config.theme)\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        .header=${this._config.title}\n        class=${classMap({\n          \"has-header\": \"title\" in this._config,\n        })}\n      >\n        <div class=\"addRow\">\n          <ha-icon\n            class=\"addButton\"\n            icon=\"hass:plus\"\n            .title=${this.hass!.localize(\n              \"ui.panel.lovelace.cards.shopping-list.add_item\"\n            )}\n            @click=${this._addItem}\n          >\n          </ha-icon>\n          <paper-input\n            no-label-float\n            class=\"addBox\"\n            placeholder=${this.hass!.localize(\n              \"ui.panel.lovelace.cards.shopping-list.add_item\"\n            )}\n            @keydown=${this._addKeyPress}\n          ></paper-input>\n        </div>\n        ${repeat(\n          this._uncheckedItems!,\n          (item) => item.id,\n          (item) =>\n            html`\n              <div class=\"editRow\">\n                <paper-checkbox\n                  tabindex=\"0\"\n                  ?checked=${item.complete}\n                  .itemId=${item.id}\n                  @click=${this._completeItem}\n                ></paper-checkbox>\n                <paper-input\n                  no-label-float\n                  .value=${item.name}\n                  .itemId=${item.id}\n                  @change=${this._saveEdit}\n                ></paper-input>\n              </div>\n            `\n        )}\n        ${this._checkedItems!.length > 0\n          ? html`\n              <div class=\"divider\"></div>\n              <div class=\"checked\">\n                <span>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.cards.shopping-list.checked_items\"\n                  )}\n                </span>\n                <ha-icon\n                  class=\"clearall\"\n                  tabindex=\"0\"\n                  icon=\"hass:notification-clear-all\"\n                  .title=${this.hass!.localize(\n                    \"ui.panel.lovelace.cards.shopping-list.clear_items\"\n                  )}\n                  @click=${this._clearItems}\n                >\n                </ha-icon>\n              </div>\n              ${repeat(\n                this._checkedItems!,\n                (item) => item.id,\n                (item) =>\n                  html`\n                    <div class=\"editRow\">\n                      <paper-checkbox\n                        tabindex=\"0\"\n                        ?checked=${item.complete}\n                        .itemId=${item.id}\n                        @click=${this._completeItem}\n                      ></paper-checkbox>\n                      <paper-input\n                        no-label-float\n                        .value=${item.name}\n                        .itemId=${item.id}\n                        @change=${this._saveEdit}\n                      ></paper-input>\n                    </div>\n                  `\n              )}\n            `\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (!this.hass) {\n      return;\n    }\n    const checkedItems: ShoppingListItem[] = [];\n    const uncheckedItems: ShoppingListItem[] = [];\n    const items = await fetchItems(this.hass);\n    for (const key in items) {\n      if (items[key].complete) {\n        checkedItems.push(items[key]);\n      } else {\n        uncheckedItems.push(items[key]);\n      }\n    }\n    this._checkedItems = checkedItems;\n    this._uncheckedItems = uncheckedItems;\n  }\n\n  private _completeItem(ev): void {\n    updateItem(this.hass!, ev.target.itemId, {\n      complete: ev.target.checked,\n    }).catch(() => this._fetchData());\n  }\n\n  private _saveEdit(ev): void {\n    updateItem(this.hass!, ev.target.itemId, {\n      name: ev.target.value,\n    }).catch(() => this._fetchData());\n\n    ev.target.blur();\n  }\n\n  private _clearItems(): void {\n    if (this.hass) {\n      clearItems(this.hass).catch(() => this._fetchData());\n    }\n  }\n\n  private get _newItem(): PaperInputElement {\n    return this.shadowRoot!.querySelector(\".addBox\") as PaperInputElement;\n  }\n\n  private _addItem(ev): void {\n    const newItem = this._newItem;\n\n    if (newItem.value!.length > 0) {\n      addItem(this.hass!, newItem.value!).catch(() => this._fetchData());\n    }\n\n    newItem.value = \"\";\n    if (ev) {\n      newItem.focus();\n    }\n  }\n\n  private _addKeyPress(ev): void {\n    if (ev.keyCode === 13) {\n      this._addItem(null);\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      ha-card {\n        padding: 16px;\n      }\n\n      .has-header {\n        padding-top: 0;\n      }\n\n      .editRow,\n      .addRow,\n      .checked {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n      }\n\n      .addRow ha-icon {\n        color: var(--secondary-text-color);\n        --mdc-icon-size: 26px;\n      }\n\n      .addButton {\n        padding-right: 16px;\n        cursor: pointer;\n      }\n\n      paper-checkbox {\n        padding-left: 4px;\n        padding-right: 20px;\n        --paper-checkbox-label-spacing: 0px;\n      }\n\n      paper-input {\n        flex-grow: 1;\n      }\n\n      .checked {\n        margin: 12px 0;\n        justify-content: space-between;\n      }\n\n      .checked span {\n        color: var(--primary-color);\n      }\n\n      .divider {\n        height: 1px;\n        background-color: var(--divider-color);\n        margin: 10px 0;\n      }\n\n      .clearall {\n        cursor: pointer;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-shopping-list-card\": HuiShoppingListCard;\n  }\n}\n"],"mappings":"AAQA;;AC0FA;AACA;;;;;;AAQA;AAGA;;;;;;AAMA;AAGA;;;AAGA;;;;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAKA;;;;AAKA;;;;;;AAQA;AAGA;;;;AAIA;;;;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAMA;;AA5FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9DA","sourceRoot":""}
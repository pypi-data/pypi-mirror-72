{"version":3,"file":"chunk.9e98e808b5ddf7096f05.js","sources":["webpack:///./src/panels/lovelace/common/process-config-entities.ts","webpack:///./src/panels/lovelace/components/hui-buttons-base.ts","webpack:///./src/panels/lovelace/special-rows/hui-buttons-row.ts"],"sourcesContent":["// Parse array of entity objects from config\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport { EntityConfig } from \"../entity-rows/types\";\n\nexport const processConfigEntities = <T extends EntityConfig>(\n  entities: Array<T | string>\n): T[] => {\n  if (!entities || !Array.isArray(entities)) {\n    throw new Error(\"Entities need to be an array\");\n  }\n\n  return entities.map(\n    (entityConf, index): T => {\n      if (\n        typeof entityConf === \"object\" &&\n        !Array.isArray(entityConf) &&\n        entityConf.type\n      ) {\n        return entityConf;\n      }\n\n      let config: T;\n\n      if (typeof entityConf === \"string\") {\n        config = { entity: entityConf } as T;\n      } else if (typeof entityConf === \"object\" && !Array.isArray(entityConf)) {\n        if (!entityConf.entity) {\n          throw new Error(\n            `Entity object at position ${index} is missing entity field.`\n          );\n        }\n        config = entityConf as T;\n      } else {\n        throw new Error(`Invalid entity specified at position ${index}.`);\n      }\n\n      if (!isValidEntityId(config.entity)) {\n        throw new Error(\n          `Invalid entity ID at position ${index}: ${config.entity}`\n        );\n      }\n\n      return config;\n    }\n  );\n};\n","import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  queryAll,\n  TemplateResult,\n} from \"lit-element\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/entity/state-badge\";\nimport type { StateBadge } from \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-icon\";\nimport type { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\n\n@customElement(\"hui-buttons-base\")\nexport class HuiButtonsBase extends LitElement {\n  @property() public configEntities?: EntitiesCardEntityConfig[];\n\n  @queryAll(\"state-badge\") protected _badges!: StateBadge[];\n\n  private _hass?: HomeAssistant;\n\n  set hass(hass: HomeAssistant) {\n    this._hass = hass;\n    const entitiesShowingIcons = this.configEntities?.filter(\n      (entity) => entity.show_icon !== false\n    );\n    this._badges.forEach((badge, index: number) => {\n      badge.hass = hass;\n      badge.stateObj = hass.states[entitiesShowingIcons![index].entity];\n    });\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      ${(this.configEntities || []).map((entityConf) => {\n        const stateObj = this._hass!.states[entityConf.entity];\n        if (!stateObj) {\n          return html`<div class=\"missing\">\n            <ha-icon icon=\"hass:alert\"></ha-icon>\n          </div>`;\n        }\n\n        return html`\n          <div\n            @action=${this._handleAction}\n            .actionHandler=${actionHandler({\n              hasHold: hasAction(entityConf.hold_action),\n              hasDoubleClick: hasAction(entityConf.double_tap_action),\n            })}\n            .config=${entityConf}\n            tabindex=\"0\"\n          >\n            ${entityConf.show_icon !== false\n              ? html`\n                  <state-badge\n                    title=${computeTooltip(this._hass!, entityConf)}\n                    .hass=${this._hass}\n                    .stateObj=${stateObj}\n                    .overrideIcon=${entityConf.icon}\n                    .overrideImage=${entityConf.image}\n                    stateColor\n                  ></state-badge>\n                `\n              : \"\"}\n            <span>\n              ${entityConf.show_name ||\n              (entityConf.name && entityConf.show_name !== false)\n                ? entityConf.name || computeStateName(stateObj)\n                : \"\"}\n            </span>\n          </div>\n        `;\n      })}\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    const config = (ev.currentTarget as any).config as EntitiesCardEntityConfig;\n    handleAction(\n      this,\n      this._hass!,\n      { tap_action: { action: \"toggle\" }, ...config },\n      ev.detail.action!\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: flex;\n        justify-content: space-evenly;\n      }\n      .missing {\n        color: #fce588;\n      }\n      div {\n        cursor: pointer;\n        align-items: center;\n        display: inline-flex;\n        outline: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-base\": HuiButtonsBase;\n  }\n}\n","import {\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../../types\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport \"../components/hui-buttons-base\";\nimport {\n  ButtonsRowConfig,\n  EntityConfig,\n  LovelaceRow,\n} from \"../entity-rows/types\";\n\n@customElement(\"hui-buttons-row\")\nexport class HuiButtonsRow extends LitElement implements LovelaceRow {\n  public static getStubConfig(): object {\n    return { entities: [] };\n  }\n\n  @property() public hass?: HomeAssistant;\n\n  private _configEntities?: EntityConfig[];\n\n  public setConfig(config: ButtonsRowConfig): void {\n    this._configEntities = processConfigEntities(config.entities);\n    this.requestUpdate();\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      <hui-buttons-base\n        .hass=${this.hass}\n        .configEntities=${this._configEntities}\n      ></hui-buttons-base>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-row\": HuiButtonsRow;\n  }\n}\n"],"mappings":"AAAA;AC2CA;;AAUA;AACA;AAIA;;;AAGA;;AAGA;AACA;AACA;AACA;AACA;;;AAIA;;AAEA;;;AA5BA;;;AAvBA;;;;;;;;;;;;;;AAAA;;ACWA;AACA;;AAlBA","sourceRoot":""}
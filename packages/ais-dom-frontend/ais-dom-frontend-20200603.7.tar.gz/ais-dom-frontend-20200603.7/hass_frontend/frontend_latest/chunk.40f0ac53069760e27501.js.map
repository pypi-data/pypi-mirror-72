{"version":3,"file":"chunk.40f0ac53069760e27501.js","sources":["webpack:///./src/common/dom/dynamic-element-directive.ts","webpack:///./src/components/ha-switch.ts","webpack:///./src/components/ha-icon-input.ts","webpack:///./src/components/ha-related-items.ts","webpack:///./src/panels/config/entities/entity-registry-settings.ts","webpack:///./src/panels/config/entities/dialog-entity-editor.ts"],"sourcesContent":["import { directive, NodePart, Part } from \"lit-html\";\n\nexport const dynamicElement = directive(\n  (tag: string, properties?: { [key: string]: any }) => (part: Part): void => {\n    if (!(part instanceof NodePart)) {\n      throw new Error(\n        \"dynamicElementDirective can only be used in content bindings\"\n      );\n    }\n\n    let element = part.value as HTMLElement | undefined;\n\n    if (\n      element !== undefined &&\n      tag.toUpperCase() === (element as HTMLElement).tagName\n    ) {\n      if (properties) {\n        Object.entries(properties).forEach(([key, value]) => {\n          element![key] = value;\n        });\n      }\n      return;\n    }\n\n    element = document.createElement(tag);\n    if (properties) {\n      Object.entries(properties).forEach(([key, value]) => {\n        element![key] = value;\n      });\n    }\n    part.setValue(element);\n  }\n);\n","import { ripple } from \"@material/mwc-ripple/ripple-directive\";\nimport \"@material/mwc-switch\";\nimport type { Switch } from \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  property,\n  query,\n} from \"lit-element\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { Constructor } from \"../types\";\n\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-input\")\nexport class HaIconInput extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .value=${this.value}\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        @value-changed=${this._valueChanged}\n        .disabled=${this.disabled}\n        auto-validate\n        .errorMessage=${this.errorMessage}\n        pattern=\"^\\\\S+:\\\\S+$\"\n      >\n        ${this.value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this.value || this.placeholder} slot=\"suffix\">\n              </ha-icon>\n            `\n          : \"\"}\n      </paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    this.value = ev.detail.value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: ev.detail.value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  static get styles() {\n    return css`\n      ha-icon {\n        position: relative;\n        bottom: 4px;\n      }\n    `;\n  }\n}\n","import { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../data/area_registry\";\nimport { ConfigEntry, getConfigEntries } from \"../data/config_entries\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../data/device_registry\";\nimport { SceneEntity } from \"../data/scene\";\nimport { findRelated, ItemType, RelatedResult } from \"../data/search\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-switch\";\n\n@customElement(\"ha-related-items\")\nexport class HaRelatedItems extends SubscribeMixin(LitElement) {\n  @property() public hass!: HomeAssistant;\n\n  @property() public itemType!: ItemType;\n\n  @property() public itemId!: string;\n\n  @property() private _entries?: ConfigEntry[];\n\n  @property() private _devices?: DeviceRegistryEntry[];\n\n  @property() private _areas?: AreaRegistryEntry[];\n\n  @property() private _related?: RelatedResult;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._devices = devices;\n      }),\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        this._areas = areas;\n      }),\n    ];\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    getConfigEntries(this.hass).then((configEntries) => {\n      this._entries = configEntries;\n    });\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (\n      (changedProps.has(\"itemId\") || changedProps.has(\"itemType\")) &&\n      this.itemId &&\n      this.itemType\n    ) {\n      this._findRelated();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._related) {\n      return html``;\n    }\n    if (Object.keys(this._related).length === 0) {\n      return html`\n        ${this.hass.localize(\"ui.components.related-items.no_related_found\")}\n      `;\n    }\n    return html`\n      ${this._related.config_entry && this._entries\n        ? this._related.config_entry.map((relatedConfigEntryId) => {\n            const entry: ConfigEntry | undefined = this._entries!.find(\n              (configEntry) => configEntry.entry_id === relatedConfigEntryId\n            );\n            if (!entry) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\n                  \"ui.components.related-items.integration\"\n                )}:\n              </h3>\n              <a\n                href=${`/config/integrations#config_entry=${relatedConfigEntryId}`}\n                @click=${this._close}\n              >\n                ${this.hass.localize(`component.${entry.domain}.title`)}:\n                ${entry.title}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.device && this._devices\n        ? this._related.device.map((relatedDeviceId) => {\n            const device: DeviceRegistryEntry | undefined = this._devices!.find(\n              (dev) => dev.id === relatedDeviceId\n            );\n            if (!device) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\"ui.components.related-items.device\")}:\n              </h3>\n              <a\n                href=\"/config/devices/device/${relatedDeviceId}\"\n                @click=${this._close}\n              >\n                ${device.name_by_user || device.name}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.area && this._areas\n        ? this._related.area.map((relatedAreaId) => {\n            const area: AreaRegistryEntry | undefined = this._areas!.find(\n              (ar) => ar.area_id === relatedAreaId\n            );\n            if (!area) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\"ui.components.related-items.area\")}:\n              </h3>\n              ${area.name}\n            `;\n          })\n        : \"\"}\n      ${this._related.entity\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.entity\")}:\n            </h3>\n            <ul>\n              ${this._related.entity.map((entityId) => {\n                const entity: HassEntity | undefined = this.hass.states[\n                  entityId\n                ];\n                if (!entity) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      @click=${this._openMoreInfo}\n                      .entityId=\"${entityId}\"\n                      class=\"link\"\n                    >\n                      ${entity.attributes.friendly_name || entityId}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.group\n        ? html`\n            <h3>${this.hass.localize(\"ui.components.related-items.group\")}:</h3>\n            <ul>\n              ${this._related.group.map((groupId) => {\n                const group: HassEntity | undefined = this.hass.states[groupId];\n                if (!group) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=\"${groupId}\"\n                    >\n                      ${group.attributes.friendly_name || group.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.scene\n        ? html`\n            <h3>${this.hass.localize(\"ui.components.related-items.scene\")}:</h3>\n            <ul>\n              ${this._related.scene.map((sceneId) => {\n                const scene: SceneEntity | undefined = this.hass.states[\n                  sceneId\n                ];\n                if (!scene) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=\"${sceneId}\"\n                    >\n                      ${scene.attributes.friendly_name || scene.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.automation\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.automation\")}:\n            </h3>\n            <ul>\n              ${this._related.automation.map((automationId) => {\n                const automation: HassEntity | undefined = this.hass.states[\n                  automationId\n                ];\n                if (!automation) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=\"${automationId}\"\n                    >\n                      ${automation.attributes.friendly_name ||\n                      automation.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.script\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.script\")}:\n            </h3>\n            <ul>\n              ${this._related.script.map((scriptId) => {\n                const script: HassEntity | undefined = this.hass.states[\n                  scriptId\n                ];\n                if (!script) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=\"${scriptId}\"\n                    >\n                      ${script.attributes.friendly_name || script.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n    `;\n  }\n\n  private async _findRelated() {\n    this._related = await findRelated(this.hass, this.itemType, this.itemId);\n    await this.updateComplete;\n    fireEvent(this, \"iron-resize\");\n  }\n\n  private _openMoreInfo(ev: CustomEvent) {\n    const entityId = (ev.target as any).entityId;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private _close() {\n    fireEvent(this, \"close-dialog\");\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n      button.link {\n        color: var(--primary-color);\n        text-align: left;\n        cursor: pointer;\n        background: none;\n        border-width: initial;\n        border-style: none;\n        border-color: initial;\n        border-image: initial;\n        padding: 0px;\n        font: inherit;\n        text-decoration: underline;\n      }\n      h3 {\n        font-family: var(--paper-font-title_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-title_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-title_-_font-size);\n        font-weight: var(--paper-font-headline-_font-weight);\n        letter-spacing: var(--paper-font-title_-_letter-spacing);\n        line-height: var(--paper-font-title_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-related-items\": HaRelatedItems;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport \"../../../components/ha-icon-input\";\nimport \"../../../components/ha-switch\";\nimport type { HaSwitch } from \"../../../components/ha-switch\";\nimport {\n  EntityRegistryEntryUpdateParams,\n  ExtEntityRegistryEntry,\n  removeEntityRegistryEntry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport type { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"entity-registry-settings\")\nexport class EntityRegistrySettings extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public entry!: ExtEntityRegistryEntry;\n\n  @property() public dialogElement!: HTMLElement;\n\n  @property() private _name!: string;\n\n  @property() private _icon!: string;\n\n  @property() private _entityId!: string;\n\n  @property() private _disabledBy!: string | null;\n\n  @property() private _error?: string;\n\n  @property() private _submitting?: boolean;\n\n  private _origEntityId!: string;\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"entry\")) {\n      this._error = undefined;\n      this._name = this.entry.name || \"\";\n      this._icon = this.entry.icon || \"\";\n      this._origEntityId = this.entry.entity_id;\n      this._entityId = this.entry.entity_id;\n      this._disabledBy = this.entry.disabled_by;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this.entry.entity_id !== this._origEntityId) {\n      return html``;\n    }\n    const stateObj: HassEntity | undefined = this.hass.states[\n      this.entry.entity_id\n    ];\n    const invalidDomainUpdate =\n      computeDomain(this._entityId.trim()) !==\n      computeDomain(this.entry.entity_id);\n    return html`\n      <paper-dialog-scrollable .dialogElement=${this.dialogElement}>\n        ${!stateObj\n          ? html`\n              <div>\n                ${this.hass!.localize(\n                  \"ui.dialogs.entity_registry.editor.unavailable\"\n                )}\n              </div>\n            `\n          : \"\"}\n        ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n        <div class=\"form\">\n          <paper-input\n            .value=${this._name}\n            @value-changed=${this._nameChanged}\n            .label=${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.name\"\n            )}\n            .placeholder=${this.entry.original_name}\n            .disabled=${this._submitting}\n          ></paper-input>\n          <ha-icon-input\n            .value=${this._icon}\n            @value-changed=${this._iconChanged}\n            .label=${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.icon\"\n            )}\n            .placeholder=${this.entry.original_icon}\n            .disabled=${this._submitting}\n            .errorMessage=${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.icon_error\"\n            )}\n          ></ha-icon-input>\n          <paper-input\n            .value=${this._entityId}\n            @value-changed=${this._entityIdChanged}\n            .label=${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.entity_id\"\n            )}\n            error-message=\"Domain needs to stay the same\"\n            .invalid=${invalidDomainUpdate}\n            .disabled=${this._submitting}\n          ></paper-input>\n          <div class=\"row\">\n            <ha-switch\n              .checked=${!this._disabledBy}\n              @change=${this._disabledByChanged}\n            >\n              <div>\n                <div>\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.enabled_label\"\n                  )}\n                </div>\n                <div class=\"secondary\">\n                  ${this._disabledBy && this._disabledBy !== \"user\"\n                    ? this.hass.localize(\n                        \"ui.dialogs.entity_registry.editor.enabled_cause\",\n                        \"cause\",\n                        this.hass.localize(\n                          `config_entry.disabled_by.${this._disabledBy}`\n                        )\n                      )\n                    : \"\"}\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.enabled_description\"\n                  )}\n                  <br />${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.note\"\n                  )}\n                </div>\n              </div>\n            </ha-switch>\n          </div>\n        </div>\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <mwc-button\n          class=\"warning\"\n          @click=\"${this._confirmDeleteEntry}\"\n          .disabled=${this._submitting ||\n          !(stateObj && stateObj.attributes.restored)}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.delete\")}\n        </mwc-button>\n        <mwc-button\n          @click=\"${this._updateEntry}\"\n          .disabled=${invalidDomainUpdate || this._submitting}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.update\")}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  private _nameChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._name = ev.detail.value;\n  }\n\n  private _iconChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private _entityIdChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._entityId = ev.detail.value;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    const params: Partial<EntityRegistryEntryUpdateParams> = {\n      name: this._name.trim() || null,\n      icon: this._icon.trim() || null,\n      new_entity_id: this._entityId.trim(),\n    };\n    if (this._disabledBy === null || this._disabledBy === \"user\") {\n      params.disabled_by = this._disabledBy;\n    }\n    try {\n      await updateEntityRegistryEntry(this.hass!, this._origEntityId, params);\n      fireEvent(this as HTMLElement, \"close-dialog\");\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _confirmDeleteEntry(): Promise<void> {\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.confirm_delete\"\n        ),\n      }))\n    ) {\n      return;\n    }\n\n    this._submitting = true;\n\n    try {\n      await removeEntityRegistryEntry(this.hass!, this._origEntityId);\n      fireEvent(this, \"close-dialog\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _disabledByChanged(ev: Event): void {\n    this._disabledBy = (ev.target as HaSwitch).checked ? null : \"user\";\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          margin-bottom: 0 !important;\n          padding: 0 !important;\n        }\n        .form {\n          padding-bottom: 24px;\n        }\n        .buttons {\n          display: flex;\n          justify-content: flex-end;\n          padding: 8px;\n        }\n        mwc-button.warning {\n          margin-right: auto;\n        }\n        .row {\n          margin-top: 8px;\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"entity-registry-settings\": EntityRegistrySettings;\n  }\n}\n","import \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"../../../components/ha-icon-button\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport \"@polymer/paper-tabs/paper-tabs\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { cache } from \"lit-html/directives/cache\";\nimport { dynamicElement } from \"../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/dialog/ha-paper-dialog\";\nimport type { HaPaperDialog } from \"../../../components/dialog/ha-paper-dialog\";\nimport \"../../../components/ha-related-items\";\nimport {\n  EntityRegistryEntry,\n  ExtEntityRegistryEntry,\n  getExtendedEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport type { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { PLATFORMS_WITH_SETTINGS_TAB } from \"./const\";\nimport \"./entity-registry-settings\";\nimport type { EntityRegistryDetailDialogParams } from \"./show-dialog-entity-editor\";\n\ninterface Tabs {\n  [key: string]: Tab;\n}\n\ninterface Tab {\n  component: string;\n  translationKey: string;\n}\n\n@customElement(\"dialog-entity-editor\")\nexport class DialogEntityEditor extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _params?: EntityRegistryDetailDialogParams;\n\n  @property() private _entry?:\n    | EntityRegistryEntry\n    | ExtEntityRegistryEntry\n    | null;\n\n  @property() private _curTab?: string;\n\n  @property() private _extraTabs: Tabs = {};\n\n  @property() private _settingsElementTag?: string;\n\n  @query(\"ha-paper-dialog\") private _dialog!: HaPaperDialog;\n\n  private _curTabIndex = 0;\n\n  public async showDialog(\n    params: EntityRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._entry = undefined;\n    this._settingsElementTag = undefined;\n    this._extraTabs = {};\n    this._getEntityReg();\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || this._entry === undefined) {\n      return html``;\n    }\n    const entityId = this._params.entity_id;\n    const entry = this._entry;\n    const stateObj: HassEntity | undefined = this.hass.states[entityId];\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=${this._openedChanged}\n        @close-dialog=${this.closeDialog}\n      >\n        <app-toolbar>\n          <ha-icon-button\n            aria-label=${this.hass.localize(\n              \"ui.dialogs.entity_registry.dismiss\"\n            )}\n            icon=\"hass:close\"\n            dialog-dismiss\n          ></ha-icon-button>\n          <div class=\"main-title\" main-title>\n            ${stateObj ? computeStateName(stateObj) : entry?.name || entityId}\n          </div>\n          ${stateObj\n            ? html`\n                <ha-icon-button\n                  aria-label=${this.hass.localize(\n                    \"ui.dialogs.entity_registry.control\"\n                  )}\n                  icon=\"hass:tune\"\n                  @click=${this._openMoreInfo}\n                ></ha-icon-button>\n              `\n            : \"\"}\n        </app-toolbar>\n        <paper-tabs\n          scrollable\n          hide-scroll-buttons\n          .selected=${this._curTabIndex}\n          @selected-item-changed=${this._handleTabSelected}\n        >\n          <paper-tab id=\"tab-settings\">\n            ${this.hass.localize(\"ui.dialogs.entity_registry.settings\")}\n          </paper-tab>\n          ${Object.entries(this._extraTabs).map(\n            ([key, tab]) => html`\n              <paper-tab id=${key}>\n                ${this.hass.localize(tab.translationKey) || key}\n              </paper-tab>\n            `\n          )}\n          <paper-tab id=\"tab-related\">\n            ${this.hass.localize(\"ui.dialogs.entity_registry.related\")}\n          </paper-tab>\n        </paper-tabs>\n        ${cache(\n          this._curTab === \"tab-settings\"\n            ? entry\n              ? this._settingsElementTag\n                ? html`\n                    ${dynamicElement(this._settingsElementTag, {\n                      hass: this.hass,\n                      entry,\n                      entityId,\n                      dialogElement: this._dialog,\n                    })}\n                  `\n                : \"\"\n              : html`\n                  <paper-dialog-scrollable>\n                    ${this.hass.localize(\n                      \"ui.dialogs.entity_registry.no_unique_id\"\n                    )}\n                  </paper-dialog-scrollable>\n                `\n            : this._curTab === \"tab-related\"\n            ? html`\n                <paper-dialog-scrollable>\n                  <ha-related-items\n                    .hass=${this.hass}\n                    .itemId=${entityId}\n                    itemType=\"entity\"\n                  ></ha-related-items>\n                </paper-dialog-scrollable>\n              `\n            : html``\n        )}\n      </ha-paper-dialog>\n    `;\n  }\n\n  private async _getEntityReg() {\n    try {\n      this._entry = await getExtendedEntityRegistryEntry(\n        this.hass,\n        this._params!.entity_id\n      );\n      this._loadPlatformSettingTabs();\n    } catch {\n      this._entry = null;\n    }\n  }\n\n  private _handleTabSelected(ev: CustomEvent): void {\n    if (!ev.detail.value) {\n      return;\n    }\n    this._curTab = ev.detail.value.id;\n    this._resizeDialog();\n  }\n\n  private async _resizeDialog(): Promise<void> {\n    await this.updateComplete;\n    fireEvent(this._dialog as HTMLElement, \"iron-resize\");\n  }\n\n  private async _loadPlatformSettingTabs(): Promise<void> {\n    if (!this._entry) {\n      return;\n    }\n    if (\n      !Object.keys(PLATFORMS_WITH_SETTINGS_TAB).includes(this._entry.platform)\n    ) {\n      this._settingsElementTag = \"entity-registry-settings\";\n      return;\n    }\n    const tag = PLATFORMS_WITH_SETTINGS_TAB[this._entry.platform];\n    await import(`./editor-tabs/settings/${tag}`);\n    this._settingsElementTag = tag;\n  }\n\n  private _openMoreInfo(): void {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this._params!.entity_id,\n    });\n    this.closeDialog();\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        app-toolbar {\n          color: var(--primary-text-color);\n          background-color: var(--secondary-background-color);\n          margin: 0;\n          padding: 0 16px;\n        }\n\n        app-toolbar [main-title] {\n          /* Design guideline states 24px, changed to 16 to align with state info */\n          margin-left: 16px;\n          line-height: 1.3em;\n          max-height: 2.6em;\n          overflow: hidden;\n          /* webkit and blink still support simple multiline text-overflow */\n          display: -webkit-box;\n          -webkit-line-clamp: 2;\n          -webkit-box-orient: vertical;\n          text-overflow: ellipsis;\n        }\n\n        @media all and (min-width: 451px) and (min-height: 501px) {\n          .main-title {\n            pointer-events: auto;\n            cursor: default;\n          }\n        }\n\n        ha-paper-dialog {\n          width: 450px;\n          max-height: none !important;\n        }\n\n        /* overrule the ha-style-dialog max-height on small screens */\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          app-toolbar {\n            background-color: var(--app-header-background-color);\n            color: var(--app-header-text-color, white);\n          }\n          ha-paper-dialog {\n            height: 100%;\n            max-height: 100% !important;\n            width: 100% !important;\n            border-radius: 0px;\n            position: fixed !important;\n            margin: 0;\n          }\n          ha-paper-dialog::before {\n            content: \"\";\n            position: fixed;\n            z-index: -1;\n            top: 0px;\n            left: 0px;\n            right: 0px;\n            bottom: 0px;\n            background-color: inherit;\n          }\n        }\n\n        paper-dialog-scrollable {\n          padding-bottom: 16px;\n        }\n\n        mwc-button.warning {\n          --mdc-theme-primary: var(--google-red-500);\n        }\n\n        :host([rtl]) app-toolbar {\n          direction: rtl;\n          text-align: right;\n        }\n        :host {\n          --paper-font-title_-_white-space: normal;\n        }\n        paper-tabs {\n          --paper-tabs-selection-bar-color: var(--primary-color);\n          text-transform: uppercase;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n          margin-top: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-entity-editor\": DialogEntityEditor;\n  }\n}\n"],"mappings":";AAAA;;;;;ACiDA;;;;;;;;AAUA;;;;;;AAzCA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACSA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AAEA;;AAGA;;AA5BA;;;;;AAAA;ACiEA;AAGA;AACA;;AAUA;;;AAKA;AACA;;AAEA;AACA;;AAbA;AAkBA;;AAUA;;;AAGA;AACA;;AAEA;;AAVA;AAeA;;AAUA;;AAEA;AANA;AAUA;;AAGA;;;AAGA;;;AAUA;AACA;;;AAGA;;;AATA;;AAgBA;AACA;AAEA;;AAEA;;;;AASA;AACA;;AAEA;;;AATA;;AAgBA;AACA;AAEA;;AAEA;;;;AAWA;AACA;;AAEA;;;AATA;;AAgBA;AACA;;AAGA;;;AAGA;;;;AAWA;AACA;;AAEA;;;AATA;;AAiBA;AACA;;AAGA;;;AAGA;;;;AAWA;AACA;;AAEA;;;AATA;;AAgBA;AA3MA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9CA;AC8CA;AACA;;AAGA;;;AAMA;;;AAGA;AACA;AACA;AAGA;AACA;;;AAGA;AACA;AACA;AAGA;AACA;AACA;;;AAKA;AACA;AACA;;AAIA;AACA;;;;AAIA;AACA;;;;AAIA;;;AAKA;AASA;AAGA;;;;;;;;;;AAYA;AACA;;AAGA;;;AAGA;AACA;;AAEA;;;AArIA;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AC8DA;AACA;;;;AAIA;;;;;AAOA;;AAEA;;AAGA;;AAIA;;AAGA;;;;;AAKA;AACA;;;AAGA;;AAEA;AAEA;AACA;;;;AAKA;;;AAGA;AAKA;AAOA;;AAGA;;AAKA;;;AAIA;AACA;;;;AAKA;;AA3HA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sourceRoot":""}
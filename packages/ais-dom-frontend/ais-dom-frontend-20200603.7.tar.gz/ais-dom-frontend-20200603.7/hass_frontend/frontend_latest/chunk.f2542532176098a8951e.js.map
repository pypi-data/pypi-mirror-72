{"version":3,"file":"chunk.f2542532176098a8951e.js","sources":["webpack:///./node_modules/@polymer/neon-animation/neon-animatable-behavior.js","webpack:///./node_modules/@polymer/paper-dialog/paper-dialog.js","webpack:///./node_modules/@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js","webpack:///./src/dialogs/voice-command-dialog/ha-voice-command-dialog.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n * `NeonAnimatableBehavior` is implemented by elements containing\n * animations for use with elements implementing\n * `NeonAnimationRunnerBehavior`.\n * @polymerBehavior\n */\nexport const NeonAnimatableBehavior = {\n\n  properties: {\n\n    /**\n     * Animation configuration. See README for more info.\n     */\n    animationConfig: {type: Object},\n\n    /**\n     * Convenience property for setting an 'entry' animation. Do not set\n     * `animationConfig.entry` manually if using this. The animated node is set\n     * to `this` if using this property.\n     */\n    entryAnimation: {\n      observer: '_entryAnimationChanged',\n      type: String,\n    },\n\n    /**\n     * Convenience property for setting an 'exit' animation. Do not set\n     * `animationConfig.exit` manually if using this. The animated node is set\n     * to `this` if using this property.\n     */\n    exitAnimation: {\n      observer: '_exitAnimationChanged',\n      type: String,\n    },\n\n  },\n\n  _entryAnimationChanged: function() {\n    this.animationConfig = this.animationConfig || {};\n    this.animationConfig['entry'] = [{name: this.entryAnimation, node: this}];\n  },\n\n  _exitAnimationChanged: function() {\n    this.animationConfig = this.animationConfig || {};\n    this.animationConfig['exit'] = [{name: this.exitAnimation, node: this}];\n  },\n\n  _copyProperties: function(config1, config2) {\n    // shallowly copy properties from config2 to config1\n    for (var property in config2) {\n      config1[property] = config2[property];\n    }\n  },\n\n  _cloneConfig: function(config) {\n    var clone = {isClone: true};\n    this._copyProperties(clone, config);\n    return clone;\n  },\n\n  _getAnimationConfigRecursive: function(type, map, allConfigs) {\n    if (!this.animationConfig) {\n      return;\n    }\n\n    if (this.animationConfig.value &&\n        typeof this.animationConfig.value === 'function') {\n      this._warn(this._logf(\n          'playAnimation',\n          'Please put \\'animationConfig\\' inside of your components \\'properties\\' object instead of outside of it.'));\n      return;\n    }\n\n    // type is optional\n    var thisConfig;\n    if (type) {\n      thisConfig = this.animationConfig[type];\n    } else {\n      thisConfig = this.animationConfig;\n    }\n\n    if (!Array.isArray(thisConfig)) {\n      thisConfig = [thisConfig];\n    }\n\n    // iterate animations and recurse to process configurations from child nodes\n    if (thisConfig) {\n      for (var config, index = 0; config = thisConfig[index]; index++) {\n        if (config.animatable) {\n          config.animatable._getAnimationConfigRecursive(\n              config.type || type, map, allConfigs);\n        } else {\n          if (config.id) {\n            var cachedConfig = map[config.id];\n            if (cachedConfig) {\n              // merge configurations with the same id, making a clone lazily\n              if (!cachedConfig.isClone) {\n                map[config.id] = this._cloneConfig(cachedConfig);\n                cachedConfig = map[config.id];\n              }\n              this._copyProperties(cachedConfig, config);\n            } else {\n              // put any configs with an id into a map\n              map[config.id] = config;\n            }\n          } else {\n            allConfigs.push(config);\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * An element implementing `NeonAnimationRunnerBehavior` calls this\n   * method to configure an animation with an optional type. Elements\n   * implementing `NeonAnimatableBehavior` should define the property\n   * `animationConfig`, which is either a configuration object or a map of\n   * animation type to array of configuration objects.\n   */\n  getAnimationConfig: function(type) {\n    var map = {};\n    var allConfigs = [];\n    this._getAnimationConfigRecursive(type, map, allConfigs);\n    // append the configurations saved in the map to the array\n    for (var key in map) {\n      allConfigs.push(map[key]);\n    }\n    return allConfigs;\n  }\n\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-dialog-behavior/paper-dialog-shared-styles.js';\n\nimport {NeonAnimationRunnerBehavior} from '@polymer/neon-animation/neon-animation-runner-behavior.js';\nimport {PaperDialogBehavior} from '@polymer/paper-dialog-behavior/paper-dialog-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`<paper-dialog>` is a dialog with Material Design styling and optional\nanimations when it is opened or closed. It provides styles for a header, content\narea, and an action area for buttons. You can use the\n`<paper-dialog-scrollable>` element (in its own repository) if you need a\nscrolling content area. To autofocus a specific child element after opening the\ndialog, give it the `autofocus` attribute. See `Polymer.PaperDialogBehavior` and\n`Polymer.IronOverlayBehavior` for specifics.\n\nFor example, the following code implements a dialog with a header, scrolling\ncontent area and buttons. Focus will be given to the `dialog-confirm` button\nwhen the dialog is opened.\n\n    <paper-dialog>\n      <h2>Header</h2>\n      <paper-dialog-scrollable>\n        Lorem ipsum...\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <paper-button dialog-dismiss>Cancel</paper-button>\n        <paper-button dialog-confirm autofocus>Accept</paper-button>\n      </div>\n    </paper-dialog>\n\n### Styling\n\nSee the docs for `Polymer.PaperDialogBehavior` for the custom properties\navailable for styling this element.\n\n### Animations\n\nSet the `entry-animation` and/or `exit-animation` attributes to add an animation\nwhen the dialog is opened or closed. See the documentation in\n[PolymerElements/neon-animation](https://github.com/PolymerElements/neon-animation)\nfor more info.\n\nFor example:\n\n    <script type=\"module\">\n      import '@polymer/neon-animation/animations/fade-out-animation.js';\n      import '@polymer/neon-animation/animations/scale-up-animation.js';\n    </script>\n\n    <paper-dialog entry-animation=\"scale-up-animation\"\n                  exit-animation=\"fade-out-animation\">\n      <h2>Header</h2>\n      <div>Dialog body</div>\n    </paper-dialog>\n\n### Accessibility\n\nSee the docs for `Polymer.PaperDialogBehavior` for accessibility features\nimplemented by this element.\n\n@group Paper Elements\n@element paper-dialog\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-dialog-shared-styles\"></style>\n    <slot></slot>\n`,\n\n  is: 'paper-dialog',\n  behaviors: [PaperDialogBehavior, NeonAnimationRunnerBehavior],\n  listeners: {'neon-animation-finish': '_onNeonAnimationFinish'},\n\n  _renderOpened: function() {\n    this.cancelAnimation();\n    this.playAnimation('entry');\n  },\n\n  _renderClosed: function() {\n    this.cancelAnimation();\n    this.playAnimation('exit');\n  },\n\n  _onNeonAnimationFinish: function() {\n    if (this.opened) {\n      this._finishRenderOpened();\n    } else {\n      this._finishRenderClosed();\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\n\nimport {PaperDialogBehaviorImpl} from '@polymer/paper-dialog-behavior/paper-dialog-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`paper-dialog-scrollable` implements a scrolling area used in a Material Design\ndialog. It shows a divider at the top and/or bottom indicating more content,\ndepending on scroll position. Use this together with elements implementing\n`Polymer.PaperDialogBehavior`.\n\n    <paper-dialog-impl>\n      <h2>Header</h2>\n      <paper-dialog-scrollable>\n        Lorem ipsum...\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <paper-button>OK</paper-button>\n      </div>\n    </paper-dialog-impl>\n\nIt shows a top divider after scrolling if it is not the first child in its\nparent container, indicating there is more content above. It shows a bottom\ndivider if it is scrollable and it is not the last child in its parent\ncontainer, indicating there is more content below. The bottom divider is hidden\nif it is scrolled to the bottom.\n\nIf `paper-dialog-scrollable` is not a direct child of the element implementing\n`Polymer.PaperDialogBehavior`, remember to set the `dialogElement`:\n\n    <paper-dialog-impl id=\"myDialog\">\n      <h2>Header</h2>\n      <div class=\"my-content-wrapper\">\n        <h4>Sub-header</h4>\n        <paper-dialog-scrollable>\n          Lorem ipsum...\n        </paper-dialog-scrollable>\n      </div>\n      <div class=\"buttons\">\n        <paper-button>OK</paper-button>\n      </div>\n    </paper-dialog-impl>\n\n    <script>\n      var scrollable =\nPolymer.dom(myDialog).querySelector('paper-dialog-scrollable');\n      scrollable.dialogElement = myDialog;\n    </script>\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dialog-scrollable` | Mixin for the scrollable content | {}\n\n@group Paper Elements\n@element paper-dialog-scrollable\n@demo demo/index.html\n@hero hero.svg\n*/\nPolymer({\n  _template: html`\n    <style>\n\n      :host {\n        display: block;\n        @apply --layout-relative;\n      }\n\n      :host(.is-scrolled:not(:first-child))::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: var(--divider-color);\n      }\n\n      :host(.can-scroll:not(.scrolled-to-bottom):not(:last-child))::after {\n        content: '';\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: var(--divider-color);\n      }\n\n      .scrollable {\n        padding: 0 24px;\n\n        @apply --layout-scroll;\n        @apply --paper-dialog-scrollable;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n    </style>\n\n    <div id=\"scrollable\" class=\"scrollable\" on-scroll=\"updateScrollState\">\n      <slot></slot>\n    </div>\n`,\n\n  is: 'paper-dialog-scrollable',\n\n  properties: {\n\n    /**\n     * The dialog element that implements `Polymer.PaperDialogBehavior`\n     * containing this element.\n     * @type {?Node}\n     */\n    dialogElement: {type: Object}\n\n  },\n\n  /**\n   * Returns the scrolling element.\n   */\n  get scrollTarget() {\n    return this.$.scrollable;\n  },\n\n  ready: function() {\n    this._ensureTarget();\n    this.classList.add('no-padding');\n  },\n\n  attached: function() {\n    this._ensureTarget();\n    requestAnimationFrame(this.updateScrollState.bind(this));\n  },\n\n  updateScrollState: function() {\n    this.toggleClass('is-scrolled', this.scrollTarget.scrollTop > 0);\n    this.toggleClass(\n        'can-scroll',\n        this.scrollTarget.offsetHeight < this.scrollTarget.scrollHeight);\n    this.toggleClass(\n        'scrolled-to-bottom',\n        this.scrollTarget.scrollTop + this.scrollTarget.offsetHeight >=\n            this.scrollTarget.scrollHeight);\n  },\n\n  _ensureTarget: function() {\n    // Read parentElement instead of parentNode in order to skip shadowRoots.\n    this.dialogElement = this.dialogElement || this.parentElement;\n    // Check if dialog implements paper-dialog-behavior. If not, fit\n    // scrollTarget to host.\n    if (this.dialogElement && this.dialogElement.behaviors &&\n        this.dialogElement.behaviors.indexOf(PaperDialogBehaviorImpl) >= 0) {\n      this.dialogElement.sizingTarget = this.scrollTarget;\n      this.scrollTarget.classList.remove('fit');\n    } else if (this.dialogElement) {\n      this.scrollTarget.classList.add('fit');\n    }\n  }\n});\n","import \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport type { PaperDialogScrollableElement } from \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"../../components/ha-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { SpeechRecognition } from \"../../common/dom/speech-recognition\";\nimport { uid } from \"../../common/util/uid\";\nimport \"../../components/dialog/ha-paper-dialog\";\nimport {\n  AgentInfo,\n  getAgentInfo,\n  processText,\n  setConversationOnboarding,\n} from \"../../data/conversation\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\n\ninterface Message {\n  who: string;\n  text?: string;\n  error?: boolean;\n}\n\ninterface Results {\n  transcript: string;\n  final: boolean;\n}\n\n@customElement(\"ha-voice-command-dialog\")\nexport class HaVoiceCommandDialog extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public results: Results | null = null;\n\n  @property() private _conversation: Message[] = [\n    {\n      who: \"hass\",\n      text: \"\",\n    },\n  ];\n\n  @property() private _opened = false;\n\n  @property() private _agentInfo?: AgentInfo;\n\n  @query(\"#messages\") private messages!: PaperDialogScrollableElement;\n\n  private recognition!: SpeechRecognition;\n\n  private _conversationId?: string;\n\n  public async showDialog(): Promise<void> {\n    this._opened = true;\n    if (SpeechRecognition && location.protocol === \"https:\") {\n      this._startListening();\n    }\n    this._agentInfo = await getAgentInfo(this.hass);\n  }\n\n  protected render(): TemplateResult {\n    // CSS custom property mixins only work in render https://github.com/Polymer/lit-element/issues/633\n    return html`\n      <style>\n        paper-dialog-scrollable {\n          --paper-dialog-scrollable: {\n            -webkit-overflow-scrolling: auto;\n            max-height: 50vh !important;\n          }\n        }\n\n        paper-dialog-scrollable.can-scroll {\n          --paper-dialog-scrollable: {\n            -webkit-overflow-scrolling: touch;\n            max-height: 50vh !important;\n          }\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          paper-dialog-scrollable {\n            --paper-dialog-scrollable: {\n              -webkit-overflow-scrolling: auto;\n              max-height: calc(100vh - 175px) !important;\n            }\n          }\n\n          paper-dialog-scrollable.can-scroll {\n            --paper-dialog-scrollable: {\n              -webkit-overflow-scrolling: touch;\n              max-height: calc(75vh - 175px) !important;\n            }\n          }\n        }\n      </style>\n      <ha-paper-dialog\n        with-backdrop\n        .opened=${this._opened}\n        @opened-changed=${this._openedChanged}\n      >\n        ${this._agentInfo && this._agentInfo.onboarding\n          ? html`\n              <div class=\"onboarding\">\n                ${this._agentInfo.onboarding.text}\n                <div class=\"side-by-side\" @click=${this._completeOnboarding}>\n                  <a\n                    class=\"button\"\n                    href=\"${this._agentInfo.onboarding.url}\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    ><mwc-button unelevated>Yes!</mwc-button></a\n                  >\n                  <mwc-button outlined>No</mwc-button>\n                </div>\n              </div>\n            `\n          : \"\"}\n        <paper-dialog-scrollable\n          id=\"messages\"\n          class=${classMap({\n            \"top-border\": Boolean(\n              this._agentInfo && this._agentInfo.onboarding\n            ),\n          })}\n        >\n          ${this._conversation.map(\n            (message) => html`\n              <div class=\"${this._computeMessageClasses(message)}\">\n                ${message.text}\n              </div>\n            `\n          )}\n          ${this.results\n            ? html`\n                <div class=\"message user\">\n                  <span\n                    class=${classMap({\n                      interimTranscript: !this.results.final,\n                    })}\n                    >${this.results.transcript}</span\n                  >${!this.results.final ? \"…\" : \"\"}\n                </div>\n              `\n            : \"\"}\n        </paper-dialog-scrollable>\n        <div class=\"input\">\n          <paper-input\n            @keyup=${this._handleKeyUp}\n            label=\"${this.hass!.localize(\n              `ui.dialogs.voice_command.${\n                SpeechRecognition && location.protocol === \"https:\"\n                  ? \"label_voice\"\n                  : \"label\"\n              }`\n            )}\"\n            autofocus\n          >\n            ${SpeechRecognition && location.protocol === \"https:\"\n              ? html`\n                  <span suffix=\"\" slot=\"suffix\">\n                    ${this.results\n                      ? html`\n                          <div class=\"bouncer\">\n                            <div class=\"double-bounce1\"></div>\n                            <div class=\"double-bounce2\"></div>\n                          </div>\n                        `\n                      : \"\"}\n                    <ha-icon-button\n                      icon=\"hass:microphone\"\n                      @click=${this._toggleListening}\n                    >\n                    </ha-icon-button>\n                  </span>\n                `\n              : \"\"}\n          </paper-input>\n          ${this._agentInfo && this._agentInfo.attribution\n            ? html`\n                <a\n                  href=${this._agentInfo.attribution.url}\n                  class=\"attribution\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  >${this._agentInfo.attribution.name}</a\n                >\n              `\n            : \"\"}\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    this._conversationId = uid();\n    this._conversation = [\n      {\n        who: \"hass\",\n        text: this.hass.localize(\"ui.dialogs.voice_command.how_can_i_help\"),\n      },\n    ];\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"_conversation\") || changedProps.has(\"results\")) {\n      this._scrollMessagesBottom();\n    }\n  }\n\n  private _addMessage(message: Message) {\n    this._conversation = [...this._conversation, message];\n  }\n\n  private _handleKeyUp(ev: KeyboardEvent) {\n    const input = ev.target as PaperInputElement;\n    if (ev.keyCode === 13 && input.value) {\n      this._processText(input.value);\n      input.value = \"\";\n    }\n  }\n\n  private _completeOnboarding() {\n    setConversationOnboarding(this.hass, true);\n    this._agentInfo! = { ...this._agentInfo, onboarding: undefined };\n  }\n\n  private _initRecognition() {\n    this.recognition = new SpeechRecognition();\n    this.recognition.interimResults = true;\n    this.recognition.lang = \"pl-PL\";\n\n    this.recognition.onstart = () => {\n      this.results = {\n        final: false,\n        transcript: \"\",\n      };\n    };\n    this.recognition.onerror = (event) => {\n      this.recognition!.abort();\n      // @ts-ignore\n      if (event.error !== \"aborted\") {\n        const text =\n          this.results && this.results.transcript\n            ? this.results.transcript\n            : `<${this.hass.localize(\n                \"ui.dialogs.voice_command.did_not_hear\"\n              )}>`;\n        this._addMessage({ who: \"user\", text, error: true });\n      }\n      this.results = null;\n    };\n    this.recognition.onend = () => {\n      // Already handled by onerror\n      if (this.results == null) {\n        return;\n      }\n      const text = this.results.transcript;\n      this.results = null;\n      if (text) {\n        this._processText(text);\n      } else {\n        this._addMessage({\n          who: \"user\",\n          text: `<${this.hass.localize(\n            \"ui.dialogs.voice_command.did_not_hear\"\n          )}>`,\n          error: true,\n        });\n      }\n    };\n\n    this.recognition.onresult = (event) => {\n      const result = event.results[0];\n      this.results = {\n        transcript: result[0].transcript,\n        final: result.isFinal,\n      };\n    };\n  }\n\n  private async _processText(text: string) {\n    if (this.recognition) {\n      this.recognition.abort();\n    }\n    this._addMessage({ who: \"user\", text });\n    const message: Message = {\n      who: \"hass\",\n      text: \"…\",\n    };\n    // To make sure the answer is placed at the right user text, we add it before we process it\n    this._addMessage(message);\n    try {\n      const response = await processText(\n        this.hass,\n        text,\n        this._conversationId!\n      );\n      const plain = response.speech.plain;\n      message.text = plain.speech;\n\n      this.requestUpdate(\"_conversation\");\n    } catch {\n      message.text = this.hass.localize(\"ui.dialogs.voice_command.error\");\n      message.error = true;\n      this.requestUpdate(\"_conversation\");\n    }\n  }\n\n  private _toggleListening() {\n    if (!this.results) {\n      this._startListening();\n    } else {\n      this.recognition!.stop();\n    }\n  }\n\n  private _startListening() {\n    if (!this.recognition) {\n      this._initRecognition();\n    }\n\n    if (this.results) {\n      return;\n    }\n\n    this.results = {\n      transcript: \"\",\n      final: false,\n    };\n    this.recognition!.start();\n  }\n\n  private _scrollMessagesBottom() {\n    this.messages.scrollTarget.scrollTop = this.messages.scrollTarget.scrollHeight;\n    if (this.messages.scrollTarget.scrollTop === 0) {\n      fireEvent(this.messages, \"iron-resize\");\n    }\n  }\n\n  private _openedChanged(ev: CustomEvent) {\n    this._opened = ev.detail.value;\n    if (!this._opened && this.recognition) {\n      this.recognition.abort();\n    }\n  }\n\n  private _computeMessageClasses(message: Message) {\n    return `message ${message.who} ${message.error ? \" error\" : \"\"}`;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        :host {\n          z-index: 103;\n        }\n\n        ha-icon-button {\n          color: var(--secondary-text-color);\n        }\n\n        ha-icon-button[active] {\n          color: var(--primary-color);\n        }\n\n        .input {\n          margin: 0 0 16px 0;\n        }\n\n        ha-paper-dialog {\n          width: 450px;\n        }\n        a.button {\n          text-decoration: none;\n        }\n        a.button > mwc-button {\n          width: 100%;\n        }\n        .onboarding {\n          padding: 0 24px;\n        }\n        paper-dialog-scrollable.top-border::before {\n          content: \"\";\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          height: 1px;\n          background: var(--divider-color);\n        }\n        .side-by-side {\n          display: flex;\n          margin: 8px 0;\n        }\n        .side-by-side > * {\n          flex: 1 0;\n          padding: 4px;\n        }\n        .attribution {\n          color: var(--secondary-text-color);\n        }\n        .message {\n          font-size: 18px;\n          clear: both;\n          margin: 8px 0;\n          padding: 8px;\n          border-radius: 15px;\n        }\n\n        .message.user {\n          margin-left: 24px;\n          float: right;\n          text-align: right;\n          border-bottom-right-radius: 0px;\n          background-color: var(--light-primary-color);\n          color: var(--primary-text-color);\n        }\n\n        .message.hass {\n          margin-right: 24px;\n          float: left;\n          border-bottom-left-radius: 0px;\n          background-color: var(--primary-color);\n          color: var(--text-primary-color);\n        }\n\n        .message a {\n          color: var(--text-primary-color);\n        }\n\n        .message img {\n          width: 100%;\n          border-radius: 10px;\n        }\n\n        .message.error {\n          background-color: var(--google-red-500);\n          color: var(--text-primary-color);\n        }\n\n        .interimTranscript {\n          color: var(--secondary-text-color);\n        }\n\n        .bouncer {\n          width: 48px;\n          height: 48px;\n          position: absolute;\n          top: 0;\n        }\n        .double-bounce1,\n        .double-bounce2 {\n          width: 48px;\n          height: 48px;\n          border-radius: 50%;\n          background-color: var(--primary-color);\n          opacity: 0.2;\n          position: absolute;\n          top: 0;\n          left: 0;\n          -webkit-animation: sk-bounce 2s infinite ease-in-out;\n          animation: sk-bounce 2s infinite ease-in-out;\n        }\n        .double-bounce2 {\n          -webkit-animation-delay: -1s;\n          animation-delay: -1s;\n        }\n        @-webkit-keyframes sk-bounce {\n          0%,\n          100% {\n            -webkit-transform: scale(0);\n          }\n          50% {\n            -webkit-transform: scale(1);\n          }\n        }\n        @keyframes sk-bounce {\n          0%,\n          100% {\n            transform: scale(0);\n            -webkit-transform: scale(0);\n          }\n          50% {\n            transform: scale(1);\n            -webkit-transform: scale(1);\n          }\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          .message {\n            font-size: 16px;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-voice-command-dialog\": HaVoiceCommandDialog;\n  }\n}\n"],"mappings":";AAkBA;;;ACoEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;;AAEA;;AAGA;AACA;;;AAGA;;;;;;;;AASA;;;AAGA;;AAMA;AAEA;AACA;;;AAIA;;;AAIA;AAGA;AACA;;AAGA;;;;AAIA;AACA;;;AASA;;AAGA;;;;;AAOA;;;AAGA;;;;AAKA;;AAEA;;AAGA;;;;AAIA;;AAGA;;;AA5JA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sourceRoot":""}
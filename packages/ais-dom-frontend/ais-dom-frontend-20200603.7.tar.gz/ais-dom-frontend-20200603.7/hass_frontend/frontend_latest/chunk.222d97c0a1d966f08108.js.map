{"version":3,"file":"chunk.222d97c0a1d966f08108.js","sources":["webpack:///./src/mixins/events-mixin.js","webpack:///./node_modules/@polymer/iron-image/iron-image.js","webpack:///./src/panels/map/ha-entity-marker.js","webpack:///./src/panels/lovelace/cards/hui-map-card.ts"],"sourcesContent":["import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n// Polymer legacy event helpers used courtesy of the Polymer project.\n//\n// Copyright (c) 2017 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/* @polymerMixin */\nexport const EventsMixin = dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      /**\n   * Dispatches a custom event with an optional detail value.\n   *\n   * @param {string} type Name of event type.\n   * @param {*=} detail Detail value containing event-specific\n   *   payload.\n   * @param {{ bubbles: (boolean|undefined),\n               cancelable: (boolean|undefined),\n                composed: (boolean|undefined) }=}\n    *  options Object specifying options.  These may include:\n    *  `bubbles` (boolean, defaults to `true`),\n    *  `cancelable` (boolean, defaults to false), and\n    *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n    * @return {Event} The new event that was fired.\n    */\n      fire(type, detail, options) {\n        options = options || {};\n        return fireEvent(options.node || this, type, detail, options);\n      }\n    }\n);\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {resolveUrl} from '@polymer/polymer/lib/utils/resolve-url.js';\n\n/**\n`iron-image` is an element for displaying an image that provides useful sizing and\npreloading options not found on the standard `<img>` tag.\n\nThe `sizing` option allows the image to be either cropped (`cover`) or\nletterboxed (`contain`) to fill a fixed user-size placed on the element.\n\nThe `preload` option prevents the browser from rendering the image until the\nimage is fully loaded.  In the interim, either the element's CSS `background-color`\ncan be be used as the placeholder, or the `placeholder` property can be\nset to a URL (preferably a data-URI, for instant rendering) for an\nplaceholder image.\n\nThe `fade` option (only valid when `preload` is set) will cause the placeholder\nimage/color to be faded out once the image is rendered.\n\nExamples:\n\n  Basically identical to `<img src=\"...\">` tag:\n\n    <iron-image src=\"http://lorempixel.com/400/400\"></iron-image>\n\n  Will letterbox the image to fit:\n\n    <iron-image style=\"width:400px; height:400px;\" sizing=\"contain\"\n      src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will crop the image to fit:\n\n    <iron-image style=\"width:400px; height:400px;\" sizing=\"cover\"\n      src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will show light-gray background until the image loads:\n\n    <iron-image style=\"width:400px; height:400px; background-color: lightgray;\"\n      sizing=\"cover\" preload src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will show a base-64 encoded placeholder image until the image loads:\n\n    <iron-image style=\"width:400px; height:400px;\" placeholder=\"data:image/gif;base64,...\"\n      sizing=\"cover\" preload src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will fade the light-gray background out once the image is loaded:\n\n    <iron-image style=\"width:400px; height:400px; background-color: lightgray;\"\n      sizing=\"cover\" preload fade src=\"http://lorempixel.com/600/400\"></iron-image>\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-image-placeholder` | Mixin applied to #placeholder | `{}`\n`--iron-image-width` | Sets the width of the wrapped image | `auto`\n`--iron-image-height` | Sets the height of the wrapped image | `auto`\n\n@group Iron Elements\n@element iron-image\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        overflow: hidden;\n        position: relative;\n      }\n\n      #baseURIAnchor {\n        display: none;\n      }\n\n      #sizedImgDiv {\n        position: absolute;\n        top: 0px;\n        right: 0px;\n        bottom: 0px;\n        left: 0px;\n\n        display: none;\n      }\n\n      #img {\n        display: block;\n        width: var(--iron-image-width, auto);\n        height: var(--iron-image-height, auto);\n      }\n\n      :host([sizing]) #sizedImgDiv {\n        display: block;\n      }\n\n      :host([sizing]) #img {\n        display: none;\n      }\n\n      #placeholder {\n        position: absolute;\n        top: 0px;\n        right: 0px;\n        bottom: 0px;\n        left: 0px;\n\n        background-color: inherit;\n        opacity: 1;\n\n        @apply --iron-image-placeholder;\n      }\n\n      #placeholder.faded-out {\n        transition: opacity 0.5s linear;\n        opacity: 0;\n      }\n    </style>\n\n    <a id=\"baseURIAnchor\" href=\"#\"></a>\n    <div id=\"sizedImgDiv\" role=\"img\" hidden$=\"[[_computeImgDivHidden(sizing)]]\" aria-hidden$=\"[[_computeImgDivARIAHidden(alt)]]\" aria-label$=\"[[_computeImgDivARIALabel(alt, src)]]\"></div>\n    <img id=\"img\" alt$=\"[[alt]]\" hidden$=\"[[_computeImgHidden(sizing)]]\" crossorigin$=\"[[crossorigin]]\" on-load=\"_imgOnLoad\" on-error=\"_imgOnError\">\n    <div id=\"placeholder\" hidden$=\"[[_computePlaceholderHidden(preload, fade, loading, loaded)]]\" class$=\"[[_computePlaceholderClassName(preload, fade, loading, loaded)]]\"></div>\n`,\n\n  is: 'iron-image',\n\n  properties: {\n    /**\n     * The URL of an image.\n     */\n    src: {type: String, value: ''},\n\n    /**\n     * A short text alternative for the image.\n     */\n    alt: {type: String, value: null},\n\n    /**\n     * CORS enabled images support:\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\n     */\n    crossorigin: {type: String, value: null},\n\n    /**\n     * When true, the image is prevented from loading and any placeholder is\n     * shown.  This may be useful when a binding to the src property is known to\n     * be invalid, to prevent 404 requests.\n     */\n    preventLoad: {type: Boolean, value: false},\n\n    /**\n     * Sets a sizing option for the image.  Valid values are `contain` (full\n     * aspect ratio of the image is contained within the element and\n     * letterboxed) or `cover` (image is cropped in order to fully cover the\n     * bounds of the element), or `null` (default: image takes natural size).\n     */\n    sizing: {type: String, value: null, reflectToAttribute: true},\n\n    /**\n     * When a sizing option is used (`cover` or `contain`), this determines\n     * how the image is aligned within the element bounds.\n     */\n    position: {type: String, value: 'center'},\n\n    /**\n     * When `true`, any change to the `src` property will cause the\n     * `placeholder` image to be shown until the new image has loaded.\n     */\n    preload: {type: Boolean, value: false},\n\n    /**\n     * This image will be used as a background/placeholder until the src image\n     * has loaded.  Use of a data-URI for placeholder is encouraged for instant\n     * rendering.\n     */\n    placeholder: {type: String, value: null, observer: '_placeholderChanged'},\n\n    /**\n     * When `preload` is true, setting `fade` to true will cause the image to\n     * fade into place.\n     */\n    fade: {type: Boolean, value: false},\n\n    /**\n     * Read-only value that is true when the image is loaded.\n     */\n    loaded: {notify: true, readOnly: true, type: Boolean, value: false},\n\n    /**\n     * Read-only value that tracks the loading state of the image when the\n     * `preload` option is used.\n     */\n    loading: {notify: true, readOnly: true, type: Boolean, value: false},\n\n    /**\n     * Read-only value that indicates that the last set `src` failed to load.\n     */\n    error: {notify: true, readOnly: true, type: Boolean, value: false},\n\n    /**\n     * Can be used to set the width of image (e.g. via binding); size may also\n     * be set via CSS.\n     */\n    width: {observer: '_widthChanged', type: Number, value: null},\n\n    /**\n     * Can be used to set the height of image (e.g. via binding); size may also\n     * be set via CSS.\n     *\n     * @attribute height\n     * @type number\n     * @default null\n     */\n    height: {observer: '_heightChanged', type: Number, value: null},\n  },\n\n  observers: [\n    '_transformChanged(sizing, position)',\n    '_loadStateObserver(src, preventLoad)'\n  ],\n\n  created: function() {\n    this._resolvedSrc = '';\n  },\n\n  _imgOnLoad: function() {\n    if (this.$.img.src !== this._resolveSrc(this.src)) {\n      return;\n    }\n\n    this._setLoading(false);\n    this._setLoaded(true);\n    this._setError(false);\n  },\n\n  _imgOnError: function() {\n    if (this.$.img.src !== this._resolveSrc(this.src)) {\n      return;\n    }\n\n    this.$.img.removeAttribute('src');\n    this.$.sizedImgDiv.style.backgroundImage = '';\n\n    this._setLoading(false);\n    this._setLoaded(false);\n    this._setError(true);\n  },\n\n  _computePlaceholderHidden: function() {\n    return !this.preload || (!this.fade && !this.loading && this.loaded);\n  },\n\n  _computePlaceholderClassName: function() {\n    return (this.preload && this.fade && !this.loading && this.loaded) ?\n        'faded-out' :\n        '';\n  },\n\n  _computeImgDivHidden: function() {\n    return !this.sizing;\n  },\n\n  _computeImgDivARIAHidden: function() {\n    return this.alt === '' ? 'true' : undefined;\n  },\n\n  _computeImgDivARIALabel: function() {\n    if (this.alt !== null) {\n      return this.alt;\n    }\n\n    // Polymer.ResolveUrl.resolveUrl will resolve '' relative to a URL x to\n    // that URL x, but '' is the default for src.\n    if (this.src === '') {\n      return '';\n    }\n\n    // NOTE: Use of `URL` was removed here because IE11 doesn't support\n    // constructing it. If this ends up being problematic, we should\n    // consider reverting and adding the URL polyfill as a dev dependency.\n    var resolved = this._resolveSrc(this.src);\n    // Remove query parts, get file name.\n    return resolved.replace(/[?|#].*/g, '').split('/').pop();\n  },\n\n  _computeImgHidden: function() {\n    return !!this.sizing;\n  },\n\n  _widthChanged: function() {\n    this.style.width = isNaN(this.width) ? this.width : this.width + 'px';\n  },\n\n  _heightChanged: function() {\n    this.style.height = isNaN(this.height) ? this.height : this.height + 'px';\n  },\n\n  _loadStateObserver: function(src, preventLoad) {\n    var newResolvedSrc = this._resolveSrc(src);\n    if (newResolvedSrc === this._resolvedSrc) {\n      return;\n    }\n\n    this._resolvedSrc = '';\n    this.$.img.removeAttribute('src');\n    this.$.sizedImgDiv.style.backgroundImage = '';\n\n    if (src === '' || preventLoad) {\n      this._setLoading(false);\n      this._setLoaded(false);\n      this._setError(false);\n    } else {\n      this._resolvedSrc = newResolvedSrc;\n      this.$.img.src = this._resolvedSrc;\n      this.$.sizedImgDiv.style.backgroundImage =\n          'url(\"' + this._resolvedSrc + '\")';\n\n      this._setLoading(true);\n      this._setLoaded(false);\n      this._setError(false);\n    }\n  },\n\n  _placeholderChanged: function() {\n    this.$.placeholder.style.backgroundImage =\n        this.placeholder ? 'url(\"' + this.placeholder + '\")' : '';\n  },\n\n  _transformChanged: function() {\n    var sizedImgDivStyle = this.$.sizedImgDiv.style;\n    var placeholderStyle = this.$.placeholder.style;\n\n    sizedImgDivStyle.backgroundSize = placeholderStyle.backgroundSize =\n        this.sizing;\n\n    sizedImgDivStyle.backgroundPosition = placeholderStyle.backgroundPosition =\n        this.sizing ? this.position : '';\n\n    sizedImgDivStyle.backgroundRepeat = placeholderStyle.backgroundRepeat =\n        this.sizing ? 'no-repeat' : '';\n  },\n\n  _resolveSrc: function(testSrc) {\n    var resolved = resolveUrl(testSrc, this.$.baseURIAnchor.href);\n    // NOTE: Use of `URL` was removed here because IE11 doesn't support\n    // constructing it. If this ends up being problematic, we should\n    // consider reverting and adding the URL polyfill as a dev dependency.\n    if (resolved.length >= 2 && resolved[0] === '/' && resolved[1] !== '/') {\n      // In IE location.origin might not work\n      // https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7\n      resolved = (location.origin || location.protocol + '//' + location.host) +\n          resolved;\n    }\n    return resolved;\n  }\n});\n","import \"@polymer/iron-image/iron-image\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { EventsMixin } from \"../../mixins/events-mixin\";\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaEntityMarker extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style include=\"iron-positioning\"></style>\n      <style>\n        .marker {\n          vertical-align: top;\n          position: relative;\n          display: block;\n          margin: 0 auto;\n          width: 2.5em;\n          text-align: center;\n          height: 2.5em;\n          line-height: 2.5em;\n          font-size: 1.5em;\n          border-radius: 50%;\n          border: 0.1em solid var(--ha-marker-color, var(--primary-color));\n          color: rgb(76, 76, 76);\n          background-color: white;\n        }\n        iron-image {\n          border-radius: 50%;\n        }\n      </style>\n\n      <div class=\"marker\" style$=\"border-color:{{entityColor}}\">\n        <template is=\"dom-if\" if=\"[[entityName]]\">[[entityName]]</template>\n        <template is=\"dom-if\" if=\"[[entityPicture]]\">\n          <iron-image\n            sizing=\"cover\"\n            class=\"fit\"\n            src=\"[[entityPicture]]\"\n          ></iron-image>\n        </template>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      entityId: {\n        type: String,\n        value: \"\",\n      },\n\n      entityName: {\n        type: String,\n        value: null,\n      },\n\n      entityPicture: {\n        type: String,\n        value: null,\n      },\n\n      entityColor: {\n        type: String,\n        value: null,\n      },\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.addEventListener(\"click\", (ev) => this.badgeTap(ev));\n  }\n\n  badgeTap(ev) {\n    ev.stopPropagation();\n    if (this.entityId) {\n      this.fire(\"hass-more-info\", { entityId: this.entityId });\n    }\n  }\n}\n\ncustomElements.define(\"ha-entity-marker\", HaEntityMarker);\n","import \"../../../components/ha-icon-button\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  Circle,\n  CircleMarker,\n  LatLngTuple,\n  Layer,\n  Map,\n  Marker,\n  Polyline,\n} from \"leaflet\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport {\n  createTileLayer,\n  LeafletModuleType,\n  setupLeafletMap,\n} from \"../../../common/dom/setup-leaflet-map\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport parseAspectRatio from \"../../../common/util/parse-aspect-ratio\";\nimport { fetchRecent } from \"../../../data/history\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../../map/ha-entity-marker\";\nimport { findEntities } from \"../common/find-entites\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { EntityConfig } from \"../entity-rows/types\";\nimport { LovelaceCard } from \"../types\";\nimport \"../../../components/ha-card\";\nimport { MapCardConfig } from \"./types\";\nimport { installResizeObserver } from \"../common/install-resize-observer\";\n\n@customElement(\"hui-map-card\")\nclass HuiMapCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement() {\n    await import(\n      /* webpackChunkName: \"hui-map-card-editor\" */ \"../editor/config-elements/hui-map-card-editor\"\n    );\n    return document.createElement(\"hui-map-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): MapCardConfig {\n    const includeDomains = [\"device_tracker\"];\n    const maxEntities = 2;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return { type: \"map\", entities: foundEntities };\n  }\n\n  @property() public hass?: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public isPanel = false;\n\n  @property({ type: Boolean, reflect: true })\n  public editMode = false;\n\n  @property()\n  private _history?: HassEntity[][];\n\n  private _date?: Date;\n\n  @property()\n  private _config?: MapCardConfig;\n\n  private _configEntities?: EntityConfig[];\n\n  // eslint-disable-next-line\n  private Leaflet?: LeafletModuleType;\n\n  private _leafletMap?: Map;\n\n  private _resizeObserver?: ResizeObserver;\n\n  private _debouncedResizeListener = debounce(\n    () => {\n      if (!this.isConnected || !this._leafletMap) {\n        return;\n      }\n      this._leafletMap.invalidateSize();\n    },\n    250,\n    false\n  );\n\n  private _mapItems: Array<Marker | Circle> = [];\n\n  private _mapZones: Array<Marker | Circle> = [];\n\n  private _mapPaths: Array<Polyline | CircleMarker> = [];\n\n  private _colorDict: { [key: string]: string } = {};\n\n  private _colorIndex = 0;\n\n  private _colors: string[] = [\n    \"#0288D1\",\n    \"#00AA00\",\n    \"#984ea3\",\n    \"#00d2d5\",\n    \"#ff7f00\",\n    \"#af8d00\",\n    \"#7f80cd\",\n    \"#b3e900\",\n    \"#c42e60\",\n    \"#a65628\",\n    \"#f781bf\",\n    \"#8dd3c7\",\n  ];\n\n  public setConfig(config: MapCardConfig): void {\n    if (!config) {\n      throw new Error(\"Error in card configuration.\");\n    }\n\n    if (!config.entities && !config.geo_location_sources) {\n      throw new Error(\n        \"Either entities or geo_location_sources must be defined\"\n      );\n    }\n    if (config.entities && !Array.isArray(config.entities)) {\n      throw new Error(\"Entities need to be an array\");\n    }\n    if (\n      config.geo_location_sources &&\n      !Array.isArray(config.geo_location_sources)\n    ) {\n      throw new Error(\"Geo_location_sources needs to be an array\");\n    }\n\n    this._config = config;\n    this._configEntities = config.entities\n      ? processConfigEntities(config.entities)\n      : [];\n\n    this._cleanupHistory();\n  }\n\n  public getCardSize(): number {\n    if (!this._config?.aspect_ratio) {\n      return 5;\n    }\n\n    const ratio = parseAspectRatio(this._config.aspect_ratio);\n    const ar =\n      ratio && ratio.w > 0 && ratio.h > 0\n        ? `${((100 * ratio.h) / ratio.w).toFixed(2)}`\n        : \"100\";\n    return 1 + Math.floor(Number(ar) / 25) || 3;\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._attachObserver();\n    if (this.hasUpdated) {\n      this.loadMap();\n    }\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n\n    if (this._leafletMap) {\n      this._leafletMap.remove();\n      this._leafletMap = undefined;\n      this.Leaflet = undefined;\n    }\n\n    if (this._resizeObserver) {\n      this._resizeObserver.unobserve(this._mapEl);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config) {\n      return html``;\n    }\n    return html`\n      <ha-card id=\"card\" .header=${this._config.title}>\n        <div id=\"root\">\n          <div\n            id=\"map\"\n            class=${classMap({ dark: this._config.dark_mode === true })}\n          ></div>\n          <ha-icon-button\n            @click=${this._fitMap}\n            tabindex=\"0\"\n            icon=\"hass:image-filter-center-focus\"\n            title=\"Reset focus\"\n          ></ha-icon-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps) {\n    if (!changedProps.has(\"hass\") || changedProps.size > 1) {\n      return true;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (!oldHass || !this._configEntities) {\n      return true;\n    }\n\n    // Check if any state has changed\n    for (const entity of this._configEntities) {\n      if (oldHass.states[entity.entity] !== this.hass!.states[entity.entity]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    if (this.isConnected) {\n      this.loadMap();\n    }\n    const root = this.shadowRoot!.getElementById(\"root\");\n\n    if (!this._config || this.isPanel || !root) {\n      return;\n    }\n\n    this._attachObserver();\n\n    if (!this._config.aspect_ratio) {\n      root.style.paddingBottom = \"100%\";\n      return;\n    }\n\n    const ratio = parseAspectRatio(this._config.aspect_ratio);\n\n    root.style.paddingBottom =\n      ratio && ratio.w > 0 && ratio.h > 0\n        ? `${((100 * ratio.h) / ratio.w).toFixed(2)}%`\n        : (root.style.paddingBottom = \"100%\");\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    if (changedProps.has(\"hass\") || changedProps.has(\"_history\")) {\n      this._drawEntities();\n      this._fitMap();\n    }\n    if (\n      changedProps.has(\"_config\") &&\n      changedProps.get(\"_config\") !== undefined\n    ) {\n      this.updateMap(changedProps.get(\"_config\") as MapCardConfig);\n    }\n\n    if (this._config!.hours_to_show && this._configEntities?.length) {\n      const minute = 60000;\n      if (changedProps.has(\"_config\")) {\n        this._getHistory();\n      } else if (Date.now() - this._date!.getTime() >= minute) {\n        this._getHistory();\n      }\n    }\n  }\n\n  private get _mapEl(): HTMLDivElement {\n    return this.shadowRoot!.getElementById(\"map\") as HTMLDivElement;\n  }\n\n  private async loadMap(): Promise<void> {\n    [this._leafletMap, this.Leaflet] = await setupLeafletMap(\n      this._mapEl,\n      this._config !== undefined ? this._config.dark_mode === true : false\n    );\n    this._drawEntities();\n    this._leafletMap.invalidateSize();\n    this._fitMap();\n  }\n\n  private updateMap(oldConfig: MapCardConfig): void {\n    const map = this._leafletMap;\n    const config = this._config;\n    const Leaflet = this.Leaflet;\n    if (!map || !config || !Leaflet) {\n      return;\n    }\n    if (config.dark_mode !== oldConfig.dark_mode) {\n      createTileLayer(Leaflet, config.dark_mode === true).addTo(map);\n    }\n    if (\n      config.entities !== oldConfig.entities ||\n      config.geo_location_sources !== oldConfig.geo_location_sources\n    ) {\n      this._drawEntities();\n    }\n    map.invalidateSize();\n    this._fitMap();\n  }\n\n  private _fitMap(): void {\n    if (!this._leafletMap || !this.Leaflet || !this._config || !this.hass) {\n      return;\n    }\n    const zoom = this._config.default_zoom;\n    if (this._mapItems.length === 0) {\n      this._leafletMap.setView(\n        new this.Leaflet.LatLng(\n          this.hass.config.latitude,\n          this.hass.config.longitude\n        ),\n        zoom || 14\n      );\n      return;\n    }\n\n    const bounds = this.Leaflet.featureGroup(this._mapItems).getBounds();\n    this._leafletMap.fitBounds(bounds.pad(0.5));\n\n    if (zoom && this._leafletMap.getZoom() > zoom) {\n      this._leafletMap.setZoom(zoom);\n    }\n  }\n\n  private _getColor(entityId: string) {\n    let color;\n    if (this._colorDict[entityId]) {\n      color = this._colorDict[entityId];\n    } else {\n      color = this._colors[this._colorIndex];\n      this._colorIndex = (this._colorIndex + 1) % this._colors.length;\n      this._colorDict[entityId] = color;\n    }\n    return color;\n  }\n\n  private _drawEntities(): void {\n    const hass = this.hass;\n    const map = this._leafletMap;\n    const config = this._config;\n    const Leaflet = this.Leaflet;\n    if (!hass || !map || !config || !Leaflet) {\n      return;\n    }\n\n    if (this._mapItems) {\n      this._mapItems.forEach((marker) => marker.remove());\n    }\n    const mapItems: Layer[] = (this._mapItems = []);\n\n    if (this._mapZones) {\n      this._mapZones.forEach((marker) => marker.remove());\n    }\n    const mapZones: Layer[] = (this._mapZones = []);\n\n    if (this._mapPaths) {\n      this._mapPaths.forEach((marker) => marker.remove());\n    }\n    const mapPaths: Layer[] = (this._mapPaths = []);\n\n    const allEntities = this._configEntities!.concat();\n\n    // Calculate visible geo location sources\n    if (config.geo_location_sources) {\n      const includesAll = config.geo_location_sources.includes(\"all\");\n      for (const entityId of Object.keys(hass.states)) {\n        const stateObj = hass.states[entityId];\n        if (\n          computeDomain(entityId) === \"geo_location\" &&\n          (includesAll ||\n            config.geo_location_sources.includes(stateObj.attributes.source))\n        ) {\n          allEntities.push({ entity: entityId });\n        }\n      }\n    }\n\n    // DRAW history\n    if (this._config!.hours_to_show && this._history) {\n      for (const entityStates of this._history) {\n        if (entityStates?.length <= 1) {\n          continue;\n        }\n        const entityId = entityStates[0].entity_id;\n\n        // filter location data from states and remove all invalid locations\n        const path = entityStates.reduce(\n          (accumulator: LatLngTuple[], state) => {\n            const latitude = state.attributes.latitude;\n            const longitude = state.attributes.longitude;\n            if (latitude && longitude) {\n              accumulator.push([latitude, longitude] as LatLngTuple);\n            }\n            return accumulator;\n          },\n          []\n        ) as LatLngTuple[];\n\n        // DRAW HISTORY\n        for (\n          let markerIndex = 0;\n          markerIndex < path.length - 1;\n          markerIndex++\n        ) {\n          const opacityStep = 0.8 / (path.length - 2);\n          const opacity = 0.2 + markerIndex * opacityStep;\n\n          // DRAW history path dots\n          mapPaths.push(\n            Leaflet.circleMarker(path[markerIndex], {\n              radius: 3,\n              color: this._getColor(entityId),\n              opacity,\n              interactive: false,\n            })\n          );\n\n          // DRAW history path lines\n          const line = [path[markerIndex], path[markerIndex + 1]];\n          mapPaths.push(\n            Leaflet.polyline(line, {\n              color: this._getColor(entityId),\n              opacity,\n              interactive: false,\n            })\n          );\n        }\n      }\n    }\n\n    // DRAW entities\n    for (const entity of allEntities) {\n      const entityId = entity.entity;\n      const stateObj = hass.states[entityId];\n      if (!stateObj) {\n        continue;\n      }\n      const title = computeStateName(stateObj);\n      const {\n        latitude,\n        longitude,\n        passive,\n        icon,\n        radius,\n        entity_picture: entityPicture,\n        gps_accuracy: gpsAccuracy,\n      } = stateObj.attributes;\n\n      if (!(latitude && longitude)) {\n        continue;\n      }\n\n      if (computeStateDomain(stateObj) === \"zone\") {\n        // DRAW ZONE\n        if (passive) {\n          continue;\n        }\n\n        // create icon\n        let iconHTML = \"\";\n        if (icon) {\n          const el = document.createElement(\"ha-icon\");\n          el.setAttribute(\"icon\", icon);\n          iconHTML = el.outerHTML;\n        } else {\n          const el = document.createElement(\"span\");\n          el.innerHTML = title;\n          iconHTML = el.outerHTML;\n        }\n\n        // create marker with the icon\n        mapZones.push(\n          Leaflet.marker([latitude, longitude], {\n            icon: Leaflet.divIcon({\n              html: iconHTML,\n              iconSize: [24, 24],\n              className: this._config!.dark_mode === true ? \"dark\" : \"light\",\n            }),\n            interactive: false,\n            title,\n          })\n        );\n\n        // create circle around it\n        mapZones.push(\n          Leaflet.circle([latitude, longitude], {\n            interactive: false,\n            color: \"#FF9800\",\n            radius,\n          })\n        );\n\n        continue;\n      }\n\n      // DRAW ENTITY\n      // create icon\n      const entityName = title\n        .split(\" \")\n        .map((part) => part[0])\n        .join(\"\")\n        .substr(0, 3);\n\n      // create market with the icon\n      mapItems.push(\n        Leaflet.marker([latitude, longitude], {\n          icon: Leaflet.divIcon({\n            // Leaflet clones this element before adding it to the map. This messes up\n            // our Polymer object and we can't pass data through. Thus we hack like this.\n            html: `\n              <ha-entity-marker\n                entity-id=\"${entityId}\"\n                entity-name=\"${entityName}\"\n                entity-picture=\"${entityPicture || \"\"}\"\n                entity-color=\"${this._getColor(entityId)}\"\n              ></ha-entity-marker>\n            `,\n            iconSize: [48, 48],\n            className: \"\",\n          }),\n          title: computeStateName(stateObj),\n        })\n      );\n\n      // create circle around if entity has accuracy\n      if (gpsAccuracy) {\n        mapItems.push(\n          Leaflet.circle([latitude, longitude], {\n            interactive: false,\n            color: this._getColor(entityId),\n            radius: gpsAccuracy,\n          })\n        );\n      }\n    }\n\n    this._mapItems.forEach((marker) => map.addLayer(marker));\n    this._mapZones.forEach((marker) => map.addLayer(marker));\n    this._mapPaths.forEach((marker) => map.addLayer(marker));\n  }\n\n  private async _attachObserver(): Promise<void> {\n    // Observe changes to map size and invalidate to prevent broken rendering\n\n    if (!this._resizeObserver) {\n      await installResizeObserver();\n      this._resizeObserver = new ResizeObserver(this._debouncedResizeListener);\n    }\n    this._resizeObserver.observe(this);\n  }\n\n  private async _getHistory(): Promise<void> {\n    this._date = new Date();\n\n    if (!this._configEntities) {\n      return;\n    }\n\n    const entityIds = this._configEntities!.map((entity) => entity.entity).join(\n      \",\"\n    );\n    const endTime = new Date();\n    const startTime = new Date();\n    startTime.setHours(endTime.getHours() - this._config!.hours_to_show!);\n    const skipInitialState = false;\n    const significantChangesOnly = false;\n    const minimalResponse = false;\n\n    const stateHistory = await fetchRecent(\n      this.hass,\n      entityIds,\n      startTime,\n      endTime,\n      skipInitialState,\n      significantChangesOnly,\n      minimalResponse\n    );\n\n    if (stateHistory.length < 1) {\n      return;\n    }\n\n    this._history = stateHistory;\n  }\n\n  private _cleanupHistory() {\n    if (!this._history) {\n      return;\n    }\n    if (this._config!.hours_to_show! <= 0) {\n      this._history = undefined;\n    } else {\n      // remove unused entities\n      const configEntityIds = this._configEntities?.map(\n        (configEntity) => configEntity.entity\n      );\n      this._history = this._history!.reduce(\n        (accumulator: HassEntity[][], entityStates) => {\n          const entityId = entityStates[0].entity_id;\n          if (configEntityIds?.includes(entityId)) {\n            accumulator.push(entityStates);\n          }\n          return accumulator;\n        },\n        []\n      ) as HassEntity[][];\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host([ispanel]) ha-card {\n        width: 100%;\n        height: 100%;\n      }\n\n      :host([ispanel][editMode]) ha-card {\n        height: calc(100% - 51px);\n      }\n\n      ha-card {\n        overflow: hidden;\n      }\n\n      #map {\n        z-index: 0;\n        border: none;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: #fafaf8;\n      }\n\n      #map.dark {\n        background: #090909;\n      }\n\n      ha-icon-button {\n        position: absolute;\n        top: 75px;\n        left: 3px;\n        outline: none;\n      }\n\n      #root {\n        position: relative;\n      }\n\n      :host([ispanel]) #root {\n        height: 100%;\n      }\n\n      .dark {\n        color: #ffffff;\n      }\n\n      .light {\n        color: #000000;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-map-card\": HuiMapCard;\n  }\n}\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;ACwJA;;;;AAIA;;;AAGA;;;;;;;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxJA","sourceRoot":""}
{"version":3,"file":"chunk.624b6e7b8aaee6b022ac.js","sources":["webpack:///./src/dialogs/generic/show-dialog-box.ts","webpack:///./src/components/entity/ha-state-label-badge.ts","webpack:///./src/components/ha-label-badge.ts","webpack:///./src/panels/lovelace/cards/hui-picture-elements-card.ts"],"sourcesContent":["import { TemplateResult } from \"lit-html\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\ninterface BaseDialogParams {\n  confirmText?: string;\n  text?: string | TemplateResult;\n  title?: string;\n}\n\nexport interface AlertDialogParams extends BaseDialogParams {\n  confirm?: () => void;\n}\n\nexport interface ConfirmationDialogParams extends BaseDialogParams {\n  dismissText?: string;\n  confirm?: () => void;\n  cancel?: () => void;\n}\n\nexport interface PromptDialogParams extends BaseDialogParams {\n  inputLabel?: string;\n  inputType?: string;\n  defaultValue?: string;\n  confirm?: (out?: string) => void;\n}\n\nexport interface DialogParams\n  extends ConfirmationDialogParams,\n    PromptDialogParams {\n  confirm?: (out?: string) => void;\n  confirmation?: boolean;\n  prompt?: boolean;\n}\n\nexport const loadGenericDialog = () =>\n  import(/* webpackChunkName: \"confirmation\" */ \"./dialog-box\");\n\nconst showDialogHelper = (\n  element: HTMLElement,\n  dialogParams: DialogParams,\n  extra?: {\n    confirmation?: DialogParams[\"confirmation\"];\n    prompt?: DialogParams[\"prompt\"];\n  }\n) =>\n  new Promise((resolve) => {\n    const origCancel = dialogParams.cancel;\n    const origConfirm = dialogParams.confirm;\n\n    fireEvent(element, \"show-dialog\", {\n      dialogTag: \"dialog-box\",\n      dialogImport: loadGenericDialog,\n      dialogParams: {\n        ...dialogParams,\n        ...extra,\n        cancel: () => {\n          resolve(extra?.prompt ? null : false);\n          if (origCancel) {\n            origCancel();\n          }\n        },\n        confirm: (out) => {\n          resolve(extra?.prompt ? out : true);\n          if (origConfirm) {\n            origConfirm(out);\n          }\n        },\n      },\n    });\n  });\n\nexport const showAlertDialog = (\n  element: HTMLElement,\n  dialogParams: AlertDialogParams\n) => showDialogHelper(element, dialogParams);\n\nexport const showConfirmationDialog = (\n  element: HTMLElement,\n  dialogParams: ConfirmationDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { confirmation: true }) as Promise<\n    boolean\n  >;\n\nexport const showPromptDialog = (\n  element: HTMLElement,\n  dialogParams: PromptDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { prompt: true }) as Promise<\n    null | string\n  >;\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport secondsToDuration from \"../../common/datetime/seconds_to_duration\";\nimport { computeStateDisplay } from \"../../common/entity/compute_state_display\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { domainIcon } from \"../../common/entity/domain_icon\";\nimport { stateIcon } from \"../../common/entity/state_icon\";\nimport { timerTimeRemaining } from \"../../common/entity/timer_time_remaining\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-label-badge\";\n\n@customElement(\"ha-state-label-badge\")\nexport class HaStateLabelBadge extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public state?: HassEntity;\n\n  @property() public name?: string;\n\n  @property() public icon?: string;\n\n  @property() public image?: string;\n\n  @property() private _timerTimeRemaining?: number;\n\n  private _connected?: boolean;\n\n  private _updateRemaining?: number;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._connected = true;\n    this.startInterval(this.state);\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._connected = false;\n    this.clearInterval();\n  }\n\n  protected render(): TemplateResult {\n    const state = this.state;\n\n    if (!state) {\n      return html`\n        <ha-label-badge\n          class=\"warning\"\n          label=\"${this.hass!.localize(\"state_badge.default.error\")}\"\n          icon=\"hass:alert\"\n          description=\"${this.hass!.localize(\n            \"state_badge.default.entity_not_found\"\n          )}\"\n        ></ha-label-badge>\n      `;\n    }\n\n    const domain = computeStateDomain(state);\n\n    return html`\n      <ha-label-badge\n        class=\"${classMap({\n          [domain]: true,\n          \"has-unit_of_measurement\": \"unit_of_measurement\" in state.attributes,\n        })}\"\n        .value=\"${this._computeValue(domain, state)}\"\n        .icon=\"${this.icon ? this.icon : this._computeIcon(domain, state)}\"\n        .image=\"${this.icon\n          ? \"\"\n          : this.image\n          ? this.image\n          : state.attributes.entity_picture}\"\n        .label=\"${this._computeLabel(domain, state, this._timerTimeRemaining)}\"\n        .description=\"${this.name ? this.name : computeStateName(state)}\"\n      ></ha-label-badge>\n    `;\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (this._connected && changedProperties.has(\"state\")) {\n      this.startInterval(this.state);\n    }\n  }\n\n  private _computeValue(domain: string, state: HassEntity) {\n    switch (domain) {\n      case \"binary_sensor\":\n      case \"device_tracker\":\n      case \"person\":\n      case \"updater\":\n      case \"sun\":\n      case \"alarm_control_panel\":\n      case \"timer\":\n        return null;\n      case \"sensor\":\n      default:\n        return state.state === \"unknown\"\n          ? \"-\"\n          : state.attributes.unit_of_measurement\n          ? state.state\n          : computeStateDisplay(\n              this.hass!.localize,\n              state,\n              this.hass!.language\n            );\n    }\n  }\n\n  private _computeIcon(domain: string, state: HassEntity) {\n    if (state.state === \"unavailable\") {\n      return null;\n    }\n    switch (domain) {\n      case \"alarm_control_panel\":\n        if (state.state === \"pending\") {\n          return \"hass:clock-fast\";\n        }\n        if (state.state === \"armed_away\") {\n          return \"hass:nature\";\n        }\n        if (state.state === \"armed_home\") {\n          return \"hass:home-variant\";\n        }\n        if (state.state === \"armed_night\") {\n          return \"hass:weather-night\";\n        }\n        if (state.state === \"armed_custom_bypass\") {\n          return \"hass:shield-home\";\n        }\n        if (state.state === \"triggered\") {\n          return \"hass:alert-circle\";\n        }\n        // state == 'disarmed'\n        return domainIcon(domain, state.state);\n      case \"binary_sensor\":\n      case \"device_tracker\":\n      case \"updater\":\n      case \"person\":\n        return stateIcon(state);\n      case \"sun\":\n        return state.state === \"above_horizon\"\n          ? domainIcon(domain)\n          : \"hass:brightness-3\";\n      case \"timer\":\n        return state.state === \"active\" ? \"hass:timer\" : \"hass:timer-off\";\n      default:\n        return null;\n    }\n  }\n\n  private _computeLabel(domain, state, _timerTimeRemaining) {\n    if (\n      state.state === \"unavailable\" ||\n      [\"device_tracker\", \"alarm_control_panel\", \"person\"].includes(domain)\n    ) {\n      // Localize the state with a special state_badge namespace, which has variations of\n      // the state translations that are truncated to fit within the badge label. Translations\n      // are only added for device_tracker, alarm_control_panel and person.\n      return (\n        this.hass!.localize(`state_badge.${domain}.${state.state}`) ||\n        this.hass!.localize(`state_badge.default.${state.state}`) ||\n        state.state\n      );\n    }\n    if (domain === \"timer\") {\n      return secondsToDuration(_timerTimeRemaining);\n    }\n    return state.attributes.unit_of_measurement || null;\n  }\n\n  private clearInterval() {\n    if (this._updateRemaining) {\n      clearInterval(this._updateRemaining);\n      this._updateRemaining = undefined;\n    }\n  }\n\n  private startInterval(stateObj) {\n    this.clearInterval();\n    if (stateObj && computeStateDomain(stateObj) === \"timer\") {\n      this.calculateTimerRemaining(stateObj);\n\n      if (stateObj.state === \"active\") {\n        this._updateRemaining = window.setInterval(\n          () => this.calculateTimerRemaining(this.state),\n          1000\n        );\n      }\n    }\n  }\n\n  private calculateTimerRemaining(stateObj) {\n    this._timerTimeRemaining = timerTimeRemaining(stateObj);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        cursor: pointer;\n      }\n\n      ha-label-badge {\n        --ha-label-badge-color: var(--label-badge-red, #ff9800);\n      }\n      ha-label-badge.has-unit_of_measurement {\n        --ha-label-badge-label-text-transform: none;\n      }\n\n      ha-label-badge.binary_sensor,\n      ha-label-badge.updater {\n        --ha-label-badge-color: var(--label-badge-blue, #ca510b);\n      }\n\n      .red {\n        --ha-label-badge-color: var(--label-badge-red, #ff9800);\n      }\n\n      .blue {\n        --ha-label-badge-color: var(--label-badge-blue, #039be5);\n      }\n\n      .green {\n        --ha-label-badge-color: var(--label-badge-green, #0da035);\n      }\n\n      .yellow {\n        --ha-label-badge-color: var(--label-badge-yellow, #f4b400);\n      }\n\n      .grey {\n        --ha-label-badge-color: var(--label-badge-grey, var(--paper-grey-500));\n      }\n\n      .warning {\n        --ha-label-badge-color: var(--label-badge-yellow, #fce588);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-label-badge\": HaStateLabelBadge;\n  }\n}\n","import {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport \"./ha-icon\";\n\nclass HaLabelBadge extends LitElement {\n  @property() public value?: string;\n\n  @property() public icon?: string;\n\n  @property() public label?: string;\n\n  @property() public description?: string;\n\n  @property() public image?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"badge-container\">\n        <div class=\"label-badge\" id=\"badge\">\n          <div\n            class=\"${classMap({\n              value: true,\n              big: Boolean(this.value && this.value.length > 4),\n            })}\"\n          >\n            <slot>\n              ${this.icon && !this.value && !this.image\n                ? html` <ha-icon .icon=${this.icon}></ha-icon> `\n                : \"\"}\n              ${this.value && !this.image\n                ? html` <span>${this.value}</span> `\n                : \"\"}\n            </slot>\n          </div>\n          ${this.label\n            ? html`\n                <div\n                  class=\"${classMap({\n                    label: true,\n                    big: this.label.length > 5,\n                  })}\"\n                >\n                  <span>${this.label}</span>\n                </div>\n              `\n            : \"\"}\n        </div>\n        ${this.description\n          ? html` <div class=\"title\">${this.description}</div> `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      css`\n        .badge-container {\n          display: inline-block;\n          text-align: center;\n          vertical-align: top;\n          padding: var(--ha-label-badge-padding, 0 0 0 0);\n        }\n        .label-badge {\n          position: relative;\n          display: block;\n          margin: 0 auto;\n          width: var(--ha-label-badge-size, 2.5em);\n          text-align: center;\n          height: var(--ha-label-badge-size, 2.5em);\n          line-height: var(--ha-label-badge-size, 2.5em);\n          font-size: var(--ha-label-badge-font-size, 1.5em);\n          border-radius: 50%;\n          border: 0.1em solid var(--ha-label-badge-color, var(--primary-color));\n          color: var(--label-badge-text-color, rgb(76, 76, 76));\n\n          white-space: nowrap;\n          background-color: var(--label-badge-background-color, white);\n          background-size: cover;\n          transition: border 0.3s ease-in-out;\n        }\n        .label-badge .value {\n          font-size: 90%;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n        .label-badge .value.big {\n          font-size: 70%;\n        }\n        .label-badge .label {\n          position: absolute;\n          bottom: -1em;\n          /* Make the label as wide as container+border. (parent_borderwidth / font-size) */\n          left: -0.2em;\n          right: -0.2em;\n          line-height: 1em;\n          font-size: 0.5em;\n        }\n        .label-badge .label span {\n          box-sizing: border-box;\n          max-width: 100%;\n          display: inline-block;\n          background-color: var(--ha-label-badge-color, var(--primary-color));\n          color: var(--ha-label-badge-label-color, white);\n          border-radius: 1em;\n          padding: 9% 16% 8% 16%; /* mostly apitalized text, not much descenders => bit more top margin */\n          font-weight: 500;\n          overflow: hidden;\n          text-transform: uppercase;\n          text-overflow: ellipsis;\n          transition: background-color 0.3s ease-in-out;\n          text-transform: var(--ha-label-badge-label-text-transform, uppercase);\n        }\n        .label-badge .label.big span {\n          font-size: 90%;\n          padding: 10% 12% 7% 12%; /* push smaller text a bit down to center vertically */\n        }\n        .badge-container .title {\n          margin-top: 1em;\n          font-size: var(--ha-label-badge-title-font-size, 0.9em);\n          width: var(--ha-label-badge-title-width, 5em);\n          font-weight: var(--ha-label-badge-title-font-weight, 400);\n          overflow: hidden;\n          text-overflow: ellipsis;\n          line-height: normal;\n          color: #fff;\n        }\n      `,\n    ];\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"image\")) {\n      this.shadowRoot!.getElementById(\"badge\")!.style.backgroundImage = this\n        .image\n        ? `url(${this.image})`\n        : \"\";\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-label-badge\": HaLabelBadge;\n  }\n}\n\ncustomElements.define(\"ha-label-badge\", HaLabelBadge);\n","import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport \"../../../components/ha-card\";\nimport { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entites\";\nimport { LovelaceElement, LovelaceElementConfig } from \"../elements/types\";\nimport { LovelaceCard } from \"../types\";\nimport { createStyledHuiElement } from \"./picture-elements/create-styled-hui-element\";\nimport { PictureElementsCardConfig } from \"./types\";\n\n@customElement(\"hui-picture-elements-card\")\nclass HuiPictureElementsCard extends LitElement implements LovelaceCard {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _elements?: LovelaceElement[];\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): PictureElementsCardConfig {\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      [\"sensor\", \"binary_sensor\"]\n    );\n\n    return {\n      type: \"picture-elements\",\n      elements: [\n        {\n          type: \"state-badge\",\n          entity: foundEntities[0] || \"\",\n          style: {\n            top: \"32%\",\n            left: \"40%\",\n          },\n        },\n      ],\n      image: \"https://demo.home-assistant.io/stub_config/floorplan.png\",\n    };\n  }\n\n  @property() private _config?: PictureElementsCardConfig;\n\n  public getCardSize(): number {\n    return 4;\n  }\n\n  public setConfig(config: PictureElementsCardConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid Configuration\");\n    } else if (\n      !(config.image || config.camera_image || config.state_image) ||\n      (config.state_image && !config.entity)\n    ) {\n      throw new Error(\"Invalid Configuration: image required\");\n    } else if (!Array.isArray(config.elements)) {\n      throw new Error(\"Invalid Configuration: elements required\");\n    }\n\n    this._config = config;\n\n    this._elements = this._config.elements.map(\n      (elementConfig: LovelaceElementConfig) => {\n        const element = createStyledHuiElement(elementConfig);\n        if (this.hass) {\n          element.hass = this.hass;\n        }\n        return element as LovelaceElement;\n      }\n    );\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    if (this._elements && changedProps.has(\"hass\")) {\n      for (const element of this._elements) {\n        element.hass = this.hass;\n      }\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | PictureElementsCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <ha-card .header=${this._config.title}>\n        <div id=\"root\">\n          <hui-image\n            .hass=${this.hass}\n            .image=${this._config.image}\n            .stateImage=${this._config.state_image}\n            .stateFilter=${this._config.state_filter}\n            .cameraImage=${this._config.camera_image}\n            .cameraView=${this._config.camera_view}\n            .entity=${this._config.entity}\n            .aspectRatio=${this._config.aspect_ratio}\n          ></hui-image>\n          ${this._elements}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      #root {\n        position: relative;\n      }\n\n      .element {\n        position: absolute;\n        transform: translate(-50%, -50%);\n      }\n\n      ha-card {\n        overflow: hidden;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-picture-elements-card\": HuiPictureElementsCard;\n  }\n}\n"],"mappings":"AACA;;;AC0DA;;AAEA;;AAOA;;AAIA;AAIA;AACA;AACA;AAKA;AACA;;AA7DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;ACKA;;;AAMA;AAGA;;;AAKA;;AAGA;;AAKA;;AAGA;;AAEA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;ACpBA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAhBA;;;;;;;;;;;;;AA/FA","sourceRoot":""}
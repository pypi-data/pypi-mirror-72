{"version":3,"file":"chunk.fb2dfe0a86fd4409c0eb.js","sources":["webpack:///./src/common/dom/dynamic-element-directive.ts","webpack:///./src/components/ha-switch.ts","webpack:///./src/components/ha-icon-input.ts","webpack:///./src/components/ha-dialog.ts","webpack:///./src/panels/config/helpers/dialog-helper-detail.ts"],"sourcesContent":["import { directive, NodePart, Part } from \"lit-html\";\n\nexport const dynamicElement = directive(\n  (tag: string, properties?: { [key: string]: any }) => (part: Part): void => {\n    if (!(part instanceof NodePart)) {\n      throw new Error(\n        \"dynamicElementDirective can only be used in content bindings\"\n      );\n    }\n\n    let element = part.value as HTMLElement | undefined;\n\n    if (\n      element !== undefined &&\n      tag.toUpperCase() === (element as HTMLElement).tagName\n    ) {\n      if (properties) {\n        Object.entries(properties).forEach(([key, value]) => {\n          element![key] = value;\n        });\n      }\n      return;\n    }\n\n    element = document.createElement(tag);\n    if (properties) {\n      Object.entries(properties).forEach(([key, value]) => {\n        element![key] = value;\n      });\n    }\n    part.setValue(element);\n  }\n);\n","import { ripple } from \"@material/mwc-ripple/ripple-directive\";\nimport \"@material/mwc-switch\";\nimport type { Switch } from \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  property,\n  query,\n} from \"lit-element\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { Constructor } from \"../types\";\n\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-input\")\nexport class HaIconInput extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .value=${this.value}\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        @value-changed=${this._valueChanged}\n        .disabled=${this.disabled}\n        auto-validate\n        .errorMessage=${this.errorMessage}\n        pattern=\"^\\\\S+:\\\\S+$\"\n      >\n        ${this.value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this.value || this.placeholder} slot=\"suffix\">\n              </ha-icon>\n            `\n          : \"\"}\n      </paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    this.value = ev.detail.value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: ev.detail.value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  static get styles() {\n    return css`\n      ha-icon {\n        position: relative;\n        bottom: 4px;\n      }\n    `;\n  }\n}\n","import \"@material/mwc-dialog\";\nimport type { Dialog } from \"@material/mwc-dialog\";\nimport { style } from \"@material/mwc-dialog/mwc-dialog-css\";\nimport \"./ha-icon-button\";\nimport { css, CSSResult, customElement, html } from \"lit-element\";\nimport type { Constructor, HomeAssistant } from \"../types\";\nimport { mdiClose } from \"@mdi/js\";\n\nconst MwcDialog = customElements.get(\"mwc-dialog\") as Constructor<Dialog>;\n\nexport const createCloseHeading = (hass: HomeAssistant, title: string) => html`\n  ${title}\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"close_button\"\n  >\n    <ha-svg-icon path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends MwcDialog {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .close_button {\n          position: absolute;\n          right: 16px;\n          top: 12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { dynamicElement } from \"../../../common/dom/dynamic-element-directive\";\nimport { domainIcon } from \"../../../common/entity/domain_icon\";\nimport \"../../../components/ha-dialog\";\nimport { createInputBoolean } from \"../../../data/input_boolean\";\nimport { createInputDateTime } from \"../../../data/input_datetime\";\nimport { createInputNumber } from \"../../../data/input_number\";\nimport { createInputSelect } from \"../../../data/input_select\";\nimport { createInputText } from \"../../../data/input_text\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { Helper } from \"./const\";\nimport \"./forms/ha-input_boolean-form\";\nimport \"./forms/ha-input_datetime-form\";\nimport \"./forms/ha-input_number-form\";\nimport \"./forms/ha-input_select-form\";\nimport \"./forms/ha-input_text-form\";\n\nconst HELPERS = {\n  input_boolean: createInputBoolean,\n  input_text: createInputText,\n  input_number: createInputNumber,\n  input_datetime: createInputDateTime,\n  input_select: createInputSelect,\n};\n\n@customElement(\"dialog-helper-detail\")\nexport class DialogHelperDetail extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _item?: Helper;\n\n  @property() private _opened = false;\n\n  @property() private _platform?: string;\n\n  @property() private _error?: string;\n\n  @property() private _submitting = false;\n\n  @query(\".form\") private _form?: HTMLDivElement;\n\n  public async showDialog(): Promise<void> {\n    this._platform = undefined;\n    this._item = undefined;\n    this._opened = true;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._opened = false;\n    this._error = \"\";\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-dialog\n        .open=${this._opened}\n        @closing=${this.closeDialog}\n        class=${classMap({ \"button-left\": !this._platform })}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${this._platform\n          ? this.hass.localize(\n              \"ui.panel.config.helpers.dialog.add_platform\",\n              \"platform\",\n              this.hass.localize(\n                `ui.panel.config.helpers.types.${this._platform}`\n              ) || this._platform\n            )\n          : this.hass.localize(\"ui.panel.config.helpers.dialog.add_helper\")}\n      >\n        ${this._platform\n          ? html`\n              <div class=\"form\" @value-changed=${this._valueChanged}>\n                ${this._error\n                  ? html` <div class=\"error\">${this._error}</div> `\n                  : \"\"}\n                ${dynamicElement(`ha-${this._platform}-form`, {\n                  hass: this.hass,\n                  item: this._item,\n                  new: true,\n                })}\n              </div>\n              <mwc-button\n                slot=\"primaryAction\"\n                @click=\"${this._createItem}\"\n                .disabled=${this._submitting}\n              >\n                ${this.hass!.localize(\"ui.panel.config.helpers.dialog.create\")}\n              </mwc-button>\n              <mwc-button\n                slot=\"secondaryAction\"\n                @click=\"${this._goBack}\"\n                .disabled=${this._submitting}\n              >\n                ${this.hass!.localize(\"ui.common.back\")}\n              </mwc-button>\n            `\n          : html`\n              ${Object.keys(HELPERS).map((platform: string) => {\n                const isLoaded = isComponentLoaded(this.hass, platform);\n                return html`\n                  <div class=\"form\">\n                    <paper-icon-item\n                      .disabled=${!isLoaded}\n                      @click=${this._platformPicked}\n                      @keydown=${this._handleEnter}\n                      .platform=${platform}\n                      dialogInitialFocus\n                    >\n                      <ha-icon\n                        slot=\"item-icon\"\n                        .icon=${domainIcon(platform)}\n                      ></ha-icon>\n                      <span class=\"item-text\">\n                        ${this.hass.localize(\n                          `ui.panel.config.helpers.types.${platform}`\n                        ) || platform}\n                      </span>\n                    </paper-icon-item>\n                    ${!isLoaded\n                      ? html`\n                          <paper-tooltip\n                            >${this.hass.localize(\n                              \"ui.dialogs.helper_settings.platform_not_loaded\",\n                              \"platform\",\n                              platform\n                            )}</paper-tooltip\n                          >\n                        `\n                      : \"\"}\n                  </div>\n                `;\n              })}\n              <mwc-button slot=\"primaryAction\" @click=\"${this.closeDialog}\">\n                ${this.hass!.localize(\"ui.common.cancel\")}\n              </mwc-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    this._item = ev.detail.value;\n  }\n\n  private async _createItem(): Promise<void> {\n    if (!this._platform || !this._item) {\n      return;\n    }\n    this._submitting = true;\n    this._error = \"\";\n    try {\n      await HELPERS[this._platform](this.hass, this._item);\n      this.closeDialog();\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _handleEnter(ev: KeyboardEvent) {\n    if (ev.keyCode !== 13) {\n      return;\n    }\n    ev.stopPropagation();\n    ev.preventDefault();\n    this._platformPicked(ev);\n  }\n\n  private _platformPicked(ev: Event): void {\n    this._platform = (ev.currentTarget! as any).platform;\n    this._focusForm();\n  }\n\n  private async _focusForm(): Promise<void> {\n    await this.updateComplete;\n    (this._form?.lastElementChild as HTMLElement).focus();\n  }\n\n  private _goBack() {\n    this._platform = undefined;\n    this._item = undefined;\n    this._error = undefined;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog.button-left {\n          --justify-action-buttons: flex-start;\n        }\n        paper-icon-item {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-helper-detail\": DialogHelperDetail;\n  }\n}\n"],"mappings":"AAAA;;;;;ACiDA;;;;;;;;AAUA;;;;;;AAzCA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACSA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AAEA;;AAGA;;AA5BA;;;;;AAAA;ACFA;;AAEA;;;;AAIA;;AAKA;;;;;;;;;;;;;;;;AAAA;;ACiDA;AACA;AACA;;;AAGA;;AAUA;AAEA;AACA;AAGA;;;;AAQA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;;AAGA;AACA;;;AAKA;AACA;AACA;AACA;;;;;AAKA;;;AAGA;;;AAKA;;AAGA;;;;;AAWA;AACA;;;;AA7GA;;;;;;;AAAA","sourceRoot":""}
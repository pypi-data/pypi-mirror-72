{"version":3,"file":"chunk.594a3efe98606c196a81.js","sources":["webpack:///./src/external_app/external_messaging.ts"],"sourcesContent":["import {\n  externalForwardConnectionEvents,\n  externalForwardHaptics,\n} from \"./external_events_forwarder\";\n\nconst CALLBACK_EXTERNAL_BUS = \"externalBus\";\n\ninterface CommandInFlight {\n  resolve: (data: any) => void;\n  reject: (err: ExternalError) => void;\n}\n\nexport interface InternalMessage {\n  id?: number;\n  type: string;\n  payload?: unknown;\n}\n\ninterface ExternalError {\n  code: string;\n  message: string;\n}\n\ninterface ExternalMessageResult {\n  id: number;\n  type: \"result\";\n  success: true;\n  result: unknown;\n}\n\ninterface ExternalMessageResultError {\n  id: number;\n  type: \"result\";\n  success: false;\n  error: ExternalError;\n}\n\ntype ExternalMessage = ExternalMessageResult | ExternalMessageResultError;\n\nexport class ExternalMessaging {\n  public commands: { [msgId: number]: CommandInFlight } = {};\n\n  public cache: { [key: string]: any } = {};\n\n  public msgId = 0;\n\n  public attach() {\n    externalForwardConnectionEvents(this);\n    externalForwardHaptics(this);\n    window[CALLBACK_EXTERNAL_BUS] = (msg) => this.receiveMessage(msg);\n  }\n\n  /**\n   * Send message to external app that expects a response.\n   * @param msg message to send\n   */\n  public sendMessage<T>(msg: InternalMessage): Promise<T> {\n    const msgId = ++this.msgId;\n    msg.id = msgId;\n\n    this.fireMessage(msg);\n\n    return new Promise<T>((resolve, reject) => {\n      this.commands[msgId] = { resolve, reject };\n    });\n  }\n\n  /**\n   * Send message to external app without expecting a response.\n   * @param msg message to send\n   */\n  public fireMessage(msg: InternalMessage) {\n    if (!msg.id) {\n      msg.id = ++this.msgId;\n    }\n    this._sendExternal(msg);\n  }\n\n  public receiveMessage(msg: ExternalMessage) {\n    if (__DEV__) {\n      // eslint-disable-next-line no-console\n      console.log(\"Receiving message from external app\", msg);\n    }\n\n    const pendingCmd = this.commands[msg.id];\n\n    if (!pendingCmd) {\n      // eslint-disable-next-line no-console\n      console.warn(`Received unknown msg ID`, msg.id);\n      return;\n    }\n\n    if (msg.type === \"result\") {\n      if (msg.success) {\n        pendingCmd.resolve(msg.result);\n      } else {\n        pendingCmd.reject(msg.error);\n      }\n    }\n  }\n\n  protected _sendExternal(msg: InternalMessage) {\n    if (__DEV__) {\n      // eslint-disable-next-line no-console\n      console.log(\"Sending message to external app\", msg);\n    }\n    if (window.externalApp) {\n      window.externalApp.externalBus(JSON.stringify(msg));\n    } else {\n      window.webkit!.messageHandlers.externalBus.postMessage(msg);\n    }\n  }\n}\n"],"mappings":"AAKA","sourceRoot":""}
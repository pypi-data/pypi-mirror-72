# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from properly_model_python.models.base_model_ import Model
from properly_model_python import util


class Room(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, level: str=None, dimensions: str=None):  # noqa: E501
        """Room - a model defined in Swagger

        :param name: The name of this Room.  # noqa: E501
        :type name: str
        :param level: The level of this Room.  # noqa: E501
        :type level: str
        :param dimensions: The dimensions of this Room.  # noqa: E501
        :type dimensions: str
        """
        self.swagger_types = {
            'name': str,
            'level': str,
            'dimensions': str
        }

        self.attribute_map = {
            'name': 'name',
            'level': 'level',
            'dimensions': 'dimensions'
        }

        self._name = name
        self._level = level
        self._dimensions = dimensions

    @classmethod
    def from_dict(cls, dikt) -> 'Room':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Room of this Room.  # noqa: E501
        :rtype: Room
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Room.


        :return: The name of this Room.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Room.


        :param name: The name of this Room.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def level(self) -> str:
        """Gets the level of this Room.


        :return: The level of this Room.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level: str):
        """Sets the level of this Room.


        :param level: The level of this Room.
        :type level: str
        """

        self._level = level

    @property
    def dimensions(self) -> str:
        """Gets the dimensions of this Room.


        :return: The dimensions of this Room.
        :rtype: str
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions: str):
        """Sets the dimensions of this Room.


        :param dimensions: The dimensions of this Room.
        :type dimensions: str
        """

        self._dimensions = dimensions

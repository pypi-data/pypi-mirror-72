@import (reference) "@{barcelonetaPath}/less/variables.plone.less";
@import (reference) "@{bootstrapPath}/less/bootstrap.less";


@columns: @plone-grid-columns;
// We're using the mixin classes from mixin.grid.plone.less to create the default column styles


/* Grid classes, these can also be nested */
.mosaic-grid-row {
  position: relative;
  .make-row(@gutter: @plone-grid-gutter-width);
}

body.template-layout,
body.mosaic-enabled {
  &.no-portlet-columns {
    .outer-wrapper > .container {
      // remove fixed width of wrapping container
      width: auto;
      .mosaic-grid-row {
        margin-left: auto;
        margin-right: auto;
        // add width to row instead
        @media (min-width: @plone-screen-sm-min) {
          width: @plone-container-sm;
        }
        @media (min-width: @plone-screen-md-min) {
          width: @plone-container-md;
        }
        @media (min-width: @plone-screen-lg-min) {
          width: @plone-container-lg;
        }
        @media (min-width: @plone-screen-xl-min) {
          width: @plone-container-xl;
        }
        .mosaic-innergrid-row {
          width: auto;
          .make-row(@gutter: @plone-grid-gutter-width);
        }

        &.mosaic-grid-row-fluid {
          margin-left: (@plone-grid-gutter-width / -2);
          margin-right: (@plone-grid-gutter-width / -2);
          padding-left: (@plone-grid-gutter-width / 2);
          padding-right: (@plone-grid-gutter-width / 2);
          width: auto;
          max-width: none;
        }
      }
    }
  }
}

// row widths for logged-in users

body.plone-toolbar-left-default {
  &.no-portlet-columns {
    .outer-wrapper > .container {
      .mosaic-grid-row {
        @media (min-width: (@plone-screen-sm-min + @plone-left-toolbar)) {
          width: (@plone-container-sm - @plone-left-toolbar);
        }
        @media (min-width: (@plone-screen-md-min + @plone-left-toolbar)) {
          width: (@plone-container-md - @plone-left-toolbar);
        }
        @media (min-width: (@plone-screen-lg-min + @plone-left-toolbar)) {
          width: (@plone-container-lg - @plone-left-toolbar);
        }
        @media (min-width: (@plone-screen-xl-min + @plone-left-toolbar)) {
          width: (@plone-container-xl - @plone-left-toolbar);
        }
      }
    }
  }
}

body.plone-toolbar-left-expanded {
  &.no-portlet-columns {
    .outer-wrapper > .container {
      .mosaic-grid-row {
        @media (min-width: (@plone-screen-sm-min + @plone-left-toolbar-expanded)) {
          width: (@plone-container-sm - @plone-left-toolbar-expanded);
        }
        @media (min-width: (@plone-screen-md-min + @plone-left-toolbar-expanded)) {
          width: (@plone-container-md - @plone-left-toolbar-expanded);
        }
        @media (min-width: (@plone-screen-lg-min + @plone-left-toolbar-expanded)) {
          width: (@plone-container-lg - @plone-left-toolbar-expanded);
        }
        @media (min-width: (@plone-screen-xl-min + @plone-left-toolbar-expanded)) {
          width: (@plone-container-xl - @plone-left-toolbar-expanded);
        }
      }
    }
  }
}

// grid definition for viewing
/* Widths, these are abstracted out so that pixel-based layouts or other
   similar approaches can be retrofitted without changing the markup,
   or if you want to apply rules like the Golden Ratio to your layouts */
.mosaic-width-full {
  .make-xs-column((@columns); @gutter: @plone-grid-gutter-width);
}
.mosaic-width-half {
  .make-sm-column((@columns / 2); @gutter: @plone-grid-gutter-width);
}
.mosaic-width-quarter {
  .make-sm-column((@columns / 2); @gutter: @plone-grid-gutter-width);
  .make-md-column((@columns / 4); @gutter: @plone-grid-gutter-width);
}
.mosaic-width-three-quarters {
  .make-sm-column((@columns / 2); @gutter: @plone-grid-gutter-width);
  .make-md-column((@columns / 4 * 3); @gutter: @plone-grid-gutter-width);
}
.mosaic-width-third {
  .make-md-column((@columns / 3); @gutter: @plone-grid-gutter-width);
}
.mosaic-width-two-thirds {
  .make-md-column((@columns / 3 * 2); @gutter: @plone-grid-gutter-width);
}


// grid definition for editing
// we don't want responsive styles here
.mosaic-enabled {
  /* Widths, these are abstracted out so that pixel-based layouts or other
     similar approaches can be retrofitted without changing the markup,
     or if you want to apply rules like the Golden Ratio to your layouts */
  .mosaic-width-full {
    .make-xs-column((@columns); @gutter: @plone-grid-gutter-width);
  }
  .mosaic-width-half {
    .make-xs-column((@columns / 2); @gutter: @plone-grid-gutter-width);
  }
  .mosaic-width-quarter {
    .make-xs-column((@columns / 4); @gutter: @plone-grid-gutter-width);
  }
  .mosaic-width-three-quarters {
    .make-xs-column((@columns / 4 * 3); @gutter: @plone-grid-gutter-width);
  }
  .mosaic-width-third {
    .make-xs-column((@columns / 3); @gutter: @plone-grid-gutter-width);
  }
  .mosaic-width-two-thirds {
    .make-xs-column((@columns / 3 * 2); @gutter: @plone-grid-gutter-width);
  }
}


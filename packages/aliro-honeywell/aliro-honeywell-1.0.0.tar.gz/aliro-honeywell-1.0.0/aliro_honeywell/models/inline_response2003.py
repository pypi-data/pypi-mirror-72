# coding: utf-8

"""
    Honeywell

    This is an api to connect to the Honeywell backend  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_honeywell.configuration import Configuration


class InlineResponse2003(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'jobs': 'list[InlineResponse2003Jobs]',
        'total_cost': 'float'
    }

    attribute_map = {
        'jobs': 'jobs',
        'total_cost': 'total-cost'
    }

    def __init__(self, jobs=None, total_cost=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2003 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._jobs = None
        self._total_cost = None
        self.discriminator = None

        if jobs is not None:
            self.jobs = jobs
        if total_cost is not None:
            self.total_cost = total_cost

    @property
    def jobs(self):
        """Gets the jobs of this InlineResponse2003.  # noqa: E501

        Jobs array may be empty is no jobs where submitted within specified timeframe. Jobs are returned based on <submit-date> timestamp.  Jobs array contains all jobs within specified time or job window.   # noqa: E501

        :return: The jobs of this InlineResponse2003.  # noqa: E501
        :rtype: list[InlineResponse2003Jobs]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this InlineResponse2003.

        Jobs array may be empty is no jobs where submitted within specified timeframe. Jobs are returned based on <submit-date> timestamp.  Jobs array contains all jobs within specified time or job window.   # noqa: E501

        :param jobs: The jobs of this InlineResponse2003.  # noqa: E501
        :type: list[InlineResponse2003Jobs]
        """

        self._jobs = jobs

    @property
    def total_cost(self):
        """Gets the total_cost of this InlineResponse2003.  # noqa: E501

        <total-cost> is the number of QCU used on this query   # noqa: E501

        :return: The total_cost of this InlineResponse2003.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this InlineResponse2003.

        <total-cost> is the number of QCU used on this query   # noqa: E501

        :param total_cost: The total_cost of this InlineResponse2003.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2003):
            return True

        return self.to_dict() != other.to_dict()

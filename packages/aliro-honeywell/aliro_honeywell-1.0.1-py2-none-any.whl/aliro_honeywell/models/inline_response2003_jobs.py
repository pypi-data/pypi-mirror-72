# coding: utf-8

"""
    Honeywell

    This is an api to connect to the Honeywell backend  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_honeywell.configuration import Configuration


class InlineResponse2003Jobs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cost': 'float',
        'job': 'str',
        'machine': 'str',
        'name': 'str',
        'result_date': 'str',
        'submit_date': 'str'
    }

    attribute_map = {
        'cost': 'cost',
        'job': 'job',
        'machine': 'machine',
        'name': 'name',
        'result_date': 'result-date',
        'submit_date': 'submit-date'
    }

    def __init__(self, cost=None, job=None, machine=None, name=None, result_date=None, submit_date=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2003Jobs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cost = None
        self._job = None
        self._machine = None
        self._name = None
        self._result_date = None
        self._submit_date = None
        self.discriminator = None

        if cost is not None:
            self.cost = cost
        if job is not None:
            self.job = job
        if machine is not None:
            self.machine = machine
        if name is not None:
            self.name = name
        if result_date is not None:
            self.result_date = result_date
        if submit_date is not None:
            self.submit_date = submit_date

    @property
    def cost(self):
        """Gets the cost of this InlineResponse2003Jobs.  # noqa: E501

        <cost> is the number of QCU consumed by the job.  # noqa: E501

        :return: The cost of this InlineResponse2003Jobs.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this InlineResponse2003Jobs.

        <cost> is the number of QCU consumed by the job.  # noqa: E501

        :param cost: The cost of this InlineResponse2003Jobs.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def job(self):
        """Gets the job of this InlineResponse2003Jobs.  # noqa: E501

        <job-id> is the unique ID assigned to the job.  # noqa: E501

        :return: The job of this InlineResponse2003Jobs.  # noqa: E501
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this InlineResponse2003Jobs.

        <job-id> is the unique ID assigned to the job.  # noqa: E501

        :param job: The job of this InlineResponse2003Jobs.  # noqa: E501
        :type: str
        """

        self._job = job

    @property
    def machine(self):
        """Gets the machine of this InlineResponse2003Jobs.  # noqa: E501

        <machine> string is the name of the machine used to execute the job.  # noqa: E501

        :return: The machine of this InlineResponse2003Jobs.  # noqa: E501
        :rtype: str
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this InlineResponse2003Jobs.

        <machine> string is the name of the machine used to execute the job.  # noqa: E501

        :param machine: The machine of this InlineResponse2003Jobs.  # noqa: E501
        :type: str
        """

        self._machine = machine

    @property
    def name(self):
        """Gets the name of this InlineResponse2003Jobs.  # noqa: E501

        <job-name> is the user-assigned name for the job, same as in job submission API.  # noqa: E501

        :return: The name of this InlineResponse2003Jobs.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2003Jobs.

        <job-name> is the user-assigned name for the job, same as in job submission API.  # noqa: E501

        :param name: The name of this InlineResponse2003Jobs.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def result_date(self):
        """Gets the result_date of this InlineResponse2003Jobs.  # noqa: E501

        <submit-date>, <result-date> and <end-date> are the timestamps corresponding to job submission and final job results. The timestamps are expressed in UTC with millisecond precision.   # noqa: E501

        :return: The result_date of this InlineResponse2003Jobs.  # noqa: E501
        :rtype: str
        """
        return self._result_date

    @result_date.setter
    def result_date(self, result_date):
        """Sets the result_date of this InlineResponse2003Jobs.

        <submit-date>, <result-date> and <end-date> are the timestamps corresponding to job submission and final job results. The timestamps are expressed in UTC with millisecond precision.   # noqa: E501

        :param result_date: The result_date of this InlineResponse2003Jobs.  # noqa: E501
        :type: str
        """

        self._result_date = result_date

    @property
    def submit_date(self):
        """Gets the submit_date of this InlineResponse2003Jobs.  # noqa: E501

        <submit-date>, <result-date> and <end-date> are the timestamps corresponding to job submission and final job results. The timestamps are expressed in UTC with millisecond precision.   # noqa: E501

        :return: The submit_date of this InlineResponse2003Jobs.  # noqa: E501
        :rtype: str
        """
        return self._submit_date

    @submit_date.setter
    def submit_date(self, submit_date):
        """Sets the submit_date of this InlineResponse2003Jobs.

        <submit-date>, <result-date> and <end-date> are the timestamps corresponding to job submission and final job results. The timestamps are expressed in UTC with millisecond precision.   # noqa: E501

        :param submit_date: The submit_date of this InlineResponse2003Jobs.  # noqa: E501
        :type: str
        """

        self._submit_date = submit_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003Jobs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2003Jobs):
            return True

        return self.to_dict() != other.to_dict()

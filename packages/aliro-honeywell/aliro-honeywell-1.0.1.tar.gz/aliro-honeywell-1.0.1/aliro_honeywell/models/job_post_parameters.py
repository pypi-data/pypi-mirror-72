# coding: utf-8

"""
    Honeywell

    This is an api to connect to the Honeywell backend  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_honeywell.configuration import Configuration


class JobPostParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'count': 'int',
        'language': 'str',
        'machine': 'str',
        'max_cost': 'int',
        'name': 'str',
        'notify': 'bool',
        'options': 'list[str]',
        'priority': 'str',
        'program': 'str'
    }

    attribute_map = {
        'count': 'count',
        'language': 'language',
        'machine': 'machine',
        'max_cost': 'max-cost',
        'name': 'name',
        'notify': 'notify',
        'options': 'options',
        'priority': 'priority',
        'program': 'program'
    }

    def __init__(self, count=None, language=None, machine=None, max_cost=None, name=None, notify=False, options=None, priority=None, program=None, local_vars_configuration=None):  # noqa: E501
        """JobPostParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._count = None
        self._language = None
        self._machine = None
        self._max_cost = None
        self._name = None
        self._notify = None
        self._options = None
        self._priority = None
        self._program = None
        self.discriminator = None

        if count is not None:
            self.count = count
        self.language = language
        self.machine = machine
        if max_cost is not None:
            self.max_cost = max_cost
        if name is not None:
            self.name = name
        if notify is not None:
            self.notify = notify
        if options is not None:
            self.options = options
        if priority is not None:
            self.priority = priority
        self.program = program

    @property
    def count(self):
        """Gets the count of this JobPostParameters.  # noqa: E501

        <count> is an integer between 1 and 10,000 that specifies the number of times the job is requested to run.   # noqa: E501

        :return: The count of this JobPostParameters.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this JobPostParameters.

        <count> is an integer between 1 and 10,000 that specifies the number of times the job is requested to run.   # noqa: E501

        :param count: The count of this JobPostParameters.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def language(self):
        """Gets the language of this JobPostParameters.  # noqa: E501

        <lang> string identifies specific language dialect. Currently supported language dialect is \"OPENQASM 2.0\". Other languages or dialects may be added in the future.   # noqa: E501

        :return: The language of this JobPostParameters.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this JobPostParameters.

        <lang> string identifies specific language dialect. Currently supported language dialect is \"OPENQASM 2.0\". Other languages or dialects may be added in the future.   # noqa: E501

        :param language: The language of this JobPostParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and language is None:  # noqa: E501
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501
        allowed_values = ["OPENQASM 2.0"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and language not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def machine(self):
        """Gets the machine of this JobPostParameters.  # noqa: E501

        <machine-name> is the name of quantum computer to use for executing the job. Must be one of the names returned by machine list API.<job-name> string is a user-assigned name for the job.   # noqa: E501

        :return: The machine of this JobPostParameters.  # noqa: E501
        :rtype: str
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this JobPostParameters.

        <machine-name> is the name of quantum computer to use for executing the job. Must be one of the names returned by machine list API.<job-name> string is a user-assigned name for the job.   # noqa: E501

        :param machine: The machine of this JobPostParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and machine is None:  # noqa: E501
            raise ValueError("Invalid value for `machine`, must not be `None`")  # noqa: E501

        self._machine = machine

    @property
    def max_cost(self):
        """Gets the max_cost of this JobPostParameters.  # noqa: E501

        <max-cost> is an integer that specifies the number of quantum computer units (QCU) the user is willing to spend on this job. Actual cost is returned to the user as a result of estimation. Jobs that exceed max allowed cost are not run even if action is specified as \"run\". <max-cost> parameter is optional. Max cost can be between 0 and account QCU balance. If omitted, <max-cost> defaults to account QCU balance.   # noqa: E501

        :return: The max_cost of this JobPostParameters.  # noqa: E501
        :rtype: int
        """
        return self._max_cost

    @max_cost.setter
    def max_cost(self, max_cost):
        """Sets the max_cost of this JobPostParameters.

        <max-cost> is an integer that specifies the number of quantum computer units (QCU) the user is willing to spend on this job. Actual cost is returned to the user as a result of estimation. Jobs that exceed max allowed cost are not run even if action is specified as \"run\". <max-cost> parameter is optional. Max cost can be between 0 and account QCU balance. If omitted, <max-cost> defaults to account QCU balance.   # noqa: E501

        :param max_cost: The max_cost of this JobPostParameters.  # noqa: E501
        :type: int
        """

        self._max_cost = max_cost

    @property
    def name(self):
        """Gets the name of this JobPostParameters.  # noqa: E501

        <job-name>   # noqa: E501

        :return: The name of this JobPostParameters.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobPostParameters.

        <job-name>   # noqa: E501

        :param name: The name of this JobPostParameters.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notify(self):
        """Gets the notify of this JobPostParameters.  # noqa: E501

        \"notify\" field allows the customer to decide whether or not they want to be notified when the job has completed or failed. This assumes that the customer has their notification details in the system (either email or SMS). By default, this field is false.   # noqa: E501

        :return: The notify of this JobPostParameters.  # noqa: E501
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this JobPostParameters.

        \"notify\" field allows the customer to decide whether or not they want to be notified when the job has completed or failed. This assumes that the customer has their notification details in the system (either email or SMS). By default, this field is false.   # noqa: E501

        :param notify: The notify of this JobPostParameters.  # noqa: E501
        :type: bool
        """

        self._notify = notify

    @property
    def options(self):
        """Gets the options of this JobPostParameters.  # noqa: E501

        <options> is an optional list of compiler flags used for fine-tuning program compilation. Currently only one option are available: • \"no-opt\" option disables all compiler optimizations including single-qubit gate compression. The program is treated as having an implicit \"barrier\" instruction after every gate operation.   # noqa: E501

        :return: The options of this JobPostParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this JobPostParameters.

        <options> is an optional list of compiler flags used for fine-tuning program compilation. Currently only one option are available: • \"no-opt\" option disables all compiler optimizations including single-qubit gate compression. The program is treated as having an implicit \"barrier\" instruction after every gate operation.   # noqa: E501

        :param options: The options of this JobPostParameters.  # noqa: E501
        :type: list[str]
        """

        self._options = options

    @property
    def priority(self):
        """Gets the priority of this JobPostParameters.  # noqa: E501

        <priority> string is an optional parameter that can be used to request specific queuing priority for the job. Allowed values are: • high • normal When priority is omitted, the default value is normal.   # noqa: E501

        :return: The priority of this JobPostParameters.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobPostParameters.

        <priority> string is an optional parameter that can be used to request specific queuing priority for the job. Allowed values are: • high • normal When priority is omitted, the default value is normal.   # noqa: E501

        :param priority: The priority of this JobPostParameters.  # noqa: E501
        :type: str
        """
        allowed_values = ["high", "normal"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and priority not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def program(self):
        """Gets the program of this JobPostParameters.  # noqa: E501

        <program-json> is a JSON-formatted program source. Program source is converted to JSON-compliant format by escaping quotes and other special characters. No other modification to program source is performed.   # noqa: E501

        :return: The program of this JobPostParameters.  # noqa: E501
        :rtype: str
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this JobPostParameters.

        <program-json> is a JSON-formatted program source. Program source is converted to JSON-compliant format by escaping quotes and other special characters. No other modification to program source is performed.   # noqa: E501

        :param program: The program of this JobPostParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and program is None:  # noqa: E501
            raise ValueError("Invalid value for `program`, must not be `None`")  # noqa: E501

        self._program = program

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobPostParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobPostParameters):
            return True

        return self.to_dict() != other.to_dict()

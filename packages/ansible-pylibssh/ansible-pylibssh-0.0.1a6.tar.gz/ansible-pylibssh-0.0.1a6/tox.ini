[tox]
envlist = python
minversion = 3.13.0
requires =
    setuptools >= 40.9.0
    pip >= 19.0.3
    # tox-venv >= 0.4.0
isolated_build = true


[testenv]
isolated_build = true
usedevelop = false
deps =
    Cython
    pytest
    pytest-cov
    pytest-forked
    pytest-xdist
setenv =
    ANSIBLE_PYLIBSSH_TRACING = {env:ANSIBLE_PYLIBSSH_TRACING:1}
    PYTHONPATH = {toxinidir}/bin
commands =
    sh -c "CFLAGS=-DCYTHON_TRACE_NOGIL=1 \
      {envbindir}/cythonize \
      --force \
      --inplace \
      --directive=embedsignature=True \
      --directive=emit_code_comments=True \
      --directive=linetrace=True \
      --directive=profile=True \
      {toxinidir}/src/pylibsshext/*.pyx"
    {envpython} -m pytest --cov-config={toxinidir}/.coveragerc --cov={envsitepackagesdir}/pylibsshext {posargs:}
whitelist_externals =
    sh

[testenv:test-binary-dists]
skip_install = true
commands_pre =
    # WARNING: Be sure to keep the `--no-index` arg.
    # WARNING: Otherwise, pip may prefer PyPI over
    # WARNING: the local dists dir.
    {envpython} -m pip install \
      --force-reinstall \
      --only-binary ansible-pylibssh \
      -f {env:PEP517_OUT_DIR} \
      --no-index \
      ansible-pylibssh
setenv =
    {[dists]setenv}

[testenv:test-source-dists]
skip_install = true
commands_pre =
    # Pre-fetch sdist build deps:
    {envpython} -m pip download \
      --prefer-binary \
      --only-binary Cython \
      --only-binary setuptools \
      --only-binary setuptools-scm \
      --only-binary setuptools-scm-git-archive \
      --only-binary toml \
      --only-binary wheel \
      --dest {toxinidir}/.github/workflows/.tmp/deps \
      Cython expandvars setuptools \
      setuptools-scm setuptools-scm-git-archive \
      toml wheel

    # WARNING: Be sure to keep the `--no-index` arg.
    # WARNING: Otherwise, pip may prefer PyPI over
    # WARNING: the local dists dir.
    {envpython} -m pip install \
      --force-reinstall \
      --no-binary ansible-pylibssh \
      -f {env:PEP517_OUT_DIR} \
      -f {toxinidir}/.github/workflows/.tmp/deps \
      --no-index \
      ansible-pylibssh
setenv =
    {[dists]setenv}

[dists]
setenv =
    {[testenv]setenv}
    PEP517_OUT_DIR = {env:PEP517_OUT_DIR:{toxinidir}/dist}


[testenv:cleanup-dists]
description =
    Wipe the the dists/ folder
usedevelop = false
skip_install = true
deps =
setenv =
    {[dists]setenv}
commands =
    rm -rfv {env:PEP517_OUT_DIR}
whitelist_externals =
    rm


[testenv:build-dists]
description =
    Build non-universal dists and put them into the dists/ folder
depends =
    cleanup-dists
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
skip_install = true
deps =
    # NOTE: v0.7.0 added support for backend-path in pyproject.toml but
    # NOTE: why not use something newer if we can?
    pep517 >= 0.8.2
passenv =
    PEP517_ARGS
setenv =
    {[dists]setenv}
commands =
    {envpython} -m pep517.build \
      {env:PEP517_ARGS:--source --binary} \
      --out-dir {env:PEP517_OUT_DIR} \
      {toxinidir}


[testenv:build-wheels-pip]
description =
    Build non-universal wheels dists and
    put them into the dists/ folder
depends =
    cleanup-dists
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
skip_install = true
deps =
    # NOTE: v20 added support for backend-path
    # NOTE: in pyproject.toml and we use it
    pip >= 20
setenv =
    {[dists]setenv}
commands =
    {envpython} -m pip wheel \
      --no-deps \
      --wheel-dir "{env:PEP517_OUT_DIR}" \
      "{toxinidir}"


[testenv:delocate-macos-wheels]
description = Vendor external deps into macOS wheels
# only run under macOS
platform = ^darwin
depends =
    build-dists
    build-wheels-pip
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
skip_install = true
deps =
    delocate
setenv =
    {[dists]setenv}
commands =
    {envpython} -m \
      delocate.cmd.delocate_listdeps \
      --all \
      {posargs:"{env:PEP517_OUT_DIR}"/*.whl}

    {envpython} -m \
      delocate.cmd.delocate_wheel \
      -v \
      {posargs:"{env:PEP517_OUT_DIR}"/*.whl}

    {envpython} -m \
      delocate.cmd.delocate_listdeps \
      --all \
      {posargs:"{env:PEP517_OUT_DIR}"/*.whl}


[testenv:metadata-validation]
description =
    Verify that dists under the dist/ dir have valid metadata
depends =
    build-dists
    build-dists-manylinux
    build-wheels-pip
    delocate-macos-wheels
deps =
    twine
usedevelop = false
skip_install = true
setenv =
    {[dists]setenv}
commands =
    twine check {env:PEP517_OUT_DIR}/*


[testenv:build-dists-manylinux]
basepython = python3
description =
    Build manylinux wheels in a container and put them into the dists/ folder
commands =
    # NOTE: `-t` shouldn't be used here because GitHub Actions
    # NOTE: workflows don't have TTY
    {env:DOCKER_EXECUTABLE:docker} run \
      -i --rm \
      -v {toxinidir}:/io \
      -e ANSIBLE_PYLIBSSH_TRACING \
      {posargs:} \
      pyca/cryptography-manylinux1:x86_64 \
      /io/build-scripts/build-manylinux-wheels.sh \
      0.9.4
deps =
isolated_build = true
passenv =
    # alternatively set `DOCKER_EXECUTABLE=podman` outside the container
    DOCKER_EXECUTABLE
    HOME
skip_install = true
whitelist_externals =
    {env:DOCKER_EXECUTABLE:docker}


[testenv:lint]
basepython = python3
commands =
    {envpython} -m pre_commit run --show-diff-on-failure {posargs:--all-files}

    # Print out the advise of how to install pre-commit from this env into Git:
    -{envpython} -c \
    'cmd = "{envpython} -m pre_commit install"; scr_width = len(cmd) + 10; sep = "=" * scr_width; cmd_str = "    $ " + cmd; '\
    'print("\n" + sep + "\nTo install pre-commit hooks into the Git repo, run:\n\n" + cmd_str + "\n\n" + sep + "\n")'
deps =
    pre-commit
    # pylint
isolated_build = true
skip_install = true

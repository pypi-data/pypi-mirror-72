# coding: utf-8

"""
    workflowapis.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kaistack.clients.openapi_clients.workflow.configuration import Configuration


class CodegenModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'version': 'str',
        'framework': 'str',
        'framework_version': 'str',
        'uri': 'str',
        'artifact_id': 'str',
        'created_at': 'datetime',
        'properties': 'dict(str, str)',
        'pipeline_id': 'str',
        'step_run_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'framework': 'framework',
        'framework_version': 'frameworkVersion',
        'uri': 'uri',
        'artifact_id': 'artifactId',
        'created_at': 'createdAt',
        'properties': 'properties',
        'pipeline_id': 'pipelineId',
        'step_run_id': 'stepRunId'
    }

    def __init__(self, name=None, version=None, framework=None, framework_version=None, uri=None, artifact_id=None, created_at=None, properties=None, pipeline_id=None, step_run_id=None, local_vars_configuration=None):  # noqa: E501
        """CodegenModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._version = None
        self._framework = None
        self._framework_version = None
        self._uri = None
        self._artifact_id = None
        self._created_at = None
        self._properties = None
        self._pipeline_id = None
        self._step_run_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if framework is not None:
            self.framework = framework
        if framework_version is not None:
            self.framework_version = framework_version
        if uri is not None:
            self.uri = uri
        if artifact_id is not None:
            self.artifact_id = artifact_id
        if created_at is not None:
            self.created_at = created_at
        if properties is not None:
            self.properties = properties
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if step_run_id is not None:
            self.step_run_id = step_run_id

    @property
    def name(self):
        """Gets the name of this CodegenModel.  # noqa: E501


        :return: The name of this CodegenModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodegenModel.


        :param name: The name of this CodegenModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this CodegenModel.  # noqa: E501


        :return: The version of this CodegenModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CodegenModel.


        :param version: The version of this CodegenModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def framework(self):
        """Gets the framework of this CodegenModel.  # noqa: E501


        :return: The framework of this CodegenModel.  # noqa: E501
        :rtype: str
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this CodegenModel.


        :param framework: The framework of this CodegenModel.  # noqa: E501
        :type: str
        """

        self._framework = framework

    @property
    def framework_version(self):
        """Gets the framework_version of this CodegenModel.  # noqa: E501


        :return: The framework_version of this CodegenModel.  # noqa: E501
        :rtype: str
        """
        return self._framework_version

    @framework_version.setter
    def framework_version(self, framework_version):
        """Sets the framework_version of this CodegenModel.


        :param framework_version: The framework_version of this CodegenModel.  # noqa: E501
        :type: str
        """

        self._framework_version = framework_version

    @property
    def uri(self):
        """Gets the uri of this CodegenModel.  # noqa: E501


        :return: The uri of this CodegenModel.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CodegenModel.


        :param uri: The uri of this CodegenModel.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def artifact_id(self):
        """Gets the artifact_id of this CodegenModel.  # noqa: E501


        :return: The artifact_id of this CodegenModel.  # noqa: E501
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this CodegenModel.


        :param artifact_id: The artifact_id of this CodegenModel.  # noqa: E501
        :type: str
        """

        self._artifact_id = artifact_id

    @property
    def created_at(self):
        """Gets the created_at of this CodegenModel.  # noqa: E501


        :return: The created_at of this CodegenModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CodegenModel.


        :param created_at: The created_at of this CodegenModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def properties(self):
        """Gets the properties of this CodegenModel.  # noqa: E501


        :return: The properties of this CodegenModel.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CodegenModel.


        :param properties: The properties of this CodegenModel.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this CodegenModel.  # noqa: E501


        :return: The pipeline_id of this CodegenModel.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this CodegenModel.


        :param pipeline_id: The pipeline_id of this CodegenModel.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def step_run_id(self):
        """Gets the step_run_id of this CodegenModel.  # noqa: E501


        :return: The step_run_id of this CodegenModel.  # noqa: E501
        :rtype: str
        """
        return self._step_run_id

    @step_run_id.setter
    def step_run_id(self, step_run_id):
        """Sets the step_run_id of this CodegenModel.


        :param step_run_id: The step_run_id of this CodegenModel.  # noqa: E501
        :type: str
        """

        self._step_run_id = step_run_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodegenModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CodegenModel):
            return True

        return self.to_dict() != other.to_dict()

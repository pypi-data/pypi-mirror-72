# coding: utf-8

"""
    workflowapis.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kaistack.clients.openapi_clients.workflow.configuration import Configuration


class CodegenRun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'run_id': 'str',
        'name': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'node': 'str',
        'pipeline_id': 'str',
        'properties': 'dict(str, str)',
        'status': 'str'
    }

    attribute_map = {
        'run_id': 'runId',
        'name': 'name',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'node': 'node',
        'pipeline_id': 'pipelineId',
        'properties': 'properties',
        'status': 'status'
    }

    def __init__(self, run_id=None, name=None, start_time=None, end_time=None, node=None, pipeline_id=None, properties=None, status=None, local_vars_configuration=None):  # noqa: E501
        """CodegenRun - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._run_id = None
        self._name = None
        self._start_time = None
        self._end_time = None
        self._node = None
        self._pipeline_id = None
        self._properties = None
        self._status = None
        self.discriminator = None

        if run_id is not None:
            self.run_id = run_id
        if name is not None:
            self.name = name
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if node is not None:
            self.node = node
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if properties is not None:
            self.properties = properties
        if status is not None:
            self.status = status

    @property
    def run_id(self):
        """Gets the run_id of this CodegenRun.  # noqa: E501


        :return: The run_id of this CodegenRun.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this CodegenRun.


        :param run_id: The run_id of this CodegenRun.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def name(self):
        """Gets the name of this CodegenRun.  # noqa: E501


        :return: The name of this CodegenRun.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodegenRun.


        :param name: The name of this CodegenRun.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this CodegenRun.  # noqa: E501


        :return: The start_time of this CodegenRun.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CodegenRun.


        :param start_time: The start_time of this CodegenRun.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this CodegenRun.  # noqa: E501


        :return: The end_time of this CodegenRun.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CodegenRun.


        :param end_time: The end_time of this CodegenRun.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def node(self):
        """Gets the node of this CodegenRun.  # noqa: E501


        :return: The node of this CodegenRun.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this CodegenRun.


        :param node: The node of this CodegenRun.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this CodegenRun.  # noqa: E501


        :return: The pipeline_id of this CodegenRun.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this CodegenRun.


        :param pipeline_id: The pipeline_id of this CodegenRun.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def properties(self):
        """Gets the properties of this CodegenRun.  # noqa: E501


        :return: The properties of this CodegenRun.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CodegenRun.


        :param properties: The properties of this CodegenRun.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this CodegenRun.  # noqa: E501


        :return: The status of this CodegenRun.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodegenRun.


        :param status: The status of this CodegenRun.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodegenRun):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CodegenRun):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    workflowapis.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kaistack.clients.openapi_clients.workflow.configuration import Configuration


class CodegenPipelineRunDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'namespace': 'str',
        'pipeline_id': 'str',
        'experiment_id': 'str',
        'recurring_job_id': 'str',
        'status': 'str',
        'created_at': 'datetime',
        'scheduledd_at': 'datetime',
        'finished_at': 'datetime',
        'pipeline_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace',
        'pipeline_id': 'pipelineId',
        'experiment_id': 'experimentId',
        'recurring_job_id': 'recurringJobId',
        'status': 'status',
        'created_at': 'createdAt',
        'scheduledd_at': 'scheduleddAt',
        'finished_at': 'finishedAt',
        'pipeline_name': 'pipelineName'
    }

    def __init__(self, id=None, name=None, namespace=None, pipeline_id=None, experiment_id=None, recurring_job_id=None, status=None, created_at=None, scheduledd_at=None, finished_at=None, pipeline_name=None, local_vars_configuration=None):  # noqa: E501
        """CodegenPipelineRunDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._namespace = None
        self._pipeline_id = None
        self._experiment_id = None
        self._recurring_job_id = None
        self._status = None
        self._created_at = None
        self._scheduledd_at = None
        self._finished_at = None
        self._pipeline_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if recurring_job_id is not None:
            self.recurring_job_id = recurring_job_id
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if scheduledd_at is not None:
            self.scheduledd_at = scheduledd_at
        if finished_at is not None:
            self.finished_at = finished_at
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name

    @property
    def id(self):
        """Gets the id of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The id of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodegenPipelineRunDetail.


        :param id: The id of this CodegenPipelineRunDetail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The name of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodegenPipelineRunDetail.


        :param name: The name of this CodegenPipelineRunDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The namespace of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CodegenPipelineRunDetail.


        :param namespace: The namespace of this CodegenPipelineRunDetail.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The pipeline_id of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this CodegenPipelineRunDetail.


        :param pipeline_id: The pipeline_id of this CodegenPipelineRunDetail.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def experiment_id(self):
        """Gets the experiment_id of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The experiment_id of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this CodegenPipelineRunDetail.


        :param experiment_id: The experiment_id of this CodegenPipelineRunDetail.  # noqa: E501
        :type: str
        """

        self._experiment_id = experiment_id

    @property
    def recurring_job_id(self):
        """Gets the recurring_job_id of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The recurring_job_id of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._recurring_job_id

    @recurring_job_id.setter
    def recurring_job_id(self, recurring_job_id):
        """Sets the recurring_job_id of this CodegenPipelineRunDetail.


        :param recurring_job_id: The recurring_job_id of this CodegenPipelineRunDetail.  # noqa: E501
        :type: str
        """

        self._recurring_job_id = recurring_job_id

    @property
    def status(self):
        """Gets the status of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The status of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodegenPipelineRunDetail.


        :param status: The status of this CodegenPipelineRunDetail.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The created_at of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CodegenPipelineRunDetail.


        :param created_at: The created_at of this CodegenPipelineRunDetail.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def scheduledd_at(self):
        """Gets the scheduledd_at of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The scheduledd_at of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduledd_at

    @scheduledd_at.setter
    def scheduledd_at(self, scheduledd_at):
        """Sets the scheduledd_at of this CodegenPipelineRunDetail.


        :param scheduledd_at: The scheduledd_at of this CodegenPipelineRunDetail.  # noqa: E501
        :type: datetime
        """

        self._scheduledd_at = scheduledd_at

    @property
    def finished_at(self):
        """Gets the finished_at of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The finished_at of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this CodegenPipelineRunDetail.


        :param finished_at: The finished_at of this CodegenPipelineRunDetail.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this CodegenPipelineRunDetail.  # noqa: E501


        :return: The pipeline_name of this CodegenPipelineRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this CodegenPipelineRunDetail.


        :param pipeline_name: The pipeline_name of this CodegenPipelineRunDetail.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodegenPipelineRunDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CodegenPipelineRunDetail):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    workflowapis.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kaistack.clients.openapi_clients.workflow.configuration import Configuration


class CodegenArtifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'uri': 'str',
        'run_id': 'str',
        'pipeline_run_id': 'str',
        'experiment_name': 'str',
        'node': 'str',
        'name': 'str',
        'type': 'str',
        'path': 'str',
        'properties': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'uri': 'uri',
        'run_id': 'runId',
        'pipeline_run_id': 'pipelineRunId',
        'experiment_name': 'experimentName',
        'node': 'node',
        'name': 'name',
        'type': 'type',
        'path': 'path',
        'properties': 'properties'
    }

    def __init__(self, id=None, created_at=None, uri=None, run_id=None, pipeline_run_id=None, experiment_name=None, node=None, name=None, type=None, path=None, properties=None, local_vars_configuration=None):  # noqa: E501
        """CodegenArtifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_at = None
        self._uri = None
        self._run_id = None
        self._pipeline_run_id = None
        self._experiment_name = None
        self._node = None
        self._name = None
        self._type = None
        self._path = None
        self._properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if uri is not None:
            self.uri = uri
        if run_id is not None:
            self.run_id = run_id
        if pipeline_run_id is not None:
            self.pipeline_run_id = pipeline_run_id
        if experiment_name is not None:
            self.experiment_name = experiment_name
        if node is not None:
            self.node = node
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if path is not None:
            self.path = path
        if properties is not None:
            self.properties = properties

    @property
    def id(self):
        """Gets the id of this CodegenArtifact.  # noqa: E501


        :return: The id of this CodegenArtifact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodegenArtifact.


        :param id: The id of this CodegenArtifact.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this CodegenArtifact.  # noqa: E501


        :return: The created_at of this CodegenArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CodegenArtifact.


        :param created_at: The created_at of this CodegenArtifact.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def uri(self):
        """Gets the uri of this CodegenArtifact.  # noqa: E501


        :return: The uri of this CodegenArtifact.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CodegenArtifact.


        :param uri: The uri of this CodegenArtifact.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def run_id(self):
        """Gets the run_id of this CodegenArtifact.  # noqa: E501


        :return: The run_id of this CodegenArtifact.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this CodegenArtifact.


        :param run_id: The run_id of this CodegenArtifact.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def pipeline_run_id(self):
        """Gets the pipeline_run_id of this CodegenArtifact.  # noqa: E501


        :return: The pipeline_run_id of this CodegenArtifact.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_run_id

    @pipeline_run_id.setter
    def pipeline_run_id(self, pipeline_run_id):
        """Sets the pipeline_run_id of this CodegenArtifact.


        :param pipeline_run_id: The pipeline_run_id of this CodegenArtifact.  # noqa: E501
        :type: str
        """

        self._pipeline_run_id = pipeline_run_id

    @property
    def experiment_name(self):
        """Gets the experiment_name of this CodegenArtifact.  # noqa: E501


        :return: The experiment_name of this CodegenArtifact.  # noqa: E501
        :rtype: str
        """
        return self._experiment_name

    @experiment_name.setter
    def experiment_name(self, experiment_name):
        """Sets the experiment_name of this CodegenArtifact.


        :param experiment_name: The experiment_name of this CodegenArtifact.  # noqa: E501
        :type: str
        """

        self._experiment_name = experiment_name

    @property
    def node(self):
        """Gets the node of this CodegenArtifact.  # noqa: E501


        :return: The node of this CodegenArtifact.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this CodegenArtifact.


        :param node: The node of this CodegenArtifact.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def name(self):
        """Gets the name of this CodegenArtifact.  # noqa: E501


        :return: The name of this CodegenArtifact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodegenArtifact.


        :param name: The name of this CodegenArtifact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this CodegenArtifact.  # noqa: E501


        :return: The type of this CodegenArtifact.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodegenArtifact.


        :param type: The type of this CodegenArtifact.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def path(self):
        """Gets the path of this CodegenArtifact.  # noqa: E501


        :return: The path of this CodegenArtifact.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CodegenArtifact.


        :param path: The path of this CodegenArtifact.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def properties(self):
        """Gets the properties of this CodegenArtifact.  # noqa: E501


        :return: The properties of this CodegenArtifact.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CodegenArtifact.


        :param properties: The properties of this CodegenArtifact.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodegenArtifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CodegenArtifact):
            return True

        return self.to_dict() != other.to_dict()

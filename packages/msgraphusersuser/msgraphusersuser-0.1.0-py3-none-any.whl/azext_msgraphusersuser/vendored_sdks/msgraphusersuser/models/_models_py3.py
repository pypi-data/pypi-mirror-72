# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._users_user_enums import *


class CollectionOfUser(msrest.serialization.Model):
    """Collection of user.

    :param value:
    :type value: list[~users_user.models.MicrosoftGraphUser]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphUser]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphUser"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfUser, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = id


class MicrosoftGraphActivityHistoryItem(MicrosoftGraphEntity):
    """activityHistoryItem.

    :param id: Read-only.
    :type id: str
    :param status: status. Possible values include: "active", "updated", "deleted", "ignored",
     "unknownFutureValue".
    :type status: str or ~users_user.models.MicrosoftGraphStatus
    :param active_duration_seconds: Optional. The duration of active user engagement. if not
     supplied, this is calculated from the startedDateTime and lastActiveDateTime.
    :type active_duration_seconds: int
    :param created_date_time: Set by the server. DateTime in UTC when the object was created on the
     server.
    :type created_date_time: ~datetime.datetime
    :param last_active_date_time: Optional. UTC DateTime when the historyItem (activity session)
     was last understood as active or finished - if null, historyItem status should be Ongoing.
    :type last_active_date_time: ~datetime.datetime
    :param last_modified_date_time: Set by the server. DateTime in UTC when the object was modified
     on the server.
    :type last_modified_date_time: ~datetime.datetime
    :param expiration_date_time: Optional. UTC DateTime when the historyItem will undergo hard-
     delete. Can be set by the client.
    :type expiration_date_time: ~datetime.datetime
    :param started_date_time: Required. UTC DateTime when the historyItem (activity session) was
     started. Required for timeline history.
    :type started_date_time: ~datetime.datetime
    :param user_timezone: Optional. The timezone in which the user's device used to generate the
     activity was located at activity creation time. Values supplied as Olson IDs in order to
     support cross-platform representation.
    :type user_timezone: str
    :param activity: userActivity.
    :type activity: ~users_user.models.MicrosoftGraphUserActivity
    """

    _validation = {
        'active_duration_seconds': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'active_duration_seconds': {'key': 'activeDurationSeconds', 'type': 'int'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_active_date_time': {'key': 'lastActiveDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'started_date_time': {'key': 'startedDateTime', 'type': 'iso-8601'},
        'user_timezone': {'key': 'userTimezone', 'type': 'str'},
        'activity': {'key': 'activity', 'type': 'MicrosoftGraphUserActivity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphStatus"]] = None,
        active_duration_seconds: Optional[int] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_active_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        started_date_time: Optional[datetime.datetime] = None,
        user_timezone: Optional[str] = None,
        activity: Optional["MicrosoftGraphUserActivity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphActivityHistoryItem, self).__init__(id=id, **kwargs)
        self.status = status
        self.active_duration_seconds = active_duration_seconds
        self.created_date_time = created_date_time
        self.last_active_date_time = last_active_date_time
        self.last_modified_date_time = last_modified_date_time
        self.expiration_date_time = expiration_date_time
        self.started_date_time = started_date_time
        self.user_timezone = user_timezone
        self.activity = activity


class MicrosoftGraphActivityStatistics(MicrosoftGraphEntity):
    """activityStatistics.

    :param id: Read-only.
    :type id: str
    :param activity: analyticsActivityType. Possible values include: "Email", "Meeting", "Focus",
     "Chat", "Call".
    :type activity: str or ~users_user.models.MicrosoftGraphAnalyticsActivityType
    :param start_date:
    :type start_date: ~datetime.date
    :param end_date:
    :type end_date: ~datetime.date
    :param time_zone_used:
    :type time_zone_used: str
    :param duration:
    :type duration: ~datetime.timedelta
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'activity': {'key': 'activity', 'type': 'str'},
        'start_date': {'key': 'startDate', 'type': 'date'},
        'end_date': {'key': 'endDate', 'type': 'date'},
        'time_zone_used': {'key': 'timeZoneUsed', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        activity: Optional[Union[str, "MicrosoftGraphAnalyticsActivityType"]] = None,
        start_date: Optional[datetime.date] = None,
        end_date: Optional[datetime.date] = None,
        time_zone_used: Optional[str] = None,
        duration: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(MicrosoftGraphActivityStatistics, self).__init__(id=id, **kwargs)
        self.activity = activity
        self.start_date = start_date
        self.end_date = end_date
        self.time_zone_used = time_zone_used
        self.duration = duration


class MicrosoftGraphAgreementAcceptance(MicrosoftGraphEntity):
    """agreementAcceptance.

    :param id: Read-only.
    :type id: str
    :param agreement_id:
    :type agreement_id: str
    :param user_id:
    :type user_id: str
    :param agreement_file_id:
    :type agreement_file_id: str
    :param recorded_date_time:
    :type recorded_date_time: ~datetime.datetime
    :param user_display_name:
    :type user_display_name: str
    :param user_principal_name:
    :type user_principal_name: str
    :param user_email:
    :type user_email: str
    :param state: agreementAcceptanceState. Possible values include: "accepted", "declined".
    :type state: str or ~users_user.models.MicrosoftGraphAgreementAcceptanceState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'agreement_id': {'key': 'agreementId', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'agreement_file_id': {'key': 'agreementFileId', 'type': 'str'},
        'recorded_date_time': {'key': 'recordedDateTime', 'type': 'iso-8601'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        agreement_id: Optional[str] = None,
        user_id: Optional[str] = None,
        agreement_file_id: Optional[str] = None,
        recorded_date_time: Optional[datetime.datetime] = None,
        user_display_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        user_email: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphAgreementAcceptanceState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAgreementAcceptance, self).__init__(id=id, **kwargs)
        self.agreement_id = agreement_id
        self.user_id = user_id
        self.agreement_file_id = agreement_file_id
        self.recorded_date_time = recorded_date_time
        self.user_display_name = user_display_name
        self.user_principal_name = user_principal_name
        self.user_email = user_email
        self.state = state


class MicrosoftGraphAlbum(msrest.serialization.Model):
    """album.

    :param cover_image_item_id:
    :type cover_image_item_id: str
    """

    _attribute_map = {
        'cover_image_item_id': {'key': 'coverImageItemId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        cover_image_item_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAlbum, self).__init__(**kwargs)
        self.cover_image_item_id = cover_image_item_id


class MicrosoftGraphAlternativeSecurityId(msrest.serialization.Model):
    """alternativeSecurityId.

    :param type: For internal use only.
    :type type: int
    :param identity_provider: For internal use only.
    :type identity_provider: str
    :param key: For internal use only.
    :type key: bytes
    """

    _validation = {
        'type': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'int'},
        'identity_provider': {'key': 'identityProvider', 'type': 'str'},
        'key': {'key': 'key', 'type': 'base64'},
    }

    def __init__(
        self,
        *,
        type: Optional[int] = None,
        identity_provider: Optional[str] = None,
        key: Optional[bytes] = None,
        **kwargs
    ):
        super(MicrosoftGraphAlternativeSecurityId, self).__init__(**kwargs)
        self.type = type
        self.identity_provider = identity_provider
        self.key = key


class MicrosoftGraphAppConsentRequest(MicrosoftGraphEntity):
    """appConsentRequest.

    :param id: Read-only.
    :type id: str
    :param app_id:
    :type app_id: str
    :param app_display_name:
    :type app_display_name: str
    :param consent_type:
    :type consent_type: str
    :param pending_scopes:
    :type pending_scopes: list[~users_user.models.MicrosoftGraphAppConsentRequestScope]
    :param user_consent_requests:
    :type user_consent_requests: list[~users_user.models.MicrosoftGraphUserConsentRequest]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'consent_type': {'key': 'consentType', 'type': 'str'},
        'pending_scopes': {'key': 'pendingScopes', 'type': '[MicrosoftGraphAppConsentRequestScope]'},
        'user_consent_requests': {'key': 'userConsentRequests', 'type': '[MicrosoftGraphUserConsentRequest]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        app_id: Optional[str] = None,
        app_display_name: Optional[str] = None,
        consent_type: Optional[str] = None,
        pending_scopes: Optional[List["MicrosoftGraphAppConsentRequestScope"]] = None,
        user_consent_requests: Optional[List["MicrosoftGraphUserConsentRequest"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAppConsentRequest, self).__init__(id=id, **kwargs)
        self.app_id = app_id
        self.app_display_name = app_display_name
        self.consent_type = consent_type
        self.pending_scopes = pending_scopes
        self.user_consent_requests = user_consent_requests


class MicrosoftGraphAppConsentRequestScope(msrest.serialization.Model):
    """appConsentRequestScope.

    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAppConsentRequestScope, self).__init__(**kwargs)
        self.display_name = display_name


class MicrosoftGraphAppLogCollectionRequest(MicrosoftGraphEntity):
    """AppLogCollectionRequest Entity.

    :param id: Read-only.
    :type id: str
    :param status: appLogUploadState. Possible values include: "pending", "completed", "failed".
    :type status: str or ~users_user.models.MicrosoftGraphAppLogUploadState
    :param error_message: Error message if any during the upload process.
    :type error_message: str
    :param custom_log_folders: List of log folders.
    :type custom_log_folders: list[str]
    :param completed_date_time: Time at which the upload log request reached a terminal state.
    :type completed_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'custom_log_folders': {'key': 'customLogFolders', 'type': '[str]'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphAppLogUploadState"]] = None,
        error_message: Optional[str] = None,
        custom_log_folders: Optional[List[str]] = None,
        completed_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphAppLogCollectionRequest, self).__init__(id=id, **kwargs)
        self.status = status
        self.error_message = error_message
        self.custom_log_folders = custom_log_folders
        self.completed_date_time = completed_date_time


class MicrosoftGraphAppRoleAssignment(MicrosoftGraphEntity):
    """appRoleAssignment.

    :param id: Read-only.
    :type id: str
    :param app_role_id:
    :type app_role_id: str
    :param creation_timestamp:
    :type creation_timestamp: ~datetime.datetime
    :param principal_display_name:
    :type principal_display_name: str
    :param principal_id:
    :type principal_id: str
    :param principal_type:
    :type principal_type: str
    :param resource_display_name:
    :type resource_display_name: str
    :param resource_id:
    :type resource_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'app_role_id': {'key': 'appRoleId', 'type': 'str'},
        'creation_timestamp': {'key': 'creationTimestamp', 'type': 'iso-8601'},
        'principal_display_name': {'key': 'principalDisplayName', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'principal_type': {'key': 'principalType', 'type': 'str'},
        'resource_display_name': {'key': 'resourceDisplayName', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        app_role_id: Optional[str] = None,
        creation_timestamp: Optional[datetime.datetime] = None,
        principal_display_name: Optional[str] = None,
        principal_id: Optional[str] = None,
        principal_type: Optional[str] = None,
        resource_display_name: Optional[str] = None,
        resource_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAppRoleAssignment, self).__init__(id=id, **kwargs)
        self.app_role_id = app_role_id
        self.creation_timestamp = creation_timestamp
        self.principal_display_name = principal_display_name
        self.principal_id = principal_id
        self.principal_type = principal_type
        self.resource_display_name = resource_display_name
        self.resource_id = resource_id


class MicrosoftGraphApproval(MicrosoftGraphEntity):
    """approval.

    :param id: Read-only.
    :type id: str
    :param pending_steps:
    :type pending_steps: list[~users_user.models.MicrosoftGraphApprovalStep]
    :param completed_steps:
    :type completed_steps: list[~users_user.models.MicrosoftGraphApprovalStep]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'pending_steps': {'key': 'pendingSteps', 'type': '[MicrosoftGraphApprovalStep]'},
        'completed_steps': {'key': 'completedSteps', 'type': '[MicrosoftGraphApprovalStep]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        pending_steps: Optional[List["MicrosoftGraphApprovalStep"]] = None,
        completed_steps: Optional[List["MicrosoftGraphApprovalStep"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphApproval, self).__init__(id=id, **kwargs)
        self.pending_steps = pending_steps
        self.completed_steps = completed_steps


class MicrosoftGraphApprovalStep(MicrosoftGraphEntity):
    """approvalStep.

    :param id: Read-only.
    :type id: str
    :param display_name:
    :type display_name: str
    :param reviewed_by: identity.
    :type reviewed_by: ~users_user.models.MicrosoftGraphIdentity
    :param reviewed_date_time:
    :type reviewed_date_time: ~datetime.datetime
    :param review_result:
    :type review_result: str
    :param justification:
    :type justification: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'reviewed_by': {'key': 'reviewedBy', 'type': 'MicrosoftGraphIdentity'},
        'reviewed_date_time': {'key': 'reviewedDateTime', 'type': 'iso-8601'},
        'review_result': {'key': 'reviewResult', 'type': 'str'},
        'justification': {'key': 'justification', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        reviewed_by: Optional["MicrosoftGraphIdentity"] = None,
        reviewed_date_time: Optional[datetime.datetime] = None,
        review_result: Optional[str] = None,
        justification: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphApprovalStep, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.reviewed_by = reviewed_by
        self.reviewed_date_time = reviewed_date_time
        self.review_result = review_result
        self.justification = justification


class MicrosoftGraphAssignedLabel(msrest.serialization.Model):
    """assignedLabel.

    :param label_id:
    :type label_id: str
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'label_id': {'key': 'labelId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        label_id: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAssignedLabel, self).__init__(**kwargs)
        self.label_id = label_id
        self.display_name = display_name


class MicrosoftGraphAssignedLicense(msrest.serialization.Model):
    """assignedLicense.

    :param disabled_plans: A collection of the unique identifiers for plans that have been
     disabled.
    :type disabled_plans: list[str]
    :param sku_id: The unique identifier for the SKU.
    :type sku_id: str
    """

    _attribute_map = {
        'disabled_plans': {'key': 'disabledPlans', 'type': '[str]'},
        'sku_id': {'key': 'skuId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        disabled_plans: Optional[List[str]] = None,
        sku_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAssignedLicense, self).__init__(**kwargs)
        self.disabled_plans = disabled_plans
        self.sku_id = sku_id


class MicrosoftGraphAssignedPlan(msrest.serialization.Model):
    """assignedPlan.

    :param assigned_date_time: The date and time at which the plan was assigned; for example:
     2013-01-02T19:32:30Z. The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type assigned_date_time: ~datetime.datetime
    :param capability_status: For example, 'Enabled'.
    :type capability_status: str
    :param service: The name of the service; for example, 'Exchange'.
    :type service: str
    :param service_plan_id: A GUID that identifies the service plan.
    :type service_plan_id: str
    """

    _attribute_map = {
        'assigned_date_time': {'key': 'assignedDateTime', 'type': 'iso-8601'},
        'capability_status': {'key': 'capabilityStatus', 'type': 'str'},
        'service': {'key': 'service', 'type': 'str'},
        'service_plan_id': {'key': 'servicePlanId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        assigned_date_time: Optional[datetime.datetime] = None,
        capability_status: Optional[str] = None,
        service: Optional[str] = None,
        service_plan_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAssignedPlan, self).__init__(**kwargs)
        self.assigned_date_time = assigned_date_time
        self.capability_status = capability_status
        self.service = service
        self.service_plan_id = service_plan_id


class MicrosoftGraphAttachment(MicrosoftGraphEntity):
    """attachment.

    :param id: Read-only.
    :type id: str
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The attachment's file name.
    :type name: str
    :param content_type: The MIME type.
    :type content_type: str
    :param size: The length of the attachment in bytes.
    :type size: int
    :param is_inline: true if the attachment is an inline attachment; otherwise, false.
    :type is_inline: bool
    """

    _validation = {
        'size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'size': {'key': 'size', 'type': 'int'},
        'is_inline': {'key': 'isInline', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        content_type: Optional[str] = None,
        size: Optional[int] = None,
        is_inline: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphAttachment, self).__init__(id=id, **kwargs)
        self.last_modified_date_time = last_modified_date_time
        self.name = name
        self.content_type = content_type
        self.size = size
        self.is_inline = is_inline


class MicrosoftGraphRecipient(msrest.serialization.Model):
    """recipient.

    :param email_address: emailAddress.
    :type email_address: ~users_user.models.MicrosoftGraphEmailAddress
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'MicrosoftGraphEmailAddress'},
    }

    def __init__(
        self,
        *,
        email_address: Optional["MicrosoftGraphEmailAddress"] = None,
        **kwargs
    ):
        super(MicrosoftGraphRecipient, self).__init__(**kwargs)
        self.email_address = email_address


class MicrosoftGraphAttendeeBase(MicrosoftGraphRecipient):
    """attendeeBase.

    :param email_address: emailAddress.
    :type email_address: ~users_user.models.MicrosoftGraphEmailAddress
    :param type: attendeeType. Possible values include: "required", "optional", "resource".
    :type type: str or ~users_user.models.MicrosoftGraphAttendeeType
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'MicrosoftGraphEmailAddress'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        email_address: Optional["MicrosoftGraphEmailAddress"] = None,
        type: Optional[Union[str, "MicrosoftGraphAttendeeType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAttendeeBase, self).__init__(email_address=email_address, **kwargs)
        self.type = type


class MicrosoftGraphAttendee(MicrosoftGraphAttendeeBase):
    """attendee.

    :param email_address: emailAddress.
    :type email_address: ~users_user.models.MicrosoftGraphEmailAddress
    :param type: attendeeType. Possible values include: "required", "optional", "resource".
    :type type: str or ~users_user.models.MicrosoftGraphAttendeeType
    :param status: responseStatus.
    :type status: ~users_user.models.MicrosoftGraphResponseStatus
    :param proposed_new_time: timeSlot.
    :type proposed_new_time: ~users_user.models.MicrosoftGraphTimeSlot
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'MicrosoftGraphEmailAddress'},
        'type': {'key': 'type', 'type': 'str'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphResponseStatus'},
        'proposed_new_time': {'key': 'proposedNewTime', 'type': 'MicrosoftGraphTimeSlot'},
    }

    def __init__(
        self,
        *,
        email_address: Optional["MicrosoftGraphEmailAddress"] = None,
        type: Optional[Union[str, "MicrosoftGraphAttendeeType"]] = None,
        status: Optional["MicrosoftGraphResponseStatus"] = None,
        proposed_new_time: Optional["MicrosoftGraphTimeSlot"] = None,
        **kwargs
    ):
        super(MicrosoftGraphAttendee, self).__init__(email_address=email_address, type=type, **kwargs)
        self.status = status
        self.proposed_new_time = proposed_new_time


class MicrosoftGraphAudio(msrest.serialization.Model):
    """audio.

    :param album: The title of the album for this audio file.
    :type album: str
    :param album_artist: The artist named on the album for the audio file.
    :type album_artist: str
    :param artist: The performing artist for the audio file.
    :type artist: str
    :param bitrate: Bitrate expressed in kbps.
    :type bitrate: long
    :param composers: The name of the composer of the audio file.
    :type composers: str
    :param copyright: Copyright information for the audio file.
    :type copyright: str
    :param disc: The number of the disc this audio file came from.
    :type disc: int
    :param disc_count: The total number of discs in this album.
    :type disc_count: int
    :param duration: Duration of the audio file, expressed in milliseconds.
    :type duration: long
    :param genre: The genre of this audio file.
    :type genre: str
    :param has_drm: Indicates if the file is protected with digital rights management.
    :type has_drm: bool
    :param is_variable_bitrate: Indicates if the file is encoded with a variable bitrate.
    :type is_variable_bitrate: bool
    :param title: The title of the audio file.
    :type title: str
    :param track: The number of the track on the original disc for this audio file.
    :type track: int
    :param track_count: The total number of tracks on the original disc for this audio file.
    :type track_count: int
    :param year: The year the audio file was recorded.
    :type year: int
    """

    _validation = {
        'disc': {'maximum': 32767, 'minimum': -32768},
        'disc_count': {'maximum': 32767, 'minimum': -32768},
        'track': {'maximum': 2147483647, 'minimum': -2147483648},
        'track_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'year': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'album': {'key': 'album', 'type': 'str'},
        'album_artist': {'key': 'albumArtist', 'type': 'str'},
        'artist': {'key': 'artist', 'type': 'str'},
        'bitrate': {'key': 'bitrate', 'type': 'long'},
        'composers': {'key': 'composers', 'type': 'str'},
        'copyright': {'key': 'copyright', 'type': 'str'},
        'disc': {'key': 'disc', 'type': 'int'},
        'disc_count': {'key': 'discCount', 'type': 'int'},
        'duration': {'key': 'duration', 'type': 'long'},
        'genre': {'key': 'genre', 'type': 'str'},
        'has_drm': {'key': 'hasDrm', 'type': 'bool'},
        'is_variable_bitrate': {'key': 'isVariableBitrate', 'type': 'bool'},
        'title': {'key': 'title', 'type': 'str'},
        'track': {'key': 'track', 'type': 'int'},
        'track_count': {'key': 'trackCount', 'type': 'int'},
        'year': {'key': 'year', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        album: Optional[str] = None,
        album_artist: Optional[str] = None,
        artist: Optional[str] = None,
        bitrate: Optional[int] = None,
        composers: Optional[str] = None,
        copyright: Optional[str] = None,
        disc: Optional[int] = None,
        disc_count: Optional[int] = None,
        duration: Optional[int] = None,
        genre: Optional[str] = None,
        has_drm: Optional[bool] = None,
        is_variable_bitrate: Optional[bool] = None,
        title: Optional[str] = None,
        track: Optional[int] = None,
        track_count: Optional[int] = None,
        year: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphAudio, self).__init__(**kwargs)
        self.album = album
        self.album_artist = album_artist
        self.artist = artist
        self.bitrate = bitrate
        self.composers = composers
        self.copyright = copyright
        self.disc = disc
        self.disc_count = disc_count
        self.duration = duration
        self.genre = genre
        self.has_drm = has_drm
        self.is_variable_bitrate = is_variable_bitrate
        self.title = title
        self.track = track
        self.track_count = track_count
        self.year = year


class MicrosoftGraphAudioConferencing(msrest.serialization.Model):
    """audioConferencing.

    :param conference_id:
    :type conference_id: str
    :param toll_number: The toll number that connects to the Audio Conference Provider.
    :type toll_number: str
    :param toll_free_number: The toll-free number that connects to the Audio Conference Provider.
    :type toll_free_number: str
    :param dialin_url: A URL to the externally-accessible web page that contains dial-in
     information.
    :type dialin_url: str
    """

    _attribute_map = {
        'conference_id': {'key': 'conferenceId', 'type': 'str'},
        'toll_number': {'key': 'tollNumber', 'type': 'str'},
        'toll_free_number': {'key': 'tollFreeNumber', 'type': 'str'},
        'dialin_url': {'key': 'dialinUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        conference_id: Optional[str] = None,
        toll_number: Optional[str] = None,
        toll_free_number: Optional[str] = None,
        dialin_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAudioConferencing, self).__init__(**kwargs)
        self.conference_id = conference_id
        self.toll_number = toll_number
        self.toll_free_number = toll_free_number
        self.dialin_url = dialin_url


class MicrosoftGraphAuthentication(MicrosoftGraphEntity):
    """authentication.

    :param id: Read-only.
    :type id: str
    :param methods:
    :type methods: list[~users_user.models.MicrosoftGraphEntity]
    :param phone_methods:
    :type phone_methods: list[~users_user.models.MicrosoftGraphPhoneAuthenticationMethod]
    :param password_methods:
    :type password_methods: list[~users_user.models.MicrosoftGraphPasswordAuthenticationMethod]
    :param operations:
    :type operations: list[~users_user.models.MicrosoftGraphLongRunningOperation]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'methods': {'key': 'methods', 'type': '[MicrosoftGraphEntity]'},
        'phone_methods': {'key': 'phoneMethods', 'type': '[MicrosoftGraphPhoneAuthenticationMethod]'},
        'password_methods': {'key': 'passwordMethods', 'type': '[MicrosoftGraphPasswordAuthenticationMethod]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphLongRunningOperation]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        methods: Optional[List["MicrosoftGraphEntity"]] = None,
        phone_methods: Optional[List["MicrosoftGraphPhoneAuthenticationMethod"]] = None,
        password_methods: Optional[List["MicrosoftGraphPasswordAuthenticationMethod"]] = None,
        operations: Optional[List["MicrosoftGraphLongRunningOperation"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAuthentication, self).__init__(id=id, **kwargs)
        self.methods = methods
        self.phone_methods = phone_methods
        self.password_methods = password_methods
        self.operations = operations


class MicrosoftGraphAuthenticationMethod(MicrosoftGraphEntity):
    """authenticationMethod.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAuthenticationMethod, self).__init__(id=id, **kwargs)


class MicrosoftGraphAutoLabeling(msrest.serialization.Model):
    """autoLabeling.

    :param sensitive_type_ids:
    :type sensitive_type_ids: list[str]
    :param message:
    :type message: str
    """

    _attribute_map = {
        'sensitive_type_ids': {'key': 'sensitiveTypeIds', 'type': '[str]'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sensitive_type_ids: Optional[List[str]] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAutoLabeling, self).__init__(**kwargs)
        self.sensitive_type_ids = sensitive_type_ids
        self.message = message


class MicrosoftGraphAutomaticRepliesSetting(msrest.serialization.Model):
    """automaticRepliesSetting.

    :param status: automaticRepliesStatus. Possible values include: "disabled", "alwaysEnabled",
     "scheduled".
    :type status: str or ~users_user.models.MicrosoftGraphAutomaticRepliesStatus
    :param external_audience: externalAudienceScope. Possible values include: "none",
     "contactsOnly", "all".
    :type external_audience: str or ~users_user.models.MicrosoftGraphExternalAudienceScope
    :param scheduled_start_date_time: dateTimeTimeZone.
    :type scheduled_start_date_time: ~users_user.models.MicrosoftGraphDateTimeZone
    :param scheduled_end_date_time: dateTimeTimeZone.
    :type scheduled_end_date_time: ~users_user.models.MicrosoftGraphDateTimeZone
    :param internal_reply_message: The automatic reply to send to the audience internal to the
     signed-in user's organization, if Status is AlwaysEnabled or Scheduled.
    :type internal_reply_message: str
    :param external_reply_message: The automatic reply to send to the specified external audience,
     if Status is AlwaysEnabled or Scheduled.
    :type external_reply_message: str
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'external_audience': {'key': 'externalAudience', 'type': 'str'},
        'scheduled_start_date_time': {'key': 'scheduledStartDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'scheduled_end_date_time': {'key': 'scheduledEndDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'internal_reply_message': {'key': 'internalReplyMessage', 'type': 'str'},
        'external_reply_message': {'key': 'externalReplyMessage', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "MicrosoftGraphAutomaticRepliesStatus"]] = None,
        external_audience: Optional[Union[str, "MicrosoftGraphExternalAudienceScope"]] = None,
        scheduled_start_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        scheduled_end_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        internal_reply_message: Optional[str] = None,
        external_reply_message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAutomaticRepliesSetting, self).__init__(**kwargs)
        self.status = status
        self.external_audience = external_audience
        self.scheduled_start_date_time = scheduled_start_date_time
        self.scheduled_end_date_time = scheduled_end_date_time
        self.internal_reply_message = internal_reply_message
        self.external_reply_message = external_reply_message


class MicrosoftGraphBaseItem(MicrosoftGraphEntity):
    """baseItem.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param parent_reference: itemReference.
    :type parent_reference: ~users_user.models.MicrosoftGraphItemReference
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~users_user.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~users_user.models.MicrosoftGraphUser
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'parent_reference': {'key': 'parentReference', 'type': 'MicrosoftGraphItemReference'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        e_tag: Optional[str] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        parent_reference: Optional["MicrosoftGraphItemReference"] = None,
        web_url: Optional[str] = None,
        created_by_user: Optional["MicrosoftGraphUser"] = None,
        last_modified_by_user: Optional["MicrosoftGraphUser"] = None,
        **kwargs
    ):
        super(MicrosoftGraphBaseItem, self).__init__(id=id, **kwargs)
        self.created_by = created_by
        self.created_date_time = created_date_time
        self.description = description
        self.e_tag = e_tag
        self.last_modified_by = last_modified_by
        self.last_modified_date_time = last_modified_date_time
        self.name = name
        self.parent_reference = parent_reference
        self.web_url = web_url
        self.created_by_user = created_by_user
        self.last_modified_by_user = last_modified_by_user


class MicrosoftGraphBaseItemVersion(MicrosoftGraphEntity):
    """baseItemVersion.

    :param id: Read-only.
    :type id: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the version was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param publication: publicationFacet.
    :type publication: ~users_user.models.MicrosoftGraphPublicationFacet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'publication': {'key': 'publication', 'type': 'MicrosoftGraphPublicationFacet'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        publication: Optional["MicrosoftGraphPublicationFacet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphBaseItemVersion, self).__init__(id=id, **kwargs)
        self.last_modified_by = last_modified_by
        self.last_modified_date_time = last_modified_date_time
        self.publication = publication


class MicrosoftGraphBundle(msrest.serialization.Model):
    """bundle.

    :param child_count:
    :type child_count: int
    :param album: album.
    :type album: ~users_user.models.MicrosoftGraphAlbum
    """

    _validation = {
        'child_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'child_count': {'key': 'childCount', 'type': 'int'},
        'album': {'key': 'album', 'type': 'MicrosoftGraphAlbum'},
    }

    def __init__(
        self,
        *,
        child_count: Optional[int] = None,
        album: Optional["MicrosoftGraphAlbum"] = None,
        **kwargs
    ):
        super(MicrosoftGraphBundle, self).__init__(**kwargs)
        self.child_count = child_count
        self.album = album


class MicrosoftGraphCalculatedColumn(msrest.serialization.Model):
    """calculatedColumn.

    :param format: For dateTime output types, the format of the value. Must be one of dateOnly or
     dateTime.
    :type format: str
    :param formula: The formula used to compute the value for this column.
    :type formula: str
    :param output_type: The output type used to format values in this column. Must be one of
     boolean, currency, dateTime, number, or text.
    :type output_type: str
    """

    _attribute_map = {
        'format': {'key': 'format', 'type': 'str'},
        'formula': {'key': 'formula', 'type': 'str'},
        'output_type': {'key': 'outputType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        format: Optional[str] = None,
        formula: Optional[str] = None,
        output_type: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCalculatedColumn, self).__init__(**kwargs)
        self.format = format
        self.formula = formula
        self.output_type = output_type


class MicrosoftGraphCalendar(MicrosoftGraphEntity):
    """calendar.

    :param id: Read-only.
    :type id: str
    :param name: The calendar name.
    :type name: str
    :param color: calendarColor. Possible values include: "lightBlue", "lightGreen", "lightOrange",
     "lightGray", "lightYellow", "lightTeal", "lightPink", "lightBrown", "lightRed", "maxColor",
     "auto".
    :type color: str or ~users_user.models.MicrosoftGraphCalendarColor
    :param hex_color:
    :type hex_color: str
    :param is_default_calendar: True if this is the default calendar where new events are created
     by default, false otherwise.
    :type is_default_calendar: bool
    :param change_key: Identifies the version of the calendar object. Every time the calendar is
     changed, changeKey changes as well. This allows Exchange to apply changes to the correct
     version of the object. Read-only.
    :type change_key: str
    :param can_share: True if the user has the permission to share the calendar, false otherwise.
     Only the user who created the calendar can share it.
    :type can_share: bool
    :param can_view_private_items: True if the user can read calendar items that have been marked
     private, false otherwise.
    :type can_view_private_items: bool
    :param is_shared:
    :type is_shared: bool
    :param is_shared_with_me:
    :type is_shared_with_me: bool
    :param can_edit: True if the user can write to the calendar, false otherwise. This property is
     true for the user who created the calendar. This property is also true for a user who has been
     shared a calendar and granted write access.
    :type can_edit: bool
    :param owner: emailAddress.
    :type owner: ~users_user.models.MicrosoftGraphEmailAddress
    :param calendar_group_id:
    :type calendar_group_id: str
    :param allowed_online_meeting_providers: Represent the online meeting service providers that
     can be used to create online meetings in this calendar. Possible values are: unknown,
     skypeForBusiness, skypeForConsumer, teamsForBusiness.
    :type allowed_online_meeting_providers: list[str or
     ~users_user.models.MicrosoftGraphOnlineMeetingProviderType]
    :param default_online_meeting_provider: onlineMeetingProviderType. Possible values include:
     "unknown", "skypeForBusiness", "skypeForConsumer", "teamsForBusiness".
    :type default_online_meeting_provider: str or
     ~users_user.models.MicrosoftGraphOnlineMeetingProviderType
    :param is_tallying_responses: Indicates whether this user calendar supports tracking of meeting
     responses. Only meeting invites sent from users' primary calendars support tracking of meeting
     responses.
    :type is_tallying_responses: bool
    :param is_removable: Indicates whether this user calendar can be deleted from the user mailbox.
    :type is_removable: bool
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the calendar. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~users_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the calendar. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~users_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param calendar_permissions: The permissions of the users with whom the calendar is shared.
    :type calendar_permissions: list[~users_user.models.MicrosoftGraphCalendarPermission]
    :param events: The events in the calendar. Navigation property. Read-only.
    :type events: list[~users_user.models.MicrosoftGraphEvent]
    :param calendar_view: The calendar view for the calendar. Navigation property. Read-only.
    :type calendar_view: list[~users_user.models.MicrosoftGraphEvent]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'color': {'key': 'color', 'type': 'str'},
        'hex_color': {'key': 'hexColor', 'type': 'str'},
        'is_default_calendar': {'key': 'isDefaultCalendar', 'type': 'bool'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'can_share': {'key': 'canShare', 'type': 'bool'},
        'can_view_private_items': {'key': 'canViewPrivateItems', 'type': 'bool'},
        'is_shared': {'key': 'isShared', 'type': 'bool'},
        'is_shared_with_me': {'key': 'isSharedWithMe', 'type': 'bool'},
        'can_edit': {'key': 'canEdit', 'type': 'bool'},
        'owner': {'key': 'owner', 'type': 'MicrosoftGraphEmailAddress'},
        'calendar_group_id': {'key': 'calendarGroupId', 'type': 'str'},
        'allowed_online_meeting_providers': {'key': 'allowedOnlineMeetingProviders', 'type': '[str]'},
        'default_online_meeting_provider': {'key': 'defaultOnlineMeetingProvider', 'type': 'str'},
        'is_tallying_responses': {'key': 'isTallyingResponses', 'type': 'bool'},
        'is_removable': {'key': 'isRemovable', 'type': 'bool'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'calendar_permissions': {'key': 'calendarPermissions', 'type': '[MicrosoftGraphCalendarPermission]'},
        'events': {'key': 'events', 'type': '[MicrosoftGraphEvent]'},
        'calendar_view': {'key': 'calendarView', 'type': '[MicrosoftGraphEvent]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        color: Optional[Union[str, "MicrosoftGraphCalendarColor"]] = None,
        hex_color: Optional[str] = None,
        is_default_calendar: Optional[bool] = None,
        change_key: Optional[str] = None,
        can_share: Optional[bool] = None,
        can_view_private_items: Optional[bool] = None,
        is_shared: Optional[bool] = None,
        is_shared_with_me: Optional[bool] = None,
        can_edit: Optional[bool] = None,
        owner: Optional["MicrosoftGraphEmailAddress"] = None,
        calendar_group_id: Optional[str] = None,
        allowed_online_meeting_providers: Optional[List[Union[str, "MicrosoftGraphOnlineMeetingProviderType"]]] = None,
        default_online_meeting_provider: Optional[Union[str, "MicrosoftGraphOnlineMeetingProviderType"]] = None,
        is_tallying_responses: Optional[bool] = None,
        is_removable: Optional[bool] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        calendar_permissions: Optional[List["MicrosoftGraphCalendarPermission"]] = None,
        events: Optional[List["MicrosoftGraphEvent"]] = None,
        calendar_view: Optional[List["MicrosoftGraphEvent"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphCalendar, self).__init__(id=id, **kwargs)
        self.name = name
        self.color = color
        self.hex_color = hex_color
        self.is_default_calendar = is_default_calendar
        self.change_key = change_key
        self.can_share = can_share
        self.can_view_private_items = can_view_private_items
        self.is_shared = is_shared
        self.is_shared_with_me = is_shared_with_me
        self.can_edit = can_edit
        self.owner = owner
        self.calendar_group_id = calendar_group_id
        self.allowed_online_meeting_providers = allowed_online_meeting_providers
        self.default_online_meeting_provider = default_online_meeting_provider
        self.is_tallying_responses = is_tallying_responses
        self.is_removable = is_removable
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties
        self.calendar_permissions = calendar_permissions
        self.events = events
        self.calendar_view = calendar_view


class MicrosoftGraphCalendarGroup(MicrosoftGraphEntity):
    """calendarGroup.

    :param id: Read-only.
    :type id: str
    :param name: The group name.
    :type name: str
    :param class_id: The class identifier. Read-only.
    :type class_id: str
    :param change_key: Identifies the version of the calendar group. Every time the calendar group
     is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct
     version of the object. Read-only.
    :type change_key: str
    :param calendars: The calendars in the calendar group. Navigation property. Read-only.
     Nullable.
    :type calendars: list[~users_user.models.MicrosoftGraphCalendar]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'class_id': {'key': 'classId', 'type': 'str'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'calendars': {'key': 'calendars', 'type': '[MicrosoftGraphCalendar]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        class_id: Optional[str] = None,
        change_key: Optional[str] = None,
        calendars: Optional[List["MicrosoftGraphCalendar"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphCalendarGroup, self).__init__(id=id, **kwargs)
        self.name = name
        self.class_id = class_id
        self.change_key = change_key
        self.calendars = calendars


class MicrosoftGraphCalendarPermission(MicrosoftGraphEntity):
    """calendarPermission.

    :param id: Read-only.
    :type id: str
    :param email_address: emailAddress.
    :type email_address: ~users_user.models.MicrosoftGraphEmailAddress
    :param is_removable: True if the user can be removed from the list of sharees or delegates for
     the specified calendar, false otherwise. The 'My organization' user determines the permissions
     other people within your organization have to the given calendar. You cannot remove 'My
     organization' as a sharee to a calendar.
    :type is_removable: bool
    :param is_inside_organization: True if the user in context (sharee or delegate) is inside the
     same organization as the calendar owner.
    :type is_inside_organization: bool
    :param role: calendarRoleType. Possible values include: "none", "freeBusyRead", "limitedRead",
     "read", "write", "delegateWithoutPrivateEventAccess", "delegateWithPrivateEventAccess",
     "custom".
    :type role: str or ~users_user.models.MicrosoftGraphCalendarRoleType
    :param allowed_roles: List of allowed sharing or delegating permission levels for the calendar.
     Possible values are: none, freeBusyRead, limitedRead, read, write,
     delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
    :type allowed_roles: list[str or ~users_user.models.MicrosoftGraphCalendarRoleType]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'MicrosoftGraphEmailAddress'},
        'is_removable': {'key': 'isRemovable', 'type': 'bool'},
        'is_inside_organization': {'key': 'isInsideOrganization', 'type': 'bool'},
        'role': {'key': 'role', 'type': 'str'},
        'allowed_roles': {'key': 'allowedRoles', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        email_address: Optional["MicrosoftGraphEmailAddress"] = None,
        is_removable: Optional[bool] = None,
        is_inside_organization: Optional[bool] = None,
        role: Optional[Union[str, "MicrosoftGraphCalendarRoleType"]] = None,
        allowed_roles: Optional[List[Union[str, "MicrosoftGraphCalendarRoleType"]]] = None,
        **kwargs
    ):
        super(MicrosoftGraphCalendarPermission, self).__init__(id=id, **kwargs)
        self.email_address = email_address
        self.is_removable = is_removable
        self.is_inside_organization = is_inside_organization
        self.role = role
        self.allowed_roles = allowed_roles


class MicrosoftGraphChangeTrackedEntity(MicrosoftGraphEntity):
    """changeTrackedEntity.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphChangeTrackedEntity, self).__init__(id=id, **kwargs)
        self.created_date_time = created_date_time
        self.last_modified_date_time = last_modified_date_time
        self.last_modified_by = last_modified_by


class MicrosoftGraphChannel(MicrosoftGraphEntity):
    """channel.

    :param id: Read-only.
    :type id: str
    :param display_name: Channel name as it will appear to the user in Microsoft Teams.
    :type display_name: str
    :param description: Optional textual description for the channel.
    :type description: str
    :param is_favorite_by_default:
    :type is_favorite_by_default: bool
    :param email: The email address for sending messages to the channel. Read-only.
    :type email: str
    :param web_url: A hyperlink that will navigate to the channel in Microsoft Teams. This is the
     URL that you get when you right-click a channel in Microsoft Teams and select Get link to
     channel. This URL should be treated as an opaque blob, and not parsed. Read-only.
    :type web_url: str
    :param membership_type: channelMembershipType. Possible values include: "standard", "private",
     "unknownFutureValue".
    :type membership_type: str or ~users_user.models.MicrosoftGraphChannelMembershipType
    :param messages:
    :type messages: list[~users_user.models.MicrosoftGraphChatMessage]
    :param tabs: A collection of all the tabs in the channel. A navigation property.
    :type tabs: list[~users_user.models.MicrosoftGraphTeamsTab]
    :param members:
    :type members: list[~users_user.models.MicrosoftGraphConversationMember]
    :param files_folder: driveItem.
    :type files_folder: ~users_user.models.MicrosoftGraphDriveItem
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'is_favorite_by_default': {'key': 'isFavoriteByDefault', 'type': 'bool'},
        'email': {'key': 'email', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'membership_type': {'key': 'membershipType', 'type': 'str'},
        'messages': {'key': 'messages', 'type': '[MicrosoftGraphChatMessage]'},
        'tabs': {'key': 'tabs', 'type': '[MicrosoftGraphTeamsTab]'},
        'members': {'key': 'members', 'type': '[MicrosoftGraphConversationMember]'},
        'files_folder': {'key': 'filesFolder', 'type': 'MicrosoftGraphDriveItem'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        is_favorite_by_default: Optional[bool] = None,
        email: Optional[str] = None,
        web_url: Optional[str] = None,
        membership_type: Optional[Union[str, "MicrosoftGraphChannelMembershipType"]] = None,
        messages: Optional[List["MicrosoftGraphChatMessage"]] = None,
        tabs: Optional[List["MicrosoftGraphTeamsTab"]] = None,
        members: Optional[List["MicrosoftGraphConversationMember"]] = None,
        files_folder: Optional["MicrosoftGraphDriveItem"] = None,
        **kwargs
    ):
        super(MicrosoftGraphChannel, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.description = description
        self.is_favorite_by_default = is_favorite_by_default
        self.email = email
        self.web_url = web_url
        self.membership_type = membership_type
        self.messages = messages
        self.tabs = tabs
        self.members = members
        self.files_folder = files_folder


class MicrosoftGraphChat(MicrosoftGraphEntity):
    """chat.

    :param id: Read-only.
    :type id: str
    :param topic:
    :type topic: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_updated_date_time:
    :type last_updated_date_time: ~datetime.datetime
    :param members:
    :type members: list[~users_user.models.MicrosoftGraphConversationMember]
    :param messages:
    :type messages: list[~users_user.models.MicrosoftGraphChatMessage]
    :param installed_apps:
    :type installed_apps: list[~users_user.models.MicrosoftGraphTeamsAppInstallation]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'topic': {'key': 'topic', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'members': {'key': 'members', 'type': '[MicrosoftGraphConversationMember]'},
        'messages': {'key': 'messages', 'type': '[MicrosoftGraphChatMessage]'},
        'installed_apps': {'key': 'installedApps', 'type': '[MicrosoftGraphTeamsAppInstallation]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        topic: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_updated_date_time: Optional[datetime.datetime] = None,
        members: Optional[List["MicrosoftGraphConversationMember"]] = None,
        messages: Optional[List["MicrosoftGraphChatMessage"]] = None,
        installed_apps: Optional[List["MicrosoftGraphTeamsAppInstallation"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphChat, self).__init__(id=id, **kwargs)
        self.topic = topic
        self.created_date_time = created_date_time
        self.last_updated_date_time = last_updated_date_time
        self.members = members
        self.messages = messages
        self.installed_apps = installed_apps


class MicrosoftGraphChatInfo(msrest.serialization.Model):
    """chatInfo.

    :param thread_id: The unique identifier for a thread in Microsoft Teams.
    :type thread_id: str
    :param message_id: The unique identifier of a message in a Microsoft Teams channel.
    :type message_id: str
    :param reply_chain_message_id: The ID of the reply message.
    :type reply_chain_message_id: str
    """

    _attribute_map = {
        'thread_id': {'key': 'threadId', 'type': 'str'},
        'message_id': {'key': 'messageId', 'type': 'str'},
        'reply_chain_message_id': {'key': 'replyChainMessageId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        thread_id: Optional[str] = None,
        message_id: Optional[str] = None,
        reply_chain_message_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphChatInfo, self).__init__(**kwargs)
        self.thread_id = thread_id
        self.message_id = message_id
        self.reply_chain_message_id = reply_chain_message_id


class MicrosoftGraphChatMessage(MicrosoftGraphEntity):
    """chatMessage.

    :param id: Read-only.
    :type id: str
    :param reply_to_id:
    :type reply_to_id: str
    :param from_property: identitySet.
    :type from_property: ~users_user.models.MicrosoftGraphIdentitySet
    :param etag:
    :type etag: str
    :param message_type: chatMessageType. Possible values include: "message", "chatEvent",
     "typing".
    :type message_type: str or ~users_user.models.MicrosoftGraphChatMessageType
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param subject:
    :type subject: str
    :param body: itemBody.
    :type body: ~users_user.models.MicrosoftGraphItemBody
    :param summary:
    :type summary: str
    :param attachments:
    :type attachments: list[~users_user.models.MicrosoftGraphChatMessageAttachment]
    :param mentions:
    :type mentions: list[~users_user.models.MicrosoftGraphChatMessageMention]
    :param importance: chatMessageImportance. Possible values include: "normal", "high", "urgent".
    :type importance: str or ~users_user.models.MicrosoftGraphChatMessageImportance
    :param policy_violation: chatMessagePolicyViolation.
    :type policy_violation: ~users_user.models.MicrosoftGraphChatMessagePolicyViolation
    :param reactions:
    :type reactions: list[~users_user.models.MicrosoftGraphChatMessageReaction]
    :param locale:
    :type locale: str
    :param web_url:
    :type web_url: str
    :param replies:
    :type replies: list[~users_user.models.MicrosoftGraphChatMessage]
    :param hosted_contents:
    :type hosted_contents: list[~users_user.models.MicrosoftGraphEntity]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'reply_to_id': {'key': 'replyToId', 'type': 'str'},
        'from_property': {'key': 'from', 'type': 'MicrosoftGraphIdentitySet'},
        'etag': {'key': 'etag', 'type': 'str'},
        'message_type': {'key': 'messageType', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'subject': {'key': 'subject', 'type': 'str'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'summary': {'key': 'summary', 'type': 'str'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphChatMessageAttachment]'},
        'mentions': {'key': 'mentions', 'type': '[MicrosoftGraphChatMessageMention]'},
        'importance': {'key': 'importance', 'type': 'str'},
        'policy_violation': {'key': 'policyViolation', 'type': 'MicrosoftGraphChatMessagePolicyViolation'},
        'reactions': {'key': 'reactions', 'type': '[MicrosoftGraphChatMessageReaction]'},
        'locale': {'key': 'locale', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'replies': {'key': 'replies', 'type': '[MicrosoftGraphChatMessage]'},
        'hosted_contents': {'key': 'hostedContents', 'type': '[MicrosoftGraphEntity]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        reply_to_id: Optional[str] = None,
        from_property: Optional["MicrosoftGraphIdentitySet"] = None,
        etag: Optional[str] = None,
        message_type: Optional[Union[str, "MicrosoftGraphChatMessageType"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        subject: Optional[str] = None,
        body: Optional["MicrosoftGraphItemBody"] = None,
        summary: Optional[str] = None,
        attachments: Optional[List["MicrosoftGraphChatMessageAttachment"]] = None,
        mentions: Optional[List["MicrosoftGraphChatMessageMention"]] = None,
        importance: Optional[Union[str, "MicrosoftGraphChatMessageImportance"]] = None,
        policy_violation: Optional["MicrosoftGraphChatMessagePolicyViolation"] = None,
        reactions: Optional[List["MicrosoftGraphChatMessageReaction"]] = None,
        locale: Optional[str] = None,
        web_url: Optional[str] = None,
        replies: Optional[List["MicrosoftGraphChatMessage"]] = None,
        hosted_contents: Optional[List["MicrosoftGraphEntity"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphChatMessage, self).__init__(id=id, **kwargs)
        self.reply_to_id = reply_to_id
        self.from_property = from_property
        self.etag = etag
        self.message_type = message_type
        self.created_date_time = created_date_time
        self.last_modified_date_time = last_modified_date_time
        self.deleted_date_time = deleted_date_time
        self.subject = subject
        self.body = body
        self.summary = summary
        self.attachments = attachments
        self.mentions = mentions
        self.importance = importance
        self.policy_violation = policy_violation
        self.reactions = reactions
        self.locale = locale
        self.web_url = web_url
        self.replies = replies
        self.hosted_contents = hosted_contents


class MicrosoftGraphChatMessageAttachment(msrest.serialization.Model):
    """chatMessageAttachment.

    :param id:
    :type id: str
    :param content_type:
    :type content_type: str
    :param content_url:
    :type content_url: str
    :param content:
    :type content: str
    :param name:
    :type name: str
    :param thumbnail_url:
    :type thumbnail_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'thumbnail_url': {'key': 'thumbnailUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        content_type: Optional[str] = None,
        content_url: Optional[str] = None,
        content: Optional[str] = None,
        name: Optional[str] = None,
        thumbnail_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageAttachment, self).__init__(**kwargs)
        self.id = id
        self.content_type = content_type
        self.content_url = content_url
        self.content = content
        self.name = name
        self.thumbnail_url = thumbnail_url


class MicrosoftGraphChatMessageHostedContent(MicrosoftGraphEntity):
    """chatMessageHostedContent.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageHostedContent, self).__init__(id=id, **kwargs)


class MicrosoftGraphChatMessageMention(msrest.serialization.Model):
    """chatMessageMention.

    :param id:
    :type id: int
    :param mention_text:
    :type mention_text: str
    :param mentioned: identitySet.
    :type mentioned: ~users_user.models.MicrosoftGraphIdentitySet
    """

    _validation = {
        'id': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'mention_text': {'key': 'mentionText', 'type': 'str'},
        'mentioned': {'key': 'mentioned', 'type': 'MicrosoftGraphIdentitySet'},
    }

    def __init__(
        self,
        *,
        id: Optional[int] = None,
        mention_text: Optional[str] = None,
        mentioned: Optional["MicrosoftGraphIdentitySet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageMention, self).__init__(**kwargs)
        self.id = id
        self.mention_text = mention_text
        self.mentioned = mentioned


class MicrosoftGraphChatMessagePolicyViolation(msrest.serialization.Model):
    """chatMessagePolicyViolation.

    :param dlp_action: chatMessagePolicyViolationDlpActionTypes. Possible values include: "none",
     "notifySender", "blockAccess", "blockAccessExternal".
    :type dlp_action: str or
     ~users_user.models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
    :param justification_text:
    :type justification_text: str
    :param policy_tip: chatMessagePolicyViolationPolicyTip.
    :type policy_tip: ~users_user.models.MicrosoftGraphChatMessagePolicyViolationPolicyTip
    :param user_action: chatMessagePolicyViolationUserActionTypes. Possible values include: "none",
     "override", "reportFalsePositive".
    :type user_action: str or
     ~users_user.models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes
    :param verdict_details: chatMessagePolicyViolationVerdictDetailsTypes. Possible values include:
     "none", "allowFalsePositiveOverride", "allowOverrideWithoutJustification",
     "allowOverrideWithJustification".
    :type verdict_details: str or
     ~users_user.models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
    """

    _attribute_map = {
        'dlp_action': {'key': 'dlpAction', 'type': 'str'},
        'justification_text': {'key': 'justificationText', 'type': 'str'},
        'policy_tip': {'key': 'policyTip', 'type': 'MicrosoftGraphChatMessagePolicyViolationPolicyTip'},
        'user_action': {'key': 'userAction', 'type': 'str'},
        'verdict_details': {'key': 'verdictDetails', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dlp_action: Optional[Union[str, "MicrosoftGraphChatMessagePolicyViolationDlpActionTypes"]] = None,
        justification_text: Optional[str] = None,
        policy_tip: Optional["MicrosoftGraphChatMessagePolicyViolationPolicyTip"] = None,
        user_action: Optional[Union[str, "MicrosoftGraphChatMessagePolicyViolationUserActionTypes"]] = None,
        verdict_details: Optional[Union[str, "MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphChatMessagePolicyViolation, self).__init__(**kwargs)
        self.dlp_action = dlp_action
        self.justification_text = justification_text
        self.policy_tip = policy_tip
        self.user_action = user_action
        self.verdict_details = verdict_details


class MicrosoftGraphChatMessagePolicyViolationPolicyTip(msrest.serialization.Model):
    """chatMessagePolicyViolationPolicyTip.

    :param general_text:
    :type general_text: str
    :param compliance_url:
    :type compliance_url: str
    :param matched_condition_descriptions:
    :type matched_condition_descriptions: list[str]
    """

    _attribute_map = {
        'general_text': {'key': 'generalText', 'type': 'str'},
        'compliance_url': {'key': 'complianceUrl', 'type': 'str'},
        'matched_condition_descriptions': {'key': 'matchedConditionDescriptions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        general_text: Optional[str] = None,
        compliance_url: Optional[str] = None,
        matched_condition_descriptions: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphChatMessagePolicyViolationPolicyTip, self).__init__(**kwargs)
        self.general_text = general_text
        self.compliance_url = compliance_url
        self.matched_condition_descriptions = matched_condition_descriptions


class MicrosoftGraphChatMessageReaction(msrest.serialization.Model):
    """chatMessageReaction.

    :param reaction_type:
    :type reaction_type: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param user: identitySet.
    :type user: ~users_user.models.MicrosoftGraphIdentitySet
    """

    _attribute_map = {
        'reaction_type': {'key': 'reactionType', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'user': {'key': 'user', 'type': 'MicrosoftGraphIdentitySet'},
    }

    def __init__(
        self,
        *,
        reaction_type: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        user: Optional["MicrosoftGraphIdentitySet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageReaction, self).__init__(**kwargs)
        self.reaction_type = reaction_type
        self.created_date_time = created_date_time
        self.user = user


class MicrosoftGraphChoiceColumn(msrest.serialization.Model):
    """choiceColumn.

    :param allow_text_entry: If true, allows custom values that aren't in the configured choices.
    :type allow_text_entry: bool
    :param choices: The list of values available for this column.
    :type choices: list[str]
    :param display_as: How the choices are to be presented in the UX. Must be one of checkBoxes,
     dropDownMenu, or radioButtons.
    :type display_as: str
    """

    _attribute_map = {
        'allow_text_entry': {'key': 'allowTextEntry', 'type': 'bool'},
        'choices': {'key': 'choices', 'type': '[str]'},
        'display_as': {'key': 'displayAs', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        allow_text_entry: Optional[bool] = None,
        choices: Optional[List[str]] = None,
        display_as: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphChoiceColumn, self).__init__(**kwargs)
        self.allow_text_entry = allow_text_entry
        self.choices = choices
        self.display_as = display_as


class MicrosoftGraphColumnDefinition(MicrosoftGraphEntity):
    """columnDefinition.

    :param id: Read-only.
    :type id: str
    :param boolean: Any object.
    :type boolean: object
    :param calculated: calculatedColumn.
    :type calculated: ~users_user.models.MicrosoftGraphCalculatedColumn
    :param choice: choiceColumn.
    :type choice: ~users_user.models.MicrosoftGraphChoiceColumn
    :param column_group: For site columns, the name of the group this column belongs to. Helps
     organize related columns.
    :type column_group: str
    :param currency: currencyColumn.
    :type currency: ~users_user.models.MicrosoftGraphCurrencyColumn
    :param date_time: dateTimeColumn.
    :type date_time: ~users_user.models.MicrosoftGraphDateTimeColumn
    :param default_value: defaultColumnValue.
    :type default_value: ~users_user.models.MicrosoftGraphDefaultColumnValue
    :param description: The user-facing description of the column.
    :type description: str
    :param display_name: The user-facing name of the column.
    :type display_name: str
    :param enforce_unique_values: If true, no two list items may have the same value for this
     column.
    :type enforce_unique_values: bool
    :param geolocation: Any object.
    :type geolocation: object
    :param hidden: Specifies whether the column is displayed in the user interface.
    :type hidden: bool
    :param indexed: Specifies whether the column values can used for sorting and searching.
    :type indexed: bool
    :param lookup: lookupColumn.
    :type lookup: ~users_user.models.MicrosoftGraphLookupColumn
    :param name: The API-facing name of the column as it appears in the [fields][] on a
     [listItem][]. For the user-facing name, see displayName.
    :type name: str
    :param number: numberColumn.
    :type number: ~users_user.models.MicrosoftGraphNumberColumn
    :param person_or_group: personOrGroupColumn.
    :type person_or_group: ~users_user.models.MicrosoftGraphPersonOrGroupColumn
    :param read_only: Specifies whether the column values can be modified.
    :type read_only: bool
    :param required: Specifies whether the column value is not optional.
    :type required: bool
    :param text: textColumn.
    :type text: ~users_user.models.MicrosoftGraphTextColumn
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'boolean': {'key': 'boolean', 'type': 'object'},
        'calculated': {'key': 'calculated', 'type': 'MicrosoftGraphCalculatedColumn'},
        'choice': {'key': 'choice', 'type': 'MicrosoftGraphChoiceColumn'},
        'column_group': {'key': 'columnGroup', 'type': 'str'},
        'currency': {'key': 'currency', 'type': 'MicrosoftGraphCurrencyColumn'},
        'date_time': {'key': 'dateTime', 'type': 'MicrosoftGraphDateTimeColumn'},
        'default_value': {'key': 'defaultValue', 'type': 'MicrosoftGraphDefaultColumnValue'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'enforce_unique_values': {'key': 'enforceUniqueValues', 'type': 'bool'},
        'geolocation': {'key': 'geolocation', 'type': 'object'},
        'hidden': {'key': 'hidden', 'type': 'bool'},
        'indexed': {'key': 'indexed', 'type': 'bool'},
        'lookup': {'key': 'lookup', 'type': 'MicrosoftGraphLookupColumn'},
        'name': {'key': 'name', 'type': 'str'},
        'number': {'key': 'number', 'type': 'MicrosoftGraphNumberColumn'},
        'person_or_group': {'key': 'personOrGroup', 'type': 'MicrosoftGraphPersonOrGroupColumn'},
        'read_only': {'key': 'readOnly', 'type': 'bool'},
        'required': {'key': 'required', 'type': 'bool'},
        'text': {'key': 'text', 'type': 'MicrosoftGraphTextColumn'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        boolean: Optional[object] = None,
        calculated: Optional["MicrosoftGraphCalculatedColumn"] = None,
        choice: Optional["MicrosoftGraphChoiceColumn"] = None,
        column_group: Optional[str] = None,
        currency: Optional["MicrosoftGraphCurrencyColumn"] = None,
        date_time: Optional["MicrosoftGraphDateTimeColumn"] = None,
        default_value: Optional["MicrosoftGraphDefaultColumnValue"] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        enforce_unique_values: Optional[bool] = None,
        geolocation: Optional[object] = None,
        hidden: Optional[bool] = None,
        indexed: Optional[bool] = None,
        lookup: Optional["MicrosoftGraphLookupColumn"] = None,
        name: Optional[str] = None,
        number: Optional["MicrosoftGraphNumberColumn"] = None,
        person_or_group: Optional["MicrosoftGraphPersonOrGroupColumn"] = None,
        read_only: Optional[bool] = None,
        required: Optional[bool] = None,
        text: Optional["MicrosoftGraphTextColumn"] = None,
        **kwargs
    ):
        super(MicrosoftGraphColumnDefinition, self).__init__(id=id, **kwargs)
        self.boolean = boolean
        self.calculated = calculated
        self.choice = choice
        self.column_group = column_group
        self.currency = currency
        self.date_time = date_time
        self.default_value = default_value
        self.description = description
        self.display_name = display_name
        self.enforce_unique_values = enforce_unique_values
        self.geolocation = geolocation
        self.hidden = hidden
        self.indexed = indexed
        self.lookup = lookup
        self.name = name
        self.number = number
        self.person_or_group = person_or_group
        self.read_only = read_only
        self.required = required
        self.text = text


class MicrosoftGraphColumnLink(MicrosoftGraphEntity):
    """columnLink.

    :param id: Read-only.
    :type id: str
    :param name: The name of the column  in this content type.
    :type name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphColumnLink, self).__init__(id=id, **kwargs)
        self.name = name


class MicrosoftGraphCommand(MicrosoftGraphEntity):
    """command.

    :param id: Read-only.
    :type id: str
    :param status:
    :type status: str
    :param type:
    :type type: str
    :param app_service_name:
    :type app_service_name: str
    :param package_family_name:
    :type package_family_name: str
    :param error:
    :type error: str
    :param payload: Any object.
    :type payload: object
    :param permission_ticket:
    :type permission_ticket: str
    :param post_back_uri:
    :type post_back_uri: str
    :param responsepayload: entity.
    :type responsepayload: ~users_user.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'Status', 'type': 'str'},
        'type': {'key': 'Type', 'type': 'str'},
        'app_service_name': {'key': 'AppServiceName', 'type': 'str'},
        'package_family_name': {'key': 'PackageFamilyName', 'type': 'str'},
        'error': {'key': 'Error', 'type': 'str'},
        'payload': {'key': 'Payload', 'type': 'object'},
        'permission_ticket': {'key': 'PermissionTicket', 'type': 'str'},
        'post_back_uri': {'key': 'PostBackUri', 'type': 'str'},
        'responsepayload': {'key': 'responsepayload', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[str] = None,
        type: Optional[str] = None,
        app_service_name: Optional[str] = None,
        package_family_name: Optional[str] = None,
        error: Optional[str] = None,
        payload: Optional[object] = None,
        permission_ticket: Optional[str] = None,
        post_back_uri: Optional[str] = None,
        responsepayload: Optional["MicrosoftGraphEntity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphCommand, self).__init__(id=id, **kwargs)
        self.status = status
        self.type = type
        self.app_service_name = app_service_name
        self.package_family_name = package_family_name
        self.error = error
        self.payload = payload
        self.permission_ticket = permission_ticket
        self.post_back_uri = post_back_uri
        self.responsepayload = responsepayload


class MicrosoftGraphCommentAction(msrest.serialization.Model):
    """commentAction.

    :param is_reply: If true, this activity was a reply to an existing comment thread.
    :type is_reply: bool
    :param parent_author: identitySet.
    :type parent_author: ~users_user.models.MicrosoftGraphIdentitySet
    :param participants: The identities of the users participating in this comment thread.
    :type participants: list[~users_user.models.MicrosoftGraphIdentitySet]
    """

    _attribute_map = {
        'is_reply': {'key': 'isReply', 'type': 'bool'},
        'parent_author': {'key': 'parentAuthor', 'type': 'MicrosoftGraphIdentitySet'},
        'participants': {'key': 'participants', 'type': '[MicrosoftGraphIdentitySet]'},
    }

    def __init__(
        self,
        *,
        is_reply: Optional[bool] = None,
        parent_author: Optional["MicrosoftGraphIdentitySet"] = None,
        participants: Optional[List["MicrosoftGraphIdentitySet"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphCommentAction, self).__init__(**kwargs)
        self.is_reply = is_reply
        self.parent_author = parent_author
        self.participants = participants


class MicrosoftGraphCompanyDetail(msrest.serialization.Model):
    """companyDetail.

    :param display_name:
    :type display_name: str
    :param pronunciation:
    :type pronunciation: str
    :param department:
    :type department: str
    :param office_location:
    :type office_location: str
    :param address: physicalAddress.
    :type address: ~users_user.models.MicrosoftGraphPhysicalAddress
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'pronunciation': {'key': 'pronunciation', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPhysicalAddress'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        pronunciation: Optional[str] = None,
        department: Optional[str] = None,
        office_location: Optional[str] = None,
        address: Optional["MicrosoftGraphPhysicalAddress"] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCompanyDetail, self).__init__(**kwargs)
        self.display_name = display_name
        self.pronunciation = pronunciation
        self.department = department
        self.office_location = office_location
        self.address = address
        self.web_url = web_url


class MicrosoftGraphConfigurationManagerClientEnabledFeatures(msrest.serialization.Model):
    """configurationManagerClientEnabledFeatures.

    :param inventory: Whether inventory is managed by Intune.
    :type inventory: bool
    :param modern_apps: Whether modern application is managed by Intune.
    :type modern_apps: bool
    :param resource_access: Whether resource access is managed by Intune.
    :type resource_access: bool
    :param device_configuration: Whether device configuration is managed by Intune.
    :type device_configuration: bool
    :param compliance_policy: Whether compliance policy is managed by Intune.
    :type compliance_policy: bool
    :param windows_update_for_business: Whether Windows Update for Business is managed by Intune.
    :type windows_update_for_business: bool
    :param endpoint_protection: Whether Endpoint Protection is managed by Intune.
    :type endpoint_protection: bool
    :param office_apps: Whether Office application is managed by Intune.
    :type office_apps: bool
    """

    _attribute_map = {
        'inventory': {'key': 'inventory', 'type': 'bool'},
        'modern_apps': {'key': 'modernApps', 'type': 'bool'},
        'resource_access': {'key': 'resourceAccess', 'type': 'bool'},
        'device_configuration': {'key': 'deviceConfiguration', 'type': 'bool'},
        'compliance_policy': {'key': 'compliancePolicy', 'type': 'bool'},
        'windows_update_for_business': {'key': 'windowsUpdateForBusiness', 'type': 'bool'},
        'endpoint_protection': {'key': 'endpointProtection', 'type': 'bool'},
        'office_apps': {'key': 'officeApps', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        inventory: Optional[bool] = None,
        modern_apps: Optional[bool] = None,
        resource_access: Optional[bool] = None,
        device_configuration: Optional[bool] = None,
        compliance_policy: Optional[bool] = None,
        windows_update_for_business: Optional[bool] = None,
        endpoint_protection: Optional[bool] = None,
        office_apps: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphConfigurationManagerClientEnabledFeatures, self).__init__(**kwargs)
        self.inventory = inventory
        self.modern_apps = modern_apps
        self.resource_access = resource_access
        self.device_configuration = device_configuration
        self.compliance_policy = compliance_policy
        self.windows_update_for_business = windows_update_for_business
        self.endpoint_protection = endpoint_protection
        self.office_apps = office_apps


class MicrosoftGraphConfigurationManagerClientHealthState(msrest.serialization.Model):
    """configurationManagerClientHealthState.

    :param state: configurationManagerClientState. Possible values include: "unknown", "installed",
     "healthy", "installFailed", "updateFailed", "communicationError".
    :type state: str or ~users_user.models.MicrosoftGraphConfigurationManagerClientState
    :param error_code: Error code for failed state.
    :type error_code: int
    :param last_sync_date_time: Datetime for last sync with configuration manager management point.
    :type last_sync_date_time: ~datetime.datetime
    """

    _validation = {
        'error_code': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'int'},
        'last_sync_date_time': {'key': 'lastSyncDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "MicrosoftGraphConfigurationManagerClientState"]] = None,
        error_code: Optional[int] = None,
        last_sync_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphConfigurationManagerClientHealthState, self).__init__(**kwargs)
        self.state = state
        self.error_code = error_code
        self.last_sync_date_time = last_sync_date_time


class MicrosoftGraphConfigurationManagerClientInformation(msrest.serialization.Model):
    """configurationManagerClientInformation.

    :param client_identifier: Configuration Manager Client Id from SCCM.
    :type client_identifier: str
    :param is_blocked: Configuration Manager Client blocked status from SCCM.
    :type is_blocked: bool
    """

    _attribute_map = {
        'client_identifier': {'key': 'clientIdentifier', 'type': 'str'},
        'is_blocked': {'key': 'isBlocked', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        client_identifier: Optional[str] = None,
        is_blocked: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphConfigurationManagerClientInformation, self).__init__(**kwargs)
        self.client_identifier = client_identifier
        self.is_blocked = is_blocked


class MicrosoftGraphOutlookItem(MicrosoftGraphEntity):
    """outlookItem.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        change_key: Optional[str] = None,
        categories: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookItem, self).__init__(id=id, **kwargs)
        self.created_date_time = created_date_time
        self.last_modified_date_time = last_modified_date_time
        self.change_key = change_key
        self.categories = categories


class MicrosoftGraphContact(MicrosoftGraphOutlookItem):
    """contact.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param parent_folder_id: The ID of the contact's parent folder.
    :type parent_folder_id: str
    :param birthday: The contact's birthday. The Timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type birthday: ~datetime.datetime
    :param file_as: The name the contact is filed under.
    :type file_as: str
    :param display_name: The contact's display name. You can specify the display name in a create
     or update operation. Note that later updates to other properties may cause an automatically
     generated value to overwrite the displayName value you have specified. To preserve a pre-
     existing value, always include it as displayName in an update operation.
    :type display_name: str
    :param given_name: The contact's given name.
    :type given_name: str
    :param initials: The contact's initials.
    :type initials: str
    :param middle_name: The contact's middle name.
    :type middle_name: str
    :param nick_name: The contact's nickname.
    :type nick_name: str
    :param surname: The contact's surname.
    :type surname: str
    :param title: The contact's title.
    :type title: str
    :param yomi_given_name: The phonetic Japanese given name (first name) of the contact.
    :type yomi_given_name: str
    :param yomi_surname: The phonetic Japanese surname (last name)  of the contact.
    :type yomi_surname: str
    :param yomi_company_name: The phonetic Japanese company name of the contact.
    :type yomi_company_name: str
    :param generation: The contact's generation.
    :type generation: str
    :param email_addresses: The contact's email addresses.
    :type email_addresses: list[~users_user.models.MicrosoftGraphTypedEmailAddress]
    :param websites:
    :type websites: list[~users_user.models.MicrosoftGraphWebsite]
    :param im_addresses: The contact's instant messaging (IM) addresses.
    :type im_addresses: list[str]
    :param job_title: The contact’s job title.
    :type job_title: str
    :param company_name: The name of the contact's company.
    :type company_name: str
    :param department: The contact's department.
    :type department: str
    :param office_location: The location of the contact's office.
    :type office_location: str
    :param profession: The contact's profession.
    :type profession: str
    :param assistant_name: The name of the contact's assistant.
    :type assistant_name: str
    :param manager: The name of the contact's manager.
    :type manager: str
    :param phones:
    :type phones: list[~users_user.models.MicrosoftGraphPhone]
    :param postal_addresses:
    :type postal_addresses: list[~users_user.models.MicrosoftGraphPhysicalAddress]
    :param spouse_name: The name of the contact's spouse/partner.
    :type spouse_name: str
    :param personal_notes: The user's notes about the contact.
    :type personal_notes: str
    :param children: The names of the contact's children.
    :type children: list[str]
    :param wedding_anniversary:
    :type wedding_anniversary: ~datetime.date
    :param gender:
    :type gender: str
    :param is_favorite:
    :type is_favorite: bool
    :param flag: followupFlag.
    :type flag: ~users_user.models.MicrosoftGraphFollowupFlag
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the contact. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~users_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the contact. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~users_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param photo: profilePhoto.
    :type photo: ~users_user.models.MicrosoftGraphProfilePhoto
    :param extensions: The collection of open extensions defined for the contact. Read-only.
     Nullable.
    :type extensions: list[~users_user.models.MicrosoftGraphEntity]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'birthday': {'key': 'birthday', 'type': 'iso-8601'},
        'file_as': {'key': 'fileAs', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'initials': {'key': 'initials', 'type': 'str'},
        'middle_name': {'key': 'middleName', 'type': 'str'},
        'nick_name': {'key': 'nickName', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'yomi_given_name': {'key': 'yomiGivenName', 'type': 'str'},
        'yomi_surname': {'key': 'yomiSurname', 'type': 'str'},
        'yomi_company_name': {'key': 'yomiCompanyName', 'type': 'str'},
        'generation': {'key': 'generation', 'type': 'str'},
        'email_addresses': {'key': 'emailAddresses', 'type': '[MicrosoftGraphTypedEmailAddress]'},
        'websites': {'key': 'websites', 'type': '[MicrosoftGraphWebsite]'},
        'im_addresses': {'key': 'imAddresses', 'type': '[str]'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'profession': {'key': 'profession', 'type': 'str'},
        'assistant_name': {'key': 'assistantName', 'type': 'str'},
        'manager': {'key': 'manager', 'type': 'str'},
        'phones': {'key': 'phones', 'type': '[MicrosoftGraphPhone]'},
        'postal_addresses': {'key': 'postalAddresses', 'type': '[MicrosoftGraphPhysicalAddress]'},
        'spouse_name': {'key': 'spouseName', 'type': 'str'},
        'personal_notes': {'key': 'personalNotes', 'type': 'str'},
        'children': {'key': 'children', 'type': '[str]'},
        'wedding_anniversary': {'key': 'weddingAnniversary', 'type': 'date'},
        'gender': {'key': 'gender', 'type': 'str'},
        'is_favorite': {'key': 'isFavorite', 'type': 'bool'},
        'flag': {'key': 'flag', 'type': 'MicrosoftGraphFollowupFlag'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphProfilePhoto'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphEntity]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        change_key: Optional[str] = None,
        categories: Optional[List[str]] = None,
        parent_folder_id: Optional[str] = None,
        birthday: Optional[datetime.datetime] = None,
        file_as: Optional[str] = None,
        display_name: Optional[str] = None,
        given_name: Optional[str] = None,
        initials: Optional[str] = None,
        middle_name: Optional[str] = None,
        nick_name: Optional[str] = None,
        surname: Optional[str] = None,
        title: Optional[str] = None,
        yomi_given_name: Optional[str] = None,
        yomi_surname: Optional[str] = None,
        yomi_company_name: Optional[str] = None,
        generation: Optional[str] = None,
        email_addresses: Optional[List["MicrosoftGraphTypedEmailAddress"]] = None,
        websites: Optional[List["MicrosoftGraphWebsite"]] = None,
        im_addresses: Optional[List[str]] = None,
        job_title: Optional[str] = None,
        company_name: Optional[str] = None,
        department: Optional[str] = None,
        office_location: Optional[str] = None,
        profession: Optional[str] = None,
        assistant_name: Optional[str] = None,
        manager: Optional[str] = None,
        phones: Optional[List["MicrosoftGraphPhone"]] = None,
        postal_addresses: Optional[List["MicrosoftGraphPhysicalAddress"]] = None,
        spouse_name: Optional[str] = None,
        personal_notes: Optional[str] = None,
        children: Optional[List[str]] = None,
        wedding_anniversary: Optional[datetime.date] = None,
        gender: Optional[str] = None,
        is_favorite: Optional[bool] = None,
        flag: Optional["MicrosoftGraphFollowupFlag"] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        photo: Optional["MicrosoftGraphProfilePhoto"] = None,
        extensions: Optional[List["MicrosoftGraphEntity"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphContact, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, change_key=change_key, categories=categories, **kwargs)
        self.parent_folder_id = parent_folder_id
        self.birthday = birthday
        self.file_as = file_as
        self.display_name = display_name
        self.given_name = given_name
        self.initials = initials
        self.middle_name = middle_name
        self.nick_name = nick_name
        self.surname = surname
        self.title = title
        self.yomi_given_name = yomi_given_name
        self.yomi_surname = yomi_surname
        self.yomi_company_name = yomi_company_name
        self.generation = generation
        self.email_addresses = email_addresses
        self.websites = websites
        self.im_addresses = im_addresses
        self.job_title = job_title
        self.company_name = company_name
        self.department = department
        self.office_location = office_location
        self.profession = profession
        self.assistant_name = assistant_name
        self.manager = manager
        self.phones = phones
        self.postal_addresses = postal_addresses
        self.spouse_name = spouse_name
        self.personal_notes = personal_notes
        self.children = children
        self.wedding_anniversary = wedding_anniversary
        self.gender = gender
        self.is_favorite = is_favorite
        self.flag = flag
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties
        self.photo = photo
        self.extensions = extensions


class MicrosoftGraphContactFolder(MicrosoftGraphEntity):
    """contactFolder.

    :param id: Read-only.
    :type id: str
    :param parent_folder_id: The ID of the folder's parent folder.
    :type parent_folder_id: str
    :param display_name: The folder's display name.
    :type display_name: str
    :param well_known_name:
    :type well_known_name: str
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the contactFolder. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~users_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the contactFolder. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~users_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param contacts: The contacts in the folder. Navigation property. Read-only. Nullable.
    :type contacts: list[~users_user.models.MicrosoftGraphContact]
    :param child_folders: The collection of child folders in the folder. Navigation property. Read-
     only. Nullable.
    :type child_folders: list[~users_user.models.MicrosoftGraphContactFolder]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'well_known_name': {'key': 'wellKnownName', 'type': 'str'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'contacts': {'key': 'contacts', 'type': '[MicrosoftGraphContact]'},
        'child_folders': {'key': 'childFolders', 'type': '[MicrosoftGraphContactFolder]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        display_name: Optional[str] = None,
        well_known_name: Optional[str] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        contacts: Optional[List["MicrosoftGraphContact"]] = None,
        child_folders: Optional[List["MicrosoftGraphContactFolder"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphContactFolder, self).__init__(id=id, **kwargs)
        self.parent_folder_id = parent_folder_id
        self.display_name = display_name
        self.well_known_name = well_known_name
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties
        self.contacts = contacts
        self.child_folders = child_folders


class MicrosoftGraphContentType(MicrosoftGraphEntity):
    """contentType.

    :param id: Read-only.
    :type id: str
    :param description: The descriptive text for the item.
    :type description: str
    :param group: The name of the group this content type belongs to. Helps organize related
     content types.
    :type group: str
    :param hidden: Indicates whether the content type is hidden in the list's 'New' menu.
    :type hidden: bool
    :param inherited_from: itemReference.
    :type inherited_from: ~users_user.models.MicrosoftGraphItemReference
    :param name: The name of the content type.
    :type name: str
    :param order: contentTypeOrder.
    :type order: ~users_user.models.MicrosoftGraphContentTypeOrder
    :param parent_id: The unique identifier of the content type.
    :type parent_id: str
    :param read_only: If true, the content type cannot be modified unless this value is first set
     to false.
    :type read_only: bool
    :param sealed: If true, the content type cannot be modified by users or through push-down
     operations. Only site collection administrators can seal or unseal content types.
    :type sealed: bool
    :param column_links: The collection of columns that are required by this content type.
    :type column_links: list[~users_user.models.MicrosoftGraphColumnLink]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'group': {'key': 'group', 'type': 'str'},
        'hidden': {'key': 'hidden', 'type': 'bool'},
        'inherited_from': {'key': 'inheritedFrom', 'type': 'MicrosoftGraphItemReference'},
        'name': {'key': 'name', 'type': 'str'},
        'order': {'key': 'order', 'type': 'MicrosoftGraphContentTypeOrder'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'read_only': {'key': 'readOnly', 'type': 'bool'},
        'sealed': {'key': 'sealed', 'type': 'bool'},
        'column_links': {'key': 'columnLinks', 'type': '[MicrosoftGraphColumnLink]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        description: Optional[str] = None,
        group: Optional[str] = None,
        hidden: Optional[bool] = None,
        inherited_from: Optional["MicrosoftGraphItemReference"] = None,
        name: Optional[str] = None,
        order: Optional["MicrosoftGraphContentTypeOrder"] = None,
        parent_id: Optional[str] = None,
        read_only: Optional[bool] = None,
        sealed: Optional[bool] = None,
        column_links: Optional[List["MicrosoftGraphColumnLink"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphContentType, self).__init__(id=id, **kwargs)
        self.description = description
        self.group = group
        self.hidden = hidden
        self.inherited_from = inherited_from
        self.name = name
        self.order = order
        self.parent_id = parent_id
        self.read_only = read_only
        self.sealed = sealed
        self.column_links = column_links


class MicrosoftGraphContentTypeInfo(msrest.serialization.Model):
    """contentTypeInfo.

    :param id: The id of the content type.
    :type id: str
    :param name:
    :type name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphContentTypeInfo, self).__init__(**kwargs)
        self.id = id
        self.name = name


class MicrosoftGraphContentTypeOrder(msrest.serialization.Model):
    """contentTypeOrder.

    :param default: Whether this is the default Content Type.
    :type default: bool
    :param position: Specifies the position in which the Content Type appears in the selection UI.
    :type position: int
    """

    _validation = {
        'position': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'default': {'key': 'default', 'type': 'bool'},
        'position': {'key': 'position', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        default: Optional[bool] = None,
        position: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphContentTypeOrder, self).__init__(**kwargs)
        self.default = default
        self.position = position


class MicrosoftGraphConversation(MicrosoftGraphEntity):
    """conversation.

    :param id: Read-only.
    :type id: str
    :param topic: The topic of the conversation. This property can be set when the conversation is
     created, but it cannot be updated.
    :type topic: str
    :param has_attachments: Indicates whether any of the posts within this Conversation has at
     least one attachment.
    :type has_attachments: bool
    :param last_delivered_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_delivered_date_time: ~datetime.datetime
    :param unique_senders: All the users that sent a message to this Conversation.
    :type unique_senders: list[str]
    :param preview: A short summary from the body of the latest post in this converstaion.
    :type preview: str
    :param threads: A collection of all the conversation threads in the conversation. A navigation
     property. Read-only. Nullable.
    :type threads: list[~users_user.models.MicrosoftGraphConversationThread]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'topic': {'key': 'topic', 'type': 'str'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'last_delivered_date_time': {'key': 'lastDeliveredDateTime', 'type': 'iso-8601'},
        'unique_senders': {'key': 'uniqueSenders', 'type': '[str]'},
        'preview': {'key': 'preview', 'type': 'str'},
        'threads': {'key': 'threads', 'type': '[MicrosoftGraphConversationThread]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        topic: Optional[str] = None,
        has_attachments: Optional[bool] = None,
        last_delivered_date_time: Optional[datetime.datetime] = None,
        unique_senders: Optional[List[str]] = None,
        preview: Optional[str] = None,
        threads: Optional[List["MicrosoftGraphConversationThread"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphConversation, self).__init__(id=id, **kwargs)
        self.topic = topic
        self.has_attachments = has_attachments
        self.last_delivered_date_time = last_delivered_date_time
        self.unique_senders = unique_senders
        self.preview = preview
        self.threads = threads


class MicrosoftGraphConversationMember(MicrosoftGraphEntity):
    """conversationMember.

    :param id: Read-only.
    :type id: str
    :param roles:
    :type roles: list[str]
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'roles': {'key': 'roles', 'type': '[str]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        roles: Optional[List[str]] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphConversationMember, self).__init__(id=id, **kwargs)
        self.roles = roles
        self.display_name = display_name


class MicrosoftGraphConversationThread(MicrosoftGraphEntity):
    """conversationThread.

    :param id: Read-only.
    :type id: str
    :param to_recipients: The To: recipients for the thread.
    :type to_recipients: list[~users_user.models.MicrosoftGraphRecipient]
    :param topic: The topic of the conversation. This property can be set when the conversation is
     created, but it cannot be updated.
    :type topic: str
    :param has_attachments: Indicates whether any of the posts within this thread has at least one
     attachment.
    :type has_attachments: bool
    :param last_delivered_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_delivered_date_time: ~datetime.datetime
    :param unique_senders: All the users that sent a message to this thread.
    :type unique_senders: list[str]
    :param cc_recipients: The Cc: recipients for the thread.
    :type cc_recipients: list[~users_user.models.MicrosoftGraphRecipient]
    :param preview: A short summary from the body of the latest post in this converstaion.
    :type preview: str
    :param is_locked: Indicates if the thread is locked.
    :type is_locked: bool
    :param posts: Read-only. Nullable.
    :type posts: list[~users_user.models.MicrosoftGraphPost]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'to_recipients': {'key': 'toRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'topic': {'key': 'topic', 'type': 'str'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'last_delivered_date_time': {'key': 'lastDeliveredDateTime', 'type': 'iso-8601'},
        'unique_senders': {'key': 'uniqueSenders', 'type': '[str]'},
        'cc_recipients': {'key': 'ccRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'preview': {'key': 'preview', 'type': 'str'},
        'is_locked': {'key': 'isLocked', 'type': 'bool'},
        'posts': {'key': 'posts', 'type': '[MicrosoftGraphPost]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        to_recipients: Optional[List["MicrosoftGraphRecipient"]] = None,
        topic: Optional[str] = None,
        has_attachments: Optional[bool] = None,
        last_delivered_date_time: Optional[datetime.datetime] = None,
        unique_senders: Optional[List[str]] = None,
        cc_recipients: Optional[List["MicrosoftGraphRecipient"]] = None,
        preview: Optional[str] = None,
        is_locked: Optional[bool] = None,
        posts: Optional[List["MicrosoftGraphPost"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphConversationThread, self).__init__(id=id, **kwargs)
        self.to_recipients = to_recipients
        self.topic = topic
        self.has_attachments = has_attachments
        self.last_delivered_date_time = last_delivered_date_time
        self.unique_senders = unique_senders
        self.cc_recipients = cc_recipients
        self.preview = preview
        self.is_locked = is_locked
        self.posts = posts


class MicrosoftGraphCurrencyColumn(msrest.serialization.Model):
    """currencyColumn.

    :param locale: Specifies the locale from which to infer the currency symbol.
    :type locale: str
    """

    _attribute_map = {
        'locale': {'key': 'locale', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        locale: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCurrencyColumn, self).__init__(**kwargs)
        self.locale = locale


class MicrosoftGraphDataLossPreventionPolicy(MicrosoftGraphEntity):
    """dataLossPreventionPolicy.

    :param id: Read-only.
    :type id: str
    :param name:
    :type name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDataLossPreventionPolicy, self).__init__(id=id, **kwargs)
        self.name = name


class MicrosoftGraphDateTimeColumn(msrest.serialization.Model):
    """dateTimeColumn.

    :param display_as: How the value should be presented in the UX. Must be one of default,
     friendly, or standard. See below for more details. If unspecified, treated as default.
    :type display_as: str
    :param format: Indicates whether the value should be presented as a date only or a date and
     time. Must be one of dateOnly or dateTime.
    :type format: str
    """

    _attribute_map = {
        'display_as': {'key': 'displayAs', 'type': 'str'},
        'format': {'key': 'format', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_as: Optional[str] = None,
        format: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDateTimeColumn, self).__init__(**kwargs)
        self.display_as = display_as
        self.format = format


class MicrosoftGraphDateTimeZone(msrest.serialization.Model):
    """dateTimeTimeZone.

    :param date_time: A single point of time in a combined date and time representation
     ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).
    :type date_time: str
    :param time_zone: Represents a time zone, for example, 'Pacific Standard Time'. See below for
     more possible values.
    :type time_zone: str
    """

    _attribute_map = {
        'date_time': {'key': 'dateTime', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        date_time: Optional[str] = None,
        time_zone: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDateTimeZone, self).__init__(**kwargs)
        self.date_time = date_time
        self.time_zone = time_zone


class MicrosoftGraphDefaultColumnValue(msrest.serialization.Model):
    """defaultColumnValue.

    :param formula: The formula used to compute the default value for this column.
    :type formula: str
    :param value: The direct value to use as the default value for this column.
    :type value: str
    """

    _attribute_map = {
        'formula': {'key': 'formula', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        formula: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDefaultColumnValue, self).__init__(**kwargs)
        self.formula = formula
        self.value = value


class MicrosoftGraphDeleteAction(msrest.serialization.Model):
    """deleteAction.

    :param name: The name of the item that was deleted.
    :type name: str
    :param object_type: File or Folder, depending on the type of the deleted item.
    :type object_type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        object_type: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeleteAction, self).__init__(**kwargs)
        self.name = name
        self.object_type = object_type


class MicrosoftGraphDeleted(msrest.serialization.Model):
    """deleted.

    :param state: Represents the state of the deleted item.
    :type state: str
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeleted, self).__init__(**kwargs)
        self.state = state


class MicrosoftGraphDetectedApp(MicrosoftGraphEntity):
    """A managed or unmanaged app that is installed on a managed device. Unmanaged apps will only appear for devices marked as corporate owned.

    :param id: Read-only.
    :type id: str
    :param display_name: Name of the discovered application. Read-only.
    :type display_name: str
    :param version: Version of the discovered application. Read-only.
    :type version: str
    :param size_in_byte: Discovered application size in bytes. Read-only.
    :type size_in_byte: long
    :param device_count: The number of devices that have installed this application.
    :type device_count: int
    :param managed_devices: The devices that have the discovered application installed.
    :type managed_devices: list[~users_user.models.MicrosoftGraphManagedDevice]
    """

    _validation = {
        'device_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'size_in_byte': {'key': 'sizeInByte', 'type': 'long'},
        'device_count': {'key': 'deviceCount', 'type': 'int'},
        'managed_devices': {'key': 'managedDevices', 'type': '[MicrosoftGraphManagedDevice]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        version: Optional[str] = None,
        size_in_byte: Optional[int] = None,
        device_count: Optional[int] = None,
        managed_devices: Optional[List["MicrosoftGraphManagedDevice"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDetectedApp, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.version = version
        self.size_in_byte = size_in_byte
        self.device_count = device_count
        self.managed_devices = managed_devices


class MicrosoftGraphDirectoryObject(MicrosoftGraphEntity):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphDirectoryObject, self).__init__(id=id, **kwargs)
        self.deleted_date_time = deleted_date_time


class MicrosoftGraphDevice(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param account_enabled: true if the account is enabled; otherwise, false. Required.
    :type account_enabled: bool
    :param alternative_security_ids: For internal use only. Not nullable.
    :type alternative_security_ids: list[~users_user.models.MicrosoftGraphAlternativeSecurityId]
    :param approximate_last_sign_in_date_time: The timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type approximate_last_sign_in_date_time: ~datetime.datetime
    :param compliance_expiration_date_time: The timestamp when the device is no longer deemed
     compliant. The timestamp type represents date and time information using ISO 8601 format and is
     always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
     '2014-01-01T00:00:00Z'. Read-only.
    :type compliance_expiration_date_time: ~datetime.datetime
    :param device_id: Unique identifier set by Azure Device Registration Service at the time of
     registration.
    :type device_id: str
    :param device_metadata: For interal use only. Set to null.
    :type device_metadata: str
    :param device_version: For interal use only.
    :type device_version: int
    :param display_name: The display name for the device. Required.
    :type display_name: str
    :param is_compliant: true if the device complies with Mobile Device Management (MDM) policies;
     otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an
     approved MDM app for Windows OS devices.
    :type is_compliant: bool
    :param is_managed: true if the device is managed by a Mobile Device Management (MDM) app;
     otherwise, false. This can only be updated by Intune for any device OS type or by an approved
     MDM app for Windows OS devices.
    :type is_managed: bool
    :param on_premises_last_sync_date_time: The last time at which the object was synced with the
     on-premises directory.The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z' Read-only.
    :type on_premises_last_sync_date_time: ~datetime.datetime
    :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
     false if this object was originally synced from an on-premises directory but is no longer
     synced; null if this object has never been synced from an on-premises directory (default).
     Read-only.
    :type on_premises_sync_enabled: bool
    :param operating_system: The type of operating system on the device. Required.
    :type operating_system: str
    :param operating_system_version: The version of the operating system on the device. Required.
    :type operating_system_version: str
    :param physical_ids: For interal use only. Not nullable.
    :type physical_ids: list[str]
    :param profile_type: The profile type of the device. Possible values:RegisteredDevice
     (default)SecureVMPrinterSharedIoT.
    :type profile_type: str
    :param system_labels: List of labels applied to the device by the system.
    :type system_labels: list[str]
    :param trust_type: Type of trust for the joined device. Read-only. Possible values: Workplace -
     indicates bring your own personal devicesAzureAd - Cloud only joined devicesServerAd - on-
     premises domain joined devices joined to Azure AD. For more details, see Introduction to device
     management in Azure Active Directory.
    :type trust_type: str
    :param name:
    :type name: str
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param kind:
    :type kind: str
    :param status:
    :type status: str
    :param platform:
    :type platform: str
    :param member_of: Groups that this group is a member of. HTTP Methods: GET (supported for all
     groups). Read-only. Nullable.
    :type member_of: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param registered_owners: The user that cloud joined the device or registered their personal
     device. The registered owner is set at the time of registration. Currently, there can be only
     one owner. Read-only. Nullable.
    :type registered_owners: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param registered_users: Collection of registered users of the device. For cloud joined devices
     and registered personal devices, registered users are set to the same value as registered
     owners at the time of registration. Read-only. Nullable.
    :type registered_users: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param transitive_member_of:
    :type transitive_member_of: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param extensions: The collection of open extensions defined for the device. Read-only.
     Nullable.
    :type extensions: list[~users_user.models.MicrosoftGraphEntity]
    :param commands:
    :type commands: list[~users_user.models.MicrosoftGraphCommand]
    """

    _validation = {
        'device_version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'alternative_security_ids': {'key': 'alternativeSecurityIds', 'type': '[MicrosoftGraphAlternativeSecurityId]'},
        'approximate_last_sign_in_date_time': {'key': 'approximateLastSignInDateTime', 'type': 'iso-8601'},
        'compliance_expiration_date_time': {'key': 'complianceExpirationDateTime', 'type': 'iso-8601'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'device_metadata': {'key': 'deviceMetadata', 'type': 'str'},
        'device_version': {'key': 'deviceVersion', 'type': 'int'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_compliant': {'key': 'isCompliant', 'type': 'bool'},
        'is_managed': {'key': 'isManaged', 'type': 'bool'},
        'on_premises_last_sync_date_time': {'key': 'onPremisesLastSyncDateTime', 'type': 'iso-8601'},
        'on_premises_sync_enabled': {'key': 'onPremisesSyncEnabled', 'type': 'bool'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'operating_system_version': {'key': 'operatingSystemVersion', 'type': 'str'},
        'physical_ids': {'key': 'physicalIds', 'type': '[str]'},
        'profile_type': {'key': 'profileType', 'type': 'str'},
        'system_labels': {'key': 'systemLabels', 'type': '[str]'},
        'trust_type': {'key': 'trustType', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'manufacturer': {'key': 'Manufacturer', 'type': 'str'},
        'model': {'key': 'Model', 'type': 'str'},
        'kind': {'key': 'Kind', 'type': 'str'},
        'status': {'key': 'Status', 'type': 'str'},
        'platform': {'key': 'Platform', 'type': 'str'},
        'member_of': {'key': 'memberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'registered_owners': {'key': 'registeredOwners', 'type': '[MicrosoftGraphDirectoryObject]'},
        'registered_users': {'key': 'registeredUsers', 'type': '[MicrosoftGraphDirectoryObject]'},
        'transitive_member_of': {'key': 'transitiveMemberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphEntity]'},
        'commands': {'key': 'commands', 'type': '[MicrosoftGraphCommand]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        account_enabled: Optional[bool] = None,
        alternative_security_ids: Optional[List["MicrosoftGraphAlternativeSecurityId"]] = None,
        approximate_last_sign_in_date_time: Optional[datetime.datetime] = None,
        compliance_expiration_date_time: Optional[datetime.datetime] = None,
        device_id: Optional[str] = None,
        device_metadata: Optional[str] = None,
        device_version: Optional[int] = None,
        display_name: Optional[str] = None,
        is_compliant: Optional[bool] = None,
        is_managed: Optional[bool] = None,
        on_premises_last_sync_date_time: Optional[datetime.datetime] = None,
        on_premises_sync_enabled: Optional[bool] = None,
        operating_system: Optional[str] = None,
        operating_system_version: Optional[str] = None,
        physical_ids: Optional[List[str]] = None,
        profile_type: Optional[str] = None,
        system_labels: Optional[List[str]] = None,
        trust_type: Optional[str] = None,
        name: Optional[str] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        kind: Optional[str] = None,
        status: Optional[str] = None,
        platform: Optional[str] = None,
        member_of: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        registered_owners: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        registered_users: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        transitive_member_of: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        extensions: Optional[List["MicrosoftGraphEntity"]] = None,
        commands: Optional[List["MicrosoftGraphCommand"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDevice, self).__init__(id=id, deleted_date_time=deleted_date_time, **kwargs)
        self.account_enabled = account_enabled
        self.alternative_security_ids = alternative_security_ids
        self.approximate_last_sign_in_date_time = approximate_last_sign_in_date_time
        self.compliance_expiration_date_time = compliance_expiration_date_time
        self.device_id = device_id
        self.device_metadata = device_metadata
        self.device_version = device_version
        self.display_name = display_name
        self.is_compliant = is_compliant
        self.is_managed = is_managed
        self.on_premises_last_sync_date_time = on_premises_last_sync_date_time
        self.on_premises_sync_enabled = on_premises_sync_enabled
        self.operating_system = operating_system
        self.operating_system_version = operating_system_version
        self.physical_ids = physical_ids
        self.profile_type = profile_type
        self.system_labels = system_labels
        self.trust_type = trust_type
        self.name = name
        self.manufacturer = manufacturer
        self.model = model
        self.kind = kind
        self.status = status
        self.platform = platform
        self.member_of = member_of
        self.registered_owners = registered_owners
        self.registered_users = registered_users
        self.transitive_member_of = transitive_member_of
        self.extensions = extensions
        self.commands = commands


class MicrosoftGraphDeviceActionResult(msrest.serialization.Model):
    """deviceActionResult.

    :param action_name: Action name.
    :type action_name: str
    :param action_state: actionState. Possible values include: "none", "pending", "canceled",
     "active", "done", "failed", "notSupported".
    :type action_state: str or ~users_user.models.MicrosoftGraphActionState
    :param start_date_time: Time the action was initiated.
    :type start_date_time: ~datetime.datetime
    :param last_updated_date_time: Time the action state was last updated.
    :type last_updated_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'action_name': {'key': 'actionName', 'type': 'str'},
        'action_state': {'key': 'actionState', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        action_name: Optional[str] = None,
        action_state: Optional[Union[str, "MicrosoftGraphActionState"]] = None,
        start_date_time: Optional[datetime.datetime] = None,
        last_updated_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceActionResult, self).__init__(**kwargs)
        self.action_name = action_name
        self.action_state = action_state
        self.start_date_time = start_date_time
        self.last_updated_date_time = last_updated_date_time


class MicrosoftGraphDeviceCategory(MicrosoftGraphEntity):
    """Device categories provides a way to organize your devices. Using device categories, company administrators can define their own categories that make sense to their company.??These categories can then be applied to a device in the Intune Azure console or selected by a user during device enrollment. You can filter reports and create dynamic Azure Active Directory device groups based on device categories.

    :param id: Read-only.
    :type id: str
    :param display_name: Display name for the device category.
    :type display_name: str
    :param description: Optional description for the device category.
    :type description: str
    :param role_scope_tag_ids: Optional role scope tags for the device category.
    :type role_scope_tag_ids: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'role_scope_tag_ids': {'key': 'roleScopeTagIds', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        role_scope_tag_ids: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceCategory, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.description = description
        self.role_scope_tag_ids = role_scope_tag_ids


class MicrosoftGraphDeviceCompliancePolicySettingState(msrest.serialization.Model):
    """deviceCompliancePolicySettingState.

    :param setting: The setting that is being reported.
    :type setting: str
    :param setting_name: Localized/user friendly setting name that is being reported.
    :type setting_name: str
    :param instance_display_name: Name of setting instance that is being reported.
    :type instance_display_name: str
    :param state: complianceStatus. Possible values include: "unknown", "notApplicable",
     "compliant", "remediated", "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~users_user.models.MicrosoftGraphComplianceStatus
    :param error_code: Error code for the setting.
    :type error_code: long
    :param error_description: Error description.
    :type error_description: str
    :param user_id: UserId.
    :type user_id: str
    :param user_name: UserName.
    :type user_name: str
    :param user_email: UserEmail.
    :type user_email: str
    :param user_principal_name: UserPrincipalName.
    :type user_principal_name: str
    :param sources: Contributing policies.
    :type sources: list[~users_user.models.MicrosoftGraphSettingSource]
    :param current_value: Current value of setting on device.
    :type current_value: str
    :param setting_instance_id: SettingInstanceId.
    :type setting_instance_id: str
    """

    _attribute_map = {
        'setting': {'key': 'setting', 'type': 'str'},
        'setting_name': {'key': 'settingName', 'type': 'str'},
        'instance_display_name': {'key': 'instanceDisplayName', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'long'},
        'error_description': {'key': 'errorDescription', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[MicrosoftGraphSettingSource]'},
        'current_value': {'key': 'currentValue', 'type': 'str'},
        'setting_instance_id': {'key': 'settingInstanceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        setting: Optional[str] = None,
        setting_name: Optional[str] = None,
        instance_display_name: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphComplianceStatus"]] = None,
        error_code: Optional[int] = None,
        error_description: Optional[str] = None,
        user_id: Optional[str] = None,
        user_name: Optional[str] = None,
        user_email: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        sources: Optional[List["MicrosoftGraphSettingSource"]] = None,
        current_value: Optional[str] = None,
        setting_instance_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceCompliancePolicySettingState, self).__init__(**kwargs)
        self.setting = setting
        self.setting_name = setting_name
        self.instance_display_name = instance_display_name
        self.state = state
        self.error_code = error_code
        self.error_description = error_description
        self.user_id = user_id
        self.user_name = user_name
        self.user_email = user_email
        self.user_principal_name = user_principal_name
        self.sources = sources
        self.current_value = current_value
        self.setting_instance_id = setting_instance_id


class MicrosoftGraphDeviceCompliancePolicyState(MicrosoftGraphEntity):
    """Device Compliance Policy State for a given device.

    :param id: Read-only.
    :type id: str
    :param setting_states:
    :type setting_states: list[~users_user.models.MicrosoftGraphDeviceCompliancePolicySettingState]
    :param display_name: The name of the policy for this policyBase.
    :type display_name: str
    :param version: The version of the policy.
    :type version: int
    :param platform_type: policyPlatformType. Possible values include: "android", "androidForWork",
     "iOS", "macOS", "windowsPhone81", "windows81AndLater", "windows10AndLater",
     "androidWorkProfile", "windows10XProfile", "all".
    :type platform_type: str or ~users_user.models.MicrosoftGraphPolicyPlatformType
    :param state: complianceStatus. Possible values include: "unknown", "notApplicable",
     "compliant", "remediated", "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~users_user.models.MicrosoftGraphComplianceStatus
    :param setting_count: Count of how many setting a policy holds.
    :type setting_count: int
    :param user_id: User unique identifier, must be Guid.
    :type user_id: str
    :param user_principal_name: User Principal Name.
    :type user_principal_name: str
    """

    _validation = {
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
        'setting_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'setting_states': {'key': 'settingStates', 'type': '[MicrosoftGraphDeviceCompliancePolicySettingState]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
        'platform_type': {'key': 'platformType', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'setting_count': {'key': 'settingCount', 'type': 'int'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        setting_states: Optional[List["MicrosoftGraphDeviceCompliancePolicySettingState"]] = None,
        display_name: Optional[str] = None,
        version: Optional[int] = None,
        platform_type: Optional[Union[str, "MicrosoftGraphPolicyPlatformType"]] = None,
        state: Optional[Union[str, "MicrosoftGraphComplianceStatus"]] = None,
        setting_count: Optional[int] = None,
        user_id: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceCompliancePolicyState, self).__init__(id=id, **kwargs)
        self.setting_states = setting_states
        self.display_name = display_name
        self.version = version
        self.platform_type = platform_type
        self.state = state
        self.setting_count = setting_count
        self.user_id = user_id
        self.user_principal_name = user_principal_name


class MicrosoftGraphDeviceConfigurationSettingState(msrest.serialization.Model):
    """deviceConfigurationSettingState.

    :param setting: The setting that is being reported.
    :type setting: str
    :param setting_name: Localized/user friendly setting name that is being reported.
    :type setting_name: str
    :param instance_display_name: Name of setting instance that is being reported.
    :type instance_display_name: str
    :param state: complianceStatus. Possible values include: "unknown", "notApplicable",
     "compliant", "remediated", "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~users_user.models.MicrosoftGraphComplianceStatus
    :param error_code: Error code for the setting.
    :type error_code: long
    :param error_description: Error description.
    :type error_description: str
    :param user_id: UserId.
    :type user_id: str
    :param user_name: UserName.
    :type user_name: str
    :param user_email: UserEmail.
    :type user_email: str
    :param user_principal_name: UserPrincipalName.
    :type user_principal_name: str
    :param sources: Contributing policies.
    :type sources: list[~users_user.models.MicrosoftGraphSettingSource]
    :param current_value: Current value of setting on device.
    :type current_value: str
    :param setting_instance_id: SettingInstanceId.
    :type setting_instance_id: str
    """

    _attribute_map = {
        'setting': {'key': 'setting', 'type': 'str'},
        'setting_name': {'key': 'settingName', 'type': 'str'},
        'instance_display_name': {'key': 'instanceDisplayName', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'long'},
        'error_description': {'key': 'errorDescription', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[MicrosoftGraphSettingSource]'},
        'current_value': {'key': 'currentValue', 'type': 'str'},
        'setting_instance_id': {'key': 'settingInstanceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        setting: Optional[str] = None,
        setting_name: Optional[str] = None,
        instance_display_name: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphComplianceStatus"]] = None,
        error_code: Optional[int] = None,
        error_description: Optional[str] = None,
        user_id: Optional[str] = None,
        user_name: Optional[str] = None,
        user_email: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        sources: Optional[List["MicrosoftGraphSettingSource"]] = None,
        current_value: Optional[str] = None,
        setting_instance_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceConfigurationSettingState, self).__init__(**kwargs)
        self.setting = setting
        self.setting_name = setting_name
        self.instance_display_name = instance_display_name
        self.state = state
        self.error_code = error_code
        self.error_description = error_description
        self.user_id = user_id
        self.user_name = user_name
        self.user_email = user_email
        self.user_principal_name = user_principal_name
        self.sources = sources
        self.current_value = current_value
        self.setting_instance_id = setting_instance_id


class MicrosoftGraphDeviceConfigurationState(MicrosoftGraphEntity):
    """Device Configuration State for a given device.

    :param id: Read-only.
    :type id: str
    :param setting_states:
    :type setting_states: list[~users_user.models.MicrosoftGraphDeviceConfigurationSettingState]
    :param display_name: The name of the policy for this policyBase.
    :type display_name: str
    :param version: The version of the policy.
    :type version: int
    :param platform_type: policyPlatformType. Possible values include: "android", "androidForWork",
     "iOS", "macOS", "windowsPhone81", "windows81AndLater", "windows10AndLater",
     "androidWorkProfile", "windows10XProfile", "all".
    :type platform_type: str or ~users_user.models.MicrosoftGraphPolicyPlatformType
    :param state: complianceStatus. Possible values include: "unknown", "notApplicable",
     "compliant", "remediated", "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~users_user.models.MicrosoftGraphComplianceStatus
    :param setting_count: Count of how many setting a policy holds.
    :type setting_count: int
    :param user_id: User unique identifier, must be Guid.
    :type user_id: str
    :param user_principal_name: User Principal Name.
    :type user_principal_name: str
    """

    _validation = {
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
        'setting_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'setting_states': {'key': 'settingStates', 'type': '[MicrosoftGraphDeviceConfigurationSettingState]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
        'platform_type': {'key': 'platformType', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'setting_count': {'key': 'settingCount', 'type': 'int'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        setting_states: Optional[List["MicrosoftGraphDeviceConfigurationSettingState"]] = None,
        display_name: Optional[str] = None,
        version: Optional[int] = None,
        platform_type: Optional[Union[str, "MicrosoftGraphPolicyPlatformType"]] = None,
        state: Optional[Union[str, "MicrosoftGraphComplianceStatus"]] = None,
        setting_count: Optional[int] = None,
        user_id: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceConfigurationState, self).__init__(id=id, **kwargs)
        self.setting_states = setting_states
        self.display_name = display_name
        self.version = version
        self.platform_type = platform_type
        self.state = state
        self.setting_count = setting_count
        self.user_id = user_id
        self.user_principal_name = user_principal_name


class MicrosoftGraphDeviceEnrollmentConfiguration(MicrosoftGraphEntity):
    """The Base Class of Device Enrollment Configuration.

    :param id: Read-only.
    :type id: str
    :param display_name: Not yet documented.
    :type display_name: str
    :param description: Not yet documented.
    :type description: str
    :param priority: Not yet documented.
    :type priority: int
    :param created_date_time: Not yet documented.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: Not yet documented.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Not yet documented.
    :type version: int
    :param assignments: The list of group assignments for the device configuration profile.
    :type assignments: list[~users_user.models.MicrosoftGraphEnrollmentConfigurationAssignment]
    """

    _validation = {
        'priority': {'maximum': 2147483647, 'minimum': -2147483648},
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'int'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphEnrollmentConfigurationAssignment]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        priority: Optional[int] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        version: Optional[int] = None,
        assignments: Optional[List["MicrosoftGraphEnrollmentConfigurationAssignment"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceEnrollmentConfiguration, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.description = description
        self.priority = priority
        self.created_date_time = created_date_time
        self.last_modified_date_time = last_modified_date_time
        self.version = version
        self.assignments = assignments


class MicrosoftGraphDeviceHealthAttestationState(msrest.serialization.Model):
    """deviceHealthAttestationState.

    :param last_update_date_time: The Timestamp of the last update.
    :type last_update_date_time: str
    :param content_namespace_url: The DHA report version. (Namespace version).
    :type content_namespace_url: str
    :param device_health_attestation_status: The DHA report version. (Namespace version).
    :type device_health_attestation_status: str
    :param content_version: The HealthAttestation state schema version.
    :type content_version: str
    :param issued_date_time: The DateTime when device was evaluated or issued to MDM.
    :type issued_date_time: ~datetime.datetime
    :param attestation_identity_key: TWhen an Attestation Identity Key (AIK) is present on a
     device, it indicates that the device has an endorsement key (EK) certificate.
    :type attestation_identity_key: str
    :param reset_count: The number of times a PC device has hibernated or resumed.
    :type reset_count: long
    :param restart_count: The number of times a PC device has rebooted.
    :type restart_count: long
    :param data_excution_policy: DEP Policy defines a set of hardware and software technologies
     that perform additional checks on memory.
    :type data_excution_policy: str
    :param bit_locker_status: On or Off of BitLocker Drive Encryption.
    :type bit_locker_status: str
    :param boot_manager_version: The version of the Boot Manager.
    :type boot_manager_version: str
    :param code_integrity_check_version: The version of the Boot Manager.
    :type code_integrity_check_version: str
    :param secure_boot: When Secure Boot is enabled, the core components must have the correct
     cryptographic signatures.
    :type secure_boot: str
    :param boot_debugging: When bootDebugging is enabled, the device is used in development and
     testing.
    :type boot_debugging: str
    :param operating_system_kernel_debugging: When operatingSystemKernelDebugging is enabled, the
     device is used in development and testing.
    :type operating_system_kernel_debugging: str
    :param code_integrity: When code integrity is enabled, code execution is restricted to
     integrity verified code.
    :type code_integrity: str
    :param test_signing: When test signing is allowed, the device does not enforce signature
     validation during boot.
    :type test_signing: str
    :param safe_mode: Safe mode is a troubleshooting option for Windows that starts your computer
     in a limited state.
    :type safe_mode: str
    :param windows_pe: Operating system running with limited services that is used to prepare a
     computer for Windows.
    :type windows_pe: str
    :param early_launch_anti_malware_driver_protection: ELAM provides protection for the computers
     in your network when they start up.
    :type early_launch_anti_malware_driver_protection: str
    :param virtual_secure_mode: VSM is a container that protects high value assets from a
     compromised kernel.
    :type virtual_secure_mode: str
    :param pcr_hash_algorithm: Informational attribute that identifies the HASH algorithm that was
     used by TPM.
    :type pcr_hash_algorithm: str
    :param boot_app_security_version: The security version number of the Boot Application.
    :type boot_app_security_version: str
    :param boot_manager_security_version: The security version number of the Boot Application.
    :type boot_manager_security_version: str
    :param tpm_version: The security version number of the Boot Application.
    :type tpm_version: str
    :param pcr0: The measurement that is captured in PCR[0].
    :type pcr0: str
    :param secure_boot_configuration_policy_finger_print: Fingerprint of the Custom Secure Boot
     Configuration Policy.
    :type secure_boot_configuration_policy_finger_print: str
    :param code_integrity_policy: The Code Integrity policy that is controlling the security of the
     boot environment.
    :type code_integrity_policy: str
    :param boot_revision_list_info: The Boot Revision List that was loaded during initial boot on
     the attested device.
    :type boot_revision_list_info: str
    :param operating_system_rev_list_info: The Operating System Revision List that was loaded
     during initial boot on the attested device.
    :type operating_system_rev_list_info: str
    :param health_status_mismatch_info: This attribute appears if DHA-Service detects an integrity
     issue.
    :type health_status_mismatch_info: str
    :param health_attestation_supported_status: This attribute indicates if DHA is supported for
     the device.
    :type health_attestation_supported_status: str
    """

    _attribute_map = {
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'str'},
        'content_namespace_url': {'key': 'contentNamespaceUrl', 'type': 'str'},
        'device_health_attestation_status': {'key': 'deviceHealthAttestationStatus', 'type': 'str'},
        'content_version': {'key': 'contentVersion', 'type': 'str'},
        'issued_date_time': {'key': 'issuedDateTime', 'type': 'iso-8601'},
        'attestation_identity_key': {'key': 'attestationIdentityKey', 'type': 'str'},
        'reset_count': {'key': 'resetCount', 'type': 'long'},
        'restart_count': {'key': 'restartCount', 'type': 'long'},
        'data_excution_policy': {'key': 'dataExcutionPolicy', 'type': 'str'},
        'bit_locker_status': {'key': 'bitLockerStatus', 'type': 'str'},
        'boot_manager_version': {'key': 'bootManagerVersion', 'type': 'str'},
        'code_integrity_check_version': {'key': 'codeIntegrityCheckVersion', 'type': 'str'},
        'secure_boot': {'key': 'secureBoot', 'type': 'str'},
        'boot_debugging': {'key': 'bootDebugging', 'type': 'str'},
        'operating_system_kernel_debugging': {'key': 'operatingSystemKernelDebugging', 'type': 'str'},
        'code_integrity': {'key': 'codeIntegrity', 'type': 'str'},
        'test_signing': {'key': 'testSigning', 'type': 'str'},
        'safe_mode': {'key': 'safeMode', 'type': 'str'},
        'windows_pe': {'key': 'windowsPE', 'type': 'str'},
        'early_launch_anti_malware_driver_protection': {'key': 'earlyLaunchAntiMalwareDriverProtection', 'type': 'str'},
        'virtual_secure_mode': {'key': 'virtualSecureMode', 'type': 'str'},
        'pcr_hash_algorithm': {'key': 'pcrHashAlgorithm', 'type': 'str'},
        'boot_app_security_version': {'key': 'bootAppSecurityVersion', 'type': 'str'},
        'boot_manager_security_version': {'key': 'bootManagerSecurityVersion', 'type': 'str'},
        'tpm_version': {'key': 'tpmVersion', 'type': 'str'},
        'pcr0': {'key': 'pcr0', 'type': 'str'},
        'secure_boot_configuration_policy_finger_print': {'key': 'secureBootConfigurationPolicyFingerPrint', 'type': 'str'},
        'code_integrity_policy': {'key': 'codeIntegrityPolicy', 'type': 'str'},
        'boot_revision_list_info': {'key': 'bootRevisionListInfo', 'type': 'str'},
        'operating_system_rev_list_info': {'key': 'operatingSystemRevListInfo', 'type': 'str'},
        'health_status_mismatch_info': {'key': 'healthStatusMismatchInfo', 'type': 'str'},
        'health_attestation_supported_status': {'key': 'healthAttestationSupportedStatus', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        last_update_date_time: Optional[str] = None,
        content_namespace_url: Optional[str] = None,
        device_health_attestation_status: Optional[str] = None,
        content_version: Optional[str] = None,
        issued_date_time: Optional[datetime.datetime] = None,
        attestation_identity_key: Optional[str] = None,
        reset_count: Optional[int] = None,
        restart_count: Optional[int] = None,
        data_excution_policy: Optional[str] = None,
        bit_locker_status: Optional[str] = None,
        boot_manager_version: Optional[str] = None,
        code_integrity_check_version: Optional[str] = None,
        secure_boot: Optional[str] = None,
        boot_debugging: Optional[str] = None,
        operating_system_kernel_debugging: Optional[str] = None,
        code_integrity: Optional[str] = None,
        test_signing: Optional[str] = None,
        safe_mode: Optional[str] = None,
        windows_pe: Optional[str] = None,
        early_launch_anti_malware_driver_protection: Optional[str] = None,
        virtual_secure_mode: Optional[str] = None,
        pcr_hash_algorithm: Optional[str] = None,
        boot_app_security_version: Optional[str] = None,
        boot_manager_security_version: Optional[str] = None,
        tpm_version: Optional[str] = None,
        pcr0: Optional[str] = None,
        secure_boot_configuration_policy_finger_print: Optional[str] = None,
        code_integrity_policy: Optional[str] = None,
        boot_revision_list_info: Optional[str] = None,
        operating_system_rev_list_info: Optional[str] = None,
        health_status_mismatch_info: Optional[str] = None,
        health_attestation_supported_status: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceHealthAttestationState, self).__init__(**kwargs)
        self.last_update_date_time = last_update_date_time
        self.content_namespace_url = content_namespace_url
        self.device_health_attestation_status = device_health_attestation_status
        self.content_version = content_version
        self.issued_date_time = issued_date_time
        self.attestation_identity_key = attestation_identity_key
        self.reset_count = reset_count
        self.restart_count = restart_count
        self.data_excution_policy = data_excution_policy
        self.bit_locker_status = bit_locker_status
        self.boot_manager_version = boot_manager_version
        self.code_integrity_check_version = code_integrity_check_version
        self.secure_boot = secure_boot
        self.boot_debugging = boot_debugging
        self.operating_system_kernel_debugging = operating_system_kernel_debugging
        self.code_integrity = code_integrity
        self.test_signing = test_signing
        self.safe_mode = safe_mode
        self.windows_pe = windows_pe
        self.early_launch_anti_malware_driver_protection = early_launch_anti_malware_driver_protection
        self.virtual_secure_mode = virtual_secure_mode
        self.pcr_hash_algorithm = pcr_hash_algorithm
        self.boot_app_security_version = boot_app_security_version
        self.boot_manager_security_version = boot_manager_security_version
        self.tpm_version = tpm_version
        self.pcr0 = pcr0
        self.secure_boot_configuration_policy_finger_print = secure_boot_configuration_policy_finger_print
        self.code_integrity_policy = code_integrity_policy
        self.boot_revision_list_info = boot_revision_list_info
        self.operating_system_rev_list_info = operating_system_rev_list_info
        self.health_status_mismatch_info = health_status_mismatch_info
        self.health_attestation_supported_status = health_attestation_supported_status


class MicrosoftGraphDeviceKey(msrest.serialization.Model):
    """deviceKey.

    :param key_type:
    :type key_type: str
    :param key_material:
    :type key_material: bytes
    :param device_id:
    :type device_id: str
    """

    _attribute_map = {
        'key_type': {'key': 'keyType', 'type': 'str'},
        'key_material': {'key': 'keyMaterial', 'type': 'base64'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        key_type: Optional[str] = None,
        key_material: Optional[bytes] = None,
        device_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceKey, self).__init__(**kwargs)
        self.key_type = key_type
        self.key_material = key_material
        self.device_id = device_id


class MicrosoftGraphDeviceManagementTroubleshootingErrorDetails(msrest.serialization.Model):
    """deviceManagementTroubleshootingErrorDetails.

    :param context:
    :type context: str
    :param failure:
    :type failure: str
    :param failure_details: The detailed description of what went wrong.
    :type failure_details: str
    :param remediation: The detailed description of how to remediate this issue.
    :type remediation: str
    :param resources: Links to helpful documentation about this failure.
    :type resources:
     list[~users_user.models.MicrosoftGraphDeviceManagementTroubleshootingErrorResource]
    """

    _attribute_map = {
        'context': {'key': 'context', 'type': 'str'},
        'failure': {'key': 'failure', 'type': 'str'},
        'failure_details': {'key': 'failureDetails', 'type': 'str'},
        'remediation': {'key': 'remediation', 'type': 'str'},
        'resources': {'key': 'resources', 'type': '[MicrosoftGraphDeviceManagementTroubleshootingErrorResource]'},
    }

    def __init__(
        self,
        *,
        context: Optional[str] = None,
        failure: Optional[str] = None,
        failure_details: Optional[str] = None,
        remediation: Optional[str] = None,
        resources: Optional[List["MicrosoftGraphDeviceManagementTroubleshootingErrorResource"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceManagementTroubleshootingErrorDetails, self).__init__(**kwargs)
        self.context = context
        self.failure = failure
        self.failure_details = failure_details
        self.remediation = remediation
        self.resources = resources


class MicrosoftGraphDeviceManagementTroubleshootingErrorResource(msrest.serialization.Model):
    """deviceManagementTroubleshootingErrorResource.

    :param text:
    :type text: str
    :param link: The link to the web resource. Can contain any of the following formatters:
     {{UPN}}, {{DeviceGUID}}, {{UserGUID}}.
    :type link: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'link': {'key': 'link', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        text: Optional[str] = None,
        link: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceManagementTroubleshootingErrorResource, self).__init__(**kwargs)
        self.text = text
        self.link = link


class MicrosoftGraphDeviceManagementTroubleshootingEvent(MicrosoftGraphEntity):
    """Event representing an general failure.

    :param id: Read-only.
    :type id: str
    :param event_date_time: Time when the event occurred .
    :type event_date_time: ~datetime.datetime
    :param correlation_id: Id used for tracing the failure in the service.
    :type correlation_id: str
    :param troubleshooting_error_details: deviceManagementTroubleshootingErrorDetails.
    :type troubleshooting_error_details:
     ~users_user.models.MicrosoftGraphDeviceManagementTroubleshootingErrorDetails
    :param event_name: Event Name corresponding to the Troubleshooting Event. It is an Optional
     field.
    :type event_name: str
    :param additional_information: A set of string key and string value pairs which provides
     additional information on the Troubleshooting event.
    :type additional_information: list[~users_user.models.MicrosoftGraphKeyValuePair]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'event_date_time': {'key': 'eventDateTime', 'type': 'iso-8601'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'troubleshooting_error_details': {'key': 'troubleshootingErrorDetails', 'type': 'MicrosoftGraphDeviceManagementTroubleshootingErrorDetails'},
        'event_name': {'key': 'eventName', 'type': 'str'},
        'additional_information': {'key': 'additionalInformation', 'type': '[MicrosoftGraphKeyValuePair]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        event_date_time: Optional[datetime.datetime] = None,
        correlation_id: Optional[str] = None,
        troubleshooting_error_details: Optional["MicrosoftGraphDeviceManagementTroubleshootingErrorDetails"] = None,
        event_name: Optional[str] = None,
        additional_information: Optional[List["MicrosoftGraphKeyValuePair"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceManagementTroubleshootingEvent, self).__init__(id=id, **kwargs)
        self.event_date_time = event_date_time
        self.correlation_id = correlation_id
        self.troubleshooting_error_details = troubleshooting_error_details
        self.event_name = event_name
        self.additional_information = additional_information


class MicrosoftGraphDirectorySetting(MicrosoftGraphEntity):
    """directorySetting.

    :param id: Read-only.
    :type id: str
    :param display_name:
    :type display_name: str
    :param template_id:
    :type template_id: str
    :param values:
    :type values: list[~users_user.models.MicrosoftGraphSettingValue]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'template_id': {'key': 'templateId', 'type': 'str'},
        'values': {'key': 'values', 'type': '[MicrosoftGraphSettingValue]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        template_id: Optional[str] = None,
        values: Optional[List["MicrosoftGraphSettingValue"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDirectorySetting, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.template_id = template_id
        self.values = values


class MicrosoftGraphDrive(MicrosoftGraphBaseItem):
    """drive.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param parent_reference: itemReference.
    :type parent_reference: ~users_user.models.MicrosoftGraphItemReference
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~users_user.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~users_user.models.MicrosoftGraphUser
    :param drive_type: Describes the type of drive represented by this resource. OneDrive personal
     drives will return personal. OneDrive for Business will return business. SharePoint document
     libraries will return documentLibrary. Read-only.
    :type drive_type: str
    :param owner: identitySet.
    :type owner: ~users_user.models.MicrosoftGraphIdentitySet
    :param quota: quota.
    :type quota: ~users_user.models.MicrosoftGraphQuota
    :param share_point_ids: sharepointIds.
    :type share_point_ids: ~users_user.models.MicrosoftGraphSharepointIds
    :param system: Any object.
    :type system: object
    :param activities:
    :type activities: list[~users_user.models.MicrosoftGraphItemActivityOld]
    :param bundles:
    :type bundles: list[~users_user.models.MicrosoftGraphDriveItem]
    :param following: The list of items the user is following. Only in OneDrive for Business.
    :type following: list[~users_user.models.MicrosoftGraphDriveItem]
    :param items: All items contained in the drive. Read-only. Nullable.
    :type items: list[~users_user.models.MicrosoftGraphDriveItem]
    :param list: list.
    :type list: ~users_user.models.MicrosoftGraphList
    :param root: driveItem.
    :type root: ~users_user.models.MicrosoftGraphDriveItem
    :param special: Collection of common folders available in OneDrive. Read-only. Nullable.
    :type special: list[~users_user.models.MicrosoftGraphDriveItem]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'parent_reference': {'key': 'parentReference', 'type': 'MicrosoftGraphItemReference'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_type': {'key': 'driveType', 'type': 'str'},
        'owner': {'key': 'owner', 'type': 'MicrosoftGraphIdentitySet'},
        'quota': {'key': 'quota', 'type': 'MicrosoftGraphQuota'},
        'share_point_ids': {'key': 'sharePointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'system': {'key': 'system', 'type': 'object'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphItemActivityOld]'},
        'bundles': {'key': 'bundles', 'type': '[MicrosoftGraphDriveItem]'},
        'following': {'key': 'following', 'type': '[MicrosoftGraphDriveItem]'},
        'items': {'key': 'items', 'type': '[MicrosoftGraphDriveItem]'},
        'list': {'key': 'list', 'type': 'MicrosoftGraphList'},
        'root': {'key': 'root', 'type': 'MicrosoftGraphDriveItem'},
        'special': {'key': 'special', 'type': '[MicrosoftGraphDriveItem]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        e_tag: Optional[str] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        parent_reference: Optional["MicrosoftGraphItemReference"] = None,
        web_url: Optional[str] = None,
        created_by_user: Optional["MicrosoftGraphUser"] = None,
        last_modified_by_user: Optional["MicrosoftGraphUser"] = None,
        drive_type: Optional[str] = None,
        owner: Optional["MicrosoftGraphIdentitySet"] = None,
        quota: Optional["MicrosoftGraphQuota"] = None,
        share_point_ids: Optional["MicrosoftGraphSharepointIds"] = None,
        system: Optional[object] = None,
        activities: Optional[List["MicrosoftGraphItemActivityOld"]] = None,
        bundles: Optional[List["MicrosoftGraphDriveItem"]] = None,
        following: Optional[List["MicrosoftGraphDriveItem"]] = None,
        items: Optional[List["MicrosoftGraphDriveItem"]] = None,
        list: Optional["MicrosoftGraphList"] = None,
        root: Optional["MicrosoftGraphDriveItem"] = None,
        special: Optional[List["MicrosoftGraphDriveItem"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDrive, self).__init__(id=id, created_by=created_by, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, name=name, parent_reference=parent_reference, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, **kwargs)
        self.drive_type = drive_type
        self.owner = owner
        self.quota = quota
        self.share_point_ids = share_point_ids
        self.system = system
        self.activities = activities
        self.bundles = bundles
        self.following = following
        self.items = items
        self.list = list
        self.root = root
        self.special = special


class MicrosoftGraphDriveItem(MicrosoftGraphBaseItem):
    """driveItem.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param parent_reference: itemReference.
    :type parent_reference: ~users_user.models.MicrosoftGraphItemReference
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~users_user.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~users_user.models.MicrosoftGraphUser
    :param audio: audio.
    :type audio: ~users_user.models.MicrosoftGraphAudio
    :param bundle: bundle.
    :type bundle: ~users_user.models.MicrosoftGraphBundle
    :param content: The content stream, if the item represents a file.
    :type content: bytes
    :param c_tag: An eTag for the content of the item. This eTag is not changed if only the
     metadata is changed. Note This property is not returned if the item is a folder. Read-only.
    :type c_tag: str
    :param deleted: deleted.
    :type deleted: ~users_user.models.MicrosoftGraphDeleted
    :param file: file.
    :type file: ~users_user.models.MicrosoftGraphFile
    :param file_system_info: fileSystemInfo.
    :type file_system_info: ~users_user.models.MicrosoftGraphFileSystemInfo
    :param folder: folder.
    :type folder: ~users_user.models.MicrosoftGraphFolder
    :param image: image.
    :type image: ~users_user.models.MicrosoftGraphImage
    :param location: geoCoordinates.
    :type location: ~users_user.models.MicrosoftGraphGeoCoordinates
    :param package: package.
    :type package: ~users_user.models.MicrosoftGraphPackage
    :param pending_operations: pendingOperations.
    :type pending_operations: ~users_user.models.MicrosoftGraphPendingOperations
    :param photo: photo.
    :type photo: ~users_user.models.MicrosoftGraphPhoto
    :param publication: publicationFacet.
    :type publication: ~users_user.models.MicrosoftGraphPublicationFacet
    :param remote_item: remoteItem.
    :type remote_item: ~users_user.models.MicrosoftGraphRemoteItem
    :param root: Any object.
    :type root: object
    :param search_result: searchResult.
    :type search_result: ~users_user.models.MicrosoftGraphSearchResult
    :param shared: shared.
    :type shared: ~users_user.models.MicrosoftGraphShared
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~users_user.models.MicrosoftGraphSharepointIds
    :param size: Size of the item in bytes. Read-only.
    :type size: long
    :param special_folder: specialFolder.
    :type special_folder: ~users_user.models.MicrosoftGraphSpecialFolder
    :param video: video.
    :type video: ~users_user.models.MicrosoftGraphVideo
    :param web_dav_url: WebDAV compatible URL for the item.
    :type web_dav_url: str
    :param workbook: workbook.
    :type workbook: ~users_user.models.MicrosoftGraphWorkbook
    :param activities: The list of recent activities that took place on this item.
    :type activities: list[~users_user.models.MicrosoftGraphItemActivityOld]
    :param analytics: itemAnalytics.
    :type analytics: ~users_user.models.MicrosoftGraphItemAnalytics
    :param children: Collection containing Item objects for the immediate children of Item. Only
     items representing folders have children. Read-only. Nullable.
    :type children: list[~users_user.models.MicrosoftGraphDriveItem]
    :param list_item: listItem.
    :type list_item: ~users_user.models.MicrosoftGraphListItem
    :param permissions: The set of permissions for the item. Read-only. Nullable.
    :type permissions: list[~users_user.models.MicrosoftGraphPermission]
    :param subscriptions: The set of subscriptions on the item. Only supported on the root of a
     drive.
    :type subscriptions: list[~users_user.models.MicrosoftGraphSubscription]
    :param thumbnails: Collection containing [ThumbnailSet][] objects associated with the item. For
     more info, see [getting thumbnails][]. Read-only. Nullable.
    :type thumbnails: list[~users_user.models.MicrosoftGraphThumbnailSet]
    :param versions: The list of previous versions of the item. For more info, see [getting
     previous versions][]. Read-only. Nullable.
    :type versions: list[~users_user.models.MicrosoftGraphDriveItemVersion]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'parent_reference': {'key': 'parentReference', 'type': 'MicrosoftGraphItemReference'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'audio': {'key': 'audio', 'type': 'MicrosoftGraphAudio'},
        'bundle': {'key': 'bundle', 'type': 'MicrosoftGraphBundle'},
        'content': {'key': 'content', 'type': 'base64'},
        'c_tag': {'key': 'cTag', 'type': 'str'},
        'deleted': {'key': 'deleted', 'type': 'MicrosoftGraphDeleted'},
        'file': {'key': 'file', 'type': 'MicrosoftGraphFile'},
        'file_system_info': {'key': 'fileSystemInfo', 'type': 'MicrosoftGraphFileSystemInfo'},
        'folder': {'key': 'folder', 'type': 'MicrosoftGraphFolder'},
        'image': {'key': 'image', 'type': 'MicrosoftGraphImage'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphGeoCoordinates'},
        'package': {'key': 'package', 'type': 'MicrosoftGraphPackage'},
        'pending_operations': {'key': 'pendingOperations', 'type': 'MicrosoftGraphPendingOperations'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphPhoto'},
        'publication': {'key': 'publication', 'type': 'MicrosoftGraphPublicationFacet'},
        'remote_item': {'key': 'remoteItem', 'type': 'MicrosoftGraphRemoteItem'},
        'root': {'key': 'root', 'type': 'object'},
        'search_result': {'key': 'searchResult', 'type': 'MicrosoftGraphSearchResult'},
        'shared': {'key': 'shared', 'type': 'MicrosoftGraphShared'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'size': {'key': 'size', 'type': 'long'},
        'special_folder': {'key': 'specialFolder', 'type': 'MicrosoftGraphSpecialFolder'},
        'video': {'key': 'video', 'type': 'MicrosoftGraphVideo'},
        'web_dav_url': {'key': 'webDavUrl', 'type': 'str'},
        'workbook': {'key': 'workbook', 'type': 'MicrosoftGraphWorkbook'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphItemActivityOld]'},
        'analytics': {'key': 'analytics', 'type': 'MicrosoftGraphItemAnalytics'},
        'children': {'key': 'children', 'type': '[MicrosoftGraphDriveItem]'},
        'list_item': {'key': 'listItem', 'type': 'MicrosoftGraphListItem'},
        'permissions': {'key': 'permissions', 'type': '[MicrosoftGraphPermission]'},
        'subscriptions': {'key': 'subscriptions', 'type': '[MicrosoftGraphSubscription]'},
        'thumbnails': {'key': 'thumbnails', 'type': '[MicrosoftGraphThumbnailSet]'},
        'versions': {'key': 'versions', 'type': '[MicrosoftGraphDriveItemVersion]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        e_tag: Optional[str] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        parent_reference: Optional["MicrosoftGraphItemReference"] = None,
        web_url: Optional[str] = None,
        created_by_user: Optional["MicrosoftGraphUser"] = None,
        last_modified_by_user: Optional["MicrosoftGraphUser"] = None,
        audio: Optional["MicrosoftGraphAudio"] = None,
        bundle: Optional["MicrosoftGraphBundle"] = None,
        content: Optional[bytes] = None,
        c_tag: Optional[str] = None,
        deleted: Optional["MicrosoftGraphDeleted"] = None,
        file: Optional["MicrosoftGraphFile"] = None,
        file_system_info: Optional["MicrosoftGraphFileSystemInfo"] = None,
        folder: Optional["MicrosoftGraphFolder"] = None,
        image: Optional["MicrosoftGraphImage"] = None,
        location: Optional["MicrosoftGraphGeoCoordinates"] = None,
        package: Optional["MicrosoftGraphPackage"] = None,
        pending_operations: Optional["MicrosoftGraphPendingOperations"] = None,
        photo: Optional["MicrosoftGraphPhoto"] = None,
        publication: Optional["MicrosoftGraphPublicationFacet"] = None,
        remote_item: Optional["MicrosoftGraphRemoteItem"] = None,
        root: Optional[object] = None,
        search_result: Optional["MicrosoftGraphSearchResult"] = None,
        shared: Optional["MicrosoftGraphShared"] = None,
        sharepoint_ids: Optional["MicrosoftGraphSharepointIds"] = None,
        size: Optional[int] = None,
        special_folder: Optional["MicrosoftGraphSpecialFolder"] = None,
        video: Optional["MicrosoftGraphVideo"] = None,
        web_dav_url: Optional[str] = None,
        workbook: Optional["MicrosoftGraphWorkbook"] = None,
        activities: Optional[List["MicrosoftGraphItemActivityOld"]] = None,
        analytics: Optional["MicrosoftGraphItemAnalytics"] = None,
        children: Optional[List["MicrosoftGraphDriveItem"]] = None,
        list_item: Optional["MicrosoftGraphListItem"] = None,
        permissions: Optional[List["MicrosoftGraphPermission"]] = None,
        subscriptions: Optional[List["MicrosoftGraphSubscription"]] = None,
        thumbnails: Optional[List["MicrosoftGraphThumbnailSet"]] = None,
        versions: Optional[List["MicrosoftGraphDriveItemVersion"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDriveItem, self).__init__(id=id, created_by=created_by, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, name=name, parent_reference=parent_reference, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, **kwargs)
        self.audio = audio
        self.bundle = bundle
        self.content = content
        self.c_tag = c_tag
        self.deleted = deleted
        self.file = file
        self.file_system_info = file_system_info
        self.folder = folder
        self.image = image
        self.location = location
        self.package = package
        self.pending_operations = pending_operations
        self.photo = photo
        self.publication = publication
        self.remote_item = remote_item
        self.root = root
        self.search_result = search_result
        self.shared = shared
        self.sharepoint_ids = sharepoint_ids
        self.size = size
        self.special_folder = special_folder
        self.video = video
        self.web_dav_url = web_dav_url
        self.workbook = workbook
        self.activities = activities
        self.analytics = analytics
        self.children = children
        self.list_item = list_item
        self.permissions = permissions
        self.subscriptions = subscriptions
        self.thumbnails = thumbnails
        self.versions = versions


class MicrosoftGraphDriveItemVersion(MicrosoftGraphBaseItemVersion):
    """driveItemVersion.

    :param id: Read-only.
    :type id: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the version was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param publication: publicationFacet.
    :type publication: ~users_user.models.MicrosoftGraphPublicationFacet
    :param content: The content stream for this version of the item.
    :type content: bytes
    :param size: Indicates the size of the content stream for this version of the item.
    :type size: long
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'publication': {'key': 'publication', 'type': 'MicrosoftGraphPublicationFacet'},
        'content': {'key': 'content', 'type': 'base64'},
        'size': {'key': 'size', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        publication: Optional["MicrosoftGraphPublicationFacet"] = None,
        content: Optional[bytes] = None,
        size: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphDriveItemVersion, self).__init__(id=id, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, publication=publication, **kwargs)
        self.content = content
        self.size = size


class MicrosoftGraphItemFacet(MicrosoftGraphEntity):
    """itemFacet.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemFacet, self).__init__(id=id, **kwargs)
        self.allowed_audiences = allowed_audiences
        self.inference = inference
        self.created_date_time = created_date_time
        self.created_by = created_by
        self.last_modified_date_time = last_modified_date_time
        self.last_modified_by = last_modified_by


class MicrosoftGraphEducationalActivity(MicrosoftGraphItemFacet):
    """educationalActivity.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param completion_month_year:
    :type completion_month_year: ~datetime.date
    :param end_month_year:
    :type end_month_year: ~datetime.date
    :param institution: institutionData.
    :type institution: ~users_user.models.MicrosoftGraphInstitutionData
    :param program: educationalActivityDetail.
    :type program: ~users_user.models.MicrosoftGraphEducationalActivityDetail
    :param start_month_year:
    :type start_month_year: ~datetime.date
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'completion_month_year': {'key': 'completionMonthYear', 'type': 'date'},
        'end_month_year': {'key': 'endMonthYear', 'type': 'date'},
        'institution': {'key': 'institution', 'type': 'MicrosoftGraphInstitutionData'},
        'program': {'key': 'program', 'type': 'MicrosoftGraphEducationalActivityDetail'},
        'start_month_year': {'key': 'startMonthYear', 'type': 'date'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        completion_month_year: Optional[datetime.date] = None,
        end_month_year: Optional[datetime.date] = None,
        institution: Optional["MicrosoftGraphInstitutionData"] = None,
        program: Optional["MicrosoftGraphEducationalActivityDetail"] = None,
        start_month_year: Optional[datetime.date] = None,
        **kwargs
    ):
        super(MicrosoftGraphEducationalActivity, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.completion_month_year = completion_month_year
        self.end_month_year = end_month_year
        self.institution = institution
        self.program = program
        self.start_month_year = start_month_year


class MicrosoftGraphEducationalActivityDetail(msrest.serialization.Model):
    """educationalActivityDetail.

    :param abbreviation:
    :type abbreviation: str
    :param activities:
    :type activities: str
    :param awards:
    :type awards: str
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param fields_of_study:
    :type fields_of_study: str
    :param grade:
    :type grade: str
    :param notes:
    :type notes: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'abbreviation': {'key': 'abbreviation', 'type': 'str'},
        'activities': {'key': 'activities', 'type': 'str'},
        'awards': {'key': 'awards', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'fields_of_study': {'key': 'fieldsOfStudy', 'type': 'str'},
        'grade': {'key': 'grade', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        abbreviation: Optional[str] = None,
        activities: Optional[str] = None,
        awards: Optional[str] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        fields_of_study: Optional[str] = None,
        grade: Optional[str] = None,
        notes: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEducationalActivityDetail, self).__init__(**kwargs)
        self.abbreviation = abbreviation
        self.activities = activities
        self.awards = awards
        self.description = description
        self.display_name = display_name
        self.fields_of_study = fields_of_study
        self.grade = grade
        self.notes = notes
        self.web_url = web_url


class MicrosoftGraphEmailAddress(msrest.serialization.Model):
    """emailAddress.

    :param name: The display name of the person or entity.
    :type name: str
    :param address: The email address of the person or entity.
    :type address: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        address: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEmailAddress, self).__init__(**kwargs)
        self.name = name
        self.address = address


class MicrosoftGraphEndpoint(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param capability:
    :type capability: str
    :param provider_id:
    :type provider_id: str
    :param provider_name:
    :type provider_name: str
    :param uri:
    :type uri: str
    :param provider_resource_id:
    :type provider_resource_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'capability': {'key': 'capability', 'type': 'str'},
        'provider_id': {'key': 'providerId', 'type': 'str'},
        'provider_name': {'key': 'providerName', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
        'provider_resource_id': {'key': 'providerResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        capability: Optional[str] = None,
        provider_id: Optional[str] = None,
        provider_name: Optional[str] = None,
        uri: Optional[str] = None,
        provider_resource_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEndpoint, self).__init__(id=id, deleted_date_time=deleted_date_time, **kwargs)
        self.capability = capability
        self.provider_id = provider_id
        self.provider_name = provider_name
        self.uri = uri
        self.provider_resource_id = provider_resource_id


class MicrosoftGraphEnrollmentConfigurationAssignment(MicrosoftGraphEntity):
    """Enrollment Configuration Assignment.

    :param id: Read-only.
    :type id: str
    :param target: Any object.
    :type target: object
    :param source: deviceAndAppManagementAssignmentSource. Possible values include: "direct",
     "policySets".
    :type source: str or ~users_user.models.MicrosoftGraphDeviceAndAppManagementAssignmentSource
    :param source_id: Identifier for resource used for deployment to a group.
    :type source_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'target': {'key': 'target', 'type': 'object'},
        'source': {'key': 'source', 'type': 'str'},
        'source_id': {'key': 'sourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        target: Optional[object] = None,
        source: Optional[Union[str, "MicrosoftGraphDeviceAndAppManagementAssignmentSource"]] = None,
        source_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEnrollmentConfigurationAssignment, self).__init__(id=id, **kwargs)
        self.target = target
        self.source = source
        self.source_id = source_id


class MicrosoftGraphEvent(MicrosoftGraphOutlookItem):
    """event.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param transaction_id:
    :type transaction_id: str
    :param original_start_time_zone: The start time zone that was set when the event was created. A
     value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop
     Outlook.
    :type original_start_time_zone: str
    :param original_end_time_zone: The end time zone that was set when the event was created. A
     value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop
     Outlook.
    :type original_end_time_zone: str
    :param response_status: responseStatus.
    :type response_status: ~users_user.models.MicrosoftGraphResponseStatus
    :param uid:
    :type uid: str
    :param reminder_minutes_before_start: The number of minutes before the event start time that
     the reminder alert occurs.
    :type reminder_minutes_before_start: int
    :param is_reminder_on: Set to true if an alert is set to remind the user of the event.
    :type is_reminder_on: bool
    :param has_attachments: Set to true if the event has attachments.
    :type has_attachments: bool
    :param subject: The text of the event's subject line.
    :type subject: str
    :param body: itemBody.
    :type body: ~users_user.models.MicrosoftGraphItemBody
    :param body_preview: The preview of the message associated with the event. It is in text
     format.
    :type body_preview: str
    :param importance: importance. Possible values include: "low", "normal", "high".
    :type importance: str or ~users_user.models.MicrosoftGraphImportance
    :param sensitivity: sensitivity. Possible values include: "normal", "personal", "private",
     "confidential".
    :type sensitivity: str or ~users_user.models.MicrosoftGraphSensitivity
    :param start: dateTimeTimeZone.
    :type start: ~users_user.models.MicrosoftGraphDateTimeZone
    :param original_start: The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type original_start: ~datetime.datetime
    :param end: dateTimeTimeZone.
    :type end: ~users_user.models.MicrosoftGraphDateTimeZone
    :param location: location.
    :type location: ~users_user.models.MicrosoftGraphLocation
    :param locations: The locations where the event is held or attended from. The location and
     locations properties always correspond with each other. If you update the location property,
     any prior locations in the locations collection would be removed and replaced by the new
     location value.
    :type locations: list[~users_user.models.MicrosoftGraphLocation]
    :param is_all_day: Set to true if the event lasts all day.
    :type is_all_day: bool
    :param is_cancelled: Set to true if the event has been canceled.
    :type is_cancelled: bool
    :param is_organizer: Set to true if the calendar owner (specified by the owner property of the
     calendar) is the organizer of the event (specified by the organizer property of the event).
     This also applies if a delegate organized the event on behalf of the owner.
    :type is_organizer: bool
    :param recurrence: patternedRecurrence.
    :type recurrence: ~users_user.models.MicrosoftGraphPatternedRecurrence
    :param response_requested: Set to true if the sender would like a response when the event is
     accepted or declined.
    :type response_requested: bool
    :param series_master_id: The ID for the recurring series master item, if this event is part of
     a recurring series.
    :type series_master_id: str
    :param show_as: freeBusyStatus. Possible values include: "free", "tentative", "busy", "oof",
     "workingElsewhere", "unknown".
    :type show_as: str or ~users_user.models.MicrosoftGraphFreeBusyStatus
    :param type: eventType. Possible values include: "singleInstance", "occurrence", "exception",
     "seriesMaster".
    :type type: str or ~users_user.models.MicrosoftGraphEventType
    :param attendees: The collection of attendees for the event.
    :type attendees: list[~users_user.models.MicrosoftGraphAttendee]
    :param organizer: recipient.
    :type organizer: ~users_user.models.MicrosoftGraphRecipient
    :param web_link: The URL to open the event in Outlook on the web.Outlook on the web opens the
     event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web
     prompts you to sign in.This URL can be accessed from within an iFrame.
    :type web_link: str
    :param online_meeting_url: A URL for an online meeting. The property is set only when an
     organizer specifies an event as an online meeting such as a Skype meeting. Read-only.
    :type online_meeting_url: str
    :param is_online_meeting: True if this event has online meeting information, false otherwise.
     Default is false. Optional.
    :type is_online_meeting: bool
    :param online_meeting_provider: onlineMeetingProviderType. Possible values include: "unknown",
     "skypeForBusiness", "skypeForConsumer", "teamsForBusiness".
    :type online_meeting_provider: str or
     ~users_user.models.MicrosoftGraphOnlineMeetingProviderType
    :param online_meeting: onlineMeetingInfo.
    :type online_meeting: ~users_user.models.MicrosoftGraphOnlineMeetingInfo
    :param allow_new_time_proposals:
    :type allow_new_time_proposals: bool
    :param is_draft:
    :type is_draft: bool
    :param attachments: The collection of fileAttachment and itemAttachment attachments for the
     event. Navigation property. Read-only. Nullable.
    :type attachments: list[~users_user.models.MicrosoftGraphAttachment]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the event. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~users_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the event. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~users_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param calendar: calendar.
    :type calendar: ~users_user.models.MicrosoftGraphCalendar
    :param instances: The instances of the event. Navigation property. Read-only. Nullable.
    :type instances: list[~users_user.models.MicrosoftGraphEvent]
    :param extensions: The collection of open extensions defined for the event. Read-only.
     Nullable.
    :type extensions: list[~users_user.models.MicrosoftGraphEntity]
    """

    _validation = {
        'reminder_minutes_before_start': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'transaction_id': {'key': 'transactionId', 'type': 'str'},
        'original_start_time_zone': {'key': 'originalStartTimeZone', 'type': 'str'},
        'original_end_time_zone': {'key': 'originalEndTimeZone', 'type': 'str'},
        'response_status': {'key': 'responseStatus', 'type': 'MicrosoftGraphResponseStatus'},
        'uid': {'key': 'uid', 'type': 'str'},
        'reminder_minutes_before_start': {'key': 'reminderMinutesBeforeStart', 'type': 'int'},
        'is_reminder_on': {'key': 'isReminderOn', 'type': 'bool'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'subject': {'key': 'subject', 'type': 'str'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'body_preview': {'key': 'bodyPreview', 'type': 'str'},
        'importance': {'key': 'importance', 'type': 'str'},
        'sensitivity': {'key': 'sensitivity', 'type': 'str'},
        'start': {'key': 'start', 'type': 'MicrosoftGraphDateTimeZone'},
        'original_start': {'key': 'originalStart', 'type': 'iso-8601'},
        'end': {'key': 'end', 'type': 'MicrosoftGraphDateTimeZone'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphLocation'},
        'locations': {'key': 'locations', 'type': '[MicrosoftGraphLocation]'},
        'is_all_day': {'key': 'isAllDay', 'type': 'bool'},
        'is_cancelled': {'key': 'isCancelled', 'type': 'bool'},
        'is_organizer': {'key': 'isOrganizer', 'type': 'bool'},
        'recurrence': {'key': 'recurrence', 'type': 'MicrosoftGraphPatternedRecurrence'},
        'response_requested': {'key': 'responseRequested', 'type': 'bool'},
        'series_master_id': {'key': 'seriesMasterId', 'type': 'str'},
        'show_as': {'key': 'showAs', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'attendees': {'key': 'attendees', 'type': '[MicrosoftGraphAttendee]'},
        'organizer': {'key': 'organizer', 'type': 'MicrosoftGraphRecipient'},
        'web_link': {'key': 'webLink', 'type': 'str'},
        'online_meeting_url': {'key': 'onlineMeetingUrl', 'type': 'str'},
        'is_online_meeting': {'key': 'isOnlineMeeting', 'type': 'bool'},
        'online_meeting_provider': {'key': 'onlineMeetingProvider', 'type': 'str'},
        'online_meeting': {'key': 'onlineMeeting', 'type': 'MicrosoftGraphOnlineMeetingInfo'},
        'allow_new_time_proposals': {'key': 'allowNewTimeProposals', 'type': 'bool'},
        'is_draft': {'key': 'isDraft', 'type': 'bool'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'calendar': {'key': 'calendar', 'type': 'MicrosoftGraphCalendar'},
        'instances': {'key': 'instances', 'type': '[MicrosoftGraphEvent]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphEntity]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        change_key: Optional[str] = None,
        categories: Optional[List[str]] = None,
        transaction_id: Optional[str] = None,
        original_start_time_zone: Optional[str] = None,
        original_end_time_zone: Optional[str] = None,
        response_status: Optional["MicrosoftGraphResponseStatus"] = None,
        uid: Optional[str] = None,
        reminder_minutes_before_start: Optional[int] = None,
        is_reminder_on: Optional[bool] = None,
        has_attachments: Optional[bool] = None,
        subject: Optional[str] = None,
        body: Optional["MicrosoftGraphItemBody"] = None,
        body_preview: Optional[str] = None,
        importance: Optional[Union[str, "MicrosoftGraphImportance"]] = None,
        sensitivity: Optional[Union[str, "MicrosoftGraphSensitivity"]] = None,
        start: Optional["MicrosoftGraphDateTimeZone"] = None,
        original_start: Optional[datetime.datetime] = None,
        end: Optional["MicrosoftGraphDateTimeZone"] = None,
        location: Optional["MicrosoftGraphLocation"] = None,
        locations: Optional[List["MicrosoftGraphLocation"]] = None,
        is_all_day: Optional[bool] = None,
        is_cancelled: Optional[bool] = None,
        is_organizer: Optional[bool] = None,
        recurrence: Optional["MicrosoftGraphPatternedRecurrence"] = None,
        response_requested: Optional[bool] = None,
        series_master_id: Optional[str] = None,
        show_as: Optional[Union[str, "MicrosoftGraphFreeBusyStatus"]] = None,
        type: Optional[Union[str, "MicrosoftGraphEventType"]] = None,
        attendees: Optional[List["MicrosoftGraphAttendee"]] = None,
        organizer: Optional["MicrosoftGraphRecipient"] = None,
        web_link: Optional[str] = None,
        online_meeting_url: Optional[str] = None,
        is_online_meeting: Optional[bool] = None,
        online_meeting_provider: Optional[Union[str, "MicrosoftGraphOnlineMeetingProviderType"]] = None,
        online_meeting: Optional["MicrosoftGraphOnlineMeetingInfo"] = None,
        allow_new_time_proposals: Optional[bool] = None,
        is_draft: Optional[bool] = None,
        attachments: Optional[List["MicrosoftGraphAttachment"]] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        calendar: Optional["MicrosoftGraphCalendar"] = None,
        instances: Optional[List["MicrosoftGraphEvent"]] = None,
        extensions: Optional[List["MicrosoftGraphEntity"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphEvent, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, change_key=change_key, categories=categories, **kwargs)
        self.transaction_id = transaction_id
        self.original_start_time_zone = original_start_time_zone
        self.original_end_time_zone = original_end_time_zone
        self.response_status = response_status
        self.uid = uid
        self.reminder_minutes_before_start = reminder_minutes_before_start
        self.is_reminder_on = is_reminder_on
        self.has_attachments = has_attachments
        self.subject = subject
        self.body = body
        self.body_preview = body_preview
        self.importance = importance
        self.sensitivity = sensitivity
        self.start = start
        self.original_start = original_start
        self.end = end
        self.location = location
        self.locations = locations
        self.is_all_day = is_all_day
        self.is_cancelled = is_cancelled
        self.is_organizer = is_organizer
        self.recurrence = recurrence
        self.response_requested = response_requested
        self.series_master_id = series_master_id
        self.show_as = show_as
        self.type = type
        self.attendees = attendees
        self.organizer = organizer
        self.web_link = web_link
        self.online_meeting_url = online_meeting_url
        self.is_online_meeting = is_online_meeting
        self.online_meeting_provider = online_meeting_provider
        self.online_meeting = online_meeting
        self.allow_new_time_proposals = allow_new_time_proposals
        self.is_draft = is_draft
        self.attachments = attachments
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties
        self.calendar = calendar
        self.instances = instances
        self.extensions = extensions


class MicrosoftGraphExtension(MicrosoftGraphEntity):
    """extension.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphExtension, self).__init__(id=id, **kwargs)


class MicrosoftGraphExternalLink(msrest.serialization.Model):
    """externalLink.

    :param href: The url of the link.
    :type href: str
    """

    _attribute_map = {
        'href': {'key': 'href', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        href: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphExternalLink, self).__init__(**kwargs)
        self.href = href


class MicrosoftGraphFieldValueSet(MicrosoftGraphEntity):
    """fieldValueSet.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphFieldValueSet, self).__init__(id=id, **kwargs)


class MicrosoftGraphFile(msrest.serialization.Model):
    """file.

    :param hashes: hashes.
    :type hashes: ~users_user.models.MicrosoftGraphHashes
    :param mime_type: The MIME type for the file. This is determined by logic on the server and
     might not be the value provided when the file was uploaded. Read-only.
    :type mime_type: str
    :param processing_metadata:
    :type processing_metadata: bool
    """

    _attribute_map = {
        'hashes': {'key': 'hashes', 'type': 'MicrosoftGraphHashes'},
        'mime_type': {'key': 'mimeType', 'type': 'str'},
        'processing_metadata': {'key': 'processingMetadata', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        hashes: Optional["MicrosoftGraphHashes"] = None,
        mime_type: Optional[str] = None,
        processing_metadata: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphFile, self).__init__(**kwargs)
        self.hashes = hashes
        self.mime_type = mime_type
        self.processing_metadata = processing_metadata


class MicrosoftGraphFileSystemInfo(msrest.serialization.Model):
    """fileSystemInfo.

    :param created_date_time: The UTC date and time the file was created on a client.
    :type created_date_time: ~datetime.datetime
    :param last_accessed_date_time: The UTC date and time the file was last accessed. Available for
     the recent file list only.
    :type last_accessed_date_time: ~datetime.datetime
    :param last_modified_date_time: The UTC date and time the file was last modified on a client.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_accessed_date_time': {'key': 'lastAccessedDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_date_time: Optional[datetime.datetime] = None,
        last_accessed_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphFileSystemInfo, self).__init__(**kwargs)
        self.created_date_time = created_date_time
        self.last_accessed_date_time = last_accessed_date_time
        self.last_modified_date_time = last_modified_date_time


class MicrosoftGraphFolder(msrest.serialization.Model):
    """folder.

    :param child_count: Number of children contained immediately within this container.
    :type child_count: int
    :param view: folderView.
    :type view: ~users_user.models.MicrosoftGraphFolderView
    """

    _validation = {
        'child_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'child_count': {'key': 'childCount', 'type': 'int'},
        'view': {'key': 'view', 'type': 'MicrosoftGraphFolderView'},
    }

    def __init__(
        self,
        *,
        child_count: Optional[int] = None,
        view: Optional["MicrosoftGraphFolderView"] = None,
        **kwargs
    ):
        super(MicrosoftGraphFolder, self).__init__(**kwargs)
        self.child_count = child_count
        self.view = view


class MicrosoftGraphFolderView(msrest.serialization.Model):
    """folderView.

    :param sort_by: The method by which the folder should be sorted.
    :type sort_by: str
    :param sort_order: If true, indicates that items should be sorted in descending order.
     Otherwise, items should be sorted ascending.
    :type sort_order: str
    :param view_type: The type of view that should be used to represent the folder.
    :type view_type: str
    """

    _attribute_map = {
        'sort_by': {'key': 'sortBy', 'type': 'str'},
        'sort_order': {'key': 'sortOrder', 'type': 'str'},
        'view_type': {'key': 'viewType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sort_by: Optional[str] = None,
        sort_order: Optional[str] = None,
        view_type: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphFolderView, self).__init__(**kwargs)
        self.sort_by = sort_by
        self.sort_order = sort_order
        self.view_type = view_type


class MicrosoftGraphFollowupFlag(msrest.serialization.Model):
    """followupFlag.

    :param completed_date_time: dateTimeTimeZone.
    :type completed_date_time: ~users_user.models.MicrosoftGraphDateTimeZone
    :param due_date_time: dateTimeTimeZone.
    :type due_date_time: ~users_user.models.MicrosoftGraphDateTimeZone
    :param start_date_time: dateTimeTimeZone.
    :type start_date_time: ~users_user.models.MicrosoftGraphDateTimeZone
    :param flag_status: followupFlagStatus. Possible values include: "notFlagged", "complete",
     "flagged".
    :type flag_status: str or ~users_user.models.MicrosoftGraphFollowupFlagStatus
    """

    _attribute_map = {
        'completed_date_time': {'key': 'completedDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'start_date_time': {'key': 'startDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'flag_status': {'key': 'flagStatus', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        completed_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        due_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        start_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        flag_status: Optional[Union[str, "MicrosoftGraphFollowupFlagStatus"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphFollowupFlag, self).__init__(**kwargs)
        self.completed_date_time = completed_date_time
        self.due_date_time = due_date_time
        self.start_date_time = start_date_time
        self.flag_status = flag_status


class MicrosoftGraphGeoCoordinates(msrest.serialization.Model):
    """geoCoordinates.

    :param altitude: Optional. The altitude (height), in feet,  above sea level for the item. Read-
     only.
    :type altitude: float
    :param latitude: Optional. The latitude, in decimal, for the item. Read-only.
    :type latitude: float
    :param longitude: Optional. The longitude, in decimal, for the item. Read-only.
    :type longitude: float
    """

    _attribute_map = {
        'altitude': {'key': 'altitude', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        altitude: Optional[float] = None,
        latitude: Optional[float] = None,
        longitude: Optional[float] = None,
        **kwargs
    ):
        super(MicrosoftGraphGeoCoordinates, self).__init__(**kwargs)
        self.altitude = altitude
        self.latitude = latitude
        self.longitude = longitude


class MicrosoftGraphGroup(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param assigned_labels:
    :type assigned_labels: list[~users_user.models.MicrosoftGraphAssignedLabel]
    :param assigned_licenses: The licenses that are assigned to the group. Returned only on
     $select. Read-only.
    :type assigned_licenses: list[~users_user.models.MicrosoftGraphAssignedLicense]
    :param classification: Describes a classification for the group (such as low, medium or high
     business impact). Valid values for this property are defined by creating a ClassificationList
     setting value, based on the template definition.Returned by default.
    :type classification: str
    :param created_by_app_id:
    :type created_by_app_id: str
    :param created_date_time: Timestamp of when the group was created. The value cannot be modified
     and is automatically populated when the group is created. The Timestamp type represents date
     and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC
     on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by default. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: An optional description for the group. Returned by default.
    :type description: str
    :param display_name: The display name for the group. This property is required when a group is
     created and cannot be cleared during updates. Returned by default. Supports $filter and
     $orderby.
    :type display_name: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param group_types: Specifies the group type and its membership.  If the collection contains
     Unified then the group is an Office 365 group; otherwise it's a security group.  If the
     collection includes DynamicMembership, the group has dynamic membership; otherwise, membership
     is static.  Returned by default. Supports $filter.
    :type group_types: list[str]
    :param has_members_with_license_errors: Indicates whether there are members in this group that
     have license errors from its group-based license assignment. This property is never returned on
     a GET operation. You can use it as a $filter argument to get groups that have members with
     license errors (that is, filter for this property being true). See an example.
    :type has_members_with_license_errors: bool
    :param is_assignable_to_role:
    :type is_assignable_to_role: bool
    :param license_processing_state: licenseProcessingState.
    :type license_processing_state: ~users_user.models.MicrosoftGraphLicenseProcessingState
    :param mail: The SMTP address for the group, for example,
     'serviceadmins@contoso.onmicrosoft.com'. Returned by default. Read-only. Supports $filter.
    :type mail: str
    :param mail_enabled: Specifies whether the group is mail-enabled. Returned by default.
    :type mail_enabled: bool
    :param mail_nickname: The mail alias for the group, unique in the organization. This property
     must be specified when a group is created. Returned by default. Supports $filter.
    :type mail_nickname: str
    :param mdm_app_id:
    :type mdm_app_id: str
    :param membership_rule:
    :type membership_rule: str
    :param membership_rule_processing_state:
    :type membership_rule_processing_state: str
    :param on_premises_domain_name:
    :type on_premises_domain_name: str
    :param on_premises_last_sync_date_time: Indicates the last time at which the group was synced
     with the on-premises directory.The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'. Returned by default. Read-only. Supports $filter.
    :type on_premises_last_sync_date_time: ~datetime.datetime
    :param on_premises_net_bios_name:
    :type on_premises_net_bios_name: str
    :param on_premises_provisioning_errors: Errors when using Microsoft synchronization product
     during provisioning. Returned by default.
    :type on_premises_provisioning_errors:
     list[~users_user.models.MicrosoftGraphOnPremisesProvisioningError]
    :param on_premises_sam_account_name:
    :type on_premises_sam_account_name: str
    :param on_premises_security_identifier: Contains the on-premises security identifier (SID) for
     the group that was synchronized from on-premises to the cloud. Returned by default. Read-only.
    :type on_premises_security_identifier: str
    :param on_premises_sync_enabled: true if this group is synced from an on-premises directory;
     false if this group was originally synced from an on-premises directory but is no longer
     synced; null if this object has never been synced from an on-premises directory (default).
     Returned by default. Read-only. Supports $filter.
    :type on_premises_sync_enabled: bool
    :param preferred_data_location: The preferred data location for the group. For more
     information, see  OneDrive Online Multi-Geo. Returned by default.
    :type preferred_data_location: str
    :param preferred_language:
    :type preferred_language: str
    :param proxy_addresses: Email addresses for the group that direct to the same group mailbox.
     For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. The any operator is
     required to filter expressions on multi-valued properties. Returned by default. Read-only. Not
     nullable. Supports $filter.
    :type proxy_addresses: list[str]
    :param renewed_date_time: Timestamp of when the group was last renewed. This cannot be modified
     directly and is only updated via the renew service action. The Timestamp type represents date
     and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC
     on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by default. Read-only.
    :type renewed_date_time: ~datetime.datetime
    :param resource_behavior_options:
    :type resource_behavior_options: list[str]
    :param resource_provisioning_options:
    :type resource_provisioning_options: list[str]
    :param security_enabled: Specifies whether the group is a security group. Returned by default.
     Supports $filter.
    :type security_enabled: bool
    :param security_identifier: Security identifier of the group, used in Windows scenarios.
     Returned by default.
    :type security_identifier: str
    :param theme:
    :type theme: str
    :param visibility: Specifies the visibility of an Office 365 group. Possible values are:
     Private, Public, or Hiddenmembership; blank values are treated as public.  See group visibility
     options to learn more.Visibility can be set only when a group is created; it is not
     editable.Visibility is supported only for unified groups; it is not supported for security
     groups. Returned by default.
    :type visibility: str
    :param access_type: groupAccessType. Possible values include: "none", "private", "secret",
     "public".
    :type access_type: str or ~users_user.models.MicrosoftGraphGroupAccessType
    :param allow_external_senders: Indicates if people external to the organization can send
     messages to the group. Default value is false. Returned only on $select.
    :type allow_external_senders: bool
    :param auto_subscribe_new_members: Indicates if new members added to the group will be auto-
     subscribed to receive email notifications. You can set this property in a PATCH request for the
     group; do not set it in the initial POST request that creates the group. Default value is
     false. Returned only on $select.
    :type auto_subscribe_new_members: bool
    :param is_favorite:
    :type is_favorite: bool
    :param is_subscribed_by_mail: Indicates whether the signed-in user is subscribed to receive
     email conversations. Default value is true. Returned only on $select.
    :type is_subscribed_by_mail: bool
    :param unseen_count: Count of conversations that have received new posts since the signed-in
     user last visited the group. Returned only on $select.
    :type unseen_count: int
    :param unseen_conversations_count:
    :type unseen_conversations_count: int
    :param unseen_messages_count:
    :type unseen_messages_count: int
    :param hide_from_outlook_clients: True if the group is not displayed in Outlook clients, such
     as Outlook for Windows and Outlook on the web; otherwise, false. Default value is false.
     Returned only on $select.
    :type hide_from_outlook_clients: bool
    :param hide_from_address_lists: True if the group is not displayed in certain parts of the
     Outlook UI: the Address Book, address lists for selecting message recipients, and the Browse
     Groups dialog for searching groups; otherwise, false. Default value is false. Returned only on
     $select.
    :type hide_from_address_lists: bool
    :param is_archived:
    :type is_archived: bool
    :param app_role_assignments:
    :type app_role_assignments: list[~users_user.models.MicrosoftGraphAppRoleAssignment]
    :param members: Users and groups that are members of this group. HTTP Methods: GET (supported
     for all groups), POST (supported for Office 365 groups, security groups and mail-enabled
     security groups), DELETE (supported for Office 365 groups and security groups) Nullable.
    :type members: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param members_with_license_errors: A list of group members with license errors from this
     group-based license assignment. Read-only.
    :type members_with_license_errors: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param member_of: Groups that this group is a member of. HTTP Methods: GET (supported for all
     groups). Read-only. Nullable.
    :type member_of: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param transitive_members:
    :type transitive_members: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param transitive_member_of:
    :type transitive_member_of: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param created_on_behalf_of: Represents an Azure Active Directory object. The directoryObject
     type is the base type for many other directory entity types.
    :type created_on_behalf_of: ~users_user.models.MicrosoftGraphDirectoryObject
    :param owners: The owners of the group. The owners are a set of non-admin users who are allowed
     to modify this object. Limited to 100 owners. HTTP Methods: GET (supported for all groups),
     POST (supported for Office 365 groups, security groups and mail-enabled security groups),
     DELETE (supported for Office 365 groups and security groups). Nullable.
    :type owners: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param settings: Read-only. Nullable.
    :type settings: list[~users_user.models.MicrosoftGraphDirectorySetting]
    :param endpoints:
    :type endpoints: list[~users_user.models.MicrosoftGraphEndpoint]
    :param permission_grants:
    :type permission_grants: list[~users_user.models.MicrosoftGraphResourceSpecificPermissionGrant]
    :param conversations: The group's conversations.
    :type conversations: list[~users_user.models.MicrosoftGraphConversation]
    :param photos: The profile photos owned by the group. Read-only. Nullable.
    :type photos: list[~users_user.models.MicrosoftGraphProfilePhoto]
    :param accepted_senders: The list of users or groups that are allowed to create post's or
     calendar events in this group. If this list is non-empty then only users or groups listed here
     are allowed to post.
    :type accepted_senders: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param rejected_senders: The list of users or groups that are not allowed to create posts or
     calendar events in this group. Nullable.
    :type rejected_senders: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param threads: The group's conversation threads. Nullable.
    :type threads: list[~users_user.models.MicrosoftGraphConversationThread]
    :param calendar: calendar.
    :type calendar: ~users_user.models.MicrosoftGraphCalendar
    :param calendar_view: The calendar view for the calendar. Read-only.
    :type calendar_view: list[~users_user.models.MicrosoftGraphEvent]
    :param events: The group's calendar events.
    :type events: list[~users_user.models.MicrosoftGraphEvent]
    :param photo: profilePhoto.
    :type photo: ~users_user.models.MicrosoftGraphProfilePhoto
    :param drive: drive.
    :type drive: ~users_user.models.MicrosoftGraphDrive
    :param drives: The group's drives. Read-only.
    :type drives: list[~users_user.models.MicrosoftGraphDrive]
    :param sites: The list of SharePoint sites in this group. Access the default site with
     /sites/root.
    :type sites: list[~users_user.models.MicrosoftGraphSite]
    :param extensions: The collection of open extensions defined for the group. Read-only.
     Nullable.
    :type extensions: list[~users_user.models.MicrosoftGraphEntity]
    :param group_lifecycle_policies: The collection of lifecycle policies for this group. Read-
     only. Nullable.
    :type group_lifecycle_policies: list[~users_user.models.MicrosoftGraphGroupLifecyclePolicy]
    :param planner: plannerGroup.
    :type planner: ~users_user.models.MicrosoftGraphPlannerGroup
    :param onenote: onenote.
    :type onenote: ~users_user.models.MicrosoftGraphOnenote
    :param team: team.
    :type team: ~users_user.models.MicrosoftGraphTeam
    """

    _validation = {
        'unseen_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'unseen_conversations_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'unseen_messages_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'assigned_labels': {'key': 'assignedLabels', 'type': '[MicrosoftGraphAssignedLabel]'},
        'assigned_licenses': {'key': 'assignedLicenses', 'type': '[MicrosoftGraphAssignedLicense]'},
        'classification': {'key': 'classification', 'type': 'str'},
        'created_by_app_id': {'key': 'createdByAppId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'group_types': {'key': 'groupTypes', 'type': '[str]'},
        'has_members_with_license_errors': {'key': 'hasMembersWithLicenseErrors', 'type': 'bool'},
        'is_assignable_to_role': {'key': 'isAssignableToRole', 'type': 'bool'},
        'license_processing_state': {'key': 'licenseProcessingState', 'type': 'MicrosoftGraphLicenseProcessingState'},
        'mail': {'key': 'mail', 'type': 'str'},
        'mail_enabled': {'key': 'mailEnabled', 'type': 'bool'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'mdm_app_id': {'key': 'mdmAppId', 'type': 'str'},
        'membership_rule': {'key': 'membershipRule', 'type': 'str'},
        'membership_rule_processing_state': {'key': 'membershipRuleProcessingState', 'type': 'str'},
        'on_premises_domain_name': {'key': 'onPremisesDomainName', 'type': 'str'},
        'on_premises_last_sync_date_time': {'key': 'onPremisesLastSyncDateTime', 'type': 'iso-8601'},
        'on_premises_net_bios_name': {'key': 'onPremisesNetBiosName', 'type': 'str'},
        'on_premises_provisioning_errors': {'key': 'onPremisesProvisioningErrors', 'type': '[MicrosoftGraphOnPremisesProvisioningError]'},
        'on_premises_sam_account_name': {'key': 'onPremisesSamAccountName', 'type': 'str'},
        'on_premises_security_identifier': {'key': 'onPremisesSecurityIdentifier', 'type': 'str'},
        'on_premises_sync_enabled': {'key': 'onPremisesSyncEnabled', 'type': 'bool'},
        'preferred_data_location': {'key': 'preferredDataLocation', 'type': 'str'},
        'preferred_language': {'key': 'preferredLanguage', 'type': 'str'},
        'proxy_addresses': {'key': 'proxyAddresses', 'type': '[str]'},
        'renewed_date_time': {'key': 'renewedDateTime', 'type': 'iso-8601'},
        'resource_behavior_options': {'key': 'resourceBehaviorOptions', 'type': '[str]'},
        'resource_provisioning_options': {'key': 'resourceProvisioningOptions', 'type': '[str]'},
        'security_enabled': {'key': 'securityEnabled', 'type': 'bool'},
        'security_identifier': {'key': 'securityIdentifier', 'type': 'str'},
        'theme': {'key': 'theme', 'type': 'str'},
        'visibility': {'key': 'visibility', 'type': 'str'},
        'access_type': {'key': 'accessType', 'type': 'str'},
        'allow_external_senders': {'key': 'allowExternalSenders', 'type': 'bool'},
        'auto_subscribe_new_members': {'key': 'autoSubscribeNewMembers', 'type': 'bool'},
        'is_favorite': {'key': 'isFavorite', 'type': 'bool'},
        'is_subscribed_by_mail': {'key': 'isSubscribedByMail', 'type': 'bool'},
        'unseen_count': {'key': 'unseenCount', 'type': 'int'},
        'unseen_conversations_count': {'key': 'unseenConversationsCount', 'type': 'int'},
        'unseen_messages_count': {'key': 'unseenMessagesCount', 'type': 'int'},
        'hide_from_outlook_clients': {'key': 'hideFromOutlookClients', 'type': 'bool'},
        'hide_from_address_lists': {'key': 'hideFromAddressLists', 'type': 'bool'},
        'is_archived': {'key': 'isArchived', 'type': 'bool'},
        'app_role_assignments': {'key': 'appRoleAssignments', 'type': '[MicrosoftGraphAppRoleAssignment]'},
        'members': {'key': 'members', 'type': '[MicrosoftGraphDirectoryObject]'},
        'members_with_license_errors': {'key': 'membersWithLicenseErrors', 'type': '[MicrosoftGraphDirectoryObject]'},
        'member_of': {'key': 'memberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'transitive_members': {'key': 'transitiveMembers', 'type': '[MicrosoftGraphDirectoryObject]'},
        'transitive_member_of': {'key': 'transitiveMemberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'created_on_behalf_of': {'key': 'createdOnBehalfOf', 'type': 'MicrosoftGraphDirectoryObject'},
        'owners': {'key': 'owners', 'type': '[MicrosoftGraphDirectoryObject]'},
        'settings': {'key': 'settings', 'type': '[MicrosoftGraphDirectorySetting]'},
        'endpoints': {'key': 'endpoints', 'type': '[MicrosoftGraphEndpoint]'},
        'permission_grants': {'key': 'permissionGrants', 'type': '[MicrosoftGraphResourceSpecificPermissionGrant]'},
        'conversations': {'key': 'conversations', 'type': '[MicrosoftGraphConversation]'},
        'photos': {'key': 'photos', 'type': '[MicrosoftGraphProfilePhoto]'},
        'accepted_senders': {'key': 'acceptedSenders', 'type': '[MicrosoftGraphDirectoryObject]'},
        'rejected_senders': {'key': 'rejectedSenders', 'type': '[MicrosoftGraphDirectoryObject]'},
        'threads': {'key': 'threads', 'type': '[MicrosoftGraphConversationThread]'},
        'calendar': {'key': 'calendar', 'type': 'MicrosoftGraphCalendar'},
        'calendar_view': {'key': 'calendarView', 'type': '[MicrosoftGraphEvent]'},
        'events': {'key': 'events', 'type': '[MicrosoftGraphEvent]'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphProfilePhoto'},
        'drive': {'key': 'drive', 'type': 'MicrosoftGraphDrive'},
        'drives': {'key': 'drives', 'type': '[MicrosoftGraphDrive]'},
        'sites': {'key': 'sites', 'type': '[MicrosoftGraphSite]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphEntity]'},
        'group_lifecycle_policies': {'key': 'groupLifecyclePolicies', 'type': '[MicrosoftGraphGroupLifecyclePolicy]'},
        'planner': {'key': 'planner', 'type': 'MicrosoftGraphPlannerGroup'},
        'onenote': {'key': 'onenote', 'type': 'MicrosoftGraphOnenote'},
        'team': {'key': 'team', 'type': 'MicrosoftGraphTeam'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        assigned_labels: Optional[List["MicrosoftGraphAssignedLabel"]] = None,
        assigned_licenses: Optional[List["MicrosoftGraphAssignedLicense"]] = None,
        classification: Optional[str] = None,
        created_by_app_id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        group_types: Optional[List[str]] = None,
        has_members_with_license_errors: Optional[bool] = None,
        is_assignable_to_role: Optional[bool] = None,
        license_processing_state: Optional["MicrosoftGraphLicenseProcessingState"] = None,
        mail: Optional[str] = None,
        mail_enabled: Optional[bool] = None,
        mail_nickname: Optional[str] = None,
        mdm_app_id: Optional[str] = None,
        membership_rule: Optional[str] = None,
        membership_rule_processing_state: Optional[str] = None,
        on_premises_domain_name: Optional[str] = None,
        on_premises_last_sync_date_time: Optional[datetime.datetime] = None,
        on_premises_net_bios_name: Optional[str] = None,
        on_premises_provisioning_errors: Optional[List["MicrosoftGraphOnPremisesProvisioningError"]] = None,
        on_premises_sam_account_name: Optional[str] = None,
        on_premises_security_identifier: Optional[str] = None,
        on_premises_sync_enabled: Optional[bool] = None,
        preferred_data_location: Optional[str] = None,
        preferred_language: Optional[str] = None,
        proxy_addresses: Optional[List[str]] = None,
        renewed_date_time: Optional[datetime.datetime] = None,
        resource_behavior_options: Optional[List[str]] = None,
        resource_provisioning_options: Optional[List[str]] = None,
        security_enabled: Optional[bool] = None,
        security_identifier: Optional[str] = None,
        theme: Optional[str] = None,
        visibility: Optional[str] = None,
        access_type: Optional[Union[str, "MicrosoftGraphGroupAccessType"]] = None,
        allow_external_senders: Optional[bool] = None,
        auto_subscribe_new_members: Optional[bool] = None,
        is_favorite: Optional[bool] = None,
        is_subscribed_by_mail: Optional[bool] = None,
        unseen_count: Optional[int] = None,
        unseen_conversations_count: Optional[int] = None,
        unseen_messages_count: Optional[int] = None,
        hide_from_outlook_clients: Optional[bool] = None,
        hide_from_address_lists: Optional[bool] = None,
        is_archived: Optional[bool] = None,
        app_role_assignments: Optional[List["MicrosoftGraphAppRoleAssignment"]] = None,
        members: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        members_with_license_errors: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        member_of: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        transitive_members: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        transitive_member_of: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        created_on_behalf_of: Optional["MicrosoftGraphDirectoryObject"] = None,
        owners: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        settings: Optional[List["MicrosoftGraphDirectorySetting"]] = None,
        endpoints: Optional[List["MicrosoftGraphEndpoint"]] = None,
        permission_grants: Optional[List["MicrosoftGraphResourceSpecificPermissionGrant"]] = None,
        conversations: Optional[List["MicrosoftGraphConversation"]] = None,
        photos: Optional[List["MicrosoftGraphProfilePhoto"]] = None,
        accepted_senders: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        rejected_senders: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        threads: Optional[List["MicrosoftGraphConversationThread"]] = None,
        calendar: Optional["MicrosoftGraphCalendar"] = None,
        calendar_view: Optional[List["MicrosoftGraphEvent"]] = None,
        events: Optional[List["MicrosoftGraphEvent"]] = None,
        photo: Optional["MicrosoftGraphProfilePhoto"] = None,
        drive: Optional["MicrosoftGraphDrive"] = None,
        drives: Optional[List["MicrosoftGraphDrive"]] = None,
        sites: Optional[List["MicrosoftGraphSite"]] = None,
        extensions: Optional[List["MicrosoftGraphEntity"]] = None,
        group_lifecycle_policies: Optional[List["MicrosoftGraphGroupLifecyclePolicy"]] = None,
        planner: Optional["MicrosoftGraphPlannerGroup"] = None,
        onenote: Optional["MicrosoftGraphOnenote"] = None,
        team: Optional["MicrosoftGraphTeam"] = None,
        **kwargs
    ):
        super(MicrosoftGraphGroup, self).__init__(id=id, deleted_date_time=deleted_date_time, **kwargs)
        self.assigned_labels = assigned_labels
        self.assigned_licenses = assigned_licenses
        self.classification = classification
        self.created_by_app_id = created_by_app_id
        self.created_date_time = created_date_time
        self.description = description
        self.display_name = display_name
        self.expiration_date_time = expiration_date_time
        self.group_types = group_types
        self.has_members_with_license_errors = has_members_with_license_errors
        self.is_assignable_to_role = is_assignable_to_role
        self.license_processing_state = license_processing_state
        self.mail = mail
        self.mail_enabled = mail_enabled
        self.mail_nickname = mail_nickname
        self.mdm_app_id = mdm_app_id
        self.membership_rule = membership_rule
        self.membership_rule_processing_state = membership_rule_processing_state
        self.on_premises_domain_name = on_premises_domain_name
        self.on_premises_last_sync_date_time = on_premises_last_sync_date_time
        self.on_premises_net_bios_name = on_premises_net_bios_name
        self.on_premises_provisioning_errors = on_premises_provisioning_errors
        self.on_premises_sam_account_name = on_premises_sam_account_name
        self.on_premises_security_identifier = on_premises_security_identifier
        self.on_premises_sync_enabled = on_premises_sync_enabled
        self.preferred_data_location = preferred_data_location
        self.preferred_language = preferred_language
        self.proxy_addresses = proxy_addresses
        self.renewed_date_time = renewed_date_time
        self.resource_behavior_options = resource_behavior_options
        self.resource_provisioning_options = resource_provisioning_options
        self.security_enabled = security_enabled
        self.security_identifier = security_identifier
        self.theme = theme
        self.visibility = visibility
        self.access_type = access_type
        self.allow_external_senders = allow_external_senders
        self.auto_subscribe_new_members = auto_subscribe_new_members
        self.is_favorite = is_favorite
        self.is_subscribed_by_mail = is_subscribed_by_mail
        self.unseen_count = unseen_count
        self.unseen_conversations_count = unseen_conversations_count
        self.unseen_messages_count = unseen_messages_count
        self.hide_from_outlook_clients = hide_from_outlook_clients
        self.hide_from_address_lists = hide_from_address_lists
        self.is_archived = is_archived
        self.app_role_assignments = app_role_assignments
        self.members = members
        self.members_with_license_errors = members_with_license_errors
        self.member_of = member_of
        self.transitive_members = transitive_members
        self.transitive_member_of = transitive_member_of
        self.created_on_behalf_of = created_on_behalf_of
        self.owners = owners
        self.settings = settings
        self.endpoints = endpoints
        self.permission_grants = permission_grants
        self.conversations = conversations
        self.photos = photos
        self.accepted_senders = accepted_senders
        self.rejected_senders = rejected_senders
        self.threads = threads
        self.calendar = calendar
        self.calendar_view = calendar_view
        self.events = events
        self.photo = photo
        self.drive = drive
        self.drives = drives
        self.sites = sites
        self.extensions = extensions
        self.group_lifecycle_policies = group_lifecycle_policies
        self.planner = planner
        self.onenote = onenote
        self.team = team


class MicrosoftGraphGroupLifecyclePolicy(MicrosoftGraphEntity):
    """groupLifecyclePolicy.

    :param id: Read-only.
    :type id: str
    :param group_lifetime_in_days: Number of days before a group expires and needs to be renewed.
     Once renewed, the group expiration is extended by the number of days defined.
    :type group_lifetime_in_days: int
    :param managed_group_types: The group type for which the expiration policy applies. Possible
     values are All, Selected or None.
    :type managed_group_types: str
    :param alternate_notification_emails: List of email address to send notifications for groups
     without owners. Multiple email address can be defined by separating email address with a
     semicolon.
    :type alternate_notification_emails: str
    """

    _validation = {
        'group_lifetime_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'group_lifetime_in_days': {'key': 'groupLifetimeInDays', 'type': 'int'},
        'managed_group_types': {'key': 'managedGroupTypes', 'type': 'str'},
        'alternate_notification_emails': {'key': 'alternateNotificationEmails', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        group_lifetime_in_days: Optional[int] = None,
        managed_group_types: Optional[str] = None,
        alternate_notification_emails: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphGroupLifecyclePolicy, self).__init__(id=id, **kwargs)
        self.group_lifetime_in_days = group_lifetime_in_days
        self.managed_group_types = managed_group_types
        self.alternate_notification_emails = alternate_notification_emails


class MicrosoftGraphHardwareInformation(msrest.serialization.Model):
    """hardwareInformation.

    :param serial_number: Serial number.
    :type serial_number: str
    :param total_storage_space: Total storage space of the device.
    :type total_storage_space: long
    :param free_storage_space: Free storage space of the device.
    :type free_storage_space: long
    :param imei: IMEI.
    :type imei: str
    :param meid: MEID.
    :type meid: str
    :param manufacturer: Manufacturer of the device.
    :type manufacturer: str
    :param model: Model of the device.
    :type model: str
    :param phone_number: Phone number of the device.
    :type phone_number: str
    :param subscriber_carrier: Subscriber carrier of the device.
    :type subscriber_carrier: str
    :param cellular_technology: Cellular technology of the device.
    :type cellular_technology: str
    :param wifi_mac: WiFi MAC address of the device.
    :type wifi_mac: str
    :param operating_system_language: Operating system language of the device.
    :type operating_system_language: str
    :param is_supervised: Supervised mode of the device.
    :type is_supervised: bool
    :param is_encrypted: Encryption status of the device.
    :type is_encrypted: bool
    :param is_shared_device: Shared iPad.
    :type is_shared_device: bool
    :param shared_device_cached_users: All users on the shared Apple device.
    :type shared_device_cached_users: list[~users_user.models.MicrosoftGraphSharedAppleDeviceUser]
    :param tpm_specification_version: String that specifies the specification version.
    :type tpm_specification_version: str
    :param operating_system_edition: String that specifies the OS edition.
    :type operating_system_edition: str
    :param device_full_qualified_domain_name: Returns the fully qualified domain name of the device
     (if any). If the device is not domain-joined, it returns an empty string.
    :type device_full_qualified_domain_name: str
    :param device_guard_virtualization_based_security_hardware_requirement_state:
     deviceGuardVirtualizationBasedSecurityHardwareRequirementState. Possible values include:
     "meetHardwareRequirements", "secureBootRequired", "dmaProtectionRequired",
     "hyperVNotSupportedForGuestVM", "hyperVNotAvailable".
    :type device_guard_virtualization_based_security_hardware_requirement_state: str or
     ~users_user.models.MicrosoftGraphDeviceGuardVirtualizationBasedSecurityHardwareRequirementState
    :param device_guard_virtualization_based_security_state:
     deviceGuardVirtualizationBasedSecurityState. Possible values include: "running",
     "rebootRequired", "require64BitArchitecture", "notLicensed", "notConfigured",
     "doesNotMeetHardwareRequirements", "other".
    :type device_guard_virtualization_based_security_state: str or
     ~users_user.models.MicrosoftGraphDeviceGuardVirtualizationBasedSecurityState
    :param device_guard_local_system_authority_credential_guard_state:
     deviceGuardLocalSystemAuthorityCredentialGuardState. Possible values include: "running",
     "rebootRequired", "notLicensed", "notConfigured", "virtualizationBasedSecurityNotRunning".
    :type device_guard_local_system_authority_credential_guard_state: str or
     ~users_user.models.MicrosoftGraphDeviceGuardLocalSystemAuthorityCredentialGuardState
    :param os_build_number: Operating System Build Number on Android device.
    :type os_build_number: str
    """

    _attribute_map = {
        'serial_number': {'key': 'serialNumber', 'type': 'str'},
        'total_storage_space': {'key': 'totalStorageSpace', 'type': 'long'},
        'free_storage_space': {'key': 'freeStorageSpace', 'type': 'long'},
        'imei': {'key': 'imei', 'type': 'str'},
        'meid': {'key': 'meid', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'subscriber_carrier': {'key': 'subscriberCarrier', 'type': 'str'},
        'cellular_technology': {'key': 'cellularTechnology', 'type': 'str'},
        'wifi_mac': {'key': 'wifiMac', 'type': 'str'},
        'operating_system_language': {'key': 'operatingSystemLanguage', 'type': 'str'},
        'is_supervised': {'key': 'isSupervised', 'type': 'bool'},
        'is_encrypted': {'key': 'isEncrypted', 'type': 'bool'},
        'is_shared_device': {'key': 'isSharedDevice', 'type': 'bool'},
        'shared_device_cached_users': {'key': 'sharedDeviceCachedUsers', 'type': '[MicrosoftGraphSharedAppleDeviceUser]'},
        'tpm_specification_version': {'key': 'tpmSpecificationVersion', 'type': 'str'},
        'operating_system_edition': {'key': 'operatingSystemEdition', 'type': 'str'},
        'device_full_qualified_domain_name': {'key': 'deviceFullQualifiedDomainName', 'type': 'str'},
        'device_guard_virtualization_based_security_hardware_requirement_state': {'key': 'deviceGuardVirtualizationBasedSecurityHardwareRequirementState', 'type': 'str'},
        'device_guard_virtualization_based_security_state': {'key': 'deviceGuardVirtualizationBasedSecurityState', 'type': 'str'},
        'device_guard_local_system_authority_credential_guard_state': {'key': 'deviceGuardLocalSystemAuthorityCredentialGuardState', 'type': 'str'},
        'os_build_number': {'key': 'osBuildNumber', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        serial_number: Optional[str] = None,
        total_storage_space: Optional[int] = None,
        free_storage_space: Optional[int] = None,
        imei: Optional[str] = None,
        meid: Optional[str] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        phone_number: Optional[str] = None,
        subscriber_carrier: Optional[str] = None,
        cellular_technology: Optional[str] = None,
        wifi_mac: Optional[str] = None,
        operating_system_language: Optional[str] = None,
        is_supervised: Optional[bool] = None,
        is_encrypted: Optional[bool] = None,
        is_shared_device: Optional[bool] = None,
        shared_device_cached_users: Optional[List["MicrosoftGraphSharedAppleDeviceUser"]] = None,
        tpm_specification_version: Optional[str] = None,
        operating_system_edition: Optional[str] = None,
        device_full_qualified_domain_name: Optional[str] = None,
        device_guard_virtualization_based_security_hardware_requirement_state: Optional[Union[str, "MicrosoftGraphDeviceGuardVirtualizationBasedSecurityHardwareRequirementState"]] = None,
        device_guard_virtualization_based_security_state: Optional[Union[str, "MicrosoftGraphDeviceGuardVirtualizationBasedSecurityState"]] = None,
        device_guard_local_system_authority_credential_guard_state: Optional[Union[str, "MicrosoftGraphDeviceGuardLocalSystemAuthorityCredentialGuardState"]] = None,
        os_build_number: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphHardwareInformation, self).__init__(**kwargs)
        self.serial_number = serial_number
        self.total_storage_space = total_storage_space
        self.free_storage_space = free_storage_space
        self.imei = imei
        self.meid = meid
        self.manufacturer = manufacturer
        self.model = model
        self.phone_number = phone_number
        self.subscriber_carrier = subscriber_carrier
        self.cellular_technology = cellular_technology
        self.wifi_mac = wifi_mac
        self.operating_system_language = operating_system_language
        self.is_supervised = is_supervised
        self.is_encrypted = is_encrypted
        self.is_shared_device = is_shared_device
        self.shared_device_cached_users = shared_device_cached_users
        self.tpm_specification_version = tpm_specification_version
        self.operating_system_edition = operating_system_edition
        self.device_full_qualified_domain_name = device_full_qualified_domain_name
        self.device_guard_virtualization_based_security_hardware_requirement_state = device_guard_virtualization_based_security_hardware_requirement_state
        self.device_guard_virtualization_based_security_state = device_guard_virtualization_based_security_state
        self.device_guard_local_system_authority_credential_guard_state = device_guard_local_system_authority_credential_guard_state
        self.os_build_number = os_build_number


class MicrosoftGraphHashes(msrest.serialization.Model):
    """hashes.

    :param crc32_hash: The CRC32 value of the file in little endian (if available). Read-only.
    :type crc32_hash: str
    :param quick_xor_hash: A proprietary hash of the file that can be used to determine if the
     contents of the file have changed (if available). Read-only.
    :type quick_xor_hash: str
    :param sha1_hash: SHA1 hash for the contents of the file (if available). Read-only.
    :type sha1_hash: str
    :param sha256_hash:
    :type sha256_hash: str
    """

    _attribute_map = {
        'crc32_hash': {'key': 'crc32Hash', 'type': 'str'},
        'quick_xor_hash': {'key': 'quickXorHash', 'type': 'str'},
        'sha1_hash': {'key': 'sha1Hash', 'type': 'str'},
        'sha256_hash': {'key': 'sha256Hash', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        crc32_hash: Optional[str] = None,
        quick_xor_hash: Optional[str] = None,
        sha1_hash: Optional[str] = None,
        sha256_hash: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphHashes, self).__init__(**kwargs)
        self.crc32_hash = crc32_hash
        self.quick_xor_hash = quick_xor_hash
        self.sha1_hash = sha1_hash
        self.sha256_hash = sha256_hash


class MicrosoftGraphIdentity(msrest.serialization.Model):
    """identity.

    :param id: Unique identifier for the identity.
    :type id: str
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphIdentity, self).__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class MicrosoftGraphIdentitySet(msrest.serialization.Model):
    """identitySet.

    :param application: identity.
    :type application: ~users_user.models.MicrosoftGraphIdentity
    :param device: identity.
    :type device: ~users_user.models.MicrosoftGraphIdentity
    :param user: identity.
    :type user: ~users_user.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'application': {'key': 'application', 'type': 'MicrosoftGraphIdentity'},
        'device': {'key': 'device', 'type': 'MicrosoftGraphIdentity'},
        'user': {'key': 'user', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        *,
        application: Optional["MicrosoftGraphIdentity"] = None,
        device: Optional["MicrosoftGraphIdentity"] = None,
        user: Optional["MicrosoftGraphIdentity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphIdentitySet, self).__init__(**kwargs)
        self.application = application
        self.device = device
        self.user = user


class MicrosoftGraphIdentityUserRisk(msrest.serialization.Model):
    """identityUserRisk.

    :param level: userRiskLevel. Possible values include: "unknown", "none", "low", "medium",
     "high".
    :type level: str or ~users_user.models.MicrosoftGraphUserRiskLevel
    :param last_changed_date_time:
    :type last_changed_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'level': {'key': 'level', 'type': 'str'},
        'last_changed_date_time': {'key': 'lastChangedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        level: Optional[Union[str, "MicrosoftGraphUserRiskLevel"]] = None,
        last_changed_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphIdentityUserRisk, self).__init__(**kwargs)
        self.level = level
        self.last_changed_date_time = last_changed_date_time


class MicrosoftGraphImage(msrest.serialization.Model):
    """image.

    :param height: Optional. Height of the image, in pixels. Read-only.
    :type height: int
    :param width: Optional. Width of the image, in pixels. Read-only.
    :type width: int
    """

    _validation = {
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'height': {'key': 'height', 'type': 'int'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        height: Optional[int] = None,
        width: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphImage, self).__init__(**kwargs)
        self.height = height
        self.width = width


class MicrosoftGraphImageInfo(msrest.serialization.Model):
    """imageInfo.

    :param icon_url: Optional; URI that points to an icon which represents the application used to
     generate the activity.
    :type icon_url: str
    :param alternative_text:
    :type alternative_text: str
    :param alternate_text: Optional; alt-text accessible content for the image.
    :type alternate_text: str
    :param add_image_query: Optional; parameter used to indicate the server is able to render image
     dynamically in response to parameterization. For example – a high contrast image.
    :type add_image_query: bool
    """

    _attribute_map = {
        'icon_url': {'key': 'iconUrl', 'type': 'str'},
        'alternative_text': {'key': 'alternativeText', 'type': 'str'},
        'alternate_text': {'key': 'alternateText', 'type': 'str'},
        'add_image_query': {'key': 'addImageQuery', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        icon_url: Optional[str] = None,
        alternative_text: Optional[str] = None,
        alternate_text: Optional[str] = None,
        add_image_query: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphImageInfo, self).__init__(**kwargs)
        self.icon_url = icon_url
        self.alternative_text = alternative_text
        self.alternate_text = alternate_text
        self.add_image_query = add_image_query


class MicrosoftGraphIncompleteData(msrest.serialization.Model):
    """incompleteData.

    :param missing_data_before_date_time: The service does not have source data before the
     specified time.
    :type missing_data_before_date_time: ~datetime.datetime
    :param was_throttled: Some data was not recorded due to excessive activity.
    :type was_throttled: bool
    """

    _attribute_map = {
        'missing_data_before_date_time': {'key': 'missingDataBeforeDateTime', 'type': 'iso-8601'},
        'was_throttled': {'key': 'wasThrottled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        missing_data_before_date_time: Optional[datetime.datetime] = None,
        was_throttled: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphIncompleteData, self).__init__(**kwargs)
        self.missing_data_before_date_time = missing_data_before_date_time
        self.was_throttled = was_throttled


class MicrosoftGraphInferenceClassification(MicrosoftGraphEntity):
    """inferenceClassification.

    :param id: Read-only.
    :type id: str
    :param overrides: A set of overrides for a user to always classify messages from specific
     senders in certain ways: focused, or other. Read-only. Nullable.
    :type overrides: list[~users_user.models.MicrosoftGraphInferenceClassificationOverride]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'overrides': {'key': 'overrides', 'type': '[MicrosoftGraphInferenceClassificationOverride]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        overrides: Optional[List["MicrosoftGraphInferenceClassificationOverride"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphInferenceClassification, self).__init__(id=id, **kwargs)
        self.overrides = overrides


class MicrosoftGraphInferenceClassificationOverride(MicrosoftGraphEntity):
    """inferenceClassificationOverride.

    :param id: Read-only.
    :type id: str
    :param classify_as: inferenceClassificationType. Possible values include: "focused", "other".
    :type classify_as: str or ~users_user.models.MicrosoftGraphInferenceClassificationType
    :param sender_email_address: emailAddress.
    :type sender_email_address: ~users_user.models.MicrosoftGraphEmailAddress
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'classify_as': {'key': 'classifyAs', 'type': 'str'},
        'sender_email_address': {'key': 'senderEmailAddress', 'type': 'MicrosoftGraphEmailAddress'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        classify_as: Optional[Union[str, "MicrosoftGraphInferenceClassificationType"]] = None,
        sender_email_address: Optional["MicrosoftGraphEmailAddress"] = None,
        **kwargs
    ):
        super(MicrosoftGraphInferenceClassificationOverride, self).__init__(id=id, **kwargs)
        self.classify_as = classify_as
        self.sender_email_address = sender_email_address


class MicrosoftGraphInferenceData(msrest.serialization.Model):
    """inferenceData.

    :param confidence_score:
    :type confidence_score: float
    :param user_has_verified_accuracy:
    :type user_has_verified_accuracy: bool
    """

    _attribute_map = {
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'user_has_verified_accuracy': {'key': 'userHasVerifiedAccuracy', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        confidence_score: Optional[float] = None,
        user_has_verified_accuracy: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphInferenceData, self).__init__(**kwargs)
        self.confidence_score = confidence_score
        self.user_has_verified_accuracy = user_has_verified_accuracy


class MicrosoftGraphInformationProtection(MicrosoftGraphEntity):
    """informationProtection.

    :param id: Read-only.
    :type id: str
    :param policy: informationProtectionPolicy.
    :type policy: ~users_user.models.MicrosoftGraphInformationProtectionPolicy
    :param sensitivity_labels:
    :type sensitivity_labels: list[~users_user.models.MicrosoftGraphSensitivityLabel]
    :param sensitivity_policy_settings: sensitivityPolicySettings.
    :type sensitivity_policy_settings: ~users_user.models.MicrosoftGraphSensitivityPolicySettings
    :param data_loss_prevention_policies:
    :type data_loss_prevention_policies:
     list[~users_user.models.MicrosoftGraphDataLossPreventionPolicy]
    :param threat_assessment_requests:
    :type threat_assessment_requests:
     list[~users_user.models.MicrosoftGraphThreatAssessmentRequest]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'policy': {'key': 'policy', 'type': 'MicrosoftGraphInformationProtectionPolicy'},
        'sensitivity_labels': {'key': 'sensitivityLabels', 'type': '[MicrosoftGraphSensitivityLabel]'},
        'sensitivity_policy_settings': {'key': 'sensitivityPolicySettings', 'type': 'MicrosoftGraphSensitivityPolicySettings'},
        'data_loss_prevention_policies': {'key': 'dataLossPreventionPolicies', 'type': '[MicrosoftGraphDataLossPreventionPolicy]'},
        'threat_assessment_requests': {'key': 'threatAssessmentRequests', 'type': '[MicrosoftGraphThreatAssessmentRequest]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        policy: Optional["MicrosoftGraphInformationProtectionPolicy"] = None,
        sensitivity_labels: Optional[List["MicrosoftGraphSensitivityLabel"]] = None,
        sensitivity_policy_settings: Optional["MicrosoftGraphSensitivityPolicySettings"] = None,
        data_loss_prevention_policies: Optional[List["MicrosoftGraphDataLossPreventionPolicy"]] = None,
        threat_assessment_requests: Optional[List["MicrosoftGraphThreatAssessmentRequest"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphInformationProtection, self).__init__(id=id, **kwargs)
        self.policy = policy
        self.sensitivity_labels = sensitivity_labels
        self.sensitivity_policy_settings = sensitivity_policy_settings
        self.data_loss_prevention_policies = data_loss_prevention_policies
        self.threat_assessment_requests = threat_assessment_requests


class MicrosoftGraphInformationProtectionLabel(MicrosoftGraphEntity):
    """informationProtectionLabel.

    :param id: Read-only.
    :type id: str
    :param name:
    :type name: str
    :param description:
    :type description: str
    :param color:
    :type color: str
    :param sensitivity:
    :type sensitivity: int
    :param tooltip:
    :type tooltip: str
    :param is_active:
    :type is_active: bool
    """

    _validation = {
        'sensitivity': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'color': {'key': 'color', 'type': 'str'},
        'sensitivity': {'key': 'sensitivity', 'type': 'int'},
        'tooltip': {'key': 'tooltip', 'type': 'str'},
        'is_active': {'key': 'isActive', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        color: Optional[str] = None,
        sensitivity: Optional[int] = None,
        tooltip: Optional[str] = None,
        is_active: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphInformationProtectionLabel, self).__init__(id=id, **kwargs)
        self.name = name
        self.description = description
        self.color = color
        self.sensitivity = sensitivity
        self.tooltip = tooltip
        self.is_active = is_active


class MicrosoftGraphInformationProtectionPolicy(MicrosoftGraphEntity):
    """informationProtectionPolicy.

    :param id: Read-only.
    :type id: str
    :param labels:
    :type labels: list[~users_user.models.MicrosoftGraphInformationProtectionLabel]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[MicrosoftGraphInformationProtectionLabel]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        labels: Optional[List["MicrosoftGraphInformationProtectionLabel"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphInformationProtectionPolicy, self).__init__(id=id, **kwargs)
        self.labels = labels


class MicrosoftGraphInsightIdentity(msrest.serialization.Model):
    """insightIdentity.

    :param display_name: The display name of the user who shared the item.
    :type display_name: str
    :param id: The id of the user who shared the item.
    :type id: str
    :param address: The email address of the user who shared the item.
    :type address: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        id: Optional[str] = None,
        address: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphInsightIdentity, self).__init__(**kwargs)
        self.display_name = display_name
        self.id = id
        self.address = address


class MicrosoftGraphInstitutionData(msrest.serialization.Model):
    """institutionData.

    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param location: physicalAddress.
    :type location: ~users_user.models.MicrosoftGraphPhysicalAddress
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphPhysicalAddress'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        location: Optional["MicrosoftGraphPhysicalAddress"] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphInstitutionData, self).__init__(**kwargs)
        self.description = description
        self.display_name = display_name
        self.location = location
        self.web_url = web_url


class MicrosoftGraphInternetMessageHeader(msrest.serialization.Model):
    """internetMessageHeader.

    :param name: Represents the key in a key-value pair.
    :type name: str
    :param value: The value in a key-value pair.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphInternetMessageHeader, self).__init__(**kwargs)
        self.name = name
        self.value = value


class MicrosoftGraphItemActionSet(msrest.serialization.Model):
    """itemActionSet.

    :param comment: commentAction.
    :type comment: ~users_user.models.MicrosoftGraphCommentAction
    :param create: Any object.
    :type create: object
    :param delete: deleteAction.
    :type delete: ~users_user.models.MicrosoftGraphDeleteAction
    :param edit: Any object.
    :type edit: object
    :param mention: mentionAction.
    :type mention: ~users_user.models.MicrosoftGraphMentionAction
    :param move: moveAction.
    :type move: ~users_user.models.MicrosoftGraphMoveAction
    :param rename: renameAction.
    :type rename: ~users_user.models.MicrosoftGraphRenameAction
    :param restore: Any object.
    :type restore: object
    :param share: shareAction.
    :type share: ~users_user.models.MicrosoftGraphShareAction
    :param version: versionAction.
    :type version: ~users_user.models.MicrosoftGraphVersionAction
    """

    _attribute_map = {
        'comment': {'key': 'comment', 'type': 'MicrosoftGraphCommentAction'},
        'create': {'key': 'create', 'type': 'object'},
        'delete': {'key': 'delete', 'type': 'MicrosoftGraphDeleteAction'},
        'edit': {'key': 'edit', 'type': 'object'},
        'mention': {'key': 'mention', 'type': 'MicrosoftGraphMentionAction'},
        'move': {'key': 'move', 'type': 'MicrosoftGraphMoveAction'},
        'rename': {'key': 'rename', 'type': 'MicrosoftGraphRenameAction'},
        'restore': {'key': 'restore', 'type': 'object'},
        'share': {'key': 'share', 'type': 'MicrosoftGraphShareAction'},
        'version': {'key': 'version', 'type': 'MicrosoftGraphVersionAction'},
    }

    def __init__(
        self,
        *,
        comment: Optional["MicrosoftGraphCommentAction"] = None,
        create: Optional[object] = None,
        delete: Optional["MicrosoftGraphDeleteAction"] = None,
        edit: Optional[object] = None,
        mention: Optional["MicrosoftGraphMentionAction"] = None,
        move: Optional["MicrosoftGraphMoveAction"] = None,
        rename: Optional["MicrosoftGraphRenameAction"] = None,
        restore: Optional[object] = None,
        share: Optional["MicrosoftGraphShareAction"] = None,
        version: Optional["MicrosoftGraphVersionAction"] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemActionSet, self).__init__(**kwargs)
        self.comment = comment
        self.create = create
        self.delete = delete
        self.edit = edit
        self.mention = mention
        self.move = move
        self.rename = rename
        self.restore = restore
        self.share = share
        self.version = version


class MicrosoftGraphItemActionStat(msrest.serialization.Model):
    """itemActionStat.

    :param action_count: The number of times the action took place. Read-only.
    :type action_count: int
    :param actor_count: The number of distinct actors that performed the action. Read-only.
    :type actor_count: int
    """

    _validation = {
        'action_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'actor_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'action_count': {'key': 'actionCount', 'type': 'int'},
        'actor_count': {'key': 'actorCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        action_count: Optional[int] = None,
        actor_count: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemActionStat, self).__init__(**kwargs)
        self.action_count = action_count
        self.actor_count = actor_count


class MicrosoftGraphItemActivity(MicrosoftGraphEntity):
    """itemActivity.

    :param id: Read-only.
    :type id: str
    :param access: Any object.
    :type access: object
    :param activity_date_time: Details about when the activity took place. Read-only.
    :type activity_date_time: ~datetime.datetime
    :param actor: identitySet.
    :type actor: ~users_user.models.MicrosoftGraphIdentitySet
    :param drive_item: driveItem.
    :type drive_item: ~users_user.models.MicrosoftGraphDriveItem
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'access': {'key': 'access', 'type': 'object'},
        'activity_date_time': {'key': 'activityDateTime', 'type': 'iso-8601'},
        'actor': {'key': 'actor', 'type': 'MicrosoftGraphIdentitySet'},
        'drive_item': {'key': 'driveItem', 'type': 'MicrosoftGraphDriveItem'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        access: Optional[object] = None,
        activity_date_time: Optional[datetime.datetime] = None,
        actor: Optional["MicrosoftGraphIdentitySet"] = None,
        drive_item: Optional["MicrosoftGraphDriveItem"] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemActivity, self).__init__(id=id, **kwargs)
        self.access = access
        self.activity_date_time = activity_date_time
        self.actor = actor
        self.drive_item = drive_item


class MicrosoftGraphItemActivityOld(MicrosoftGraphEntity):
    """itemActivityOLD.

    :param id: Read-only.
    :type id: str
    :param action: itemActionSet.
    :type action: ~users_user.models.MicrosoftGraphItemActionSet
    :param actor: identitySet.
    :type actor: ~users_user.models.MicrosoftGraphIdentitySet
    :param times: itemActivityTimeSet.
    :type times: ~users_user.models.MicrosoftGraphItemActivityTimeSet
    :param drive_item: driveItem.
    :type drive_item: ~users_user.models.MicrosoftGraphDriveItem
    :param list_item: listItem.
    :type list_item: ~users_user.models.MicrosoftGraphListItem
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'action': {'key': 'action', 'type': 'MicrosoftGraphItemActionSet'},
        'actor': {'key': 'actor', 'type': 'MicrosoftGraphIdentitySet'},
        'times': {'key': 'times', 'type': 'MicrosoftGraphItemActivityTimeSet'},
        'drive_item': {'key': 'driveItem', 'type': 'MicrosoftGraphDriveItem'},
        'list_item': {'key': 'listItem', 'type': 'MicrosoftGraphListItem'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        action: Optional["MicrosoftGraphItemActionSet"] = None,
        actor: Optional["MicrosoftGraphIdentitySet"] = None,
        times: Optional["MicrosoftGraphItemActivityTimeSet"] = None,
        drive_item: Optional["MicrosoftGraphDriveItem"] = None,
        list_item: Optional["MicrosoftGraphListItem"] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemActivityOld, self).__init__(id=id, **kwargs)
        self.action = action
        self.actor = actor
        self.times = times
        self.drive_item = drive_item
        self.list_item = list_item


class MicrosoftGraphItemActivityStat(MicrosoftGraphEntity):
    """itemActivityStat.

    :param id: Read-only.
    :type id: str
    :param start_date_time: When the interval starts. Read-only.
    :type start_date_time: ~datetime.datetime
    :param end_date_time: When the interval ends. Read-only.
    :type end_date_time: ~datetime.datetime
    :param access: itemActionStat.
    :type access: ~users_user.models.MicrosoftGraphItemActionStat
    :param create: itemActionStat.
    :type create: ~users_user.models.MicrosoftGraphItemActionStat
    :param delete: itemActionStat.
    :type delete: ~users_user.models.MicrosoftGraphItemActionStat
    :param edit: itemActionStat.
    :type edit: ~users_user.models.MicrosoftGraphItemActionStat
    :param move: itemActionStat.
    :type move: ~users_user.models.MicrosoftGraphItemActionStat
    :param is_trending: Indicates whether the item is 'trending.' Read-only.
    :type is_trending: bool
    :param incomplete_data: incompleteData.
    :type incomplete_data: ~users_user.models.MicrosoftGraphIncompleteData
    :param activities: Exposes the itemActivities represented in this itemActivityStat resource.
    :type activities: list[~users_user.models.MicrosoftGraphItemActivity]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'access': {'key': 'access', 'type': 'MicrosoftGraphItemActionStat'},
        'create': {'key': 'create', 'type': 'MicrosoftGraphItemActionStat'},
        'delete': {'key': 'delete', 'type': 'MicrosoftGraphItemActionStat'},
        'edit': {'key': 'edit', 'type': 'MicrosoftGraphItemActionStat'},
        'move': {'key': 'move', 'type': 'MicrosoftGraphItemActionStat'},
        'is_trending': {'key': 'isTrending', 'type': 'bool'},
        'incomplete_data': {'key': 'incompleteData', 'type': 'MicrosoftGraphIncompleteData'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphItemActivity]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        access: Optional["MicrosoftGraphItemActionStat"] = None,
        create: Optional["MicrosoftGraphItemActionStat"] = None,
        delete: Optional["MicrosoftGraphItemActionStat"] = None,
        edit: Optional["MicrosoftGraphItemActionStat"] = None,
        move: Optional["MicrosoftGraphItemActionStat"] = None,
        is_trending: Optional[bool] = None,
        incomplete_data: Optional["MicrosoftGraphIncompleteData"] = None,
        activities: Optional[List["MicrosoftGraphItemActivity"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemActivityStat, self).__init__(id=id, **kwargs)
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.access = access
        self.create = create
        self.delete = delete
        self.edit = edit
        self.move = move
        self.is_trending = is_trending
        self.incomplete_data = incomplete_data
        self.activities = activities


class MicrosoftGraphItemActivityTimeSet(msrest.serialization.Model):
    """itemActivityTimeSet.

    :param last_recorded_date_time:
    :type last_recorded_date_time: ~datetime.datetime
    :param observed_date_time: When the activity was observed to take place.
    :type observed_date_time: ~datetime.datetime
    :param recorded_date_time: When the observation was recorded on the service.
    :type recorded_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'last_recorded_date_time': {'key': 'lastRecordedDateTime', 'type': 'iso-8601'},
        'observed_date_time': {'key': 'observedDateTime', 'type': 'iso-8601'},
        'recorded_date_time': {'key': 'recordedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        last_recorded_date_time: Optional[datetime.datetime] = None,
        observed_date_time: Optional[datetime.datetime] = None,
        recorded_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemActivityTimeSet, self).__init__(**kwargs)
        self.last_recorded_date_time = last_recorded_date_time
        self.observed_date_time = observed_date_time
        self.recorded_date_time = recorded_date_time


class MicrosoftGraphItemAnalytics(MicrosoftGraphEntity):
    """itemAnalytics.

    :param id: Read-only.
    :type id: str
    :param item_activity_stats:
    :type item_activity_stats: list[~users_user.models.MicrosoftGraphItemActivityStat]
    :param all_time: itemActivityStat.
    :type all_time: ~users_user.models.MicrosoftGraphItemActivityStat
    :param last_seven_days: itemActivityStat.
    :type last_seven_days: ~users_user.models.MicrosoftGraphItemActivityStat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'item_activity_stats': {'key': 'itemActivityStats', 'type': '[MicrosoftGraphItemActivityStat]'},
        'all_time': {'key': 'allTime', 'type': 'MicrosoftGraphItemActivityStat'},
        'last_seven_days': {'key': 'lastSevenDays', 'type': 'MicrosoftGraphItemActivityStat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        item_activity_stats: Optional[List["MicrosoftGraphItemActivityStat"]] = None,
        all_time: Optional["MicrosoftGraphItemActivityStat"] = None,
        last_seven_days: Optional["MicrosoftGraphItemActivityStat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemAnalytics, self).__init__(id=id, **kwargs)
        self.item_activity_stats = item_activity_stats
        self.all_time = all_time
        self.last_seven_days = last_seven_days


class MicrosoftGraphItemBody(msrest.serialization.Model):
    """itemBody.

    :param content_type: bodyType. Possible values include: "text", "html".
    :type content_type: str or ~users_user.models.MicrosoftGraphBodyType
    :param content: The content of the item.
    :type content: str
    """

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        content_type: Optional[Union[str, "MicrosoftGraphBodyType"]] = None,
        content: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemBody, self).__init__(**kwargs)
        self.content_type = content_type
        self.content = content


class MicrosoftGraphItemEmail(MicrosoftGraphItemFacet):
    """itemEmail.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param address:
    :type address: str
    :param display_name:
    :type display_name: str
    :param type: emailType. Possible values include: "unknown", "work", "personal", "main",
     "other".
    :type type: str or ~users_user.models.MicrosoftGraphEmailType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'address': {'key': 'address', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        address: Optional[str] = None,
        display_name: Optional[str] = None,
        type: Optional[Union[str, "MicrosoftGraphEmailType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemEmail, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.address = address
        self.display_name = display_name
        self.type = type


class MicrosoftGraphItemPhone(MicrosoftGraphItemFacet):
    """itemPhone.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param display_name:
    :type display_name: str
    :param type: phoneType. Possible values include: "home", "business", "mobile", "other",
     "assistant", "homeFax", "businessFax", "otherFax", "pager", "radio".
    :type type: str or ~users_user.models.MicrosoftGraphPhoneType
    :param number:
    :type number: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'number': {'key': 'number', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        display_name: Optional[str] = None,
        type: Optional[Union[str, "MicrosoftGraphPhoneType"]] = None,
        number: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemPhone, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.display_name = display_name
        self.type = type
        self.number = number


class MicrosoftGraphItemReference(msrest.serialization.Model):
    """itemReference.

    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id: Unique identifier of the item in the drive. Read-only.
    :type id: str
    :param name: The name of the item being referenced. Read-only.
    :type name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~users_user.models.MicrosoftGraphSharepointIds
    :param site_id:
    :type site_id: str
    """

    _attribute_map = {
        'drive_id': {'key': 'driveId', 'type': 'str'},
        'drive_type': {'key': 'driveType', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'share_id': {'key': 'shareId', 'type': 'str'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id': {'key': 'siteId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        drive_id: Optional[str] = None,
        drive_type: Optional[str] = None,
        id: Optional[str] = None,
        name: Optional[str] = None,
        path: Optional[str] = None,
        share_id: Optional[str] = None,
        sharepoint_ids: Optional["MicrosoftGraphSharepointIds"] = None,
        site_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemReference, self).__init__(**kwargs)
        self.drive_id = drive_id
        self.drive_type = drive_type
        self.id = id
        self.name = name
        self.path = path
        self.share_id = share_id
        self.sharepoint_ids = sharepoint_ids
        self.site_id = site_id


class MicrosoftGraphKeyValuePair(msrest.serialization.Model):
    """keyValuePair.

    :param name: Name for this key-value pair.
    :type name: str
    :param value: Value for this key-value pair.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphKeyValuePair, self).__init__(**kwargs)
        self.name = name
        self.value = value


class MicrosoftGraphLabelActionBase(msrest.serialization.Model):
    """labelActionBase.

    :param name:
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphLabelActionBase, self).__init__(**kwargs)
        self.name = name


class MicrosoftGraphLabelPolicy(msrest.serialization.Model):
    """labelPolicy.

    :param id:
    :type id: str
    :param name:
    :type name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphLabelPolicy, self).__init__(**kwargs)
        self.id = id
        self.name = name


class MicrosoftGraphLanguageProficiency(MicrosoftGraphItemFacet):
    """languageProficiency.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param display_name:
    :type display_name: str
    :param tag:
    :type tag: str
    :param proficiency: languageProficiencyLevel. Possible values include: "elementary",
     "conversational", "limitedWorking", "professionalWorking", "fullProfessional",
     "nativeOrBilingual", "unknownFutureValue".
    :type proficiency: str or ~users_user.models.MicrosoftGraphLanguageProficiencyLevel
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
        'proficiency': {'key': 'proficiency', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        display_name: Optional[str] = None,
        tag: Optional[str] = None,
        proficiency: Optional[Union[str, "MicrosoftGraphLanguageProficiencyLevel"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphLanguageProficiency, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.display_name = display_name
        self.tag = tag
        self.proficiency = proficiency


class MicrosoftGraphLicenseAssignmentState(msrest.serialization.Model):
    """licenseAssignmentState.

    :param sku_id:
    :type sku_id: str
    :param disabled_plans:
    :type disabled_plans: list[str]
    :param assigned_by_group:
    :type assigned_by_group: str
    :param state:
    :type state: str
    :param error:
    :type error: str
    """

    _attribute_map = {
        'sku_id': {'key': 'skuId', 'type': 'str'},
        'disabled_plans': {'key': 'disabledPlans', 'type': '[str]'},
        'assigned_by_group': {'key': 'assignedByGroup', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'error': {'key': 'error', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sku_id: Optional[str] = None,
        disabled_plans: Optional[List[str]] = None,
        assigned_by_group: Optional[str] = None,
        state: Optional[str] = None,
        error: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphLicenseAssignmentState, self).__init__(**kwargs)
        self.sku_id = sku_id
        self.disabled_plans = disabled_plans
        self.assigned_by_group = assigned_by_group
        self.state = state
        self.error = error


class MicrosoftGraphLicenseDetails(MicrosoftGraphEntity):
    """licenseDetails.

    :param id: Read-only.
    :type id: str
    :param service_plans: Information about the service plans assigned with the license. Read-only,
     Not nullable.
    :type service_plans: list[~users_user.models.MicrosoftGraphServicePlanInfo]
    :param sku_id: Unique identifier (GUID) for the service SKU. Equal to the skuId property on the
     related SubscribedSku object. Read-only.
    :type sku_id: str
    :param sku_part_number: Unique SKU display name. Equal to the skuPartNumber on the related
     SubscribedSku object; for example: 'AAD_Premium'. Read-only.
    :type sku_part_number: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'service_plans': {'key': 'servicePlans', 'type': '[MicrosoftGraphServicePlanInfo]'},
        'sku_id': {'key': 'skuId', 'type': 'str'},
        'sku_part_number': {'key': 'skuPartNumber', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        service_plans: Optional[List["MicrosoftGraphServicePlanInfo"]] = None,
        sku_id: Optional[str] = None,
        sku_part_number: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphLicenseDetails, self).__init__(id=id, **kwargs)
        self.service_plans = service_plans
        self.sku_id = sku_id
        self.sku_part_number = sku_part_number


class MicrosoftGraphLicenseProcessingState(msrest.serialization.Model):
    """licenseProcessingState.

    :param state:
    :type state: str
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphLicenseProcessingState, self).__init__(**kwargs)
        self.state = state


class MicrosoftGraphList(MicrosoftGraphBaseItem):
    """list.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param parent_reference: itemReference.
    :type parent_reference: ~users_user.models.MicrosoftGraphItemReference
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~users_user.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~users_user.models.MicrosoftGraphUser
    :param display_name: The displayable title of the list.
    :type display_name: str
    :param list: listInfo.
    :type list: ~users_user.models.MicrosoftGraphListInfo
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~users_user.models.MicrosoftGraphSharepointIds
    :param system: Any object.
    :type system: object
    :param activities:
    :type activities: list[~users_user.models.MicrosoftGraphItemActivityOld]
    :param columns: The collection of field definitions for this list.
    :type columns: list[~users_user.models.MicrosoftGraphColumnDefinition]
    :param content_types: The collection of content types present in this list.
    :type content_types: list[~users_user.models.MicrosoftGraphContentType]
    :param drive: drive.
    :type drive: ~users_user.models.MicrosoftGraphDrive
    :param items: All items contained in the list.
    :type items: list[~users_user.models.MicrosoftGraphListItem]
    :param subscriptions: The set of subscriptions on the list.
    :type subscriptions: list[~users_user.models.MicrosoftGraphSubscription]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'parent_reference': {'key': 'parentReference', 'type': 'MicrosoftGraphItemReference'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'list': {'key': 'list', 'type': 'MicrosoftGraphListInfo'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'system': {'key': 'system', 'type': 'object'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphItemActivityOld]'},
        'columns': {'key': 'columns', 'type': '[MicrosoftGraphColumnDefinition]'},
        'content_types': {'key': 'contentTypes', 'type': '[MicrosoftGraphContentType]'},
        'drive': {'key': 'drive', 'type': 'MicrosoftGraphDrive'},
        'items': {'key': 'items', 'type': '[MicrosoftGraphListItem]'},
        'subscriptions': {'key': 'subscriptions', 'type': '[MicrosoftGraphSubscription]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        e_tag: Optional[str] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        parent_reference: Optional["MicrosoftGraphItemReference"] = None,
        web_url: Optional[str] = None,
        created_by_user: Optional["MicrosoftGraphUser"] = None,
        last_modified_by_user: Optional["MicrosoftGraphUser"] = None,
        display_name: Optional[str] = None,
        list: Optional["MicrosoftGraphListInfo"] = None,
        sharepoint_ids: Optional["MicrosoftGraphSharepointIds"] = None,
        system: Optional[object] = None,
        activities: Optional[List["MicrosoftGraphItemActivityOld"]] = None,
        columns: Optional[List["MicrosoftGraphColumnDefinition"]] = None,
        content_types: Optional[List["MicrosoftGraphContentType"]] = None,
        drive: Optional["MicrosoftGraphDrive"] = None,
        items: Optional[List["MicrosoftGraphListItem"]] = None,
        subscriptions: Optional[List["MicrosoftGraphSubscription"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphList, self).__init__(id=id, created_by=created_by, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, name=name, parent_reference=parent_reference, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, **kwargs)
        self.display_name = display_name
        self.list = list
        self.sharepoint_ids = sharepoint_ids
        self.system = system
        self.activities = activities
        self.columns = columns
        self.content_types = content_types
        self.drive = drive
        self.items = items
        self.subscriptions = subscriptions


class MicrosoftGraphListInfo(msrest.serialization.Model):
    """listInfo.

    :param content_types_enabled: If true, indicates that content types are enabled for this list.
    :type content_types_enabled: bool
    :param hidden: If true, indicates that the list is not normally visible in the SharePoint user
     experience.
    :type hidden: bool
    :param template: An enumerated value that represents the base list template used in creating
     the list. Possible values include documentLibrary, genericList, task, survey, announcements,
     contacts, and more.
    :type template: str
    """

    _attribute_map = {
        'content_types_enabled': {'key': 'contentTypesEnabled', 'type': 'bool'},
        'hidden': {'key': 'hidden', 'type': 'bool'},
        'template': {'key': 'template', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        content_types_enabled: Optional[bool] = None,
        hidden: Optional[bool] = None,
        template: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphListInfo, self).__init__(**kwargs)
        self.content_types_enabled = content_types_enabled
        self.hidden = hidden
        self.template = template


class MicrosoftGraphListItem(MicrosoftGraphBaseItem):
    """listItem.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param parent_reference: itemReference.
    :type parent_reference: ~users_user.models.MicrosoftGraphItemReference
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~users_user.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~users_user.models.MicrosoftGraphUser
    :param content_type: contentTypeInfo.
    :type content_type: ~users_user.models.MicrosoftGraphContentTypeInfo
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~users_user.models.MicrosoftGraphSharepointIds
    :param activities: The list of recent activities that took place on this item.
    :type activities: list[~users_user.models.MicrosoftGraphItemActivityOld]
    :param analytics: itemAnalytics.
    :type analytics: ~users_user.models.MicrosoftGraphItemAnalytics
    :param drive_item: driveItem.
    :type drive_item: ~users_user.models.MicrosoftGraphDriveItem
    :param fields: entity.
    :type fields: ~users_user.models.MicrosoftGraphEntity
    :param versions: The list of previous versions of the list item.
    :type versions: list[~users_user.models.MicrosoftGraphListItemVersion]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'parent_reference': {'key': 'parentReference', 'type': 'MicrosoftGraphItemReference'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'content_type': {'key': 'contentType', 'type': 'MicrosoftGraphContentTypeInfo'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphItemActivityOld]'},
        'analytics': {'key': 'analytics', 'type': 'MicrosoftGraphItemAnalytics'},
        'drive_item': {'key': 'driveItem', 'type': 'MicrosoftGraphDriveItem'},
        'fields': {'key': 'fields', 'type': 'MicrosoftGraphEntity'},
        'versions': {'key': 'versions', 'type': '[MicrosoftGraphListItemVersion]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        e_tag: Optional[str] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        parent_reference: Optional["MicrosoftGraphItemReference"] = None,
        web_url: Optional[str] = None,
        created_by_user: Optional["MicrosoftGraphUser"] = None,
        last_modified_by_user: Optional["MicrosoftGraphUser"] = None,
        content_type: Optional["MicrosoftGraphContentTypeInfo"] = None,
        sharepoint_ids: Optional["MicrosoftGraphSharepointIds"] = None,
        activities: Optional[List["MicrosoftGraphItemActivityOld"]] = None,
        analytics: Optional["MicrosoftGraphItemAnalytics"] = None,
        drive_item: Optional["MicrosoftGraphDriveItem"] = None,
        fields: Optional["MicrosoftGraphEntity"] = None,
        versions: Optional[List["MicrosoftGraphListItemVersion"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphListItem, self).__init__(id=id, created_by=created_by, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, name=name, parent_reference=parent_reference, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, **kwargs)
        self.content_type = content_type
        self.sharepoint_ids = sharepoint_ids
        self.activities = activities
        self.analytics = analytics
        self.drive_item = drive_item
        self.fields = fields
        self.versions = versions


class MicrosoftGraphListItemVersion(MicrosoftGraphBaseItemVersion):
    """listItemVersion.

    :param id: Read-only.
    :type id: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the version was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param publication: publicationFacet.
    :type publication: ~users_user.models.MicrosoftGraphPublicationFacet
    :param fields: entity.
    :type fields: ~users_user.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'publication': {'key': 'publication', 'type': 'MicrosoftGraphPublicationFacet'},
        'fields': {'key': 'fields', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        publication: Optional["MicrosoftGraphPublicationFacet"] = None,
        fields: Optional["MicrosoftGraphEntity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphListItemVersion, self).__init__(id=id, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, publication=publication, **kwargs)
        self.fields = fields


class MicrosoftGraphLocaleInfo(msrest.serialization.Model):
    """localeInfo.

    :param locale: A locale representation for the user, which includes the user's preferred
     language and country/region. For example, 'en-us'. The language component follows 2-letter
     codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in
     ISO 3166-1 alpha-2.
    :type locale: str
    :param display_name: A name representing the user's locale in natural language, for example,
     'English (United States)'.
    :type display_name: str
    """

    _attribute_map = {
        'locale': {'key': 'locale', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        locale: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphLocaleInfo, self).__init__(**kwargs)
        self.locale = locale
        self.display_name = display_name


class MicrosoftGraphLocation(msrest.serialization.Model):
    """location.

    :param display_name: The name associated with the location.
    :type display_name: str
    :param location_email_address: Optional email address of the location.
    :type location_email_address: str
    :param address: physicalAddress.
    :type address: ~users_user.models.MicrosoftGraphPhysicalAddress
    :param coordinates: outlookGeoCoordinates.
    :type coordinates: ~users_user.models.MicrosoftGraphOutlookGeoCoordinates
    :param location_uri: Optional URI representing the location.
    :type location_uri: str
    :param location_type: locationType. Possible values include: "default", "conferenceRoom",
     "homeAddress", "businessAddress", "geoCoordinates", "streetAddress", "hotel", "restaurant",
     "localBusiness", "postalAddress".
    :type location_type: str or ~users_user.models.MicrosoftGraphLocationType
    :param unique_id: For internal use only.
    :type unique_id: str
    :param unique_id_type: locationUniqueIdType. Possible values include: "unknown",
     "locationStore", "directory", "private", "bing".
    :type unique_id_type: str or ~users_user.models.MicrosoftGraphLocationUniqueIdType
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'location_email_address': {'key': 'locationEmailAddress', 'type': 'str'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPhysicalAddress'},
        'coordinates': {'key': 'coordinates', 'type': 'MicrosoftGraphOutlookGeoCoordinates'},
        'location_uri': {'key': 'locationUri', 'type': 'str'},
        'location_type': {'key': 'locationType', 'type': 'str'},
        'unique_id': {'key': 'uniqueId', 'type': 'str'},
        'unique_id_type': {'key': 'uniqueIdType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        location_email_address: Optional[str] = None,
        address: Optional["MicrosoftGraphPhysicalAddress"] = None,
        coordinates: Optional["MicrosoftGraphOutlookGeoCoordinates"] = None,
        location_uri: Optional[str] = None,
        location_type: Optional[Union[str, "MicrosoftGraphLocationType"]] = None,
        unique_id: Optional[str] = None,
        unique_id_type: Optional[Union[str, "MicrosoftGraphLocationUniqueIdType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphLocation, self).__init__(**kwargs)
        self.display_name = display_name
        self.location_email_address = location_email_address
        self.address = address
        self.coordinates = coordinates
        self.location_uri = location_uri
        self.location_type = location_type
        self.unique_id = unique_id
        self.unique_id_type = unique_id_type


class MicrosoftGraphLoggedOnUser(msrest.serialization.Model):
    """loggedOnUser.

    :param user_id: User id.
    :type user_id: str
    :param last_log_on_date_time: Date time when user logs on.
    :type last_log_on_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'user_id': {'key': 'userId', 'type': 'str'},
        'last_log_on_date_time': {'key': 'lastLogOnDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        user_id: Optional[str] = None,
        last_log_on_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphLoggedOnUser, self).__init__(**kwargs)
        self.user_id = user_id
        self.last_log_on_date_time = last_log_on_date_time


class MicrosoftGraphLongRunningOperation(MicrosoftGraphEntity):
    """longRunningOperation.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_action_date_time:
    :type last_action_date_time: ~datetime.datetime
    :param status: longRunningOperationStatus. Possible values include: "notstarted", "running",
     "succeeded", "failed".
    :type status: str or ~users_user.models.MicrosoftGraphLongRunningOperationStatus
    :param status_detail:
    :type status_detail: str
    :param resource_location:
    :type resource_location: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'status_detail': {'key': 'statusDetail', 'type': 'str'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_action_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "MicrosoftGraphLongRunningOperationStatus"]] = None,
        status_detail: Optional[str] = None,
        resource_location: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphLongRunningOperation, self).__init__(id=id, **kwargs)
        self.created_date_time = created_date_time
        self.last_action_date_time = last_action_date_time
        self.status = status
        self.status_detail = status_detail
        self.resource_location = resource_location


class MicrosoftGraphLookupColumn(msrest.serialization.Model):
    """lookupColumn.

    :param allow_multiple_values: Indicates whether multiple values can be selected from the
     source.
    :type allow_multiple_values: bool
    :param allow_unlimited_length: Indicates whether values in the column should be able to exceed
     the standard limit of 255 characters.
    :type allow_unlimited_length: bool
    :param column_name: The name of the lookup source column.
    :type column_name: str
    :param list_id: The unique identifier of the lookup source list.
    :type list_id: str
    :param primary_lookup_column_id: If specified, this column is a secondary lookup, pulling an
     additional field from the list item looked up by the primary lookup. Use the list item looked
     up by the primary as the source for the column named here.
    :type primary_lookup_column_id: str
    """

    _attribute_map = {
        'allow_multiple_values': {'key': 'allowMultipleValues', 'type': 'bool'},
        'allow_unlimited_length': {'key': 'allowUnlimitedLength', 'type': 'bool'},
        'column_name': {'key': 'columnName', 'type': 'str'},
        'list_id': {'key': 'listId', 'type': 'str'},
        'primary_lookup_column_id': {'key': 'primaryLookupColumnId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        allow_multiple_values: Optional[bool] = None,
        allow_unlimited_length: Optional[bool] = None,
        column_name: Optional[str] = None,
        list_id: Optional[str] = None,
        primary_lookup_column_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphLookupColumn, self).__init__(**kwargs)
        self.allow_multiple_values = allow_multiple_values
        self.allow_unlimited_length = allow_unlimited_length
        self.column_name = column_name
        self.list_id = list_id
        self.primary_lookup_column_id = primary_lookup_column_id


class MicrosoftGraphMailboxSettings(msrest.serialization.Model):
    """mailboxSettings.

    :param automatic_replies_setting: automaticRepliesSetting.
    :type automatic_replies_setting: ~users_user.models.MicrosoftGraphAutomaticRepliesSetting
    :param archive_folder: Folder ID of an archive folder for the user.
    :type archive_folder: str
    :param time_zone: The default time zone for the user's mailbox.
    :type time_zone: str
    :param language: localeInfo.
    :type language: ~users_user.models.MicrosoftGraphLocaleInfo
    :param delegate_meeting_message_delivery_options: delegateMeetingMessageDeliveryOptions.
     Possible values include: "sendToDelegateAndInformationToPrincipal",
     "sendToDelegateAndPrincipal", "sendToDelegateOnly".
    :type delegate_meeting_message_delivery_options: str or
     ~users_user.models.MicrosoftGraphDelegateMeetingMessageDeliveryOptions
    :param working_hours: workingHours.
    :type working_hours: ~users_user.models.MicrosoftGraphWorkingHours
    :param date_format: The date format for the user's mailbox.
    :type date_format: str
    :param time_format: The time format for the user's mailbox.
    :type time_format: str
    """

    _attribute_map = {
        'automatic_replies_setting': {'key': 'automaticRepliesSetting', 'type': 'MicrosoftGraphAutomaticRepliesSetting'},
        'archive_folder': {'key': 'archiveFolder', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'language': {'key': 'language', 'type': 'MicrosoftGraphLocaleInfo'},
        'delegate_meeting_message_delivery_options': {'key': 'delegateMeetingMessageDeliveryOptions', 'type': 'str'},
        'working_hours': {'key': 'workingHours', 'type': 'MicrosoftGraphWorkingHours'},
        'date_format': {'key': 'dateFormat', 'type': 'str'},
        'time_format': {'key': 'timeFormat', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        automatic_replies_setting: Optional["MicrosoftGraphAutomaticRepliesSetting"] = None,
        archive_folder: Optional[str] = None,
        time_zone: Optional[str] = None,
        language: Optional["MicrosoftGraphLocaleInfo"] = None,
        delegate_meeting_message_delivery_options: Optional[Union[str, "MicrosoftGraphDelegateMeetingMessageDeliveryOptions"]] = None,
        working_hours: Optional["MicrosoftGraphWorkingHours"] = None,
        date_format: Optional[str] = None,
        time_format: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMailboxSettings, self).__init__(**kwargs)
        self.automatic_replies_setting = automatic_replies_setting
        self.archive_folder = archive_folder
        self.time_zone = time_zone
        self.language = language
        self.delegate_meeting_message_delivery_options = delegate_meeting_message_delivery_options
        self.working_hours = working_hours
        self.date_format = date_format
        self.time_format = time_format


class MicrosoftGraphMailFolder(MicrosoftGraphEntity):
    """mailFolder.

    :param id: Read-only.
    :type id: str
    :param display_name: The mailFolder's display name.
    :type display_name: str
    :param parent_folder_id: The unique identifier for the mailFolder's parent mailFolder.
    :type parent_folder_id: str
    :param child_folder_count: The number of immediate child mailFolders in the current mailFolder.
    :type child_folder_count: int
    :param unread_item_count: The number of items in the mailFolder marked as unread.
    :type unread_item_count: int
    :param total_item_count: The number of items in the mailFolder.
    :type total_item_count: int
    :param well_known_name:
    :type well_known_name: str
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the mailFolder. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~users_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the mailFolder. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~users_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param messages: The collection of messages in the mailFolder.
    :type messages: list[~users_user.models.MicrosoftGraphMessage]
    :param message_rules: The collection of rules that apply to the user's Inbox folder.
    :type message_rules: list[~users_user.models.MicrosoftGraphMessageRule]
    :param child_folders: The collection of child folders in the mailFolder.
    :type child_folders: list[~users_user.models.MicrosoftGraphMailFolder]
    :param user_configurations:
    :type user_configurations: list[~users_user.models.MicrosoftGraphUserConfiguration]
    """

    _validation = {
        'child_folder_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'unread_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'total_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'child_folder_count': {'key': 'childFolderCount', 'type': 'int'},
        'unread_item_count': {'key': 'unreadItemCount', 'type': 'int'},
        'total_item_count': {'key': 'totalItemCount', 'type': 'int'},
        'well_known_name': {'key': 'wellKnownName', 'type': 'str'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'messages': {'key': 'messages', 'type': '[MicrosoftGraphMessage]'},
        'message_rules': {'key': 'messageRules', 'type': '[MicrosoftGraphMessageRule]'},
        'child_folders': {'key': 'childFolders', 'type': '[MicrosoftGraphMailFolder]'},
        'user_configurations': {'key': 'userConfigurations', 'type': '[MicrosoftGraphUserConfiguration]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        child_folder_count: Optional[int] = None,
        unread_item_count: Optional[int] = None,
        total_item_count: Optional[int] = None,
        well_known_name: Optional[str] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        messages: Optional[List["MicrosoftGraphMessage"]] = None,
        message_rules: Optional[List["MicrosoftGraphMessageRule"]] = None,
        child_folders: Optional[List["MicrosoftGraphMailFolder"]] = None,
        user_configurations: Optional[List["MicrosoftGraphUserConfiguration"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMailFolder, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.parent_folder_id = parent_folder_id
        self.child_folder_count = child_folder_count
        self.unread_item_count = unread_item_count
        self.total_item_count = total_item_count
        self.well_known_name = well_known_name
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties
        self.messages = messages
        self.message_rules = message_rules
        self.child_folders = child_folders
        self.user_configurations = user_configurations


class MicrosoftGraphManagedAppOperation(MicrosoftGraphEntity):
    """Represents an operation applied against an app registration.

    :param id: Read-only.
    :type id: str
    :param display_name: The operation name.
    :type display_name: str
    :param last_modified_date_time: The last time the app operation was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param state: The current state of the operation.
    :type state: str
    :param version: Version of the entity.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'state': {'key': 'state', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppOperation, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time
        self.state = state
        self.version = version


class MicrosoftGraphManagedAppPolicy(MicrosoftGraphEntity):
    """The ManagedAppPolicy resource represents a base type for platform specific policies.

    :param id: Read-only.
    :type id: str
    :param display_name: Policy display name.
    :type display_name: str
    :param description: The policy's description.
    :type description: str
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param role_scope_tag_ids: List of Scope Tags for this Entity instance.
    :type role_scope_tag_ids: list[str]
    :param version: Version of the entity.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'role_scope_tag_ids': {'key': 'roleScopeTagIds', 'type': '[str]'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        role_scope_tag_ids: Optional[List[str]] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppPolicy, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.description = description
        self.created_date_time = created_date_time
        self.last_modified_date_time = last_modified_date_time
        self.role_scope_tag_ids = role_scope_tag_ids
        self.version = version


class MicrosoftGraphManagedAppRegistration(MicrosoftGraphEntity):
    """The ManagedAppEntity is the base entity type for all other entity types under app management workflow.

    :param id: Read-only.
    :type id: str
    :param created_date_time: Date and time of creation.
    :type created_date_time: ~datetime.datetime
    :param last_sync_date_time: Date and time of last the app synced with management service.
    :type last_sync_date_time: ~datetime.datetime
    :param application_version: App version.
    :type application_version: str
    :param management_sdk_version: App management SDK version.
    :type management_sdk_version: str
    :param platform_version: Operating System version.
    :type platform_version: str
    :param device_type: Host device type.
    :type device_type: str
    :param device_tag: App management SDK generated tag, which helps relate apps hosted on the same
     device. Not guaranteed to relate apps in all conditions.
    :type device_tag: str
    :param device_name: Host device name.
    :type device_name: str
    :param managed_device_id: The Managed Device identifier of the host device. Value could be
     empty even when the host device is managed.
    :type managed_device_id: str
    :param azure_ad_device_id: The Azure Active Directory Device identifier of the host device.
     Value could be empty even when the host device is Azure Active Directory registered.
    :type azure_ad_device_id: str
    :param device_model: The device model for the current app registration.
    :type device_model: str
    :param device_manufacturer: The device manufacturer for the current app registration.
    :type device_manufacturer: str
    :param flagged_reasons: Zero or more reasons an app registration is flagged. E.g. app running
     on rooted device.
    :type flagged_reasons: list[str or ~users_user.models.MicrosoftGraphManagedAppFlaggedReason]
    :param user_id: The user Id to who this app registration belongs.
    :type user_id: str
    :param app_identifier: Any object.
    :type app_identifier: object
    :param version: Version of the entity.
    :type version: str
    :param applied_policies: Zero or more policys already applied on the registered app when it
     last synchronized with managment service.
    :type applied_policies: list[~users_user.models.MicrosoftGraphManagedAppPolicy]
    :param intended_policies: Zero or more policies admin intended for the app as of now.
    :type intended_policies: list[~users_user.models.MicrosoftGraphManagedAppPolicy]
    :param operations: Zero or more long running operations triggered on the app registration.
    :type operations: list[~users_user.models.MicrosoftGraphManagedAppOperation]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_sync_date_time': {'key': 'lastSyncDateTime', 'type': 'iso-8601'},
        'application_version': {'key': 'applicationVersion', 'type': 'str'},
        'management_sdk_version': {'key': 'managementSdkVersion', 'type': 'str'},
        'platform_version': {'key': 'platformVersion', 'type': 'str'},
        'device_type': {'key': 'deviceType', 'type': 'str'},
        'device_tag': {'key': 'deviceTag', 'type': 'str'},
        'device_name': {'key': 'deviceName', 'type': 'str'},
        'managed_device_id': {'key': 'managedDeviceId', 'type': 'str'},
        'azure_ad_device_id': {'key': 'azureADDeviceId', 'type': 'str'},
        'device_model': {'key': 'deviceModel', 'type': 'str'},
        'device_manufacturer': {'key': 'deviceManufacturer', 'type': 'str'},
        'flagged_reasons': {'key': 'flaggedReasons', 'type': '[str]'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'app_identifier': {'key': 'appIdentifier', 'type': 'object'},
        'version': {'key': 'version', 'type': 'str'},
        'applied_policies': {'key': 'appliedPolicies', 'type': '[MicrosoftGraphManagedAppPolicy]'},
        'intended_policies': {'key': 'intendedPolicies', 'type': '[MicrosoftGraphManagedAppPolicy]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphManagedAppOperation]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_sync_date_time: Optional[datetime.datetime] = None,
        application_version: Optional[str] = None,
        management_sdk_version: Optional[str] = None,
        platform_version: Optional[str] = None,
        device_type: Optional[str] = None,
        device_tag: Optional[str] = None,
        device_name: Optional[str] = None,
        managed_device_id: Optional[str] = None,
        azure_ad_device_id: Optional[str] = None,
        device_model: Optional[str] = None,
        device_manufacturer: Optional[str] = None,
        flagged_reasons: Optional[List[Union[str, "MicrosoftGraphManagedAppFlaggedReason"]]] = None,
        user_id: Optional[str] = None,
        app_identifier: Optional[object] = None,
        version: Optional[str] = None,
        applied_policies: Optional[List["MicrosoftGraphManagedAppPolicy"]] = None,
        intended_policies: Optional[List["MicrosoftGraphManagedAppPolicy"]] = None,
        operations: Optional[List["MicrosoftGraphManagedAppOperation"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppRegistration, self).__init__(id=id, **kwargs)
        self.created_date_time = created_date_time
        self.last_sync_date_time = last_sync_date_time
        self.application_version = application_version
        self.management_sdk_version = management_sdk_version
        self.platform_version = platform_version
        self.device_type = device_type
        self.device_tag = device_tag
        self.device_name = device_name
        self.managed_device_id = managed_device_id
        self.azure_ad_device_id = azure_ad_device_id
        self.device_model = device_model
        self.device_manufacturer = device_manufacturer
        self.flagged_reasons = flagged_reasons
        self.user_id = user_id
        self.app_identifier = app_identifier
        self.version = version
        self.applied_policies = applied_policies
        self.intended_policies = intended_policies
        self.operations = operations


class MicrosoftGraphManagedDevice(MicrosoftGraphEntity):
    """Devices that are managed or pre-enrolled through Intune.

    :param id: Read-only.
    :type id: str
    :param user_id: Unique Identifier for the user associated with the device.
    :type user_id: str
    :param device_name: Name of the device.
    :type device_name: str
    :param hardware_information: hardwareInformation.
    :type hardware_information: ~users_user.models.MicrosoftGraphHardwareInformation
    :param owner_type: ownerType. Possible values include: "unknown", "company", "personal".
    :type owner_type: str or ~users_user.models.MicrosoftGraphOwnerType
    :param managed_device_owner_type: managedDeviceOwnerType. Possible values include: "unknown",
     "company", "personal".
    :type managed_device_owner_type: str or ~users_user.models.MicrosoftGraphManagedDeviceOwnerType
    :param device_action_results: List of ComplexType deviceActionResult objects.
    :type device_action_results: list[~users_user.models.MicrosoftGraphDeviceActionResult]
    :param management_state: managementState. Possible values include: "managed", "retirePending",
     "retireFailed", "wipePending", "wipeFailed", "unhealthy", "deletePending", "retireIssued",
     "wipeIssued", "wipeCanceled", "retireCanceled", "discovered".
    :type management_state: str or ~users_user.models.MicrosoftGraphManagementState
    :param enrolled_date_time: Enrollment time of the device.
    :type enrolled_date_time: ~datetime.datetime
    :param last_sync_date_time: The date and time that the device last completed a successful sync
     with Intune.
    :type last_sync_date_time: ~datetime.datetime
    :param chassis_type: chassisType. Possible values include: "unknown", "desktop", "laptop",
     "worksWorkstation", "enterpriseServer", "phone", "tablet", "mobileOther", "mobileUnknown".
    :type chassis_type: str or ~users_user.models.MicrosoftGraphChassisType
    :param operating_system: Operating system of the device. Windows, iOS, etc.
    :type operating_system: str
    :param device_type: deviceType. Possible values include: "desktop", "windowsRT", "winMO6",
     "nokia", "windowsPhone", "mac", "winCE", "winEmbedded", "iPhone", "iPad", "iPod", "android",
     "iSocConsumer", "unix", "macMDM", "holoLens", "surfaceHub", "androidForWork",
     "androidEnterprise", "windows10x", "blackberry", "palm", "unknown".
    :type device_type: str or ~users_user.models.MicrosoftGraphDeviceType
    :param compliance_state: complianceState. Possible values include: "unknown", "compliant",
     "noncompliant", "conflict", "error", "inGracePeriod", "configManager".
    :type compliance_state: str or ~users_user.models.MicrosoftGraphComplianceState
    :param jail_broken: whether the device is jail broken or rooted.
    :type jail_broken: str
    :param management_agent: managementAgentType. Possible values include: "eas", "mdm", "easMdm",
     "intuneClient", "easIntuneClient", "configurationManagerClient",
     "configurationManagerClientMdm", "configurationManagerClientMdmEas", "unknown", "jamf",
     "googleCloudDevicePolicyController", "microsoft365ManagedMdm", "windowsManagementCloudApi".
    :type management_agent: str or ~users_user.models.MicrosoftGraphManagementAgentType
    :param os_version: Operating system version of the device.
    :type os_version: str
    :param eas_activated: Whether the device is Exchange ActiveSync activated.
    :type eas_activated: bool
    :param eas_device_id: Exchange ActiveSync Id of the device.
    :type eas_device_id: str
    :param eas_activation_date_time: Exchange ActivationSync activation time of the device.
    :type eas_activation_date_time: ~datetime.datetime
    :param aad_registered: Whether the device is Azure Active Directory registered. This property
     is read-only.
    :type aad_registered: bool
    :param azure_ad_registered: Whether the device is Azure Active Directory registered.
    :type azure_ad_registered: bool
    :param device_enrollment_type: deviceEnrollmentType. Possible values include: "unknown",
     "userEnrollment", "deviceEnrollmentManager", "appleBulkWithUser", "appleBulkWithoutUser",
     "windowsAzureADJoin", "windowsBulkUserless", "windowsAutoEnrollment",
     "windowsBulkAzureDomainJoin", "windowsCoManagement", "appleUserEnrollment",
     "appleUserEnrollmentWithServiceAccount", "azureAdJoinUsingAzureVmExtension".
    :type device_enrollment_type: str or ~users_user.models.MicrosoftGraphDeviceEnrollmentType
    :param lost_mode_state: lostModeState. Possible values include: "disabled", "enabled".
    :type lost_mode_state: str or ~users_user.models.MicrosoftGraphLostModeState
    :param activation_lock_bypass_code: Code that allows the Activation Lock on a device to be
     bypassed.
    :type activation_lock_bypass_code: str
    :param email_address: Email(s) for the user associated with the device.
    :type email_address: str
    :param azure_active_directory_device_id: The unique identifier for the Azure Active Directory
     device. Read only. This property is read-only.
    :type azure_active_directory_device_id: str
    :param azure_ad_device_id: The unique identifier for the Azure Active Directory device. Read
     only.
    :type azure_ad_device_id: str
    :param device_registration_state: deviceRegistrationState. Possible values include:
     "notRegistered", "registered", "revoked", "keyConflict", "approvalPending", "certificateReset",
     "notRegisteredPendingEnrollment", "unknown".
    :type device_registration_state: str or
     ~users_user.models.MicrosoftGraphDeviceRegistrationState
    :param device_category_display_name: Device category display name.
    :type device_category_display_name: str
    :param is_supervised: Device supervised status.
    :type is_supervised: bool
    :param exchange_last_successful_sync_date_time: Last time the device contacted Exchange.
    :type exchange_last_successful_sync_date_time: ~datetime.datetime
    :param exchange_access_state: deviceManagementExchangeAccessState. Possible values include:
     "none", "unknown", "allowed", "blocked", "quarantined".
    :type exchange_access_state: str or
     ~users_user.models.MicrosoftGraphDeviceManagementExchangeAccessState
    :param exchange_access_state_reason: deviceManagementExchangeAccessStateReason. Possible values
     include: "none", "unknown", "exchangeGlobalRule", "exchangeIndividualRule",
     "exchangeDeviceRule", "exchangeUpgrade", "exchangeMailboxPolicy", "other", "compliant",
     "notCompliant", "notEnrolled", "unknownLocation", "mfaRequired",
     "azureADBlockDueToAccessPolicy", "compromisedPassword", "deviceNotKnownWithManagedApp".
    :type exchange_access_state_reason: str or
     ~users_user.models.MicrosoftGraphDeviceManagementExchangeAccessStateReason
    :param remote_assistance_session_url: Url that allows a Remote Assistance session to be
     established with the device.
    :type remote_assistance_session_url: str
    :param remote_assistance_session_error_details: An error string that identifies issues when
     creating Remote Assistance session objects.
    :type remote_assistance_session_error_details: str
    :param is_encrypted: Device encryption status.
    :type is_encrypted: bool
    :param user_principal_name: Device user principal name.
    :type user_principal_name: str
    :param model: Model of the device.
    :type model: str
    :param manufacturer: Manufacturer of the device.
    :type manufacturer: str
    :param imei: IMEI.
    :type imei: str
    :param compliance_grace_period_expiration_date_time: The DateTime when device compliance grace
     period expires.
    :type compliance_grace_period_expiration_date_time: ~datetime.datetime
    :param serial_number: SerialNumber.
    :type serial_number: str
    :param phone_number: Phone number of the device.
    :type phone_number: str
    :param android_security_patch_level: Android security patch level.
    :type android_security_patch_level: str
    :param user_display_name: User display name.
    :type user_display_name: str
    :param configuration_manager_client_enabled_features:
     configurationManagerClientEnabledFeatures.
    :type configuration_manager_client_enabled_features:
     ~users_user.models.MicrosoftGraphConfigurationManagerClientEnabledFeatures
    :param wi_fi_mac_address: Wi-Fi MAC.
    :type wi_fi_mac_address: str
    :param device_health_attestation_state: deviceHealthAttestationState.
    :type device_health_attestation_state:
     ~users_user.models.MicrosoftGraphDeviceHealthAttestationState
    :param subscriber_carrier: Subscriber Carrier.
    :type subscriber_carrier: str
    :param meid: MEID.
    :type meid: str
    :param total_storage_space_in_bytes: Total Storage in Bytes.
    :type total_storage_space_in_bytes: long
    :param free_storage_space_in_bytes: Free Storage in Bytes.
    :type free_storage_space_in_bytes: long
    :param managed_device_name: Automatically generated name to identify a device. Can be
     overwritten to a user friendly name.
    :type managed_device_name: str
    :param partner_reported_threat_state: managedDevicePartnerReportedHealthState. Possible values
     include: "unknown", "activated", "deactivated", "secured", "lowSeverity", "mediumSeverity",
     "highSeverity", "unresponsive", "compromised", "misconfigured".
    :type partner_reported_threat_state: str or
     ~users_user.models.MicrosoftGraphManagedDevicePartnerReportedHealthState
    :param retire_after_date_time: Indicates the time after when a device will be auto retired
     because of scheduled action. This property is read-only.
    :type retire_after_date_time: ~datetime.datetime
    :param users_logged_on: Indicates the last logged on users of a device. This property is read-
     only.
    :type users_logged_on: list[~users_user.models.MicrosoftGraphLoggedOnUser]
    :param prefer_mdm_over_group_policy_applied_date_time: Reports the DateTime the
     preferMdmOverGroupPolicy setting was set.  When set, the Intune MDM settings will override
     Group Policy settings if there is a conflict. Read Only. This property is read-only.
    :type prefer_mdm_over_group_policy_applied_date_time: ~datetime.datetime
    :param autopilot_enrolled: Reports if the managed device is enrolled via auto-pilot. This
     property is read-only.
    :type autopilot_enrolled: bool
    :param require_user_enrollment_approval: Reports if the managed iOS device is user approval
     enrollment. This property is read-only.
    :type require_user_enrollment_approval: bool
    :param management_certificate_expiration_date: Reports device management certificate expiration
     date. This property is read-only.
    :type management_certificate_expiration_date: ~datetime.datetime
    :param iccid: Integrated Circuit Card Identifier, it is A SIM card's unique identification
     number. This property is read-only.
    :type iccid: str
    :param udid: Unique Device Identifier for iOS and macOS devices. This property is read-only.
    :type udid: str
    :param role_scope_tag_ids: List of Scope Tag IDs for this Device instance.
    :type role_scope_tag_ids: list[str]
    :param windows_active_malware_count: Count of active malware for this windows device. This
     property is read-only.
    :type windows_active_malware_count: int
    :param windows_remediated_malware_count: Count of remediated malware for this windows device.
     This property is read-only.
    :type windows_remediated_malware_count: int
    :param notes: Notes on the device created by IT Admin.
    :type notes: str
    :param configuration_manager_client_health_state: configurationManagerClientHealthState.
    :type configuration_manager_client_health_state:
     ~users_user.models.MicrosoftGraphConfigurationManagerClientHealthState
    :param configuration_manager_client_information: configurationManagerClientInformation.
    :type configuration_manager_client_information:
     ~users_user.models.MicrosoftGraphConfigurationManagerClientInformation
    :param ethernet_mac_address: Ethernet MAC. This property is read-only.
    :type ethernet_mac_address: str
    :param physical_memory_in_bytes: Total Memory in Bytes. This property is read-only.
    :type physical_memory_in_bytes: long
    :param processor_architecture: managedDeviceArchitecture. Possible values include: "unknown",
     "x86", "x64", "arm", "arM64".
    :type processor_architecture: str or ~users_user.models.MicrosoftGraphManagedDeviceArchitecture
    :param specification_version: Specification version. This property is read-only.
    :type specification_version: str
    :param security_baseline_states: Security baseline states for this device.
    :type security_baseline_states: list[~users_user.models.MicrosoftGraphSecurityBaselineState]
    :param device_configuration_states: Device configuration states for this device.
    :type device_configuration_states:
     list[~users_user.models.MicrosoftGraphDeviceConfigurationState]
    :param device_compliance_policy_states: Device compliance policy states for this device.
    :type device_compliance_policy_states:
     list[~users_user.models.MicrosoftGraphDeviceCompliancePolicyState]
    :param managed_device_mobile_app_configuration_states: Managed device mobile app configuration
     states for this device.
    :type managed_device_mobile_app_configuration_states:
     list[~users_user.models.MicrosoftGraphManagedDeviceMobileAppConfigurationState]
    :param detected_apps: All applications currently installed on the device.
    :type detected_apps: list[~users_user.models.MicrosoftGraphDetectedApp]
    :param device_category: Device categories provides a way to organize your devices. Using device
     categories, company administrators can define their own categories that make sense to their
     company.??These categories can then be applied to a device in the Intune Azure console or
     selected by a user during device enrollment. You can filter reports and create dynamic Azure
     Active Directory device groups based on device categories.
    :type device_category: ~users_user.models.MicrosoftGraphDeviceCategory
    :param windows_protection_state: Device protection status entity.
    :type windows_protection_state: ~users_user.models.MicrosoftGraphWindowsProtectionState
    :param users: The primary users associated with the managed device.
    :type users: list[~users_user.models.MicrosoftGraphUser]
    """

    _validation = {
        'windows_active_malware_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'windows_remediated_malware_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'device_name': {'key': 'deviceName', 'type': 'str'},
        'hardware_information': {'key': 'hardwareInformation', 'type': 'MicrosoftGraphHardwareInformation'},
        'owner_type': {'key': 'ownerType', 'type': 'str'},
        'managed_device_owner_type': {'key': 'managedDeviceOwnerType', 'type': 'str'},
        'device_action_results': {'key': 'deviceActionResults', 'type': '[MicrosoftGraphDeviceActionResult]'},
        'management_state': {'key': 'managementState', 'type': 'str'},
        'enrolled_date_time': {'key': 'enrolledDateTime', 'type': 'iso-8601'},
        'last_sync_date_time': {'key': 'lastSyncDateTime', 'type': 'iso-8601'},
        'chassis_type': {'key': 'chassisType', 'type': 'str'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'device_type': {'key': 'deviceType', 'type': 'str'},
        'compliance_state': {'key': 'complianceState', 'type': 'str'},
        'jail_broken': {'key': 'jailBroken', 'type': 'str'},
        'management_agent': {'key': 'managementAgent', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'eas_activated': {'key': 'easActivated', 'type': 'bool'},
        'eas_device_id': {'key': 'easDeviceId', 'type': 'str'},
        'eas_activation_date_time': {'key': 'easActivationDateTime', 'type': 'iso-8601'},
        'aad_registered': {'key': 'aadRegistered', 'type': 'bool'},
        'azure_ad_registered': {'key': 'azureADRegistered', 'type': 'bool'},
        'device_enrollment_type': {'key': 'deviceEnrollmentType', 'type': 'str'},
        'lost_mode_state': {'key': 'lostModeState', 'type': 'str'},
        'activation_lock_bypass_code': {'key': 'activationLockBypassCode', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'azure_active_directory_device_id': {'key': 'azureActiveDirectoryDeviceId', 'type': 'str'},
        'azure_ad_device_id': {'key': 'azureADDeviceId', 'type': 'str'},
        'device_registration_state': {'key': 'deviceRegistrationState', 'type': 'str'},
        'device_category_display_name': {'key': 'deviceCategoryDisplayName', 'type': 'str'},
        'is_supervised': {'key': 'isSupervised', 'type': 'bool'},
        'exchange_last_successful_sync_date_time': {'key': 'exchangeLastSuccessfulSyncDateTime', 'type': 'iso-8601'},
        'exchange_access_state': {'key': 'exchangeAccessState', 'type': 'str'},
        'exchange_access_state_reason': {'key': 'exchangeAccessStateReason', 'type': 'str'},
        'remote_assistance_session_url': {'key': 'remoteAssistanceSessionUrl', 'type': 'str'},
        'remote_assistance_session_error_details': {'key': 'remoteAssistanceSessionErrorDetails', 'type': 'str'},
        'is_encrypted': {'key': 'isEncrypted', 'type': 'bool'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'imei': {'key': 'imei', 'type': 'str'},
        'compliance_grace_period_expiration_date_time': {'key': 'complianceGracePeriodExpirationDateTime', 'type': 'iso-8601'},
        'serial_number': {'key': 'serialNumber', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'android_security_patch_level': {'key': 'androidSecurityPatchLevel', 'type': 'str'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'configuration_manager_client_enabled_features': {'key': 'configurationManagerClientEnabledFeatures', 'type': 'MicrosoftGraphConfigurationManagerClientEnabledFeatures'},
        'wi_fi_mac_address': {'key': 'wiFiMacAddress', 'type': 'str'},
        'device_health_attestation_state': {'key': 'deviceHealthAttestationState', 'type': 'MicrosoftGraphDeviceHealthAttestationState'},
        'subscriber_carrier': {'key': 'subscriberCarrier', 'type': 'str'},
        'meid': {'key': 'meid', 'type': 'str'},
        'total_storage_space_in_bytes': {'key': 'totalStorageSpaceInBytes', 'type': 'long'},
        'free_storage_space_in_bytes': {'key': 'freeStorageSpaceInBytes', 'type': 'long'},
        'managed_device_name': {'key': 'managedDeviceName', 'type': 'str'},
        'partner_reported_threat_state': {'key': 'partnerReportedThreatState', 'type': 'str'},
        'retire_after_date_time': {'key': 'retireAfterDateTime', 'type': 'iso-8601'},
        'users_logged_on': {'key': 'usersLoggedOn', 'type': '[MicrosoftGraphLoggedOnUser]'},
        'prefer_mdm_over_group_policy_applied_date_time': {'key': 'preferMdmOverGroupPolicyAppliedDateTime', 'type': 'iso-8601'},
        'autopilot_enrolled': {'key': 'autopilotEnrolled', 'type': 'bool'},
        'require_user_enrollment_approval': {'key': 'requireUserEnrollmentApproval', 'type': 'bool'},
        'management_certificate_expiration_date': {'key': 'managementCertificateExpirationDate', 'type': 'iso-8601'},
        'iccid': {'key': 'iccid', 'type': 'str'},
        'udid': {'key': 'udid', 'type': 'str'},
        'role_scope_tag_ids': {'key': 'roleScopeTagIds', 'type': '[str]'},
        'windows_active_malware_count': {'key': 'windowsActiveMalwareCount', 'type': 'int'},
        'windows_remediated_malware_count': {'key': 'windowsRemediatedMalwareCount', 'type': 'int'},
        'notes': {'key': 'notes', 'type': 'str'},
        'configuration_manager_client_health_state': {'key': 'configurationManagerClientHealthState', 'type': 'MicrosoftGraphConfigurationManagerClientHealthState'},
        'configuration_manager_client_information': {'key': 'configurationManagerClientInformation', 'type': 'MicrosoftGraphConfigurationManagerClientInformation'},
        'ethernet_mac_address': {'key': 'ethernetMacAddress', 'type': 'str'},
        'physical_memory_in_bytes': {'key': 'physicalMemoryInBytes', 'type': 'long'},
        'processor_architecture': {'key': 'processorArchitecture', 'type': 'str'},
        'specification_version': {'key': 'specificationVersion', 'type': 'str'},
        'security_baseline_states': {'key': 'securityBaselineStates', 'type': '[MicrosoftGraphSecurityBaselineState]'},
        'device_configuration_states': {'key': 'deviceConfigurationStates', 'type': '[MicrosoftGraphDeviceConfigurationState]'},
        'device_compliance_policy_states': {'key': 'deviceCompliancePolicyStates', 'type': '[MicrosoftGraphDeviceCompliancePolicyState]'},
        'managed_device_mobile_app_configuration_states': {'key': 'managedDeviceMobileAppConfigurationStates', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationState]'},
        'detected_apps': {'key': 'detectedApps', 'type': '[MicrosoftGraphDetectedApp]'},
        'device_category': {'key': 'deviceCategory', 'type': 'MicrosoftGraphDeviceCategory'},
        'windows_protection_state': {'key': 'windowsProtectionState', 'type': 'MicrosoftGraphWindowsProtectionState'},
        'users': {'key': 'users', 'type': '[MicrosoftGraphUser]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        user_id: Optional[str] = None,
        device_name: Optional[str] = None,
        hardware_information: Optional["MicrosoftGraphHardwareInformation"] = None,
        owner_type: Optional[Union[str, "MicrosoftGraphOwnerType"]] = None,
        managed_device_owner_type: Optional[Union[str, "MicrosoftGraphManagedDeviceOwnerType"]] = None,
        device_action_results: Optional[List["MicrosoftGraphDeviceActionResult"]] = None,
        management_state: Optional[Union[str, "MicrosoftGraphManagementState"]] = None,
        enrolled_date_time: Optional[datetime.datetime] = None,
        last_sync_date_time: Optional[datetime.datetime] = None,
        chassis_type: Optional[Union[str, "MicrosoftGraphChassisType"]] = None,
        operating_system: Optional[str] = None,
        device_type: Optional[Union[str, "MicrosoftGraphDeviceType"]] = None,
        compliance_state: Optional[Union[str, "MicrosoftGraphComplianceState"]] = None,
        jail_broken: Optional[str] = None,
        management_agent: Optional[Union[str, "MicrosoftGraphManagementAgentType"]] = None,
        os_version: Optional[str] = None,
        eas_activated: Optional[bool] = None,
        eas_device_id: Optional[str] = None,
        eas_activation_date_time: Optional[datetime.datetime] = None,
        aad_registered: Optional[bool] = None,
        azure_ad_registered: Optional[bool] = None,
        device_enrollment_type: Optional[Union[str, "MicrosoftGraphDeviceEnrollmentType"]] = None,
        lost_mode_state: Optional[Union[str, "MicrosoftGraphLostModeState"]] = None,
        activation_lock_bypass_code: Optional[str] = None,
        email_address: Optional[str] = None,
        azure_active_directory_device_id: Optional[str] = None,
        azure_ad_device_id: Optional[str] = None,
        device_registration_state: Optional[Union[str, "MicrosoftGraphDeviceRegistrationState"]] = None,
        device_category_display_name: Optional[str] = None,
        is_supervised: Optional[bool] = None,
        exchange_last_successful_sync_date_time: Optional[datetime.datetime] = None,
        exchange_access_state: Optional[Union[str, "MicrosoftGraphDeviceManagementExchangeAccessState"]] = None,
        exchange_access_state_reason: Optional[Union[str, "MicrosoftGraphDeviceManagementExchangeAccessStateReason"]] = None,
        remote_assistance_session_url: Optional[str] = None,
        remote_assistance_session_error_details: Optional[str] = None,
        is_encrypted: Optional[bool] = None,
        user_principal_name: Optional[str] = None,
        model: Optional[str] = None,
        manufacturer: Optional[str] = None,
        imei: Optional[str] = None,
        compliance_grace_period_expiration_date_time: Optional[datetime.datetime] = None,
        serial_number: Optional[str] = None,
        phone_number: Optional[str] = None,
        android_security_patch_level: Optional[str] = None,
        user_display_name: Optional[str] = None,
        configuration_manager_client_enabled_features: Optional["MicrosoftGraphConfigurationManagerClientEnabledFeatures"] = None,
        wi_fi_mac_address: Optional[str] = None,
        device_health_attestation_state: Optional["MicrosoftGraphDeviceHealthAttestationState"] = None,
        subscriber_carrier: Optional[str] = None,
        meid: Optional[str] = None,
        total_storage_space_in_bytes: Optional[int] = None,
        free_storage_space_in_bytes: Optional[int] = None,
        managed_device_name: Optional[str] = None,
        partner_reported_threat_state: Optional[Union[str, "MicrosoftGraphManagedDevicePartnerReportedHealthState"]] = None,
        retire_after_date_time: Optional[datetime.datetime] = None,
        users_logged_on: Optional[List["MicrosoftGraphLoggedOnUser"]] = None,
        prefer_mdm_over_group_policy_applied_date_time: Optional[datetime.datetime] = None,
        autopilot_enrolled: Optional[bool] = None,
        require_user_enrollment_approval: Optional[bool] = None,
        management_certificate_expiration_date: Optional[datetime.datetime] = None,
        iccid: Optional[str] = None,
        udid: Optional[str] = None,
        role_scope_tag_ids: Optional[List[str]] = None,
        windows_active_malware_count: Optional[int] = None,
        windows_remediated_malware_count: Optional[int] = None,
        notes: Optional[str] = None,
        configuration_manager_client_health_state: Optional["MicrosoftGraphConfigurationManagerClientHealthState"] = None,
        configuration_manager_client_information: Optional["MicrosoftGraphConfigurationManagerClientInformation"] = None,
        ethernet_mac_address: Optional[str] = None,
        physical_memory_in_bytes: Optional[int] = None,
        processor_architecture: Optional[Union[str, "MicrosoftGraphManagedDeviceArchitecture"]] = None,
        specification_version: Optional[str] = None,
        security_baseline_states: Optional[List["MicrosoftGraphSecurityBaselineState"]] = None,
        device_configuration_states: Optional[List["MicrosoftGraphDeviceConfigurationState"]] = None,
        device_compliance_policy_states: Optional[List["MicrosoftGraphDeviceCompliancePolicyState"]] = None,
        managed_device_mobile_app_configuration_states: Optional[List["MicrosoftGraphManagedDeviceMobileAppConfigurationState"]] = None,
        detected_apps: Optional[List["MicrosoftGraphDetectedApp"]] = None,
        device_category: Optional["MicrosoftGraphDeviceCategory"] = None,
        windows_protection_state: Optional["MicrosoftGraphWindowsProtectionState"] = None,
        users: Optional[List["MicrosoftGraphUser"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphManagedDevice, self).__init__(id=id, **kwargs)
        self.user_id = user_id
        self.device_name = device_name
        self.hardware_information = hardware_information
        self.owner_type = owner_type
        self.managed_device_owner_type = managed_device_owner_type
        self.device_action_results = device_action_results
        self.management_state = management_state
        self.enrolled_date_time = enrolled_date_time
        self.last_sync_date_time = last_sync_date_time
        self.chassis_type = chassis_type
        self.operating_system = operating_system
        self.device_type = device_type
        self.compliance_state = compliance_state
        self.jail_broken = jail_broken
        self.management_agent = management_agent
        self.os_version = os_version
        self.eas_activated = eas_activated
        self.eas_device_id = eas_device_id
        self.eas_activation_date_time = eas_activation_date_time
        self.aad_registered = aad_registered
        self.azure_ad_registered = azure_ad_registered
        self.device_enrollment_type = device_enrollment_type
        self.lost_mode_state = lost_mode_state
        self.activation_lock_bypass_code = activation_lock_bypass_code
        self.email_address = email_address
        self.azure_active_directory_device_id = azure_active_directory_device_id
        self.azure_ad_device_id = azure_ad_device_id
        self.device_registration_state = device_registration_state
        self.device_category_display_name = device_category_display_name
        self.is_supervised = is_supervised
        self.exchange_last_successful_sync_date_time = exchange_last_successful_sync_date_time
        self.exchange_access_state = exchange_access_state
        self.exchange_access_state_reason = exchange_access_state_reason
        self.remote_assistance_session_url = remote_assistance_session_url
        self.remote_assistance_session_error_details = remote_assistance_session_error_details
        self.is_encrypted = is_encrypted
        self.user_principal_name = user_principal_name
        self.model = model
        self.manufacturer = manufacturer
        self.imei = imei
        self.compliance_grace_period_expiration_date_time = compliance_grace_period_expiration_date_time
        self.serial_number = serial_number
        self.phone_number = phone_number
        self.android_security_patch_level = android_security_patch_level
        self.user_display_name = user_display_name
        self.configuration_manager_client_enabled_features = configuration_manager_client_enabled_features
        self.wi_fi_mac_address = wi_fi_mac_address
        self.device_health_attestation_state = device_health_attestation_state
        self.subscriber_carrier = subscriber_carrier
        self.meid = meid
        self.total_storage_space_in_bytes = total_storage_space_in_bytes
        self.free_storage_space_in_bytes = free_storage_space_in_bytes
        self.managed_device_name = managed_device_name
        self.partner_reported_threat_state = partner_reported_threat_state
        self.retire_after_date_time = retire_after_date_time
        self.users_logged_on = users_logged_on
        self.prefer_mdm_over_group_policy_applied_date_time = prefer_mdm_over_group_policy_applied_date_time
        self.autopilot_enrolled = autopilot_enrolled
        self.require_user_enrollment_approval = require_user_enrollment_approval
        self.management_certificate_expiration_date = management_certificate_expiration_date
        self.iccid = iccid
        self.udid = udid
        self.role_scope_tag_ids = role_scope_tag_ids
        self.windows_active_malware_count = windows_active_malware_count
        self.windows_remediated_malware_count = windows_remediated_malware_count
        self.notes = notes
        self.configuration_manager_client_health_state = configuration_manager_client_health_state
        self.configuration_manager_client_information = configuration_manager_client_information
        self.ethernet_mac_address = ethernet_mac_address
        self.physical_memory_in_bytes = physical_memory_in_bytes
        self.processor_architecture = processor_architecture
        self.specification_version = specification_version
        self.security_baseline_states = security_baseline_states
        self.device_configuration_states = device_configuration_states
        self.device_compliance_policy_states = device_compliance_policy_states
        self.managed_device_mobile_app_configuration_states = managed_device_mobile_app_configuration_states
        self.detected_apps = detected_apps
        self.device_category = device_category
        self.windows_protection_state = windows_protection_state
        self.users = users


class MicrosoftGraphManagedDeviceMobileAppConfigurationSettingState(msrest.serialization.Model):
    """managedDeviceMobileAppConfigurationSettingState.

    :param setting: The setting that is being reported.
    :type setting: str
    :param setting_name: Localized/user friendly setting name that is being reported.
    :type setting_name: str
    :param instance_display_name: Name of setting instance that is being reported.
    :type instance_display_name: str
    :param state: complianceStatus. Possible values include: "unknown", "notApplicable",
     "compliant", "remediated", "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~users_user.models.MicrosoftGraphComplianceStatus
    :param error_code: Error code for the setting.
    :type error_code: long
    :param error_description: Error description.
    :type error_description: str
    :param user_id: UserId.
    :type user_id: str
    :param user_name: UserName.
    :type user_name: str
    :param user_email: UserEmail.
    :type user_email: str
    :param user_principal_name: UserPrincipalName.
    :type user_principal_name: str
    :param sources: Contributing policies.
    :type sources: list[~users_user.models.MicrosoftGraphSettingSource]
    :param current_value: Current value of setting on device.
    :type current_value: str
    :param setting_instance_id: SettingInstanceId.
    :type setting_instance_id: str
    """

    _attribute_map = {
        'setting': {'key': 'setting', 'type': 'str'},
        'setting_name': {'key': 'settingName', 'type': 'str'},
        'instance_display_name': {'key': 'instanceDisplayName', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'long'},
        'error_description': {'key': 'errorDescription', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[MicrosoftGraphSettingSource]'},
        'current_value': {'key': 'currentValue', 'type': 'str'},
        'setting_instance_id': {'key': 'settingInstanceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        setting: Optional[str] = None,
        setting_name: Optional[str] = None,
        instance_display_name: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphComplianceStatus"]] = None,
        error_code: Optional[int] = None,
        error_description: Optional[str] = None,
        user_id: Optional[str] = None,
        user_name: Optional[str] = None,
        user_email: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        sources: Optional[List["MicrosoftGraphSettingSource"]] = None,
        current_value: Optional[str] = None,
        setting_instance_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphManagedDeviceMobileAppConfigurationSettingState, self).__init__(**kwargs)
        self.setting = setting
        self.setting_name = setting_name
        self.instance_display_name = instance_display_name
        self.state = state
        self.error_code = error_code
        self.error_description = error_description
        self.user_id = user_id
        self.user_name = user_name
        self.user_email = user_email
        self.user_principal_name = user_principal_name
        self.sources = sources
        self.current_value = current_value
        self.setting_instance_id = setting_instance_id


class MicrosoftGraphManagedDeviceMobileAppConfigurationState(MicrosoftGraphEntity):
    """Managed Device Mobile App Configuration State for a given device.

    :param id: Read-only.
    :type id: str
    :param setting_states:
    :type setting_states:
     list[~users_user.models.MicrosoftGraphManagedDeviceMobileAppConfigurationSettingState]
    :param display_name: The name of the policy for this policyBase.
    :type display_name: str
    :param version: The version of the policy.
    :type version: int
    :param platform_type: policyPlatformType. Possible values include: "android", "androidForWork",
     "iOS", "macOS", "windowsPhone81", "windows81AndLater", "windows10AndLater",
     "androidWorkProfile", "windows10XProfile", "all".
    :type platform_type: str or ~users_user.models.MicrosoftGraphPolicyPlatformType
    :param state: complianceStatus. Possible values include: "unknown", "notApplicable",
     "compliant", "remediated", "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~users_user.models.MicrosoftGraphComplianceStatus
    :param setting_count: Count of how many setting a policy holds.
    :type setting_count: int
    :param user_id: User unique identifier, must be Guid.
    :type user_id: str
    :param user_principal_name: User Principal Name.
    :type user_principal_name: str
    """

    _validation = {
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
        'setting_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'setting_states': {'key': 'settingStates', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationSettingState]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
        'platform_type': {'key': 'platformType', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'setting_count': {'key': 'settingCount', 'type': 'int'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        setting_states: Optional[List["MicrosoftGraphManagedDeviceMobileAppConfigurationSettingState"]] = None,
        display_name: Optional[str] = None,
        version: Optional[int] = None,
        platform_type: Optional[Union[str, "MicrosoftGraphPolicyPlatformType"]] = None,
        state: Optional[Union[str, "MicrosoftGraphComplianceStatus"]] = None,
        setting_count: Optional[int] = None,
        user_id: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphManagedDeviceMobileAppConfigurationState, self).__init__(id=id, **kwargs)
        self.setting_states = setting_states
        self.display_name = display_name
        self.version = version
        self.platform_type = platform_type
        self.state = state
        self.setting_count = setting_count
        self.user_id = user_id
        self.user_principal_name = user_principal_name


class MicrosoftGraphMeetingParticipantInfo(msrest.serialization.Model):
    """meetingParticipantInfo.

    :param identity: identitySet.
    :type identity: ~users_user.models.MicrosoftGraphIdentitySet
    :param upn: User principal name of the participant.
    :type upn: str
    """

    _attribute_map = {
        'identity': {'key': 'identity', 'type': 'MicrosoftGraphIdentitySet'},
        'upn': {'key': 'upn', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        identity: Optional["MicrosoftGraphIdentitySet"] = None,
        upn: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMeetingParticipantInfo, self).__init__(**kwargs)
        self.identity = identity
        self.upn = upn


class MicrosoftGraphMeetingParticipants(msrest.serialization.Model):
    """meetingParticipants.

    :param organizer: meetingParticipantInfo.
    :type organizer: ~users_user.models.MicrosoftGraphMeetingParticipantInfo
    :param attendees:
    :type attendees: list[~users_user.models.MicrosoftGraphMeetingParticipantInfo]
    :param producers:
    :type producers: list[~users_user.models.MicrosoftGraphMeetingParticipantInfo]
    :param contributors:
    :type contributors: list[~users_user.models.MicrosoftGraphMeetingParticipantInfo]
    """

    _attribute_map = {
        'organizer': {'key': 'organizer', 'type': 'MicrosoftGraphMeetingParticipantInfo'},
        'attendees': {'key': 'attendees', 'type': '[MicrosoftGraphMeetingParticipantInfo]'},
        'producers': {'key': 'producers', 'type': '[MicrosoftGraphMeetingParticipantInfo]'},
        'contributors': {'key': 'contributors', 'type': '[MicrosoftGraphMeetingParticipantInfo]'},
    }

    def __init__(
        self,
        *,
        organizer: Optional["MicrosoftGraphMeetingParticipantInfo"] = None,
        attendees: Optional[List["MicrosoftGraphMeetingParticipantInfo"]] = None,
        producers: Optional[List["MicrosoftGraphMeetingParticipantInfo"]] = None,
        contributors: Optional[List["MicrosoftGraphMeetingParticipantInfo"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMeetingParticipants, self).__init__(**kwargs)
        self.organizer = organizer
        self.attendees = attendees
        self.producers = producers
        self.contributors = contributors


class MicrosoftGraphMention(MicrosoftGraphEntity):
    """mention.

    :param id: Read-only.
    :type id: str
    :param mentioned: emailAddress.
    :type mentioned: ~users_user.models.MicrosoftGraphEmailAddress
    :param mention_text:
    :type mention_text: str
    :param client_reference:
    :type client_reference: str
    :param created_by: emailAddress.
    :type created_by: ~users_user.models.MicrosoftGraphEmailAddress
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param server_created_date_time:
    :type server_created_date_time: ~datetime.datetime
    :param deep_link:
    :type deep_link: str
    :param application:
    :type application: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'mentioned': {'key': 'mentioned', 'type': 'MicrosoftGraphEmailAddress'},
        'mention_text': {'key': 'mentionText', 'type': 'str'},
        'client_reference': {'key': 'clientReference', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphEmailAddress'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'server_created_date_time': {'key': 'serverCreatedDateTime', 'type': 'iso-8601'},
        'deep_link': {'key': 'deepLink', 'type': 'str'},
        'application': {'key': 'application', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        mentioned: Optional["MicrosoftGraphEmailAddress"] = None,
        mention_text: Optional[str] = None,
        client_reference: Optional[str] = None,
        created_by: Optional["MicrosoftGraphEmailAddress"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        server_created_date_time: Optional[datetime.datetime] = None,
        deep_link: Optional[str] = None,
        application: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMention, self).__init__(id=id, **kwargs)
        self.mentioned = mentioned
        self.mention_text = mention_text
        self.client_reference = client_reference
        self.created_by = created_by
        self.created_date_time = created_date_time
        self.server_created_date_time = server_created_date_time
        self.deep_link = deep_link
        self.application = application


class MicrosoftGraphMentionAction(msrest.serialization.Model):
    """mentionAction.

    :param mentionees: The identities of the users mentioned in this action.
    :type mentionees: list[~users_user.models.MicrosoftGraphIdentitySet]
    """

    _attribute_map = {
        'mentionees': {'key': 'mentionees', 'type': '[MicrosoftGraphIdentitySet]'},
    }

    def __init__(
        self,
        *,
        mentionees: Optional[List["MicrosoftGraphIdentitySet"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMentionAction, self).__init__(**kwargs)
        self.mentionees = mentionees


class MicrosoftGraphMentionsPreview(msrest.serialization.Model):
    """mentionsPreview.

    :param is_mentioned:
    :type is_mentioned: bool
    """

    _attribute_map = {
        'is_mentioned': {'key': 'isMentioned', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        is_mentioned: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphMentionsPreview, self).__init__(**kwargs)
        self.is_mentioned = is_mentioned


class MicrosoftGraphMessage(MicrosoftGraphOutlookItem):
    """message.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param received_date_time: The date and time the message was received.
    :type received_date_time: ~datetime.datetime
    :param sent_date_time: The date and time the message was sent.
    :type sent_date_time: ~datetime.datetime
    :param has_attachments: Indicates whether the message has attachments. This property doesn't
     include inline attachments, so if a message contains only inline attachments, this property is
     false. To verify the existence of inline attachments, parse the body property to look for a src
     attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
    :type has_attachments: bool
    :param internet_message_id: The message ID in the format specified by RFC2822.
    :type internet_message_id: str
    :param internet_message_headers: A collection of message headers defined by RFC5322. The set
     includes message headers indicating the network path taken by a message from the sender to the
     recipient. It can also contain custom message headers that hold app data for the message.
     Returned only on applying a $select query option. Read-only.
    :type internet_message_headers: list[~users_user.models.MicrosoftGraphInternetMessageHeader]
    :param subject: The subject of the message.
    :type subject: str
    :param body: itemBody.
    :type body: ~users_user.models.MicrosoftGraphItemBody
    :param body_preview: The first 255 characters of the message body. It is in text format.
    :type body_preview: str
    :param importance: importance. Possible values include: "low", "normal", "high".
    :type importance: str or ~users_user.models.MicrosoftGraphImportance
    :param parent_folder_id: The unique identifier for the message's parent mailFolder.
    :type parent_folder_id: str
    :param sender: recipient.
    :type sender: ~users_user.models.MicrosoftGraphRecipient
    :param from_property: recipient.
    :type from_property: ~users_user.models.MicrosoftGraphRecipient
    :param to_recipients: The To: recipients for the message.
    :type to_recipients: list[~users_user.models.MicrosoftGraphRecipient]
    :param cc_recipients: The Cc: recipients for the message.
    :type cc_recipients: list[~users_user.models.MicrosoftGraphRecipient]
    :param bcc_recipients: The Bcc: recipients for the message.
    :type bcc_recipients: list[~users_user.models.MicrosoftGraphRecipient]
    :param reply_to: The email addresses to use when replying.
    :type reply_to: list[~users_user.models.MicrosoftGraphRecipient]
    :param conversation_id: The ID of the conversation the email belongs to.
    :type conversation_id: str
    :param conversation_index: Indicates the position of the message within the conversation.
    :type conversation_index: bytes
    :param unique_body: itemBody.
    :type unique_body: ~users_user.models.MicrosoftGraphItemBody
    :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
     message.
    :type is_delivery_receipt_requested: bool
    :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
     message.
    :type is_read_receipt_requested: bool
    :param is_read: Indicates whether the message has been read.
    :type is_read: bool
    :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
     been sent yet.
    :type is_draft: bool
    :param web_link: The URL to open the message in Outlook Web App.You can append an ispopout
     argument to the end of the URL to change how the message is displayed. If ispopout is not
     present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
     to 0, then the browser will show the message in the Outlook Web App review pane.The message
     will open in the browser if you are logged in to your mailbox via Outlook Web App. You will be
     prompted to login if you are not already logged in with the browser.This URL can be accessed
     from within an iFrame.
    :type web_link: str
    :param mentions_preview: mentionsPreview.
    :type mentions_preview: ~users_user.models.MicrosoftGraphMentionsPreview
    :param inference_classification: inferenceClassificationType. Possible values include:
     "focused", "other".
    :type inference_classification: str or
     ~users_user.models.MicrosoftGraphInferenceClassificationType
    :param unsubscribe_data:
    :type unsubscribe_data: list[str]
    :param unsubscribe_enabled:
    :type unsubscribe_enabled: bool
    :param flag: followupFlag.
    :type flag: ~users_user.models.MicrosoftGraphFollowupFlag
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the message. Nullable.
    :type single_value_extended_properties:
     list[~users_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the message. Nullable.
    :type multi_value_extended_properties:
     list[~users_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param attachments: The fileAttachment and itemAttachment attachments for the message.
    :type attachments: list[~users_user.models.MicrosoftGraphAttachment]
    :param extensions: The collection of open extensions defined for the message. Nullable.
    :type extensions: list[~users_user.models.MicrosoftGraphEntity]
    :param mentions:
    :type mentions: list[~users_user.models.MicrosoftGraphMention]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'received_date_time': {'key': 'receivedDateTime', 'type': 'iso-8601'},
        'sent_date_time': {'key': 'sentDateTime', 'type': 'iso-8601'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'internet_message_id': {'key': 'internetMessageId', 'type': 'str'},
        'internet_message_headers': {'key': 'internetMessageHeaders', 'type': '[MicrosoftGraphInternetMessageHeader]'},
        'subject': {'key': 'subject', 'type': 'str'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'body_preview': {'key': 'bodyPreview', 'type': 'str'},
        'importance': {'key': 'importance', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'sender': {'key': 'sender', 'type': 'MicrosoftGraphRecipient'},
        'from_property': {'key': 'from', 'type': 'MicrosoftGraphRecipient'},
        'to_recipients': {'key': 'toRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'cc_recipients': {'key': 'ccRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'bcc_recipients': {'key': 'bccRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'reply_to': {'key': 'replyTo', 'type': '[MicrosoftGraphRecipient]'},
        'conversation_id': {'key': 'conversationId', 'type': 'str'},
        'conversation_index': {'key': 'conversationIndex', 'type': 'base64'},
        'unique_body': {'key': 'uniqueBody', 'type': 'MicrosoftGraphItemBody'},
        'is_delivery_receipt_requested': {'key': 'isDeliveryReceiptRequested', 'type': 'bool'},
        'is_read_receipt_requested': {'key': 'isReadReceiptRequested', 'type': 'bool'},
        'is_read': {'key': 'isRead', 'type': 'bool'},
        'is_draft': {'key': 'isDraft', 'type': 'bool'},
        'web_link': {'key': 'webLink', 'type': 'str'},
        'mentions_preview': {'key': 'mentionsPreview', 'type': 'MicrosoftGraphMentionsPreview'},
        'inference_classification': {'key': 'inferenceClassification', 'type': 'str'},
        'unsubscribe_data': {'key': 'unsubscribeData', 'type': '[str]'},
        'unsubscribe_enabled': {'key': 'unsubscribeEnabled', 'type': 'bool'},
        'flag': {'key': 'flag', 'type': 'MicrosoftGraphFollowupFlag'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphEntity]'},
        'mentions': {'key': 'mentions', 'type': '[MicrosoftGraphMention]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        change_key: Optional[str] = None,
        categories: Optional[List[str]] = None,
        received_date_time: Optional[datetime.datetime] = None,
        sent_date_time: Optional[datetime.datetime] = None,
        has_attachments: Optional[bool] = None,
        internet_message_id: Optional[str] = None,
        internet_message_headers: Optional[List["MicrosoftGraphInternetMessageHeader"]] = None,
        subject: Optional[str] = None,
        body: Optional["MicrosoftGraphItemBody"] = None,
        body_preview: Optional[str] = None,
        importance: Optional[Union[str, "MicrosoftGraphImportance"]] = None,
        parent_folder_id: Optional[str] = None,
        sender: Optional["MicrosoftGraphRecipient"] = None,
        from_property: Optional["MicrosoftGraphRecipient"] = None,
        to_recipients: Optional[List["MicrosoftGraphRecipient"]] = None,
        cc_recipients: Optional[List["MicrosoftGraphRecipient"]] = None,
        bcc_recipients: Optional[List["MicrosoftGraphRecipient"]] = None,
        reply_to: Optional[List["MicrosoftGraphRecipient"]] = None,
        conversation_id: Optional[str] = None,
        conversation_index: Optional[bytes] = None,
        unique_body: Optional["MicrosoftGraphItemBody"] = None,
        is_delivery_receipt_requested: Optional[bool] = None,
        is_read_receipt_requested: Optional[bool] = None,
        is_read: Optional[bool] = None,
        is_draft: Optional[bool] = None,
        web_link: Optional[str] = None,
        mentions_preview: Optional["MicrosoftGraphMentionsPreview"] = None,
        inference_classification: Optional[Union[str, "MicrosoftGraphInferenceClassificationType"]] = None,
        unsubscribe_data: Optional[List[str]] = None,
        unsubscribe_enabled: Optional[bool] = None,
        flag: Optional["MicrosoftGraphFollowupFlag"] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        attachments: Optional[List["MicrosoftGraphAttachment"]] = None,
        extensions: Optional[List["MicrosoftGraphEntity"]] = None,
        mentions: Optional[List["MicrosoftGraphMention"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMessage, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, change_key=change_key, categories=categories, **kwargs)
        self.received_date_time = received_date_time
        self.sent_date_time = sent_date_time
        self.has_attachments = has_attachments
        self.internet_message_id = internet_message_id
        self.internet_message_headers = internet_message_headers
        self.subject = subject
        self.body = body
        self.body_preview = body_preview
        self.importance = importance
        self.parent_folder_id = parent_folder_id
        self.sender = sender
        self.from_property = from_property
        self.to_recipients = to_recipients
        self.cc_recipients = cc_recipients
        self.bcc_recipients = bcc_recipients
        self.reply_to = reply_to
        self.conversation_id = conversation_id
        self.conversation_index = conversation_index
        self.unique_body = unique_body
        self.is_delivery_receipt_requested = is_delivery_receipt_requested
        self.is_read_receipt_requested = is_read_receipt_requested
        self.is_read = is_read
        self.is_draft = is_draft
        self.web_link = web_link
        self.mentions_preview = mentions_preview
        self.inference_classification = inference_classification
        self.unsubscribe_data = unsubscribe_data
        self.unsubscribe_enabled = unsubscribe_enabled
        self.flag = flag
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties
        self.attachments = attachments
        self.extensions = extensions
        self.mentions = mentions


class MicrosoftGraphMessageRule(MicrosoftGraphEntity):
    """messageRule.

    :param id: Read-only.
    :type id: str
    :param display_name: The display name of the rule.
    :type display_name: str
    :param sequence: Indicates the order in which the rule is executed, among other rules.
    :type sequence: int
    :param conditions: messageRulePredicates.
    :type conditions: ~users_user.models.MicrosoftGraphMessageRulePredicates
    :param actions: messageRuleActions.
    :type actions: ~users_user.models.MicrosoftGraphMessageRuleActions
    :param exceptions: messageRulePredicates.
    :type exceptions: ~users_user.models.MicrosoftGraphMessageRulePredicates
    :param is_enabled: Indicates whether the rule is enabled to be applied to messages.
    :type is_enabled: bool
    :param has_error: Indicates whether the rule is in an error condition. Read-only.
    :type has_error: bool
    :param is_read_only: Indicates if the rule is read-only and cannot be modified or deleted by
     the rules REST API.
    :type is_read_only: bool
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'conditions': {'key': 'conditions', 'type': 'MicrosoftGraphMessageRulePredicates'},
        'actions': {'key': 'actions', 'type': 'MicrosoftGraphMessageRuleActions'},
        'exceptions': {'key': 'exceptions', 'type': 'MicrosoftGraphMessageRulePredicates'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'has_error': {'key': 'hasError', 'type': 'bool'},
        'is_read_only': {'key': 'isReadOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        sequence: Optional[int] = None,
        conditions: Optional["MicrosoftGraphMessageRulePredicates"] = None,
        actions: Optional["MicrosoftGraphMessageRuleActions"] = None,
        exceptions: Optional["MicrosoftGraphMessageRulePredicates"] = None,
        is_enabled: Optional[bool] = None,
        has_error: Optional[bool] = None,
        is_read_only: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphMessageRule, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.sequence = sequence
        self.conditions = conditions
        self.actions = actions
        self.exceptions = exceptions
        self.is_enabled = is_enabled
        self.has_error = has_error
        self.is_read_only = is_read_only


class MicrosoftGraphMessageRuleActions(msrest.serialization.Model):
    """messageRuleActions.

    :param move_to_folder: The ID of the folder that a message will be moved to.
    :type move_to_folder: str
    :param copy_to_folder: The ID of a folder that a message is to be copied to.
    :type copy_to_folder: str
    :param delete: Indicates whether a message should be moved to the Deleted Items folder.
    :type delete: bool
    :param permanent_delete: Indicates whether a message should be permanently deleted and not
     saved to the Deleted Items folder.
    :type permanent_delete: bool
    :param mark_as_read: Indicates whether a message should be marked as read.
    :type mark_as_read: bool
    :param mark_importance: importance. Possible values include: "low", "normal", "high".
    :type mark_importance: str or ~users_user.models.MicrosoftGraphImportance
    :param forward_to: The email addresses of the recipients to which a message should be
     forwarded.
    :type forward_to: list[~users_user.models.MicrosoftGraphRecipient]
    :param forward_as_attachment_to: The email addresses of the recipients to which a message
     should be forwarded as an attachment.
    :type forward_as_attachment_to: list[~users_user.models.MicrosoftGraphRecipient]
    :param redirect_to: The email addresses to which a message should be redirected.
    :type redirect_to: list[~users_user.models.MicrosoftGraphRecipient]
    :param assign_categories: A list of categories to be assigned to a message.
    :type assign_categories: list[str]
    :param stop_processing_rules: Indicates whether subsequent rules should be evaluated.
    :type stop_processing_rules: bool
    """

    _attribute_map = {
        'move_to_folder': {'key': 'moveToFolder', 'type': 'str'},
        'copy_to_folder': {'key': 'copyToFolder', 'type': 'str'},
        'delete': {'key': 'delete', 'type': 'bool'},
        'permanent_delete': {'key': 'permanentDelete', 'type': 'bool'},
        'mark_as_read': {'key': 'markAsRead', 'type': 'bool'},
        'mark_importance': {'key': 'markImportance', 'type': 'str'},
        'forward_to': {'key': 'forwardTo', 'type': '[MicrosoftGraphRecipient]'},
        'forward_as_attachment_to': {'key': 'forwardAsAttachmentTo', 'type': '[MicrosoftGraphRecipient]'},
        'redirect_to': {'key': 'redirectTo', 'type': '[MicrosoftGraphRecipient]'},
        'assign_categories': {'key': 'assignCategories', 'type': '[str]'},
        'stop_processing_rules': {'key': 'stopProcessingRules', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        move_to_folder: Optional[str] = None,
        copy_to_folder: Optional[str] = None,
        delete: Optional[bool] = None,
        permanent_delete: Optional[bool] = None,
        mark_as_read: Optional[bool] = None,
        mark_importance: Optional[Union[str, "MicrosoftGraphImportance"]] = None,
        forward_to: Optional[List["MicrosoftGraphRecipient"]] = None,
        forward_as_attachment_to: Optional[List["MicrosoftGraphRecipient"]] = None,
        redirect_to: Optional[List["MicrosoftGraphRecipient"]] = None,
        assign_categories: Optional[List[str]] = None,
        stop_processing_rules: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphMessageRuleActions, self).__init__(**kwargs)
        self.move_to_folder = move_to_folder
        self.copy_to_folder = copy_to_folder
        self.delete = delete
        self.permanent_delete = permanent_delete
        self.mark_as_read = mark_as_read
        self.mark_importance = mark_importance
        self.forward_to = forward_to
        self.forward_as_attachment_to = forward_as_attachment_to
        self.redirect_to = redirect_to
        self.assign_categories = assign_categories
        self.stop_processing_rules = stop_processing_rules


class MicrosoftGraphMessageRulePredicates(msrest.serialization.Model):
    """messageRulePredicates.

    :param categories: Represents the categories that an incoming message should be labeled with in
     order for the condition or exception to apply.
    :type categories: list[str]
    :param subject_contains: Represents the strings that appear in the subject of an incoming
     message in order for the condition or exception to apply.
    :type subject_contains: list[str]
    :param body_contains: Represents the strings that should appear in the body of an incoming
     message in order for the condition or exception to apply.
    :type body_contains: list[str]
    :param body_or_subject_contains: Represents the strings that should appear in the body or
     subject of an incoming message in order for the condition or exception to apply.
    :type body_or_subject_contains: list[str]
    :param sender_contains: Represents the strings that appear in the from property of an incoming
     message in order for the condition or exception to apply.
    :type sender_contains: list[str]
    :param recipient_contains: Represents the strings that appear in either the toRecipients or
     ccRecipients properties of an incoming message in order for the condition or exception to
     apply.
    :type recipient_contains: list[str]
    :param header_contains: Represents the strings that appear in the headers of an incoming
     message in order for the condition or exception to apply.
    :type header_contains: list[str]
    :param message_action_flag: messageActionFlag. Possible values include: "any", "call",
     "doNotForward", "followUp", "fyi", "forward", "noResponseNecessary", "read", "reply",
     "replyToAll", "review".
    :type message_action_flag: str or ~users_user.models.MicrosoftGraphMessageActionFlag
    :param importance: importance. Possible values include: "low", "normal", "high".
    :type importance: str or ~users_user.models.MicrosoftGraphImportance
    :param sensitivity: sensitivity. Possible values include: "normal", "personal", "private",
     "confidential".
    :type sensitivity: str or ~users_user.models.MicrosoftGraphSensitivity
    :param from_addresses: Represents the specific sender email addresses of an incoming message in
     order for the condition or exception to apply.
    :type from_addresses: list[~users_user.models.MicrosoftGraphRecipient]
    :param sent_to_addresses: Represents the email addresses that an incoming message must have
     been sent to in order for the condition or exception to apply.
    :type sent_to_addresses: list[~users_user.models.MicrosoftGraphRecipient]
    :param sent_to_me: Indicates whether the owner of the mailbox must be in the toRecipients
     property of an incoming message in order for the condition or exception to apply.
    :type sent_to_me: bool
    :param sent_only_to_me: Indicates whether the owner of the mailbox must be the only recipient
     in an incoming message in order for the condition or exception to apply.
    :type sent_only_to_me: bool
    :param sent_cc_me: Indicates whether the owner of the mailbox must be in the ccRecipients
     property of an incoming message in order for the condition or exception to apply.
    :type sent_cc_me: bool
    :param sent_to_or_cc_me: Indicates whether the owner of the mailbox must be in either a
     toRecipients or ccRecipients property of an incoming message in order for the condition or
     exception to apply.
    :type sent_to_or_cc_me: bool
    :param not_sent_to_me: Indicates whether the owner of the mailbox must not be a recipient of an
     incoming message in order for the condition or exception to apply.
    :type not_sent_to_me: bool
    :param has_attachments: Indicates whether an incoming message must have attachments in order
     for the condition or exception to apply.
    :type has_attachments: bool
    :param is_approval_request: Indicates whether an incoming message must be an approval request
     in order for the condition or exception to apply.
    :type is_approval_request: bool
    :param is_automatic_forward: Indicates whether an incoming message must be automatically
     forwarded in order for the condition or exception to apply.
    :type is_automatic_forward: bool
    :param is_automatic_reply: Indicates whether an incoming message must be an auto reply in order
     for the condition or exception to apply.
    :type is_automatic_reply: bool
    :param is_encrypted: Indicates whether an incoming message must be encrypted in order for the
     condition or exception to apply.
    :type is_encrypted: bool
    :param is_meeting_request: Indicates whether an incoming message must be a meeting request in
     order for the condition or exception to apply.
    :type is_meeting_request: bool
    :param is_meeting_response: Indicates whether an incoming message must be a meeting response in
     order for the condition or exception to apply.
    :type is_meeting_response: bool
    :param is_non_delivery_report: Indicates whether an incoming message must be a non-delivery
     report in order for the condition or exception to apply.
    :type is_non_delivery_report: bool
    :param is_permission_controlled: Indicates whether an incoming message must be permission
     controlled (RMS-protected) in order for the condition or exception to apply.
    :type is_permission_controlled: bool
    :param is_read_receipt: Indicates whether an incoming message must be a read receipt in order
     for the condition or exception to apply.
    :type is_read_receipt: bool
    :param is_signed: Indicates whether an incoming message must be S/MIME-signed in order for the
     condition or exception to apply.
    :type is_signed: bool
    :param is_voicemail: Indicates whether an incoming message must be a voice mail in order for
     the condition or exception to apply.
    :type is_voicemail: bool
    :param within_size_range: sizeRange.
    :type within_size_range: ~users_user.models.MicrosoftGraphSizeRange
    """

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[str]'},
        'subject_contains': {'key': 'subjectContains', 'type': '[str]'},
        'body_contains': {'key': 'bodyContains', 'type': '[str]'},
        'body_or_subject_contains': {'key': 'bodyOrSubjectContains', 'type': '[str]'},
        'sender_contains': {'key': 'senderContains', 'type': '[str]'},
        'recipient_contains': {'key': 'recipientContains', 'type': '[str]'},
        'header_contains': {'key': 'headerContains', 'type': '[str]'},
        'message_action_flag': {'key': 'messageActionFlag', 'type': 'str'},
        'importance': {'key': 'importance', 'type': 'str'},
        'sensitivity': {'key': 'sensitivity', 'type': 'str'},
        'from_addresses': {'key': 'fromAddresses', 'type': '[MicrosoftGraphRecipient]'},
        'sent_to_addresses': {'key': 'sentToAddresses', 'type': '[MicrosoftGraphRecipient]'},
        'sent_to_me': {'key': 'sentToMe', 'type': 'bool'},
        'sent_only_to_me': {'key': 'sentOnlyToMe', 'type': 'bool'},
        'sent_cc_me': {'key': 'sentCcMe', 'type': 'bool'},
        'sent_to_or_cc_me': {'key': 'sentToOrCcMe', 'type': 'bool'},
        'not_sent_to_me': {'key': 'notSentToMe', 'type': 'bool'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'is_approval_request': {'key': 'isApprovalRequest', 'type': 'bool'},
        'is_automatic_forward': {'key': 'isAutomaticForward', 'type': 'bool'},
        'is_automatic_reply': {'key': 'isAutomaticReply', 'type': 'bool'},
        'is_encrypted': {'key': 'isEncrypted', 'type': 'bool'},
        'is_meeting_request': {'key': 'isMeetingRequest', 'type': 'bool'},
        'is_meeting_response': {'key': 'isMeetingResponse', 'type': 'bool'},
        'is_non_delivery_report': {'key': 'isNonDeliveryReport', 'type': 'bool'},
        'is_permission_controlled': {'key': 'isPermissionControlled', 'type': 'bool'},
        'is_read_receipt': {'key': 'isReadReceipt', 'type': 'bool'},
        'is_signed': {'key': 'isSigned', 'type': 'bool'},
        'is_voicemail': {'key': 'isVoicemail', 'type': 'bool'},
        'within_size_range': {'key': 'withinSizeRange', 'type': 'MicrosoftGraphSizeRange'},
    }

    def __init__(
        self,
        *,
        categories: Optional[List[str]] = None,
        subject_contains: Optional[List[str]] = None,
        body_contains: Optional[List[str]] = None,
        body_or_subject_contains: Optional[List[str]] = None,
        sender_contains: Optional[List[str]] = None,
        recipient_contains: Optional[List[str]] = None,
        header_contains: Optional[List[str]] = None,
        message_action_flag: Optional[Union[str, "MicrosoftGraphMessageActionFlag"]] = None,
        importance: Optional[Union[str, "MicrosoftGraphImportance"]] = None,
        sensitivity: Optional[Union[str, "MicrosoftGraphSensitivity"]] = None,
        from_addresses: Optional[List["MicrosoftGraphRecipient"]] = None,
        sent_to_addresses: Optional[List["MicrosoftGraphRecipient"]] = None,
        sent_to_me: Optional[bool] = None,
        sent_only_to_me: Optional[bool] = None,
        sent_cc_me: Optional[bool] = None,
        sent_to_or_cc_me: Optional[bool] = None,
        not_sent_to_me: Optional[bool] = None,
        has_attachments: Optional[bool] = None,
        is_approval_request: Optional[bool] = None,
        is_automatic_forward: Optional[bool] = None,
        is_automatic_reply: Optional[bool] = None,
        is_encrypted: Optional[bool] = None,
        is_meeting_request: Optional[bool] = None,
        is_meeting_response: Optional[bool] = None,
        is_non_delivery_report: Optional[bool] = None,
        is_permission_controlled: Optional[bool] = None,
        is_read_receipt: Optional[bool] = None,
        is_signed: Optional[bool] = None,
        is_voicemail: Optional[bool] = None,
        within_size_range: Optional["MicrosoftGraphSizeRange"] = None,
        **kwargs
    ):
        super(MicrosoftGraphMessageRulePredicates, self).__init__(**kwargs)
        self.categories = categories
        self.subject_contains = subject_contains
        self.body_contains = body_contains
        self.body_or_subject_contains = body_or_subject_contains
        self.sender_contains = sender_contains
        self.recipient_contains = recipient_contains
        self.header_contains = header_contains
        self.message_action_flag = message_action_flag
        self.importance = importance
        self.sensitivity = sensitivity
        self.from_addresses = from_addresses
        self.sent_to_addresses = sent_to_addresses
        self.sent_to_me = sent_to_me
        self.sent_only_to_me = sent_only_to_me
        self.sent_cc_me = sent_cc_me
        self.sent_to_or_cc_me = sent_to_or_cc_me
        self.not_sent_to_me = not_sent_to_me
        self.has_attachments = has_attachments
        self.is_approval_request = is_approval_request
        self.is_automatic_forward = is_automatic_forward
        self.is_automatic_reply = is_automatic_reply
        self.is_encrypted = is_encrypted
        self.is_meeting_request = is_meeting_request
        self.is_meeting_response = is_meeting_response
        self.is_non_delivery_report = is_non_delivery_report
        self.is_permission_controlled = is_permission_controlled
        self.is_read_receipt = is_read_receipt
        self.is_signed = is_signed
        self.is_voicemail = is_voicemail
        self.within_size_range = within_size_range


class MicrosoftGraphMobileAppIntentAndState(MicrosoftGraphEntity):
    """MobileApp Intent and Install State for a given device.

    :param id: Read-only.
    :type id: str
    :param managed_device_identifier: Device identifier created or collected by Intune.
    :type managed_device_identifier: str
    :param user_id: Identifier for the user that tried to enroll the device.
    :type user_id: str
    :param mobile_app_list: The list of payload intents and states for the tenant.
    :type mobile_app_list: list[~users_user.models.MicrosoftGraphMobileAppIntentAndStateDetail]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'managed_device_identifier': {'key': 'managedDeviceIdentifier', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'mobile_app_list': {'key': 'mobileAppList', 'type': '[MicrosoftGraphMobileAppIntentAndStateDetail]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        managed_device_identifier: Optional[str] = None,
        user_id: Optional[str] = None,
        mobile_app_list: Optional[List["MicrosoftGraphMobileAppIntentAndStateDetail"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppIntentAndState, self).__init__(id=id, **kwargs)
        self.managed_device_identifier = managed_device_identifier
        self.user_id = user_id
        self.mobile_app_list = mobile_app_list


class MicrosoftGraphMobileAppIntentAndStateDetail(msrest.serialization.Model):
    """mobileAppIntentAndStateDetail.

    :param application_id: MobieApp identifier.
    :type application_id: str
    :param display_name: The admin provided or imported title of the app.
    :type display_name: str
    :param mobile_app_intent: mobileAppIntent. Possible values include: "available",
     "notAvailable", "requiredInstall", "requiredUninstall", "requiredAndAvailableInstall",
     "availableInstallWithoutEnrollment", "exclude".
    :type mobile_app_intent: str or ~users_user.models.MicrosoftGraphMobileAppIntent
    :param display_version: Human readable version of the application.
    :type display_version: str
    :param install_state: resultantAppState. Possible values include: "installed", "failed",
     "notInstalled", "uninstallFailed", "pendingInstall", "unknown", "notApplicable".
    :type install_state: str or ~users_user.models.MicrosoftGraphResultantAppState
    :param supported_device_types: The supported platforms for the app.
    :type supported_device_types:
     list[~users_user.models.MicrosoftGraphMobileAppSupportedDeviceType]
    """

    _attribute_map = {
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mobile_app_intent': {'key': 'mobileAppIntent', 'type': 'str'},
        'display_version': {'key': 'displayVersion', 'type': 'str'},
        'install_state': {'key': 'installState', 'type': 'str'},
        'supported_device_types': {'key': 'supportedDeviceTypes', 'type': '[MicrosoftGraphMobileAppSupportedDeviceType]'},
    }

    def __init__(
        self,
        *,
        application_id: Optional[str] = None,
        display_name: Optional[str] = None,
        mobile_app_intent: Optional[Union[str, "MicrosoftGraphMobileAppIntent"]] = None,
        display_version: Optional[str] = None,
        install_state: Optional[Union[str, "MicrosoftGraphResultantAppState"]] = None,
        supported_device_types: Optional[List["MicrosoftGraphMobileAppSupportedDeviceType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppIntentAndStateDetail, self).__init__(**kwargs)
        self.application_id = application_id
        self.display_name = display_name
        self.mobile_app_intent = mobile_app_intent
        self.display_version = display_version
        self.install_state = install_state
        self.supported_device_types = supported_device_types


class MicrosoftGraphMobileAppSupportedDeviceType(msrest.serialization.Model):
    """mobileAppSupportedDeviceType.

    :param type: deviceType. Possible values include: "desktop", "windowsRT", "winMO6", "nokia",
     "windowsPhone", "mac", "winCE", "winEmbedded", "iPhone", "iPad", "iPod", "android",
     "iSocConsumer", "unix", "macMDM", "holoLens", "surfaceHub", "androidForWork",
     "androidEnterprise", "windows10x", "blackberry", "palm", "unknown".
    :type type: str or ~users_user.models.MicrosoftGraphDeviceType
    :param minimum_operating_system_version: Minimum OS version.
    :type minimum_operating_system_version: str
    :param maximum_operating_system_version: Maximum OS version.
    :type maximum_operating_system_version: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'minimum_operating_system_version': {'key': 'minimumOperatingSystemVersion', 'type': 'str'},
        'maximum_operating_system_version': {'key': 'maximumOperatingSystemVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "MicrosoftGraphDeviceType"]] = None,
        minimum_operating_system_version: Optional[str] = None,
        maximum_operating_system_version: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppSupportedDeviceType, self).__init__(**kwargs)
        self.type = type
        self.minimum_operating_system_version = minimum_operating_system_version
        self.maximum_operating_system_version = maximum_operating_system_version


class MicrosoftGraphMobileAppTroubleshootingEvent(MicrosoftGraphDeviceManagementTroubleshootingEvent):
    """MobileAppTroubleshootingEvent Entity.

    :param id: Read-only.
    :type id: str
    :param event_date_time: Time when the event occurred .
    :type event_date_time: ~datetime.datetime
    :param correlation_id: Id used for tracing the failure in the service.
    :type correlation_id: str
    :param troubleshooting_error_details: deviceManagementTroubleshootingErrorDetails.
    :type troubleshooting_error_details:
     ~users_user.models.MicrosoftGraphDeviceManagementTroubleshootingErrorDetails
    :param event_name: Event Name corresponding to the Troubleshooting Event. It is an Optional
     field.
    :type event_name: str
    :param additional_information: A set of string key and string value pairs which provides
     additional information on the Troubleshooting event.
    :type additional_information: list[~users_user.models.MicrosoftGraphKeyValuePair]
    :param managed_device_identifier: Device identifier created or collected by Intune.
    :type managed_device_identifier: str
    :param user_id: Identifier for the user that tried to enroll the device.
    :type user_id: str
    :param application_id: Intune application identifier.
    :type application_id: str
    :param history: Intune Mobile Application Troubleshooting History Item.
    :type history: list[~users_user.models.MicrosoftGraphMobileAppTroubleshootingHistoryItem]
    :param app_log_collection_requests: The collection property of AppLogUploadRequest.
    :type app_log_collection_requests:
     list[~users_user.models.MicrosoftGraphAppLogCollectionRequest]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'event_date_time': {'key': 'eventDateTime', 'type': 'iso-8601'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'troubleshooting_error_details': {'key': 'troubleshootingErrorDetails', 'type': 'MicrosoftGraphDeviceManagementTroubleshootingErrorDetails'},
        'event_name': {'key': 'eventName', 'type': 'str'},
        'additional_information': {'key': 'additionalInformation', 'type': '[MicrosoftGraphKeyValuePair]'},
        'managed_device_identifier': {'key': 'managedDeviceIdentifier', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'history': {'key': 'history', 'type': '[MicrosoftGraphMobileAppTroubleshootingHistoryItem]'},
        'app_log_collection_requests': {'key': 'appLogCollectionRequests', 'type': '[MicrosoftGraphAppLogCollectionRequest]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        event_date_time: Optional[datetime.datetime] = None,
        correlation_id: Optional[str] = None,
        troubleshooting_error_details: Optional["MicrosoftGraphDeviceManagementTroubleshootingErrorDetails"] = None,
        event_name: Optional[str] = None,
        additional_information: Optional[List["MicrosoftGraphKeyValuePair"]] = None,
        managed_device_identifier: Optional[str] = None,
        user_id: Optional[str] = None,
        application_id: Optional[str] = None,
        history: Optional[List["MicrosoftGraphMobileAppTroubleshootingHistoryItem"]] = None,
        app_log_collection_requests: Optional[List["MicrosoftGraphAppLogCollectionRequest"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppTroubleshootingEvent, self).__init__(id=id, event_date_time=event_date_time, correlation_id=correlation_id, troubleshooting_error_details=troubleshooting_error_details, event_name=event_name, additional_information=additional_information, **kwargs)
        self.managed_device_identifier = managed_device_identifier
        self.user_id = user_id
        self.application_id = application_id
        self.history = history
        self.app_log_collection_requests = app_log_collection_requests


class MicrosoftGraphMobileAppTroubleshootingHistoryItem(msrest.serialization.Model):
    """mobileAppTroubleshootingHistoryItem.

    :param occurrence_date_time: Time when the history item occurred.
    :type occurrence_date_time: ~datetime.datetime
    :param troubleshooting_error_details: deviceManagementTroubleshootingErrorDetails.
    :type troubleshooting_error_details:
     ~users_user.models.MicrosoftGraphDeviceManagementTroubleshootingErrorDetails
    """

    _attribute_map = {
        'occurrence_date_time': {'key': 'occurrenceDateTime', 'type': 'iso-8601'},
        'troubleshooting_error_details': {'key': 'troubleshootingErrorDetails', 'type': 'MicrosoftGraphDeviceManagementTroubleshootingErrorDetails'},
    }

    def __init__(
        self,
        *,
        occurrence_date_time: Optional[datetime.datetime] = None,
        troubleshooting_error_details: Optional["MicrosoftGraphDeviceManagementTroubleshootingErrorDetails"] = None,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppTroubleshootingHistoryItem, self).__init__(**kwargs)
        self.occurrence_date_time = occurrence_date_time
        self.troubleshooting_error_details = troubleshooting_error_details


class MicrosoftGraphMoveAction(msrest.serialization.Model):
    """moveAction.

    :param from_property: The name of the location the item was moved from.
    :type from_property: str
    :param to: The name of the location the item was moved to.
    :type to: str
    """

    _attribute_map = {
        'from_property': {'key': 'from', 'type': 'str'},
        'to': {'key': 'to', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        from_property: Optional[str] = None,
        to: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMoveAction, self).__init__(**kwargs)
        self.from_property = from_property
        self.to = to


class MicrosoftGraphMultiValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """multiValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param value: A collection of property values.
    :type value: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        value: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMultiValueLegacyExtendedProperty, self).__init__(id=id, **kwargs)
        self.value = value


class MicrosoftGraphOnenoteEntityBaseModel(MicrosoftGraphEntity):
    """onenoteEntityBaseModel.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        self_property: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteEntityBaseModel, self).__init__(id=id, **kwargs)
        self.self_property = self_property


class MicrosoftGraphOnenoteEntitySchemaObjectModel(MicrosoftGraphOnenoteEntityBaseModel):
    """onenoteEntitySchemaObjectModel.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        self_property: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteEntitySchemaObjectModel, self).__init__(id=id, self_property=self_property, **kwargs)
        self.created_date_time = created_date_time


class MicrosoftGraphOnenoteEntityHierarchyModel(MicrosoftGraphOnenoteEntitySchemaObjectModel):
    """onenoteEntityHierarchyModel.

    :param id: Read-only.
    :type id: str
    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param display_name: The name of the notebook.
    :type display_name: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The date and time when the notebook was last modified. The
     timestamp represents date and time information using ISO 8601 format and is always in UTC time.
     For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-
     only.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        id: Optional[str] = None,
        self_property: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteEntityHierarchyModel, self).__init__(id=id, id=id, self_property=self_property, created_date_time=created_date_time, **kwargs)
        self.display_name = display_name
        self.created_by = created_by
        self.last_modified_by = last_modified_by
        self.last_modified_date_time = last_modified_date_time


class MicrosoftGraphNotebook(MicrosoftGraphOnenoteEntityHierarchyModel):
    """notebook.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param display_name: The name of the notebook.
    :type display_name: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The date and time when the notebook was last modified. The
     timestamp represents date and time information using ISO 8601 format and is always in UTC time.
     For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-
     only.
    :type last_modified_date_time: ~datetime.datetime
    :param is_default: Indicates whether this is the user's default notebook. Read-only.
    :type is_default: bool
    :param user_role: onenoteUserRole. Possible values include: "Owner", "Contributor", "Reader",
     "None".
    :type user_role: str or ~users_user.models.MicrosoftGraphOnenoteUserRole
    :param is_shared: Indicates whether the notebook is shared. If true, the contents of the
     notebook can be seen by people other than the owner. Read-only.
    :type is_shared: bool
    :param sections_url: The URL for the sections navigation property, which returns all the
     sections in the notebook. Read-only.
    :type sections_url: str
    :param section_groups_url: The URL for the sectionGroups navigation property, which returns all
     the section groups in the notebook. Read-only.
    :type section_groups_url: str
    :param links: notebookLinks.
    :type links: ~users_user.models.MicrosoftGraphNotebookLinks
    :param sections: The sections in the notebook. Read-only. Nullable.
    :type sections: list[~users_user.models.MicrosoftGraphOnenoteSection]
    :param section_groups: The section groups in the notebook. Read-only. Nullable.
    :type section_groups: list[~users_user.models.MicrosoftGraphSectionGroup]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'user_role': {'key': 'userRole', 'type': 'str'},
        'is_shared': {'key': 'isShared', 'type': 'bool'},
        'sections_url': {'key': 'sectionsUrl', 'type': 'str'},
        'section_groups_url': {'key': 'sectionGroupsUrl', 'type': 'str'},
        'links': {'key': 'links', 'type': 'MicrosoftGraphNotebookLinks'},
        'sections': {'key': 'sections', 'type': '[MicrosoftGraphOnenoteSection]'},
        'section_groups': {'key': 'sectionGroups', 'type': '[MicrosoftGraphSectionGroup]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        self_property: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        is_default: Optional[bool] = None,
        user_role: Optional[Union[str, "MicrosoftGraphOnenoteUserRole"]] = None,
        is_shared: Optional[bool] = None,
        sections_url: Optional[str] = None,
        section_groups_url: Optional[str] = None,
        links: Optional["MicrosoftGraphNotebookLinks"] = None,
        sections: Optional[List["MicrosoftGraphOnenoteSection"]] = None,
        section_groups: Optional[List["MicrosoftGraphSectionGroup"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphNotebook, self).__init__(id=id, self_property=self_property, created_date_time=created_date_time, display_name=display_name, created_by=created_by, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, **kwargs)
        self.is_default = is_default
        self.user_role = user_role
        self.is_shared = is_shared
        self.sections_url = sections_url
        self.section_groups_url = section_groups_url
        self.links = links
        self.sections = sections
        self.section_groups = section_groups


class MicrosoftGraphNotebookLinks(msrest.serialization.Model):
    """notebookLinks.

    :param one_note_client_url: externalLink.
    :type one_note_client_url: ~users_user.models.MicrosoftGraphExternalLink
    :param one_note_web_url: externalLink.
    :type one_note_web_url: ~users_user.models.MicrosoftGraphExternalLink
    """

    _attribute_map = {
        'one_note_client_url': {'key': 'oneNoteClientUrl', 'type': 'MicrosoftGraphExternalLink'},
        'one_note_web_url': {'key': 'oneNoteWebUrl', 'type': 'MicrosoftGraphExternalLink'},
    }

    def __init__(
        self,
        *,
        one_note_client_url: Optional["MicrosoftGraphExternalLink"] = None,
        one_note_web_url: Optional["MicrosoftGraphExternalLink"] = None,
        **kwargs
    ):
        super(MicrosoftGraphNotebookLinks, self).__init__(**kwargs)
        self.one_note_client_url = one_note_client_url
        self.one_note_web_url = one_note_web_url


class MicrosoftGraphNotification(MicrosoftGraphEntity):
    """notification.

    :param id: Read-only.
    :type id: str
    :param target_host_name:
    :type target_host_name: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param payload: payloadTypes.
    :type payload: ~users_user.models.MicrosoftGraphPayloadTypes
    :param display_time_to_live:
    :type display_time_to_live: int
    :param priority: priority. Possible values include: "None", "High", "Low".
    :type priority: str or ~users_user.models.MicrosoftGraphPriority
    :param group_name:
    :type group_name: str
    :param target_policy: targetPolicyEndpoints.
    :type target_policy: ~users_user.models.MicrosoftGraphTargetPolicyEndpoints
    """

    _validation = {
        'display_time_to_live': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'target_host_name': {'key': 'targetHostName', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'payload': {'key': 'payload', 'type': 'MicrosoftGraphPayloadTypes'},
        'display_time_to_live': {'key': 'displayTimeToLive', 'type': 'int'},
        'priority': {'key': 'priority', 'type': 'str'},
        'group_name': {'key': 'groupName', 'type': 'str'},
        'target_policy': {'key': 'targetPolicy', 'type': 'MicrosoftGraphTargetPolicyEndpoints'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        target_host_name: Optional[str] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        payload: Optional["MicrosoftGraphPayloadTypes"] = None,
        display_time_to_live: Optional[int] = None,
        priority: Optional[Union[str, "MicrosoftGraphPriority"]] = None,
        group_name: Optional[str] = None,
        target_policy: Optional["MicrosoftGraphTargetPolicyEndpoints"] = None,
        **kwargs
    ):
        super(MicrosoftGraphNotification, self).__init__(id=id, **kwargs)
        self.target_host_name = target_host_name
        self.expiration_date_time = expiration_date_time
        self.payload = payload
        self.display_time_to_live = display_time_to_live
        self.priority = priority
        self.group_name = group_name
        self.target_policy = target_policy


class MicrosoftGraphNumberColumn(msrest.serialization.Model):
    """numberColumn.

    :param decimal_places: How many decimal places to display. See below for information about the
     possible values.
    :type decimal_places: str
    :param display_as: How the value should be presented in the UX. Must be one of number or
     percentage. If unspecified, treated as number.
    :type display_as: str
    :param maximum: The maximum permitted value.
    :type maximum: float
    :param minimum: The minimum permitted value.
    :type minimum: float
    """

    _attribute_map = {
        'decimal_places': {'key': 'decimalPlaces', 'type': 'str'},
        'display_as': {'key': 'displayAs', 'type': 'str'},
        'maximum': {'key': 'maximum', 'type': 'float'},
        'minimum': {'key': 'minimum', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        decimal_places: Optional[str] = None,
        display_as: Optional[str] = None,
        maximum: Optional[float] = None,
        minimum: Optional[float] = None,
        **kwargs
    ):
        super(MicrosoftGraphNumberColumn, self).__init__(**kwargs)
        self.decimal_places = decimal_places
        self.display_as = display_as
        self.maximum = maximum
        self.minimum = minimum


class MicrosoftGraphObjectIdentity(msrest.serialization.Model):
    """objectIdentity.

    :param sign_in_type: Specifies the user sign-in types in your directory, such as emailAddress,
     userName or federated. Here, federated represents a unique identifier for a user from an
     issuer, that can be in any format chosen by the issuer. Additional validation is enforced on
     issuerAssignedId when the sign-in type is set to emailAddress or userName. This property can
     also be set to any custom string.
    :type sign_in_type: str
    :param issuer: Specifies the issuer of the identity, for example facebook.com.For local
     accounts (where signInType is not federated), this property is the local B2C tenant default
     domain name, for example contoso.onmicrosoft.com.For external users from other Azure AD
     organization, this will be the domain of the federated organization, for example
     contoso.com.Supports $filter. 512 character limit.
    :type issuer: str
    :param issuer_assigned_id: Specifies the unique identifier assigned to the user by the issuer.
     The combination of issuer and issuerAssignedId must be unique within the organization.
     Represents the sign-in name for the user, when signInType is set to emailAddress or userName
     (also known as local accounts).When signInType is set to: emailAddress, (or starts with
     emailAddress like emailAddress1) issuerAssignedId must be a valid email addressuserName,
     issuerAssignedId must be a valid local part of an email addressSupports $filter. 512 character
     limit.
    :type issuer_assigned_id: str
    """

    _attribute_map = {
        'sign_in_type': {'key': 'signInType', 'type': 'str'},
        'issuer': {'key': 'issuer', 'type': 'str'},
        'issuer_assigned_id': {'key': 'issuerAssignedId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sign_in_type: Optional[str] = None,
        issuer: Optional[str] = None,
        issuer_assigned_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphObjectIdentity, self).__init__(**kwargs)
        self.sign_in_type = sign_in_type
        self.issuer = issuer
        self.issuer_assigned_id = issuer_assigned_id


class MicrosoftGraphScheduleChangeRequest(MicrosoftGraphChangeTrackedEntity):
    """scheduleChangeRequest.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param assigned_to: scheduleChangeRequestActor. Possible values include: "sender", "recipient",
     "manager", "system", "unknownFutureValue".
    :type assigned_to: str or ~users_user.models.MicrosoftGraphScheduleChangeRequestActor
    :param state: scheduleChangeState. Possible values include: "pending", "approved", "declined",
     "unknownFutureValue".
    :type state: str or ~users_user.models.MicrosoftGraphScheduleChangeState
    :param sender_message:
    :type sender_message: str
    :param sender_date_time:
    :type sender_date_time: ~datetime.datetime
    :param manager_action_message:
    :type manager_action_message: str
    :param manager_action_date_time:
    :type manager_action_date_time: ~datetime.datetime
    :param sender_user_id:
    :type sender_user_id: str
    :param manager_user_id:
    :type manager_user_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'sender_message': {'key': 'senderMessage', 'type': 'str'},
        'sender_date_time': {'key': 'senderDateTime', 'type': 'iso-8601'},
        'manager_action_message': {'key': 'managerActionMessage', 'type': 'str'},
        'manager_action_date_time': {'key': 'managerActionDateTime', 'type': 'iso-8601'},
        'sender_user_id': {'key': 'senderUserId', 'type': 'str'},
        'manager_user_id': {'key': 'managerUserId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        assigned_to: Optional[Union[str, "MicrosoftGraphScheduleChangeRequestActor"]] = None,
        state: Optional[Union[str, "MicrosoftGraphScheduleChangeState"]] = None,
        sender_message: Optional[str] = None,
        sender_date_time: Optional[datetime.datetime] = None,
        manager_action_message: Optional[str] = None,
        manager_action_date_time: Optional[datetime.datetime] = None,
        sender_user_id: Optional[str] = None,
        manager_user_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphScheduleChangeRequest, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.assigned_to = assigned_to
        self.state = state
        self.sender_message = sender_message
        self.sender_date_time = sender_date_time
        self.manager_action_message = manager_action_message
        self.manager_action_date_time = manager_action_date_time
        self.sender_user_id = sender_user_id
        self.manager_user_id = manager_user_id


class MicrosoftGraphOfferShiftRequest(MicrosoftGraphScheduleChangeRequest):
    """offerShiftRequest.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param assigned_to: scheduleChangeRequestActor. Possible values include: "sender", "recipient",
     "manager", "system", "unknownFutureValue".
    :type assigned_to: str or ~users_user.models.MicrosoftGraphScheduleChangeRequestActor
    :param state: scheduleChangeState. Possible values include: "pending", "approved", "declined",
     "unknownFutureValue".
    :type state: str or ~users_user.models.MicrosoftGraphScheduleChangeState
    :param sender_message:
    :type sender_message: str
    :param sender_date_time:
    :type sender_date_time: ~datetime.datetime
    :param manager_action_message:
    :type manager_action_message: str
    :param manager_action_date_time:
    :type manager_action_date_time: ~datetime.datetime
    :param sender_user_id:
    :type sender_user_id: str
    :param manager_user_id:
    :type manager_user_id: str
    :param recipient_action_message:
    :type recipient_action_message: str
    :param recipient_action_date_time:
    :type recipient_action_date_time: ~datetime.datetime
    :param sender_shift_id:
    :type sender_shift_id: str
    :param recipient_user_id:
    :type recipient_user_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'sender_message': {'key': 'senderMessage', 'type': 'str'},
        'sender_date_time': {'key': 'senderDateTime', 'type': 'iso-8601'},
        'manager_action_message': {'key': 'managerActionMessage', 'type': 'str'},
        'manager_action_date_time': {'key': 'managerActionDateTime', 'type': 'iso-8601'},
        'sender_user_id': {'key': 'senderUserId', 'type': 'str'},
        'manager_user_id': {'key': 'managerUserId', 'type': 'str'},
        'recipient_action_message': {'key': 'recipientActionMessage', 'type': 'str'},
        'recipient_action_date_time': {'key': 'recipientActionDateTime', 'type': 'iso-8601'},
        'sender_shift_id': {'key': 'senderShiftId', 'type': 'str'},
        'recipient_user_id': {'key': 'recipientUserId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        assigned_to: Optional[Union[str, "MicrosoftGraphScheduleChangeRequestActor"]] = None,
        state: Optional[Union[str, "MicrosoftGraphScheduleChangeState"]] = None,
        sender_message: Optional[str] = None,
        sender_date_time: Optional[datetime.datetime] = None,
        manager_action_message: Optional[str] = None,
        manager_action_date_time: Optional[datetime.datetime] = None,
        sender_user_id: Optional[str] = None,
        manager_user_id: Optional[str] = None,
        recipient_action_message: Optional[str] = None,
        recipient_action_date_time: Optional[datetime.datetime] = None,
        sender_shift_id: Optional[str] = None,
        recipient_user_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOfferShiftRequest, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, assigned_to=assigned_to, state=state, sender_message=sender_message, sender_date_time=sender_date_time, manager_action_message=manager_action_message, manager_action_date_time=manager_action_date_time, sender_user_id=sender_user_id, manager_user_id=manager_user_id, **kwargs)
        self.recipient_action_message = recipient_action_message
        self.recipient_action_date_time = recipient_action_date_time
        self.sender_shift_id = sender_shift_id
        self.recipient_user_id = recipient_user_id


class MicrosoftGraphOfficeGraphInsights(MicrosoftGraphEntity):
    """officeGraphInsights.

    :param id: Read-only.
    :type id: str
    :param trending: Calculated relationship identifying trending documents. Trending documents can
     be stored in OneDrive or in SharePoint sites.
    :type trending: list[~users_user.models.MicrosoftGraphTrending]
    :param shared: Calculated relationship identifying documents shared with a user. Documents can
     be shared as email attachments or as OneDrive for Business links sent in emails.
    :type shared: list[~users_user.models.MicrosoftGraphSharedInsight]
    :param used: Calculated relationship identifying documents viewed and modified by a user.
     Includes documents the user used in OneDrive for Business, SharePoint, opened as email
     attachments, and as link attachments from sources like Box, DropBox and Google Drive.
    :type used: list[~users_user.models.MicrosoftGraphUsedInsight]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'trending': {'key': 'trending', 'type': '[MicrosoftGraphTrending]'},
        'shared': {'key': 'shared', 'type': '[MicrosoftGraphSharedInsight]'},
        'used': {'key': 'used', 'type': '[MicrosoftGraphUsedInsight]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        trending: Optional[List["MicrosoftGraphTrending"]] = None,
        shared: Optional[List["MicrosoftGraphSharedInsight"]] = None,
        used: Optional[List["MicrosoftGraphUsedInsight"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOfficeGraphInsights, self).__init__(id=id, **kwargs)
        self.trending = trending
        self.shared = shared
        self.used = used


class MicrosoftGraphOnenote(MicrosoftGraphEntity):
    """onenote.

    :param id: Read-only.
    :type id: str
    :param notebooks: The collection of OneNote notebooks that are owned by the user or group.
     Read-only. Nullable.
    :type notebooks: list[~users_user.models.MicrosoftGraphNotebook]
    :param sections: The sections in all OneNote notebooks that are owned by the user or group.
     Read-only. Nullable.
    :type sections: list[~users_user.models.MicrosoftGraphOnenoteSection]
    :param section_groups: The section groups in all OneNote notebooks that are owned by the user
     or group.  Read-only. Nullable.
    :type section_groups: list[~users_user.models.MicrosoftGraphSectionGroup]
    :param pages: The pages in all OneNote notebooks that are owned by the user or group.  Read-
     only. Nullable.
    :type pages: list[~users_user.models.MicrosoftGraphOnenotePage]
    :param resources: The image and other file resources in OneNote pages. Getting a resources
     collection is not supported, but you can get the binary content of a specific resource. Read-
     only. Nullable.
    :type resources: list[~users_user.models.MicrosoftGraphOnenoteResource]
    :param operations: The status of OneNote operations. Getting an operations collection is not
     supported, but you can get the status of long-running operations if the Operation-Location
     header is returned in the response. Read-only. Nullable.
    :type operations: list[~users_user.models.MicrosoftGraphOnenoteOperation]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'notebooks': {'key': 'notebooks', 'type': '[MicrosoftGraphNotebook]'},
        'sections': {'key': 'sections', 'type': '[MicrosoftGraphOnenoteSection]'},
        'section_groups': {'key': 'sectionGroups', 'type': '[MicrosoftGraphSectionGroup]'},
        'pages': {'key': 'pages', 'type': '[MicrosoftGraphOnenotePage]'},
        'resources': {'key': 'resources', 'type': '[MicrosoftGraphOnenoteResource]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphOnenoteOperation]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        notebooks: Optional[List["MicrosoftGraphNotebook"]] = None,
        sections: Optional[List["MicrosoftGraphOnenoteSection"]] = None,
        section_groups: Optional[List["MicrosoftGraphSectionGroup"]] = None,
        pages: Optional[List["MicrosoftGraphOnenotePage"]] = None,
        resources: Optional[List["MicrosoftGraphOnenoteResource"]] = None,
        operations: Optional[List["MicrosoftGraphOnenoteOperation"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnenote, self).__init__(id=id, **kwargs)
        self.notebooks = notebooks
        self.sections = sections
        self.section_groups = section_groups
        self.pages = pages
        self.resources = resources
        self.operations = operations


class MicrosoftGraphOperation(MicrosoftGraphEntity):
    """operation.

    :param id: Read-only.
    :type id: str
    :param status: operationStatus. Possible values include: "NotStarted", "Running", "Completed",
     "Failed".
    :type status: str or ~users_user.models.MicrosoftGraphOperationStatus
    :param created_date_time: The start time of the operation.
    :type created_date_time: ~datetime.datetime
    :param last_action_date_time: The time of the last action of the operation.
    :type last_action_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_action_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphOperation, self).__init__(id=id, **kwargs)
        self.status = status
        self.created_date_time = created_date_time
        self.last_action_date_time = last_action_date_time


class MicrosoftGraphOnenoteOperation(MicrosoftGraphOperation):
    """onenoteOperation.

    :param id: Read-only.
    :type id: str
    :param status: operationStatus. Possible values include: "NotStarted", "Running", "Completed",
     "Failed".
    :type status: str or ~users_user.models.MicrosoftGraphOperationStatus
    :param created_date_time: The start time of the operation.
    :type created_date_time: ~datetime.datetime
    :param last_action_date_time: The time of the last action of the operation.
    :type last_action_date_time: ~datetime.datetime
    :param resource_location: The resource URI for the object. For example, the resource URI for a
     copied page or section.
    :type resource_location: str
    :param resource_id: The resource id.
    :type resource_id: str
    :param error: onenoteOperationError.
    :type error: ~users_user.models.MicrosoftGraphOnenoteOperationError
    :param percent_complete: The operation percent complete if the operation is still in running
     status.
    :type percent_complete: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'error': {'key': 'error', 'type': 'MicrosoftGraphOnenoteOperationError'},
        'percent_complete': {'key': 'percentComplete', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_action_date_time: Optional[datetime.datetime] = None,
        resource_location: Optional[str] = None,
        resource_id: Optional[str] = None,
        error: Optional["MicrosoftGraphOnenoteOperationError"] = None,
        percent_complete: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteOperation, self).__init__(id=id, status=status, created_date_time=created_date_time, last_action_date_time=last_action_date_time, **kwargs)
        self.resource_location = resource_location
        self.resource_id = resource_id
        self.error = error
        self.percent_complete = percent_complete


class MicrosoftGraphOnenoteOperationError(msrest.serialization.Model):
    """onenoteOperationError.

    :param code: The error code.
    :type code: str
    :param message: The error message.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteOperationError, self).__init__(**kwargs)
        self.code = code
        self.message = message


class MicrosoftGraphOnenotePage(MicrosoftGraphOnenoteEntitySchemaObjectModel):
    """onenotePage.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param title: The title of the page.
    :type title: str
    :param created_by_app_id: The unique identifier of the application that created the page. Read-
     only.
    :type created_by_app_id: str
    :param links: pageLinks.
    :type links: ~users_user.models.MicrosoftGraphPageLinks
    :param content_url: The URL for the page's HTML content.  Read-only.
    :type content_url: str
    :param content: The page's HTML content.
    :type content: bytes
    :param last_modified_date_time: The date and time when the page was last modified. The
     timestamp represents date and time information using ISO 8601 format and is always in UTC time.
     For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-
     only.
    :type last_modified_date_time: ~datetime.datetime
    :param level: The indentation level of the page. Read-only.
    :type level: int
    :param order: The order of the page within its parent section. Read-only.
    :type order: int
    :param user_tags:
    :type user_tags: list[str]
    :param parent_section: onenoteSection.
    :type parent_section: ~users_user.models.MicrosoftGraphOnenoteSection
    :param parent_notebook: notebook.
    :type parent_notebook: ~users_user.models.MicrosoftGraphNotebook
    """

    _validation = {
        'level': {'maximum': 2147483647, 'minimum': -2147483648},
        'order': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'title': {'key': 'title', 'type': 'str'},
        'created_by_app_id': {'key': 'createdByAppId', 'type': 'str'},
        'links': {'key': 'links', 'type': 'MicrosoftGraphPageLinks'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
        'content': {'key': 'content', 'type': 'base64'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'level': {'key': 'level', 'type': 'int'},
        'order': {'key': 'order', 'type': 'int'},
        'user_tags': {'key': 'userTags', 'type': '[str]'},
        'parent_section': {'key': 'parentSection', 'type': 'MicrosoftGraphOnenoteSection'},
        'parent_notebook': {'key': 'parentNotebook', 'type': 'MicrosoftGraphNotebook'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        self_property: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        title: Optional[str] = None,
        created_by_app_id: Optional[str] = None,
        links: Optional["MicrosoftGraphPageLinks"] = None,
        content_url: Optional[str] = None,
        content: Optional[bytes] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        level: Optional[int] = None,
        order: Optional[int] = None,
        user_tags: Optional[List[str]] = None,
        parent_section: Optional["MicrosoftGraphOnenoteSection"] = None,
        parent_notebook: Optional["MicrosoftGraphNotebook"] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnenotePage, self).__init__(id=id, self_property=self_property, created_date_time=created_date_time, **kwargs)
        self.title = title
        self.created_by_app_id = created_by_app_id
        self.links = links
        self.content_url = content_url
        self.content = content
        self.last_modified_date_time = last_modified_date_time
        self.level = level
        self.order = order
        self.user_tags = user_tags
        self.parent_section = parent_section
        self.parent_notebook = parent_notebook


class MicrosoftGraphOnenoteResource(MicrosoftGraphOnenoteEntityBaseModel):
    """onenoteResource.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param content: The content stream.
    :type content: bytes
    :param content_url: The URL for downloading the content.
    :type content_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'content': {'key': 'content', 'type': 'base64'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        self_property: Optional[str] = None,
        content: Optional[bytes] = None,
        content_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteResource, self).__init__(id=id, self_property=self_property, **kwargs)
        self.content = content
        self.content_url = content_url


class MicrosoftGraphOnenoteSection(MicrosoftGraphOnenoteEntityHierarchyModel):
    """onenoteSection.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param display_name: The name of the notebook.
    :type display_name: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The date and time when the notebook was last modified. The
     timestamp represents date and time information using ISO 8601 format and is always in UTC time.
     For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-
     only.
    :type last_modified_date_time: ~datetime.datetime
    :param is_default: Indicates whether this is the user's default section. Read-only.
    :type is_default: bool
    :param links: sectionLinks.
    :type links: ~users_user.models.MicrosoftGraphSectionLinks
    :param pages_url: The pages endpoint where you can get details for all the pages in the
     section. Read-only.
    :type pages_url: str
    :param parent_notebook: notebook.
    :type parent_notebook: ~users_user.models.MicrosoftGraphNotebook
    :param parent_section_group: sectionGroup.
    :type parent_section_group: ~users_user.models.MicrosoftGraphSectionGroup
    :param pages: The collection of pages in the section.  Read-only. Nullable.
    :type pages: list[~users_user.models.MicrosoftGraphOnenotePage]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'links': {'key': 'links', 'type': 'MicrosoftGraphSectionLinks'},
        'pages_url': {'key': 'pagesUrl', 'type': 'str'},
        'parent_notebook': {'key': 'parentNotebook', 'type': 'MicrosoftGraphNotebook'},
        'parent_section_group': {'key': 'parentSectionGroup', 'type': 'MicrosoftGraphSectionGroup'},
        'pages': {'key': 'pages', 'type': '[MicrosoftGraphOnenotePage]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        self_property: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        is_default: Optional[bool] = None,
        links: Optional["MicrosoftGraphSectionLinks"] = None,
        pages_url: Optional[str] = None,
        parent_notebook: Optional["MicrosoftGraphNotebook"] = None,
        parent_section_group: Optional["MicrosoftGraphSectionGroup"] = None,
        pages: Optional[List["MicrosoftGraphOnenotePage"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteSection, self).__init__(id=id, self_property=self_property, created_date_time=created_date_time, display_name=display_name, created_by=created_by, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, **kwargs)
        self.is_default = is_default
        self.links = links
        self.pages_url = pages_url
        self.parent_notebook = parent_notebook
        self.parent_section_group = parent_section_group
        self.pages = pages


class MicrosoftGraphOnlineMeeting(MicrosoftGraphEntity):
    """onlineMeeting.

    :param id: Read-only.
    :type id: str
    :param creation_date_time: The meeting creation time in UTC. Read-only.
    :type creation_date_time: ~datetime.datetime
    :param start_date_time: The meeting start time in UTC.
    :type start_date_time: ~datetime.datetime
    :param end_date_time: The meeting end time in UTC.
    :type end_date_time: ~datetime.datetime
    :param canceled_date_time:
    :type canceled_date_time: ~datetime.datetime
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param entry_exit_announcement:
    :type entry_exit_announcement: bool
    :param join_url:
    :type join_url: str
    :param subject: The subject of the online meeting.
    :type subject: str
    :param is_cancelled:
    :type is_cancelled: bool
    :param participants: meetingParticipants.
    :type participants: ~users_user.models.MicrosoftGraphMeetingParticipants
    :param is_broadcast:
    :type is_broadcast: bool
    :param access_level: accessLevel. Possible values include: "everyone", "invited", "locked",
     "sameEnterprise", "sameEnterpriseAndFederated".
    :type access_level: str or ~users_user.models.MicrosoftGraphAccessLevel
    :param capabilities:
    :type capabilities: list[str or ~users_user.models.MicrosoftGraphMeetingCapabilities]
    :param audio_conferencing: audioConferencing.
    :type audio_conferencing: ~users_user.models.MicrosoftGraphAudioConferencing
    :param chat_info: chatInfo.
    :type chat_info: ~users_user.models.MicrosoftGraphChatInfo
    :param video_teleconference_id: The video teleconferencing ID. Read-only.
    :type video_teleconference_id: str
    :param external_id:
    :type external_id: str
    :param join_information: itemBody.
    :type join_information: ~users_user.models.MicrosoftGraphItemBody
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'creation_date_time': {'key': 'creationDateTime', 'type': 'iso-8601'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'canceled_date_time': {'key': 'canceledDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'entry_exit_announcement': {'key': 'entryExitAnnouncement', 'type': 'bool'},
        'join_url': {'key': 'joinUrl', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
        'is_cancelled': {'key': 'isCancelled', 'type': 'bool'},
        'participants': {'key': 'participants', 'type': 'MicrosoftGraphMeetingParticipants'},
        'is_broadcast': {'key': 'isBroadcast', 'type': 'bool'},
        'access_level': {'key': 'accessLevel', 'type': 'str'},
        'capabilities': {'key': 'capabilities', 'type': '[str]'},
        'audio_conferencing': {'key': 'audioConferencing', 'type': 'MicrosoftGraphAudioConferencing'},
        'chat_info': {'key': 'chatInfo', 'type': 'MicrosoftGraphChatInfo'},
        'video_teleconference_id': {'key': 'videoTeleconferenceId', 'type': 'str'},
        'external_id': {'key': 'externalId', 'type': 'str'},
        'join_information': {'key': 'joinInformation', 'type': 'MicrosoftGraphItemBody'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        creation_date_time: Optional[datetime.datetime] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        canceled_date_time: Optional[datetime.datetime] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        entry_exit_announcement: Optional[bool] = None,
        join_url: Optional[str] = None,
        subject: Optional[str] = None,
        is_cancelled: Optional[bool] = None,
        participants: Optional["MicrosoftGraphMeetingParticipants"] = None,
        is_broadcast: Optional[bool] = None,
        access_level: Optional[Union[str, "MicrosoftGraphAccessLevel"]] = None,
        capabilities: Optional[List[Union[str, "MicrosoftGraphMeetingCapabilities"]]] = None,
        audio_conferencing: Optional["MicrosoftGraphAudioConferencing"] = None,
        chat_info: Optional["MicrosoftGraphChatInfo"] = None,
        video_teleconference_id: Optional[str] = None,
        external_id: Optional[str] = None,
        join_information: Optional["MicrosoftGraphItemBody"] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnlineMeeting, self).__init__(id=id, **kwargs)
        self.creation_date_time = creation_date_time
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.canceled_date_time = canceled_date_time
        self.expiration_date_time = expiration_date_time
        self.entry_exit_announcement = entry_exit_announcement
        self.join_url = join_url
        self.subject = subject
        self.is_cancelled = is_cancelled
        self.participants = participants
        self.is_broadcast = is_broadcast
        self.access_level = access_level
        self.capabilities = capabilities
        self.audio_conferencing = audio_conferencing
        self.chat_info = chat_info
        self.video_teleconference_id = video_teleconference_id
        self.external_id = external_id
        self.join_information = join_information


class MicrosoftGraphOnlineMeetingInfo(msrest.serialization.Model):
    """onlineMeetingInfo.

    :param join_url: The external link that launches the online meeting. This is a URL that clients
     will launch into a browser and will redirect the user to join the meeting.
    :type join_url: str
    :param conference_id: The ID of the conference.
    :type conference_id: str
    :param toll_number: The toll number that can be used to join the conference.
    :type toll_number: str
    :param toll_free_numbers: The toll free numbers that can be used to join the conference.
    :type toll_free_numbers: list[str]
    :param quick_dial: The pre-formatted quickdial for this call.
    :type quick_dial: str
    :param phones: All of the phone numbers associated with this conference.
    :type phones: list[~users_user.models.MicrosoftGraphPhone]
    """

    _attribute_map = {
        'join_url': {'key': 'joinUrl', 'type': 'str'},
        'conference_id': {'key': 'conferenceId', 'type': 'str'},
        'toll_number': {'key': 'tollNumber', 'type': 'str'},
        'toll_free_numbers': {'key': 'tollFreeNumbers', 'type': '[str]'},
        'quick_dial': {'key': 'quickDial', 'type': 'str'},
        'phones': {'key': 'phones', 'type': '[MicrosoftGraphPhone]'},
    }

    def __init__(
        self,
        *,
        join_url: Optional[str] = None,
        conference_id: Optional[str] = None,
        toll_number: Optional[str] = None,
        toll_free_numbers: Optional[List[str]] = None,
        quick_dial: Optional[str] = None,
        phones: Optional[List["MicrosoftGraphPhone"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnlineMeetingInfo, self).__init__(**kwargs)
        self.join_url = join_url
        self.conference_id = conference_id
        self.toll_number = toll_number
        self.toll_free_numbers = toll_free_numbers
        self.quick_dial = quick_dial
        self.phones = phones


class MicrosoftGraphOnPremisesExtensionAttributes(msrest.serialization.Model):
    """onPremisesExtensionAttributes.

    :param extension_attribute1: First customizable extension attribute.
    :type extension_attribute1: str
    :param extension_attribute2: Second customizable extension attribute.
    :type extension_attribute2: str
    :param extension_attribute3: Third customizable extension attribute.
    :type extension_attribute3: str
    :param extension_attribute4: Fourth customizable extension attribute.
    :type extension_attribute4: str
    :param extension_attribute5: Fifth customizable extension attribute.
    :type extension_attribute5: str
    :param extension_attribute6: Sixth customizable extension attribute.
    :type extension_attribute6: str
    :param extension_attribute7: Seventh customizable extension attribute.
    :type extension_attribute7: str
    :param extension_attribute8: Eighth customizable extension attribute.
    :type extension_attribute8: str
    :param extension_attribute9: Ninth customizable extension attribute.
    :type extension_attribute9: str
    :param extension_attribute10: Tenth customizable extension attribute.
    :type extension_attribute10: str
    :param extension_attribute11: Eleventh customizable extension attribute.
    :type extension_attribute11: str
    :param extension_attribute12: Twelfth customizable extension attribute.
    :type extension_attribute12: str
    :param extension_attribute13: Thirteenth customizable extension attribute.
    :type extension_attribute13: str
    :param extension_attribute14: Fourteenth customizable extension attribute.
    :type extension_attribute14: str
    :param extension_attribute15: Fifteenth customizable extension attribute.
    :type extension_attribute15: str
    """

    _attribute_map = {
        'extension_attribute1': {'key': 'extensionAttribute1', 'type': 'str'},
        'extension_attribute2': {'key': 'extensionAttribute2', 'type': 'str'},
        'extension_attribute3': {'key': 'extensionAttribute3', 'type': 'str'},
        'extension_attribute4': {'key': 'extensionAttribute4', 'type': 'str'},
        'extension_attribute5': {'key': 'extensionAttribute5', 'type': 'str'},
        'extension_attribute6': {'key': 'extensionAttribute6', 'type': 'str'},
        'extension_attribute7': {'key': 'extensionAttribute7', 'type': 'str'},
        'extension_attribute8': {'key': 'extensionAttribute8', 'type': 'str'},
        'extension_attribute9': {'key': 'extensionAttribute9', 'type': 'str'},
        'extension_attribute10': {'key': 'extensionAttribute10', 'type': 'str'},
        'extension_attribute11': {'key': 'extensionAttribute11', 'type': 'str'},
        'extension_attribute12': {'key': 'extensionAttribute12', 'type': 'str'},
        'extension_attribute13': {'key': 'extensionAttribute13', 'type': 'str'},
        'extension_attribute14': {'key': 'extensionAttribute14', 'type': 'str'},
        'extension_attribute15': {'key': 'extensionAttribute15', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        extension_attribute1: Optional[str] = None,
        extension_attribute2: Optional[str] = None,
        extension_attribute3: Optional[str] = None,
        extension_attribute4: Optional[str] = None,
        extension_attribute5: Optional[str] = None,
        extension_attribute6: Optional[str] = None,
        extension_attribute7: Optional[str] = None,
        extension_attribute8: Optional[str] = None,
        extension_attribute9: Optional[str] = None,
        extension_attribute10: Optional[str] = None,
        extension_attribute11: Optional[str] = None,
        extension_attribute12: Optional[str] = None,
        extension_attribute13: Optional[str] = None,
        extension_attribute14: Optional[str] = None,
        extension_attribute15: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnPremisesExtensionAttributes, self).__init__(**kwargs)
        self.extension_attribute1 = extension_attribute1
        self.extension_attribute2 = extension_attribute2
        self.extension_attribute3 = extension_attribute3
        self.extension_attribute4 = extension_attribute4
        self.extension_attribute5 = extension_attribute5
        self.extension_attribute6 = extension_attribute6
        self.extension_attribute7 = extension_attribute7
        self.extension_attribute8 = extension_attribute8
        self.extension_attribute9 = extension_attribute9
        self.extension_attribute10 = extension_attribute10
        self.extension_attribute11 = extension_attribute11
        self.extension_attribute12 = extension_attribute12
        self.extension_attribute13 = extension_attribute13
        self.extension_attribute14 = extension_attribute14
        self.extension_attribute15 = extension_attribute15


class MicrosoftGraphOnPremisesProvisioningError(msrest.serialization.Model):
    """onPremisesProvisioningError.

    :param value: Value of the property causing the error.
    :type value: str
    :param category: Category of the provisioning error. Note: Currently, there is only one
     possible value. Possible value: PropertyConflict - indicates a property value is not unique.
     Other objects contain the same value for the property.
    :type category: str
    :param property_causing_error: Name of the directory property causing the error. Current
     possible values: UserPrincipalName or ProxyAddress.
    :type property_causing_error: str
    :param occurred_date_time: The date and time at which the error occurred.
    :type occurred_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'property_causing_error': {'key': 'propertyCausingError', 'type': 'str'},
        'occurred_date_time': {'key': 'occurredDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        value: Optional[str] = None,
        category: Optional[str] = None,
        property_causing_error: Optional[str] = None,
        occurred_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnPremisesProvisioningError, self).__init__(**kwargs)
        self.value = value
        self.category = category
        self.property_causing_error = property_causing_error
        self.occurred_date_time = occurred_date_time


class MicrosoftGraphOpenShift(MicrosoftGraphChangeTrackedEntity):
    """openShift.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param shared_open_shift: openShiftItem.
    :type shared_open_shift: ~users_user.models.MicrosoftGraphOpenShiftItem
    :param draft_open_shift: openShiftItem.
    :type draft_open_shift: ~users_user.models.MicrosoftGraphOpenShiftItem
    :param scheduling_group_id:
    :type scheduling_group_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'shared_open_shift': {'key': 'sharedOpenShift', 'type': 'MicrosoftGraphOpenShiftItem'},
        'draft_open_shift': {'key': 'draftOpenShift', 'type': 'MicrosoftGraphOpenShiftItem'},
        'scheduling_group_id': {'key': 'schedulingGroupId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        shared_open_shift: Optional["MicrosoftGraphOpenShiftItem"] = None,
        draft_open_shift: Optional["MicrosoftGraphOpenShiftItem"] = None,
        scheduling_group_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOpenShift, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.shared_open_shift = shared_open_shift
        self.draft_open_shift = draft_open_shift
        self.scheduling_group_id = scheduling_group_id


class MicrosoftGraphOpenShiftChangeRequest(MicrosoftGraphScheduleChangeRequest):
    """openShiftChangeRequest.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param assigned_to: scheduleChangeRequestActor. Possible values include: "sender", "recipient",
     "manager", "system", "unknownFutureValue".
    :type assigned_to: str or ~users_user.models.MicrosoftGraphScheduleChangeRequestActor
    :param state: scheduleChangeState. Possible values include: "pending", "approved", "declined",
     "unknownFutureValue".
    :type state: str or ~users_user.models.MicrosoftGraphScheduleChangeState
    :param sender_message:
    :type sender_message: str
    :param sender_date_time:
    :type sender_date_time: ~datetime.datetime
    :param manager_action_message:
    :type manager_action_message: str
    :param manager_action_date_time:
    :type manager_action_date_time: ~datetime.datetime
    :param sender_user_id:
    :type sender_user_id: str
    :param manager_user_id:
    :type manager_user_id: str
    :param open_shift_id:
    :type open_shift_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'sender_message': {'key': 'senderMessage', 'type': 'str'},
        'sender_date_time': {'key': 'senderDateTime', 'type': 'iso-8601'},
        'manager_action_message': {'key': 'managerActionMessage', 'type': 'str'},
        'manager_action_date_time': {'key': 'managerActionDateTime', 'type': 'iso-8601'},
        'sender_user_id': {'key': 'senderUserId', 'type': 'str'},
        'manager_user_id': {'key': 'managerUserId', 'type': 'str'},
        'open_shift_id': {'key': 'openShiftId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        assigned_to: Optional[Union[str, "MicrosoftGraphScheduleChangeRequestActor"]] = None,
        state: Optional[Union[str, "MicrosoftGraphScheduleChangeState"]] = None,
        sender_message: Optional[str] = None,
        sender_date_time: Optional[datetime.datetime] = None,
        manager_action_message: Optional[str] = None,
        manager_action_date_time: Optional[datetime.datetime] = None,
        sender_user_id: Optional[str] = None,
        manager_user_id: Optional[str] = None,
        open_shift_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOpenShiftChangeRequest, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, assigned_to=assigned_to, state=state, sender_message=sender_message, sender_date_time=sender_date_time, manager_action_message=manager_action_message, manager_action_date_time=manager_action_date_time, sender_user_id=sender_user_id, manager_user_id=manager_user_id, **kwargs)
        self.open_shift_id = open_shift_id


class MicrosoftGraphScheduleEntity(msrest.serialization.Model):
    """scheduleEntity.

    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param theme: scheduleEntityTheme. Possible values include: "white", "blue", "green", "purple",
     "pink", "yellow", "gray", "darkBlue", "darkGreen", "darkPurple", "darkPink", "darkYellow",
     "unknownFutureValue".
    :type theme: str or ~users_user.models.MicrosoftGraphScheduleEntityTheme
    """

    _attribute_map = {
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'theme': {'key': 'theme', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        theme: Optional[Union[str, "MicrosoftGraphScheduleEntityTheme"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphScheduleEntity, self).__init__(**kwargs)
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.theme = theme


class MicrosoftGraphShiftItem(MicrosoftGraphScheduleEntity):
    """shiftItem.

    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param theme: scheduleEntityTheme. Possible values include: "white", "blue", "green", "purple",
     "pink", "yellow", "gray", "darkBlue", "darkGreen", "darkPurple", "darkPink", "darkYellow",
     "unknownFutureValue".
    :type theme: str or ~users_user.models.MicrosoftGraphScheduleEntityTheme
    :param display_name:
    :type display_name: str
    :param notes:
    :type notes: str
    :param activities:
    :type activities: list[~users_user.models.MicrosoftGraphShiftActivity]
    """

    _attribute_map = {
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'theme': {'key': 'theme', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphShiftActivity]'},
    }

    def __init__(
        self,
        *,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        theme: Optional[Union[str, "MicrosoftGraphScheduleEntityTheme"]] = None,
        display_name: Optional[str] = None,
        notes: Optional[str] = None,
        activities: Optional[List["MicrosoftGraphShiftActivity"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphShiftItem, self).__init__(start_date_time=start_date_time, end_date_time=end_date_time, theme=theme, **kwargs)
        self.display_name = display_name
        self.notes = notes
        self.activities = activities


class MicrosoftGraphOpenShiftItem(MicrosoftGraphShiftItem):
    """openShiftItem.

    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param theme: scheduleEntityTheme. Possible values include: "white", "blue", "green", "purple",
     "pink", "yellow", "gray", "darkBlue", "darkGreen", "darkPurple", "darkPink", "darkYellow",
     "unknownFutureValue".
    :type theme: str or ~users_user.models.MicrosoftGraphScheduleEntityTheme
    :param display_name:
    :type display_name: str
    :param notes:
    :type notes: str
    :param activities:
    :type activities: list[~users_user.models.MicrosoftGraphShiftActivity]
    :param open_slot_count:
    :type open_slot_count: int
    """

    _validation = {
        'open_slot_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'theme': {'key': 'theme', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphShiftActivity]'},
        'open_slot_count': {'key': 'openSlotCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        theme: Optional[Union[str, "MicrosoftGraphScheduleEntityTheme"]] = None,
        display_name: Optional[str] = None,
        notes: Optional[str] = None,
        activities: Optional[List["MicrosoftGraphShiftActivity"]] = None,
        open_slot_count: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphOpenShiftItem, self).__init__(start_date_time=start_date_time, end_date_time=end_date_time, theme=theme, display_name=display_name, notes=notes, activities=activities, **kwargs)
        self.open_slot_count = open_slot_count


class MicrosoftGraphOperationError(msrest.serialization.Model):
    """operationError.

    :param code: Operation error code.
    :type code: str
    :param message: Operation error message.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOperationError, self).__init__(**kwargs)
        self.code = code
        self.message = message


class MicrosoftGraphOutlookCategory(MicrosoftGraphEntity):
    """outlookCategory.

    :param id: Read-only.
    :type id: str
    :param display_name: A unique name that identifies a category in the user's mailbox. After a
     category is created, the name cannot be changed. Read-only.
    :type display_name: str
    :param color: categoryColor. Possible values include: "preset0", "preset1", "preset2",
     "preset3", "preset4", "preset5", "preset6", "preset7", "preset8", "preset9", "preset10",
     "preset11", "preset12", "preset13", "preset14", "preset15", "preset16", "preset17", "preset18",
     "preset19", "preset20", "preset21", "preset22", "preset23", "preset24", "none".
    :type color: str or ~users_user.models.MicrosoftGraphCategoryColor
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'color': {'key': 'color', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        color: Optional[Union[str, "MicrosoftGraphCategoryColor"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookCategory, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.color = color


class MicrosoftGraphOutlookGeoCoordinates(msrest.serialization.Model):
    """outlookGeoCoordinates.

    :param altitude: The altitude of the location.
    :type altitude: float
    :param latitude: The latitude of the location.
    :type latitude: float
    :param longitude: The longitude of the location.
    :type longitude: float
    :param accuracy: The accuracy of the latitude and longitude. As an example, the accuracy can be
     measured in meters, such as the latitude and longitude are accurate to within 50 meters.
    :type accuracy: float
    :param altitude_accuracy: The accuracy of the altitude.
    :type altitude_accuracy: float
    """

    _attribute_map = {
        'altitude': {'key': 'altitude', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
        'accuracy': {'key': 'accuracy', 'type': 'float'},
        'altitude_accuracy': {'key': 'altitudeAccuracy', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        altitude: Optional[float] = None,
        latitude: Optional[float] = None,
        longitude: Optional[float] = None,
        accuracy: Optional[float] = None,
        altitude_accuracy: Optional[float] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookGeoCoordinates, self).__init__(**kwargs)
        self.altitude = altitude
        self.latitude = latitude
        self.longitude = longitude
        self.accuracy = accuracy
        self.altitude_accuracy = altitude_accuracy


class MicrosoftGraphOutlookTask(MicrosoftGraphOutlookItem):
    """outlookTask.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param assigned_to:
    :type assigned_to: str
    :param body: itemBody.
    :type body: ~users_user.models.MicrosoftGraphItemBody
    :param completed_date_time: dateTimeTimeZone.
    :type completed_date_time: ~users_user.models.MicrosoftGraphDateTimeZone
    :param due_date_time: dateTimeTimeZone.
    :type due_date_time: ~users_user.models.MicrosoftGraphDateTimeZone
    :param has_attachments:
    :type has_attachments: bool
    :param importance: importance. Possible values include: "low", "normal", "high".
    :type importance: str or ~users_user.models.MicrosoftGraphImportance
    :param is_reminder_on:
    :type is_reminder_on: bool
    :param owner:
    :type owner: str
    :param parent_folder_id:
    :type parent_folder_id: str
    :param recurrence: patternedRecurrence.
    :type recurrence: ~users_user.models.MicrosoftGraphPatternedRecurrence
    :param reminder_date_time: dateTimeTimeZone.
    :type reminder_date_time: ~users_user.models.MicrosoftGraphDateTimeZone
    :param sensitivity: sensitivity. Possible values include: "normal", "personal", "private",
     "confidential".
    :type sensitivity: str or ~users_user.models.MicrosoftGraphSensitivity
    :param start_date_time: dateTimeTimeZone.
    :type start_date_time: ~users_user.models.MicrosoftGraphDateTimeZone
    :param status: taskStatus. Possible values include: "notStarted", "inProgress", "completed",
     "waitingOnOthers", "deferred".
    :type status: str or ~users_user.models.MicrosoftGraphTaskStatus
    :param subject:
    :type subject: str
    :param single_value_extended_properties:
    :type single_value_extended_properties:
     list[~users_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties:
    :type multi_value_extended_properties:
     list[~users_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param attachments:
    :type attachments: list[~users_user.models.MicrosoftGraphAttachment]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'importance': {'key': 'importance', 'type': 'str'},
        'is_reminder_on': {'key': 'isReminderOn', 'type': 'bool'},
        'owner': {'key': 'owner', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'recurrence': {'key': 'recurrence', 'type': 'MicrosoftGraphPatternedRecurrence'},
        'reminder_date_time': {'key': 'reminderDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'sensitivity': {'key': 'sensitivity', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'status': {'key': 'status', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        change_key: Optional[str] = None,
        categories: Optional[List[str]] = None,
        assigned_to: Optional[str] = None,
        body: Optional["MicrosoftGraphItemBody"] = None,
        completed_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        due_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        has_attachments: Optional[bool] = None,
        importance: Optional[Union[str, "MicrosoftGraphImportance"]] = None,
        is_reminder_on: Optional[bool] = None,
        owner: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        recurrence: Optional["MicrosoftGraphPatternedRecurrence"] = None,
        reminder_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        sensitivity: Optional[Union[str, "MicrosoftGraphSensitivity"]] = None,
        start_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        status: Optional[Union[str, "MicrosoftGraphTaskStatus"]] = None,
        subject: Optional[str] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        attachments: Optional[List["MicrosoftGraphAttachment"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookTask, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, change_key=change_key, categories=categories, **kwargs)
        self.assigned_to = assigned_to
        self.body = body
        self.completed_date_time = completed_date_time
        self.due_date_time = due_date_time
        self.has_attachments = has_attachments
        self.importance = importance
        self.is_reminder_on = is_reminder_on
        self.owner = owner
        self.parent_folder_id = parent_folder_id
        self.recurrence = recurrence
        self.reminder_date_time = reminder_date_time
        self.sensitivity = sensitivity
        self.start_date_time = start_date_time
        self.status = status
        self.subject = subject
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties
        self.attachments = attachments


class MicrosoftGraphOutlookTaskFolder(MicrosoftGraphEntity):
    """outlookTaskFolder.

    :param id: Read-only.
    :type id: str
    :param change_key:
    :type change_key: str
    :param name:
    :type name: str
    :param is_default_folder:
    :type is_default_folder: bool
    :param parent_group_key:
    :type parent_group_key: str
    :param tasks:
    :type tasks: list[~users_user.models.MicrosoftGraphOutlookTask]
    :param single_value_extended_properties:
    :type single_value_extended_properties:
     list[~users_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties:
    :type multi_value_extended_properties:
     list[~users_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'is_default_folder': {'key': 'isDefaultFolder', 'type': 'bool'},
        'parent_group_key': {'key': 'parentGroupKey', 'type': 'str'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphOutlookTask]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        change_key: Optional[str] = None,
        name: Optional[str] = None,
        is_default_folder: Optional[bool] = None,
        parent_group_key: Optional[str] = None,
        tasks: Optional[List["MicrosoftGraphOutlookTask"]] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookTaskFolder, self).__init__(id=id, **kwargs)
        self.change_key = change_key
        self.name = name
        self.is_default_folder = is_default_folder
        self.parent_group_key = parent_group_key
        self.tasks = tasks
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties


class MicrosoftGraphOutlookTaskGroup(MicrosoftGraphEntity):
    """outlookTaskGroup.

    :param id: Read-only.
    :type id: str
    :param change_key:
    :type change_key: str
    :param is_default_group:
    :type is_default_group: bool
    :param name:
    :type name: str
    :param group_key:
    :type group_key: str
    :param task_folders:
    :type task_folders: list[~users_user.models.MicrosoftGraphOutlookTaskFolder]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'is_default_group': {'key': 'isDefaultGroup', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'group_key': {'key': 'groupKey', 'type': 'str'},
        'task_folders': {'key': 'taskFolders', 'type': '[MicrosoftGraphOutlookTaskFolder]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        change_key: Optional[str] = None,
        is_default_group: Optional[bool] = None,
        name: Optional[str] = None,
        group_key: Optional[str] = None,
        task_folders: Optional[List["MicrosoftGraphOutlookTaskFolder"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookTaskGroup, self).__init__(id=id, **kwargs)
        self.change_key = change_key
        self.is_default_group = is_default_group
        self.name = name
        self.group_key = group_key
        self.task_folders = task_folders


class MicrosoftGraphOutlookUser(MicrosoftGraphEntity):
    """outlookUser.

    :param id: Read-only.
    :type id: str
    :param master_categories: A list of categories defined for the user.
    :type master_categories: list[~users_user.models.MicrosoftGraphOutlookCategory]
    :param task_groups:
    :type task_groups: list[~users_user.models.MicrosoftGraphOutlookTaskGroup]
    :param task_folders:
    :type task_folders: list[~users_user.models.MicrosoftGraphOutlookTaskFolder]
    :param tasks:
    :type tasks: list[~users_user.models.MicrosoftGraphOutlookTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'master_categories': {'key': 'masterCategories', 'type': '[MicrosoftGraphOutlookCategory]'},
        'task_groups': {'key': 'taskGroups', 'type': '[MicrosoftGraphOutlookTaskGroup]'},
        'task_folders': {'key': 'taskFolders', 'type': '[MicrosoftGraphOutlookTaskFolder]'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphOutlookTask]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        master_categories: Optional[List["MicrosoftGraphOutlookCategory"]] = None,
        task_groups: Optional[List["MicrosoftGraphOutlookTaskGroup"]] = None,
        task_folders: Optional[List["MicrosoftGraphOutlookTaskFolder"]] = None,
        tasks: Optional[List["MicrosoftGraphOutlookTask"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookUser, self).__init__(id=id, **kwargs)
        self.master_categories = master_categories
        self.task_groups = task_groups
        self.task_folders = task_folders
        self.tasks = tasks


class MicrosoftGraphPackage(msrest.serialization.Model):
    """package.

    :param type: A string indicating the type of package. While oneNote is the only currently
     defined value, you should expect other package types to be returned and handle them
     accordingly.
    :type type: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPackage, self).__init__(**kwargs)
        self.type = type


class MicrosoftGraphPageLinks(msrest.serialization.Model):
    """pageLinks.

    :param one_note_client_url: externalLink.
    :type one_note_client_url: ~users_user.models.MicrosoftGraphExternalLink
    :param one_note_web_url: externalLink.
    :type one_note_web_url: ~users_user.models.MicrosoftGraphExternalLink
    """

    _attribute_map = {
        'one_note_client_url': {'key': 'oneNoteClientUrl', 'type': 'MicrosoftGraphExternalLink'},
        'one_note_web_url': {'key': 'oneNoteWebUrl', 'type': 'MicrosoftGraphExternalLink'},
    }

    def __init__(
        self,
        *,
        one_note_client_url: Optional["MicrosoftGraphExternalLink"] = None,
        one_note_web_url: Optional["MicrosoftGraphExternalLink"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPageLinks, self).__init__(**kwargs)
        self.one_note_client_url = one_note_client_url
        self.one_note_web_url = one_note_web_url


class MicrosoftGraphPasswordAuthenticationMethod(MicrosoftGraphEntity):
    """passwordAuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param password:
    :type password: str
    :param creation_date_time:
    :type creation_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'creation_date_time': {'key': 'creationDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        password: Optional[str] = None,
        creation_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphPasswordAuthenticationMethod, self).__init__(id=id, **kwargs)
        self.password = password
        self.creation_date_time = creation_date_time


class MicrosoftGraphPasswordProfile(msrest.serialization.Model):
    """passwordProfile.

    :param password: The password for the user. This property is required when a user is created.
     It can be updated, but the user will be required to change the password on the next login. The
     password must satisfy minimum requirements as specified by the user’s passwordPolicies
     property. By default, a strong password is required.
    :type password: str
    :param force_change_password_next_sign_in: true if the user must change her password on the
     next login; otherwise false.
    :type force_change_password_next_sign_in: bool
    :param force_change_password_next_sign_in_with_mfa: If true, at next sign-in, the user must
     perform a multi-factor authentication (MFA) before being forced to change their password. The
     behavior is identical to forceChangePasswordNextSignIn except that the user is required to
     first perform a multi-factor authentication before password change. After a password change,
     this property will be automatically reset to false. If not set, default is false.
    :type force_change_password_next_sign_in_with_mfa: bool
    """

    _attribute_map = {
        'password': {'key': 'password', 'type': 'str'},
        'force_change_password_next_sign_in': {'key': 'forceChangePasswordNextSignIn', 'type': 'bool'},
        'force_change_password_next_sign_in_with_mfa': {'key': 'forceChangePasswordNextSignInWithMfa', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        password: Optional[str] = None,
        force_change_password_next_sign_in: Optional[bool] = None,
        force_change_password_next_sign_in_with_mfa: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphPasswordProfile, self).__init__(**kwargs)
        self.password = password
        self.force_change_password_next_sign_in = force_change_password_next_sign_in
        self.force_change_password_next_sign_in_with_mfa = force_change_password_next_sign_in_with_mfa


class MicrosoftGraphPatternedRecurrence(msrest.serialization.Model):
    """patternedRecurrence.

    :param pattern: recurrencePattern.
    :type pattern: ~users_user.models.MicrosoftGraphRecurrencePattern
    :param range: recurrenceRange.
    :type range: ~users_user.models.MicrosoftGraphRecurrenceRange
    """

    _attribute_map = {
        'pattern': {'key': 'pattern', 'type': 'MicrosoftGraphRecurrencePattern'},
        'range': {'key': 'range', 'type': 'MicrosoftGraphRecurrenceRange'},
    }

    def __init__(
        self,
        *,
        pattern: Optional["MicrosoftGraphRecurrencePattern"] = None,
        range: Optional["MicrosoftGraphRecurrenceRange"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPatternedRecurrence, self).__init__(**kwargs)
        self.pattern = pattern
        self.range = range


class MicrosoftGraphPayloadResponse(MicrosoftGraphEntity):
    """payloadResponse.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPayloadResponse, self).__init__(id=id, **kwargs)


class MicrosoftGraphPayloadTypes(msrest.serialization.Model):
    """payloadTypes.

    :param raw_content:
    :type raw_content: str
    :param visual_content: visualProperties.
    :type visual_content: ~users_user.models.MicrosoftGraphVisualProperties
    """

    _attribute_map = {
        'raw_content': {'key': 'rawContent', 'type': 'str'},
        'visual_content': {'key': 'visualContent', 'type': 'MicrosoftGraphVisualProperties'},
    }

    def __init__(
        self,
        *,
        raw_content: Optional[str] = None,
        visual_content: Optional["MicrosoftGraphVisualProperties"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPayloadTypes, self).__init__(**kwargs)
        self.raw_content = raw_content
        self.visual_content = visual_content


class MicrosoftGraphPendingContentUpdate(msrest.serialization.Model):
    """pendingContentUpdate.

    :param queued_date_time:
    :type queued_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'queued_date_time': {'key': 'queuedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        queued_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphPendingContentUpdate, self).__init__(**kwargs)
        self.queued_date_time = queued_date_time


class MicrosoftGraphPendingOperations(msrest.serialization.Model):
    """pendingOperations.

    :param pending_content_update: pendingContentUpdate.
    :type pending_content_update: ~users_user.models.MicrosoftGraphPendingContentUpdate
    """

    _attribute_map = {
        'pending_content_update': {'key': 'pendingContentUpdate', 'type': 'MicrosoftGraphPendingContentUpdate'},
    }

    def __init__(
        self,
        *,
        pending_content_update: Optional["MicrosoftGraphPendingContentUpdate"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPendingOperations, self).__init__(**kwargs)
        self.pending_content_update = pending_content_update


class MicrosoftGraphPermission(MicrosoftGraphEntity):
    """permission.

    :param id: Read-only.
    :type id: str
    :param expiration_date_time: A format of yyyy-MM-ddTHH:mm:ssZ of DateTimeOffset indicates the
     expiration time of the permission. DateTime.MinValue indicates there is no expiration set for
     this permission. Optional.
    :type expiration_date_time: ~datetime.datetime
    :param granted_to: identitySet.
    :type granted_to: ~users_user.models.MicrosoftGraphIdentitySet
    :param granted_to_identities: For link type permissions, the details of the users to whom
     permission was granted. Read-only.
    :type granted_to_identities: list[~users_user.models.MicrosoftGraphIdentitySet]
    :param has_password: This indicates whether password is set for this permission, it's only
     showing in response. Optional and Read-only and for OneDrive Personal only.
    :type has_password: bool
    :param inherited_from: itemReference.
    :type inherited_from: ~users_user.models.MicrosoftGraphItemReference
    :param invitation: sharingInvitation.
    :type invitation: ~users_user.models.MicrosoftGraphSharingInvitation
    :param link: sharingLink.
    :type link: ~users_user.models.MicrosoftGraphSharingLink
    :param roles: The type of permission, e.g. read. See below for the full list of roles. Read-
     only.
    :type roles: list[str]
    :param share_id: A unique token that can be used to access this shared item via the **shares**
     API. Read-only.
    :type share_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'granted_to': {'key': 'grantedTo', 'type': 'MicrosoftGraphIdentitySet'},
        'granted_to_identities': {'key': 'grantedToIdentities', 'type': '[MicrosoftGraphIdentitySet]'},
        'has_password': {'key': 'hasPassword', 'type': 'bool'},
        'inherited_from': {'key': 'inheritedFrom', 'type': 'MicrosoftGraphItemReference'},
        'invitation': {'key': 'invitation', 'type': 'MicrosoftGraphSharingInvitation'},
        'link': {'key': 'link', 'type': 'MicrosoftGraphSharingLink'},
        'roles': {'key': 'roles', 'type': '[str]'},
        'share_id': {'key': 'shareId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        granted_to: Optional["MicrosoftGraphIdentitySet"] = None,
        granted_to_identities: Optional[List["MicrosoftGraphIdentitySet"]] = None,
        has_password: Optional[bool] = None,
        inherited_from: Optional["MicrosoftGraphItemReference"] = None,
        invitation: Optional["MicrosoftGraphSharingInvitation"] = None,
        link: Optional["MicrosoftGraphSharingLink"] = None,
        roles: Optional[List[str]] = None,
        share_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPermission, self).__init__(id=id, **kwargs)
        self.expiration_date_time = expiration_date_time
        self.granted_to = granted_to
        self.granted_to_identities = granted_to_identities
        self.has_password = has_password
        self.inherited_from = inherited_from
        self.invitation = invitation
        self.link = link
        self.roles = roles
        self.share_id = share_id


class MicrosoftGraphPerson(MicrosoftGraphEntity):
    """person.

    :param id: Read-only.
    :type id: str
    :param display_name: The person's display name.
    :type display_name: str
    :param given_name: The person's given name.
    :type given_name: str
    :param surname: The person's surname.
    :type surname: str
    :param birthday: The person's birthday.
    :type birthday: str
    :param person_notes: Free-form notes that the user has taken about this person.
    :type person_notes: str
    :param is_favorite: true if the user has flagged this person as a favorite.
    :type is_favorite: bool
    :param email_addresses:
    :type email_addresses: list[~users_user.models.MicrosoftGraphRankedEmailAddress]
    :param phones: The person's phone numbers.
    :type phones: list[~users_user.models.MicrosoftGraphPhone]
    :param postal_addresses: The person's addresses.
    :type postal_addresses: list[~users_user.models.MicrosoftGraphLocation]
    :param websites: The person's websites.
    :type websites: list[~users_user.models.MicrosoftGraphWebsite]
    :param title:
    :type title: str
    :param company_name: The name of the person's company.
    :type company_name: str
    :param yomi_company: The phonetic Japanese name of the person's company.
    :type yomi_company: str
    :param department: The person's department.
    :type department: str
    :param office_location: The location of the person's office.
    :type office_location: str
    :param profession: The person's profession.
    :type profession: str
    :param sources:
    :type sources: list[~users_user.models.MicrosoftGraphPersonDataSource]
    :param mailbox_type:
    :type mailbox_type: str
    :param person_type: The type of person.
    :type person_type: str
    :param user_principal_name: The user principal name (UPN) of the person. The UPN is an
     Internet-style login name for the person based on the Internet standard RFC 822. By convention,
     this should map to the person's email name. The general format is alias@domain.
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'birthday': {'key': 'birthday', 'type': 'str'},
        'person_notes': {'key': 'personNotes', 'type': 'str'},
        'is_favorite': {'key': 'isFavorite', 'type': 'bool'},
        'email_addresses': {'key': 'emailAddresses', 'type': '[MicrosoftGraphRankedEmailAddress]'},
        'phones': {'key': 'phones', 'type': '[MicrosoftGraphPhone]'},
        'postal_addresses': {'key': 'postalAddresses', 'type': '[MicrosoftGraphLocation]'},
        'websites': {'key': 'websites', 'type': '[MicrosoftGraphWebsite]'},
        'title': {'key': 'title', 'type': 'str'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'yomi_company': {'key': 'yomiCompany', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'profession': {'key': 'profession', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[MicrosoftGraphPersonDataSource]'},
        'mailbox_type': {'key': 'mailboxType', 'type': 'str'},
        'person_type': {'key': 'personType', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        given_name: Optional[str] = None,
        surname: Optional[str] = None,
        birthday: Optional[str] = None,
        person_notes: Optional[str] = None,
        is_favorite: Optional[bool] = None,
        email_addresses: Optional[List["MicrosoftGraphRankedEmailAddress"]] = None,
        phones: Optional[List["MicrosoftGraphPhone"]] = None,
        postal_addresses: Optional[List["MicrosoftGraphLocation"]] = None,
        websites: Optional[List["MicrosoftGraphWebsite"]] = None,
        title: Optional[str] = None,
        company_name: Optional[str] = None,
        yomi_company: Optional[str] = None,
        department: Optional[str] = None,
        office_location: Optional[str] = None,
        profession: Optional[str] = None,
        sources: Optional[List["MicrosoftGraphPersonDataSource"]] = None,
        mailbox_type: Optional[str] = None,
        person_type: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPerson, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.given_name = given_name
        self.surname = surname
        self.birthday = birthday
        self.person_notes = person_notes
        self.is_favorite = is_favorite
        self.email_addresses = email_addresses
        self.phones = phones
        self.postal_addresses = postal_addresses
        self.websites = websites
        self.title = title
        self.company_name = company_name
        self.yomi_company = yomi_company
        self.department = department
        self.office_location = office_location
        self.profession = profession
        self.sources = sources
        self.mailbox_type = mailbox_type
        self.person_type = person_type
        self.user_principal_name = user_principal_name


class MicrosoftGraphPersonAnniversary(MicrosoftGraphItemFacet):
    """personAnniversary.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param type: anniversaryType. Possible values include: "birthday", "wedding",
     "unknownFutureValue".
    :type type: str or ~users_user.models.MicrosoftGraphAnniversaryType
    :param date:
    :type date: ~datetime.date
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'type': {'key': 'type', 'type': 'str'},
        'date': {'key': 'date', 'type': 'date'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        type: Optional[Union[str, "MicrosoftGraphAnniversaryType"]] = None,
        date: Optional[datetime.date] = None,
        **kwargs
    ):
        super(MicrosoftGraphPersonAnniversary, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.type = type
        self.date = date


class MicrosoftGraphPersonDataSource(msrest.serialization.Model):
    """personDataSource.

    :param type:
    :type type: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPersonDataSource, self).__init__(**kwargs)
        self.type = type


class MicrosoftGraphPersonInterest(MicrosoftGraphItemFacet):
    """personInterest.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param categories:
    :type categories: list[str]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        categories: Optional[List[str]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPersonInterest, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.categories = categories
        self.description = description
        self.display_name = display_name
        self.web_url = web_url


class MicrosoftGraphPersonName(MicrosoftGraphItemFacet):
    """personName.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param display_name:
    :type display_name: str
    :param first:
    :type first: str
    :param initials:
    :type initials: str
    :param last:
    :type last: str
    :param language_tag:
    :type language_tag: str
    :param maiden:
    :type maiden: str
    :param middle:
    :type middle: str
    :param nickname:
    :type nickname: str
    :param suffix:
    :type suffix: str
    :param title:
    :type title: str
    :param pronunciation: yomiPersonName.
    :type pronunciation: ~users_user.models.MicrosoftGraphYomiPersonName
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'first': {'key': 'first', 'type': 'str'},
        'initials': {'key': 'initials', 'type': 'str'},
        'last': {'key': 'last', 'type': 'str'},
        'language_tag': {'key': 'languageTag', 'type': 'str'},
        'maiden': {'key': 'maiden', 'type': 'str'},
        'middle': {'key': 'middle', 'type': 'str'},
        'nickname': {'key': 'nickname', 'type': 'str'},
        'suffix': {'key': 'suffix', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'pronunciation': {'key': 'pronunciation', 'type': 'MicrosoftGraphYomiPersonName'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        display_name: Optional[str] = None,
        first: Optional[str] = None,
        initials: Optional[str] = None,
        last: Optional[str] = None,
        language_tag: Optional[str] = None,
        maiden: Optional[str] = None,
        middle: Optional[str] = None,
        nickname: Optional[str] = None,
        suffix: Optional[str] = None,
        title: Optional[str] = None,
        pronunciation: Optional["MicrosoftGraphYomiPersonName"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPersonName, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.display_name = display_name
        self.first = first
        self.initials = initials
        self.last = last
        self.language_tag = language_tag
        self.maiden = maiden
        self.middle = middle
        self.nickname = nickname
        self.suffix = suffix
        self.title = title
        self.pronunciation = pronunciation


class MicrosoftGraphPersonOrGroupColumn(msrest.serialization.Model):
    """personOrGroupColumn.

    :param allow_multiple_selection: Indicates whether multiple values can be selected from the
     source.
    :type allow_multiple_selection: bool
    :param choose_from_type: Whether to allow selection of people only, or people and groups. Must
     be one of peopleAndGroups or peopleOnly.
    :type choose_from_type: str
    :param display_as: How to display the information about the person or group chosen. See below.
    :type display_as: str
    """

    _attribute_map = {
        'allow_multiple_selection': {'key': 'allowMultipleSelection', 'type': 'bool'},
        'choose_from_type': {'key': 'chooseFromType', 'type': 'str'},
        'display_as': {'key': 'displayAs', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        allow_multiple_selection: Optional[bool] = None,
        choose_from_type: Optional[str] = None,
        display_as: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPersonOrGroupColumn, self).__init__(**kwargs)
        self.allow_multiple_selection = allow_multiple_selection
        self.choose_from_type = choose_from_type
        self.display_as = display_as


class MicrosoftGraphPersonWebsite(MicrosoftGraphItemFacet):
    """personWebsite.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param categories:
    :type categories: list[str]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        categories: Optional[List[str]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPersonWebsite, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.categories = categories
        self.description = description
        self.display_name = display_name
        self.web_url = web_url


class MicrosoftGraphPhone(msrest.serialization.Model):
    """phone.

    :param type: phoneType. Possible values include: "home", "business", "mobile", "other",
     "assistant", "homeFax", "businessFax", "otherFax", "pager", "radio".
    :type type: str or ~users_user.models.MicrosoftGraphPhoneType
    :param number: The phone number.
    :type number: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'number': {'key': 'number', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "MicrosoftGraphPhoneType"]] = None,
        number: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPhone, self).__init__(**kwargs)
        self.type = type
        self.number = number


class MicrosoftGraphPhoneAuthenticationMethod(MicrosoftGraphEntity):
    """phoneAuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param phone_number:
    :type phone_number: str
    :param phone_type: authenticationPhoneType. Possible values include: "mobile",
     "alternateMobile", "office", "unknownFutureValue".
    :type phone_type: str or ~users_user.models.MicrosoftGraphAuthenticationPhoneType
    :param sms_sign_in_state: authenticationMethodSignInState. Possible values include:
     "notSupported", "notAllowedByPolicy", "notEnabled", "phoneNumberNotUnique", "ready",
     "notConfigured", "unknownFutureValue".
    :type sms_sign_in_state: str or
     ~users_user.models.MicrosoftGraphAuthenticationMethodSignInState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'phone_type': {'key': 'phoneType', 'type': 'str'},
        'sms_sign_in_state': {'key': 'smsSignInState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        phone_number: Optional[str] = None,
        phone_type: Optional[Union[str, "MicrosoftGraphAuthenticationPhoneType"]] = None,
        sms_sign_in_state: Optional[Union[str, "MicrosoftGraphAuthenticationMethodSignInState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPhoneAuthenticationMethod, self).__init__(id=id, **kwargs)
        self.phone_number = phone_number
        self.phone_type = phone_type
        self.sms_sign_in_state = sms_sign_in_state


class MicrosoftGraphPhoto(msrest.serialization.Model):
    """photo.

    :param camera_make: Camera manufacturer. Read-only.
    :type camera_make: str
    :param camera_model: Camera model. Read-only.
    :type camera_model: str
    :param exposure_denominator: The denominator for the exposure time fraction from the camera.
     Read-only.
    :type exposure_denominator: float
    :param exposure_numerator: The numerator for the exposure time fraction from the camera. Read-
     only.
    :type exposure_numerator: float
    :param f_number: The F-stop value from the camera. Read-only.
    :type f_number: float
    :param focal_length: The focal length from the camera. Read-only.
    :type focal_length: float
    :param iso: The ISO value from the camera. Read-only.
    :type iso: int
    :param orientation:
    :type orientation: int
    :param taken_date_time: Represents the date and time the photo was taken. Read-only.
    :type taken_date_time: ~datetime.datetime
    """

    _validation = {
        'iso': {'maximum': 2147483647, 'minimum': -2147483648},
        'orientation': {'maximum': 32767, 'minimum': -32768},
    }

    _attribute_map = {
        'camera_make': {'key': 'cameraMake', 'type': 'str'},
        'camera_model': {'key': 'cameraModel', 'type': 'str'},
        'exposure_denominator': {'key': 'exposureDenominator', 'type': 'float'},
        'exposure_numerator': {'key': 'exposureNumerator', 'type': 'float'},
        'f_number': {'key': 'fNumber', 'type': 'float'},
        'focal_length': {'key': 'focalLength', 'type': 'float'},
        'iso': {'key': 'iso', 'type': 'int'},
        'orientation': {'key': 'orientation', 'type': 'int'},
        'taken_date_time': {'key': 'takenDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        camera_make: Optional[str] = None,
        camera_model: Optional[str] = None,
        exposure_denominator: Optional[float] = None,
        exposure_numerator: Optional[float] = None,
        f_number: Optional[float] = None,
        focal_length: Optional[float] = None,
        iso: Optional[int] = None,
        orientation: Optional[int] = None,
        taken_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphPhoto, self).__init__(**kwargs)
        self.camera_make = camera_make
        self.camera_model = camera_model
        self.exposure_denominator = exposure_denominator
        self.exposure_numerator = exposure_numerator
        self.f_number = f_number
        self.focal_length = focal_length
        self.iso = iso
        self.orientation = orientation
        self.taken_date_time = taken_date_time


class MicrosoftGraphPhysicalAddress(msrest.serialization.Model):
    """physicalAddress.

    :param type: physicalAddressType. Possible values include: "unknown", "home", "business",
     "other".
    :type type: str or ~users_user.models.MicrosoftGraphPhysicalAddressType
    :param post_office_box:
    :type post_office_box: str
    :param street: The street.
    :type street: str
    :param city: The city.
    :type city: str
    :param state: The state.
    :type state: str
    :param country_or_region: The country or region. It's a free-format string value, for example,
     'United States'.
    :type country_or_region: str
    :param postal_code: The postal code.
    :type postal_code: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'post_office_box': {'key': 'postOfficeBox', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
        'city': {'key': 'city', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "MicrosoftGraphPhysicalAddressType"]] = None,
        post_office_box: Optional[str] = None,
        street: Optional[str] = None,
        city: Optional[str] = None,
        state: Optional[str] = None,
        country_or_region: Optional[str] = None,
        postal_code: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPhysicalAddress, self).__init__(**kwargs)
        self.type = type
        self.post_office_box = post_office_box
        self.street = street
        self.city = city
        self.state = state
        self.country_or_region = country_or_region
        self.postal_code = postal_code


class MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat(MicrosoftGraphEntity):
    """plannerAssignedToTaskBoardTaskFormat.

    :param id: Read-only.
    :type id: str
    :param unassigned_order_hint: Hint value used to order the task on the AssignedTo view of the
     Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee dictionary
     does not provide an order hint for the user the task is assigned to. The format is defined as
     outlined here.
    :type unassigned_order_hint: str
    :param order_hints_by_assignee: Any object.
    :type order_hints_by_assignee: object
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'unassigned_order_hint': {'key': 'unassignedOrderHint', 'type': 'str'},
        'order_hints_by_assignee': {'key': 'orderHintsByAssignee', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        unassigned_order_hint: Optional[str] = None,
        order_hints_by_assignee: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat, self).__init__(id=id, **kwargs)
        self.unassigned_order_hint = unassigned_order_hint
        self.order_hints_by_assignee = order_hints_by_assignee


class MicrosoftGraphPlannerBucket(MicrosoftGraphEntity):
    """plannerBucket.

    :param id: Read-only.
    :type id: str
    :param name: Name of the bucket.
    :type name: str
    :param plan_id: Plan ID to which the bucket belongs.
    :type plan_id: str
    :param order_hint: Hint used to order items of this type in a list view. The format is defined
     as outlined here.
    :type order_hint: str
    :param tasks: Read-only. Nullable. The collection of tasks in the bucket.
    :type tasks: list[~users_user.models.MicrosoftGraphPlannerTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'plan_id': {'key': 'planId', 'type': 'str'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPlannerTask]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        plan_id: Optional[str] = None,
        order_hint: Optional[str] = None,
        tasks: Optional[List["MicrosoftGraphPlannerTask"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerBucket, self).__init__(id=id, **kwargs)
        self.name = name
        self.plan_id = plan_id
        self.order_hint = order_hint
        self.tasks = tasks


class MicrosoftGraphPlannerBucketTaskBoardTaskFormat(MicrosoftGraphEntity):
    """plannerBucketTaskBoardTaskFormat.

    :param id: Read-only.
    :type id: str
    :param order_hint: Hint used to order tasks in the Bucket view of the Task Board. The format is
     defined as outlined here.
    :type order_hint: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        order_hint: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerBucketTaskBoardTaskFormat, self).__init__(id=id, **kwargs)
        self.order_hint = order_hint


class MicrosoftGraphPlannerCategoryDescriptions(msrest.serialization.Model):
    """plannerCategoryDescriptions.

    :param category1: The label associated with Category 1.
    :type category1: str
    :param category2: The label associated with Category 2.
    :type category2: str
    :param category3: The label associated with Category 3.
    :type category3: str
    :param category4: The label associated with Category 4.
    :type category4: str
    :param category5: The label associated with Category 5.
    :type category5: str
    :param category6: The label associated with Category 6.
    :type category6: str
    """

    _attribute_map = {
        'category1': {'key': 'category1', 'type': 'str'},
        'category2': {'key': 'category2', 'type': 'str'},
        'category3': {'key': 'category3', 'type': 'str'},
        'category4': {'key': 'category4', 'type': 'str'},
        'category5': {'key': 'category5', 'type': 'str'},
        'category6': {'key': 'category6', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        category1: Optional[str] = None,
        category2: Optional[str] = None,
        category3: Optional[str] = None,
        category4: Optional[str] = None,
        category5: Optional[str] = None,
        category6: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerCategoryDescriptions, self).__init__(**kwargs)
        self.category1 = category1
        self.category2 = category2
        self.category3 = category3
        self.category4 = category4
        self.category5 = category5
        self.category6 = category6


class MicrosoftGraphPlannerDelta(MicrosoftGraphEntity):
    """plannerDelta.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerDelta, self).__init__(id=id, **kwargs)


class MicrosoftGraphPlannerGroup(MicrosoftGraphEntity):
    """plannerGroup.

    :param id: Read-only.
    :type id: str
    :param plans: Read-only. Nullable. Returns the plannerPlans owned by the group.
    :type plans: list[~users_user.models.MicrosoftGraphPlannerPlan]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'plans': {'key': 'plans', 'type': '[MicrosoftGraphPlannerPlan]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        plans: Optional[List["MicrosoftGraphPlannerPlan"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerGroup, self).__init__(id=id, **kwargs)
        self.plans = plans


class MicrosoftGraphPlannerPlan(MicrosoftGraphEntity):
    """plannerPlan.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param created_date_time: Read-only. Date and time at which the plan is created. The Timestamp
     type represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param owner: ID of the Group that owns the plan. A valid group must exist before this field
     can be set. After it is set, this property can’t be updated.
    :type owner: str
    :param title: Required. Title of the plan.
    :type title: str
    :param contexts: Any object.
    :type contexts: object
    :param tasks: Read-only. Nullable. Collection of tasks in the plan.
    :type tasks: list[~users_user.models.MicrosoftGraphPlannerTask]
    :param buckets: Read-only. Nullable. Collection of buckets in the plan.
    :type buckets: list[~users_user.models.MicrosoftGraphPlannerBucket]
    :param details: plannerPlanDetails.
    :type details: ~users_user.models.MicrosoftGraphPlannerPlanDetails
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'owner': {'key': 'owner', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'contexts': {'key': 'contexts', 'type': 'object'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPlannerTask]'},
        'buckets': {'key': 'buckets', 'type': '[MicrosoftGraphPlannerBucket]'},
        'details': {'key': 'details', 'type': 'MicrosoftGraphPlannerPlanDetails'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        owner: Optional[str] = None,
        title: Optional[str] = None,
        contexts: Optional[object] = None,
        tasks: Optional[List["MicrosoftGraphPlannerTask"]] = None,
        buckets: Optional[List["MicrosoftGraphPlannerBucket"]] = None,
        details: Optional["MicrosoftGraphPlannerPlanDetails"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerPlan, self).__init__(id=id, **kwargs)
        self.created_by = created_by
        self.created_date_time = created_date_time
        self.owner = owner
        self.title = title
        self.contexts = contexts
        self.tasks = tasks
        self.buckets = buckets
        self.details = details


class MicrosoftGraphPlannerPlanDetails(MicrosoftGraphEntity):
    """plannerPlanDetails.

    :param id: Read-only.
    :type id: str
    :param shared_with: Any object.
    :type shared_with: object
    :param category_descriptions: plannerCategoryDescriptions.
    :type category_descriptions: ~users_user.models.MicrosoftGraphPlannerCategoryDescriptions
    :param context_details: Any object.
    :type context_details: object
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'shared_with': {'key': 'sharedWith', 'type': 'object'},
        'category_descriptions': {'key': 'categoryDescriptions', 'type': 'MicrosoftGraphPlannerCategoryDescriptions'},
        'context_details': {'key': 'contextDetails', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        shared_with: Optional[object] = None,
        category_descriptions: Optional["MicrosoftGraphPlannerCategoryDescriptions"] = None,
        context_details: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerPlanDetails, self).__init__(id=id, **kwargs)
        self.shared_with = shared_with
        self.category_descriptions = category_descriptions
        self.context_details = context_details


class MicrosoftGraphPlannerProgressTaskBoardTaskFormat(MicrosoftGraphEntity):
    """plannerProgressTaskBoardTaskFormat.

    :param id: Read-only.
    :type id: str
    :param order_hint: Hint value used to order the task on the Progress view of the Task Board.
     The format is defined as outlined here.
    :type order_hint: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        order_hint: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerProgressTaskBoardTaskFormat, self).__init__(id=id, **kwargs)
        self.order_hint = order_hint


class MicrosoftGraphPlannerTask(MicrosoftGraphEntity):
    """plannerTask.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param plan_id: Plan ID to which the task belongs.
    :type plan_id: str
    :param bucket_id: Bucket ID to which the task belongs. The bucket needs to be in the plan that
     the task is in. It is 28 characters long and case-sensitive. Format validation is done on the
     service.
    :type bucket_id: str
    :param title: Title of the task.
    :type title: str
    :param order_hint: Hint used to order items of this type in a list view. The format is defined
     as outlined here.
    :type order_hint: str
    :param assignee_priority: Hint used to order items of this type in a list view. The format is
     defined as outlined here.
    :type assignee_priority: str
    :param percent_complete: Percentage of task completion. When set to 100, the task is considered
     completed.
    :type percent_complete: int
    :param priority:
    :type priority: int
    :param start_date_time: Date and time at which the task starts. The Timestamp type represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type start_date_time: ~datetime.datetime
    :param created_date_time: Read-only. Date and time at which the task is created. The Timestamp
     type represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param due_date_time: Date and time at which the task is due. The Timestamp type represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type due_date_time: ~datetime.datetime
    :param has_description: Read-only. Value is true if the details object of the task has a non-
     empty description and false otherwise.
    :type has_description: bool
    :param preview_type: plannerPreviewType. Possible values include: "automatic", "noPreview",
     "checklist", "description", "reference".
    :type preview_type: str or ~users_user.models.MicrosoftGraphPlannerPreviewType
    :param completed_date_time: Read-only. Date and time at which the 'percentComplete' of the task
     is set to '100'. The Timestamp type represents date and time information using ISO 8601 format
     and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
     '2014-01-01T00:00:00Z'.
    :type completed_date_time: ~datetime.datetime
    :param completed_by: identitySet.
    :type completed_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param reference_count: Number of external references that exist on the task.
    :type reference_count: int
    :param checklist_item_count: Number of checklist items that are present on the task.
    :type checklist_item_count: int
    :param active_checklist_item_count: Number of checklist items with value set to false,
     representing incomplete items.
    :type active_checklist_item_count: int
    :param applied_categories: Any object.
    :type applied_categories: object
    :param assignments: Any object.
    :type assignments: object
    :param conversation_thread_id: Thread ID of the conversation on the task. This is the ID of the
     conversation thread object created in the group.
    :type conversation_thread_id: str
    :param details: plannerTaskDetails.
    :type details: ~users_user.models.MicrosoftGraphPlannerTaskDetails
    :param assigned_to_task_board_format: plannerAssignedToTaskBoardTaskFormat.
    :type assigned_to_task_board_format:
     ~users_user.models.MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat
    :param progress_task_board_format: plannerProgressTaskBoardTaskFormat.
    :type progress_task_board_format:
     ~users_user.models.MicrosoftGraphPlannerProgressTaskBoardTaskFormat
    :param bucket_task_board_format: plannerBucketTaskBoardTaskFormat.
    :type bucket_task_board_format:
     ~users_user.models.MicrosoftGraphPlannerBucketTaskBoardTaskFormat
    """

    _validation = {
        'percent_complete': {'maximum': 2147483647, 'minimum': -2147483648},
        'priority': {'maximum': 2147483647, 'minimum': -2147483648},
        'reference_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'checklist_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'active_checklist_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'plan_id': {'key': 'planId', 'type': 'str'},
        'bucket_id': {'key': 'bucketId', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
        'assignee_priority': {'key': 'assigneePriority', 'type': 'str'},
        'percent_complete': {'key': 'percentComplete', 'type': 'int'},
        'priority': {'key': 'priority', 'type': 'int'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'iso-8601'},
        'has_description': {'key': 'hasDescription', 'type': 'bool'},
        'preview_type': {'key': 'previewType', 'type': 'str'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'iso-8601'},
        'completed_by': {'key': 'completedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'reference_count': {'key': 'referenceCount', 'type': 'int'},
        'checklist_item_count': {'key': 'checklistItemCount', 'type': 'int'},
        'active_checklist_item_count': {'key': 'activeChecklistItemCount', 'type': 'int'},
        'applied_categories': {'key': 'appliedCategories', 'type': 'object'},
        'assignments': {'key': 'assignments', 'type': 'object'},
        'conversation_thread_id': {'key': 'conversationThreadId', 'type': 'str'},
        'details': {'key': 'details', 'type': 'MicrosoftGraphPlannerTaskDetails'},
        'assigned_to_task_board_format': {'key': 'assignedToTaskBoardFormat', 'type': 'MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat'},
        'progress_task_board_format': {'key': 'progressTaskBoardFormat', 'type': 'MicrosoftGraphPlannerProgressTaskBoardTaskFormat'},
        'bucket_task_board_format': {'key': 'bucketTaskBoardFormat', 'type': 'MicrosoftGraphPlannerBucketTaskBoardTaskFormat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        plan_id: Optional[str] = None,
        bucket_id: Optional[str] = None,
        title: Optional[str] = None,
        order_hint: Optional[str] = None,
        assignee_priority: Optional[str] = None,
        percent_complete: Optional[int] = None,
        priority: Optional[int] = None,
        start_date_time: Optional[datetime.datetime] = None,
        created_date_time: Optional[datetime.datetime] = None,
        due_date_time: Optional[datetime.datetime] = None,
        has_description: Optional[bool] = None,
        preview_type: Optional[Union[str, "MicrosoftGraphPlannerPreviewType"]] = None,
        completed_date_time: Optional[datetime.datetime] = None,
        completed_by: Optional["MicrosoftGraphIdentitySet"] = None,
        reference_count: Optional[int] = None,
        checklist_item_count: Optional[int] = None,
        active_checklist_item_count: Optional[int] = None,
        applied_categories: Optional[object] = None,
        assignments: Optional[object] = None,
        conversation_thread_id: Optional[str] = None,
        details: Optional["MicrosoftGraphPlannerTaskDetails"] = None,
        assigned_to_task_board_format: Optional["MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat"] = None,
        progress_task_board_format: Optional["MicrosoftGraphPlannerProgressTaskBoardTaskFormat"] = None,
        bucket_task_board_format: Optional["MicrosoftGraphPlannerBucketTaskBoardTaskFormat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerTask, self).__init__(id=id, **kwargs)
        self.created_by = created_by
        self.plan_id = plan_id
        self.bucket_id = bucket_id
        self.title = title
        self.order_hint = order_hint
        self.assignee_priority = assignee_priority
        self.percent_complete = percent_complete
        self.priority = priority
        self.start_date_time = start_date_time
        self.created_date_time = created_date_time
        self.due_date_time = due_date_time
        self.has_description = has_description
        self.preview_type = preview_type
        self.completed_date_time = completed_date_time
        self.completed_by = completed_by
        self.reference_count = reference_count
        self.checklist_item_count = checklist_item_count
        self.active_checklist_item_count = active_checklist_item_count
        self.applied_categories = applied_categories
        self.assignments = assignments
        self.conversation_thread_id = conversation_thread_id
        self.details = details
        self.assigned_to_task_board_format = assigned_to_task_board_format
        self.progress_task_board_format = progress_task_board_format
        self.bucket_task_board_format = bucket_task_board_format


class MicrosoftGraphPlannerTaskDetails(MicrosoftGraphEntity):
    """plannerTaskDetails.

    :param id: Read-only.
    :type id: str
    :param description: Description of the task.
    :type description: str
    :param preview_type: plannerPreviewType. Possible values include: "automatic", "noPreview",
     "checklist", "description", "reference".
    :type preview_type: str or ~users_user.models.MicrosoftGraphPlannerPreviewType
    :param references: Any object.
    :type references: object
    :param checklist: Any object.
    :type checklist: object
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'preview_type': {'key': 'previewType', 'type': 'str'},
        'references': {'key': 'references', 'type': 'object'},
        'checklist': {'key': 'checklist', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        description: Optional[str] = None,
        preview_type: Optional[Union[str, "MicrosoftGraphPlannerPreviewType"]] = None,
        references: Optional[object] = None,
        checklist: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerTaskDetails, self).__init__(id=id, **kwargs)
        self.description = description
        self.preview_type = preview_type
        self.references = references
        self.checklist = checklist


class MicrosoftGraphPlannerUser(MicrosoftGraphEntity):
    """plannerUser.

    :param id: Read-only.
    :type id: str
    :param favorite_plan_references: Any object.
    :type favorite_plan_references: object
    :param recent_plan_references: Any object.
    :type recent_plan_references: object
    :param tasks: Read-only. Nullable. Returns the plannerPlans shared with the user.
    :type tasks: list[~users_user.models.MicrosoftGraphPlannerTask]
    :param plans: Read-only. Nullable. Returns the plannerTasks assigned to the user.
    :type plans: list[~users_user.models.MicrosoftGraphPlannerPlan]
    :param favorite_plans:
    :type favorite_plans: list[~users_user.models.MicrosoftGraphPlannerPlan]
    :param recent_plans:
    :type recent_plans: list[~users_user.models.MicrosoftGraphPlannerPlan]
    :param all:
    :type all: list[~users_user.models.MicrosoftGraphEntity]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'favorite_plan_references': {'key': 'favoritePlanReferences', 'type': 'object'},
        'recent_plan_references': {'key': 'recentPlanReferences', 'type': 'object'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPlannerTask]'},
        'plans': {'key': 'plans', 'type': '[MicrosoftGraphPlannerPlan]'},
        'favorite_plans': {'key': 'favoritePlans', 'type': '[MicrosoftGraphPlannerPlan]'},
        'recent_plans': {'key': 'recentPlans', 'type': '[MicrosoftGraphPlannerPlan]'},
        'all': {'key': 'all', 'type': '[MicrosoftGraphEntity]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        favorite_plan_references: Optional[object] = None,
        recent_plan_references: Optional[object] = None,
        tasks: Optional[List["MicrosoftGraphPlannerTask"]] = None,
        plans: Optional[List["MicrosoftGraphPlannerPlan"]] = None,
        favorite_plans: Optional[List["MicrosoftGraphPlannerPlan"]] = None,
        recent_plans: Optional[List["MicrosoftGraphPlannerPlan"]] = None,
        all: Optional[List["MicrosoftGraphEntity"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlannerUser, self).__init__(id=id, **kwargs)
        self.favorite_plan_references = favorite_plan_references
        self.recent_plan_references = recent_plan_references
        self.tasks = tasks
        self.plans = plans
        self.favorite_plans = favorite_plans
        self.recent_plans = recent_plans
        self.all = all


class MicrosoftGraphPositionDetail(msrest.serialization.Model):
    """positionDetail.

    :param company: companyDetail.
    :type company: ~users_user.models.MicrosoftGraphCompanyDetail
    :param description:
    :type description: str
    :param end_month_year:
    :type end_month_year: ~datetime.date
    :param job_title:
    :type job_title: str
    :param role:
    :type role: str
    :param start_month_year:
    :type start_month_year: ~datetime.date
    :param summary:
    :type summary: str
    """

    _attribute_map = {
        'company': {'key': 'company', 'type': 'MicrosoftGraphCompanyDetail'},
        'description': {'key': 'description', 'type': 'str'},
        'end_month_year': {'key': 'endMonthYear', 'type': 'date'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'start_month_year': {'key': 'startMonthYear', 'type': 'date'},
        'summary': {'key': 'summary', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        company: Optional["MicrosoftGraphCompanyDetail"] = None,
        description: Optional[str] = None,
        end_month_year: Optional[datetime.date] = None,
        job_title: Optional[str] = None,
        role: Optional[str] = None,
        start_month_year: Optional[datetime.date] = None,
        summary: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPositionDetail, self).__init__(**kwargs)
        self.company = company
        self.description = description
        self.end_month_year = end_month_year
        self.job_title = job_title
        self.role = role
        self.start_month_year = start_month_year
        self.summary = summary


class MicrosoftGraphPost(MicrosoftGraphOutlookItem):
    """post.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param body: itemBody.
    :type body: ~users_user.models.MicrosoftGraphItemBody
    :param received_date_time: Specifies when the post was received. The DateTimeOffset type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type received_date_time: ~datetime.datetime
    :param has_attachments: Indicates whether the post has at least one attachment. This is a
     default property.
    :type has_attachments: bool
    :param from_property: recipient.
    :type from_property: ~users_user.models.MicrosoftGraphRecipient
    :param sender: recipient.
    :type sender: ~users_user.models.MicrosoftGraphRecipient
    :param conversation_thread_id: Unique ID of the conversation thread. Read-only.
    :type conversation_thread_id: str
    :param new_participants: Conversation participants that were added to the thread as part of
     this post.
    :type new_participants: list[~users_user.models.MicrosoftGraphRecipient]
    :param conversation_id: Unique ID of the conversation. Read-only.
    :type conversation_id: str
    :param importance: importance. Possible values include: "low", "normal", "high".
    :type importance: str or ~users_user.models.MicrosoftGraphImportance
    :param in_reply_to: post.
    :type in_reply_to: ~users_user.models.MicrosoftGraphPost
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the post. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~users_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the post. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~users_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param extensions: The collection of open extensions defined for the post. Read-only. Nullable.
    :type extensions: list[~users_user.models.MicrosoftGraphEntity]
    :param attachments: Read-only. Nullable.
    :type attachments: list[~users_user.models.MicrosoftGraphAttachment]
    :param mentions:
    :type mentions: list[~users_user.models.MicrosoftGraphMention]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'received_date_time': {'key': 'receivedDateTime', 'type': 'iso-8601'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'from_property': {'key': 'from', 'type': 'MicrosoftGraphRecipient'},
        'sender': {'key': 'sender', 'type': 'MicrosoftGraphRecipient'},
        'conversation_thread_id': {'key': 'conversationThreadId', 'type': 'str'},
        'new_participants': {'key': 'newParticipants', 'type': '[MicrosoftGraphRecipient]'},
        'conversation_id': {'key': 'conversationId', 'type': 'str'},
        'importance': {'key': 'importance', 'type': 'str'},
        'in_reply_to': {'key': 'inReplyTo', 'type': 'MicrosoftGraphPost'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphEntity]'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
        'mentions': {'key': 'mentions', 'type': '[MicrosoftGraphMention]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        change_key: Optional[str] = None,
        categories: Optional[List[str]] = None,
        body: Optional["MicrosoftGraphItemBody"] = None,
        received_date_time: Optional[datetime.datetime] = None,
        has_attachments: Optional[bool] = None,
        from_property: Optional["MicrosoftGraphRecipient"] = None,
        sender: Optional["MicrosoftGraphRecipient"] = None,
        conversation_thread_id: Optional[str] = None,
        new_participants: Optional[List["MicrosoftGraphRecipient"]] = None,
        conversation_id: Optional[str] = None,
        importance: Optional[Union[str, "MicrosoftGraphImportance"]] = None,
        in_reply_to: Optional["MicrosoftGraphPost"] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        extensions: Optional[List["MicrosoftGraphEntity"]] = None,
        attachments: Optional[List["MicrosoftGraphAttachment"]] = None,
        mentions: Optional[List["MicrosoftGraphMention"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPost, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, change_key=change_key, categories=categories, **kwargs)
        self.body = body
        self.received_date_time = received_date_time
        self.has_attachments = has_attachments
        self.from_property = from_property
        self.sender = sender
        self.conversation_thread_id = conversation_thread_id
        self.new_participants = new_participants
        self.conversation_id = conversation_id
        self.importance = importance
        self.in_reply_to = in_reply_to
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties
        self.extensions = extensions
        self.attachments = attachments
        self.mentions = mentions


class MicrosoftGraphPresence(MicrosoftGraphEntity):
    """presence.

    :param id: Read-only.
    :type id: str
    :param availability:
    :type availability: str
    :param activity:
    :type activity: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'availability': {'key': 'availability', 'type': 'str'},
        'activity': {'key': 'activity', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        availability: Optional[str] = None,
        activity: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPresence, self).__init__(id=id, **kwargs)
        self.availability = availability
        self.activity = activity


class MicrosoftGraphProfile(MicrosoftGraphEntity):
    """profile.

    :param id: Read-only.
    :type id: str
    :param account:
    :type account: list[~users_user.models.MicrosoftGraphUserAccountInformation]
    :param anniversaries:
    :type anniversaries: list[~users_user.models.MicrosoftGraphPersonAnniversary]
    :param educational_activities:
    :type educational_activities: list[~users_user.models.MicrosoftGraphEducationalActivity]
    :param emails:
    :type emails: list[~users_user.models.MicrosoftGraphItemEmail]
    :param interests:
    :type interests: list[~users_user.models.MicrosoftGraphPersonInterest]
    :param languages:
    :type languages: list[~users_user.models.MicrosoftGraphLanguageProficiency]
    :param names:
    :type names: list[~users_user.models.MicrosoftGraphPersonName]
    :param phones:
    :type phones: list[~users_user.models.MicrosoftGraphItemPhone]
    :param positions:
    :type positions: list[~users_user.models.MicrosoftGraphWorkPosition]
    :param projects:
    :type projects: list[~users_user.models.MicrosoftGraphProjectParticipation]
    :param skills:
    :type skills: list[~users_user.models.MicrosoftGraphSkillProficiency]
    :param web_accounts:
    :type web_accounts: list[~users_user.models.MicrosoftGraphWebAccount]
    :param websites:
    :type websites: list[~users_user.models.MicrosoftGraphPersonWebsite]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'account': {'key': 'account', 'type': '[MicrosoftGraphUserAccountInformation]'},
        'anniversaries': {'key': 'anniversaries', 'type': '[MicrosoftGraphPersonAnniversary]'},
        'educational_activities': {'key': 'educationalActivities', 'type': '[MicrosoftGraphEducationalActivity]'},
        'emails': {'key': 'emails', 'type': '[MicrosoftGraphItemEmail]'},
        'interests': {'key': 'interests', 'type': '[MicrosoftGraphPersonInterest]'},
        'languages': {'key': 'languages', 'type': '[MicrosoftGraphLanguageProficiency]'},
        'names': {'key': 'names', 'type': '[MicrosoftGraphPersonName]'},
        'phones': {'key': 'phones', 'type': '[MicrosoftGraphItemPhone]'},
        'positions': {'key': 'positions', 'type': '[MicrosoftGraphWorkPosition]'},
        'projects': {'key': 'projects', 'type': '[MicrosoftGraphProjectParticipation]'},
        'skills': {'key': 'skills', 'type': '[MicrosoftGraphSkillProficiency]'},
        'web_accounts': {'key': 'webAccounts', 'type': '[MicrosoftGraphWebAccount]'},
        'websites': {'key': 'websites', 'type': '[MicrosoftGraphPersonWebsite]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        account: Optional[List["MicrosoftGraphUserAccountInformation"]] = None,
        anniversaries: Optional[List["MicrosoftGraphPersonAnniversary"]] = None,
        educational_activities: Optional[List["MicrosoftGraphEducationalActivity"]] = None,
        emails: Optional[List["MicrosoftGraphItemEmail"]] = None,
        interests: Optional[List["MicrosoftGraphPersonInterest"]] = None,
        languages: Optional[List["MicrosoftGraphLanguageProficiency"]] = None,
        names: Optional[List["MicrosoftGraphPersonName"]] = None,
        phones: Optional[List["MicrosoftGraphItemPhone"]] = None,
        positions: Optional[List["MicrosoftGraphWorkPosition"]] = None,
        projects: Optional[List["MicrosoftGraphProjectParticipation"]] = None,
        skills: Optional[List["MicrosoftGraphSkillProficiency"]] = None,
        web_accounts: Optional[List["MicrosoftGraphWebAccount"]] = None,
        websites: Optional[List["MicrosoftGraphPersonWebsite"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphProfile, self).__init__(id=id, **kwargs)
        self.account = account
        self.anniversaries = anniversaries
        self.educational_activities = educational_activities
        self.emails = emails
        self.interests = interests
        self.languages = languages
        self.names = names
        self.phones = phones
        self.positions = positions
        self.projects = projects
        self.skills = skills
        self.web_accounts = web_accounts
        self.websites = websites


class MicrosoftGraphProfilePhoto(MicrosoftGraphEntity):
    """profilePhoto.

    :param id: Read-only.
    :type id: str
    :param height: The height of the photo. Read-only.
    :type height: int
    :param width: The width of the photo. Read-only.
    :type width: int
    """

    _validation = {
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'height': {'key': 'height', 'type': 'int'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        height: Optional[int] = None,
        width: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphProfilePhoto, self).__init__(id=id, **kwargs)
        self.height = height
        self.width = width


class MicrosoftGraphProjectParticipation(MicrosoftGraphItemFacet):
    """projectParticipation.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param categories:
    :type categories: list[str]
    :param client: companyDetail.
    :type client: ~users_user.models.MicrosoftGraphCompanyDetail
    :param display_name:
    :type display_name: str
    :param detail: positionDetail.
    :type detail: ~users_user.models.MicrosoftGraphPositionDetail
    :param colleagues:
    :type colleagues: list[~users_user.models.MicrosoftGraphRelatedPerson]
    :param sponsors:
    :type sponsors: list[~users_user.models.MicrosoftGraphRelatedPerson]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'client': {'key': 'client', 'type': 'MicrosoftGraphCompanyDetail'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'detail': {'key': 'detail', 'type': 'MicrosoftGraphPositionDetail'},
        'colleagues': {'key': 'colleagues', 'type': '[MicrosoftGraphRelatedPerson]'},
        'sponsors': {'key': 'sponsors', 'type': '[MicrosoftGraphRelatedPerson]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        categories: Optional[List[str]] = None,
        client: Optional["MicrosoftGraphCompanyDetail"] = None,
        display_name: Optional[str] = None,
        detail: Optional["MicrosoftGraphPositionDetail"] = None,
        colleagues: Optional[List["MicrosoftGraphRelatedPerson"]] = None,
        sponsors: Optional[List["MicrosoftGraphRelatedPerson"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphProjectParticipation, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.categories = categories
        self.client = client
        self.display_name = display_name
        self.detail = detail
        self.colleagues = colleagues
        self.sponsors = sponsors


class MicrosoftGraphProvisionedPlan(msrest.serialization.Model):
    """provisionedPlan.

    :param capability_status: For example, 'Enabled'.
    :type capability_status: str
    :param provisioning_status: For example, 'Success'.
    :type provisioning_status: str
    :param service: The name of the service; for example, 'AccessControlS2S'.
    :type service: str
    """

    _attribute_map = {
        'capability_status': {'key': 'capabilityStatus', 'type': 'str'},
        'provisioning_status': {'key': 'provisioningStatus', 'type': 'str'},
        'service': {'key': 'service', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        capability_status: Optional[str] = None,
        provisioning_status: Optional[str] = None,
        service: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphProvisionedPlan, self).__init__(**kwargs)
        self.capability_status = capability_status
        self.provisioning_status = provisioning_status
        self.service = service


class MicrosoftGraphPublicationFacet(msrest.serialization.Model):
    """publicationFacet.

    :param level: The state of publication for this document. Either published or checkout. Read-
     only.
    :type level: str
    :param version_id: The unique identifier for the version that is visible to the current caller.
     Read-only.
    :type version_id: str
    """

    _attribute_map = {
        'level': {'key': 'level', 'type': 'str'},
        'version_id': {'key': 'versionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        level: Optional[str] = None,
        version_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPublicationFacet, self).__init__(**kwargs)
        self.level = level
        self.version_id = version_id


class MicrosoftGraphQuota(msrest.serialization.Model):
    """quota.

    :param deleted: Total space consumed by files in the recycle bin, in bytes. Read-only.
    :type deleted: long
    :param remaining: Total space remaining before reaching the quota limit, in bytes. Read-only.
    :type remaining: long
    :param state: Enumeration value that indicates the state of the storage space. Read-only.
    :type state: str
    :param total: Total allowed storage space, in bytes. Read-only.
    :type total: long
    :param used: Total space used, in bytes. Read-only.
    :type used: long
    :param storage_plan_information: storagePlanInformation.
    :type storage_plan_information: ~users_user.models.MicrosoftGraphStoragePlanInformation
    """

    _attribute_map = {
        'deleted': {'key': 'deleted', 'type': 'long'},
        'remaining': {'key': 'remaining', 'type': 'long'},
        'state': {'key': 'state', 'type': 'str'},
        'total': {'key': 'total', 'type': 'long'},
        'used': {'key': 'used', 'type': 'long'},
        'storage_plan_information': {'key': 'storagePlanInformation', 'type': 'MicrosoftGraphStoragePlanInformation'},
    }

    def __init__(
        self,
        *,
        deleted: Optional[int] = None,
        remaining: Optional[int] = None,
        state: Optional[str] = None,
        total: Optional[int] = None,
        used: Optional[int] = None,
        storage_plan_information: Optional["MicrosoftGraphStoragePlanInformation"] = None,
        **kwargs
    ):
        super(MicrosoftGraphQuota, self).__init__(**kwargs)
        self.deleted = deleted
        self.remaining = remaining
        self.state = state
        self.total = total
        self.used = used
        self.storage_plan_information = storage_plan_information


class MicrosoftGraphRankedEmailAddress(msrest.serialization.Model):
    """rankedEmailAddress.

    :param address:
    :type address: str
    :param rank:
    :type rank: float
    """

    _attribute_map = {
        'address': {'key': 'address', 'type': 'str'},
        'rank': {'key': 'rank', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        address: Optional[str] = None,
        rank: Optional[float] = None,
        **kwargs
    ):
        super(MicrosoftGraphRankedEmailAddress, self).__init__(**kwargs)
        self.address = address
        self.rank = rank


class MicrosoftGraphRecurrencePattern(msrest.serialization.Model):
    """recurrencePattern.

    :param type: recurrencePatternType. Possible values include: "daily", "weekly",
     "absoluteMonthly", "relativeMonthly", "absoluteYearly", "relativeYearly".
    :type type: str or ~users_user.models.MicrosoftGraphRecurrencePatternType
    :param interval: The number of units between occurrences, where units can be in days, weeks,
     months, or years, depending on the type. Required.
    :type interval: int
    :param month: The month in which the event occurs.  This is a number from 1 to 12.
    :type month: int
    :param day_of_month: The day of the month on which the event occurs. Required if type is
     absoluteMonthly or absoluteYearly.
    :type day_of_month: int
    :param days_of_week: A collection of the days of the week on which the event occurs. The
     possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is
     relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls
     on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or
     relativeYearly.
    :type days_of_week: list[str or ~users_user.models.MicrosoftGraphDayOfWeek]
    :param first_day_of_week: dayOfWeek. Possible values include: "sunday", "monday", "tuesday",
     "wednesday", "thursday", "friday", "saturday".
    :type first_day_of_week: str or ~users_user.models.MicrosoftGraphDayOfWeek
    :param index: weekIndex. Possible values include: "first", "second", "third", "fourth", "last".
    :type index: str or ~users_user.models.MicrosoftGraphWeekIndex
    """

    _validation = {
        'interval': {'maximum': 2147483647, 'minimum': -2147483648},
        'month': {'maximum': 2147483647, 'minimum': -2147483648},
        'day_of_month': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'interval': {'key': 'interval', 'type': 'int'},
        'month': {'key': 'month', 'type': 'int'},
        'day_of_month': {'key': 'dayOfMonth', 'type': 'int'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'first_day_of_week': {'key': 'firstDayOfWeek', 'type': 'str'},
        'index': {'key': 'index', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "MicrosoftGraphRecurrencePatternType"]] = None,
        interval: Optional[int] = None,
        month: Optional[int] = None,
        day_of_month: Optional[int] = None,
        days_of_week: Optional[List[Union[str, "MicrosoftGraphDayOfWeek"]]] = None,
        first_day_of_week: Optional[Union[str, "MicrosoftGraphDayOfWeek"]] = None,
        index: Optional[Union[str, "MicrosoftGraphWeekIndex"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphRecurrencePattern, self).__init__(**kwargs)
        self.type = type
        self.interval = interval
        self.month = month
        self.day_of_month = day_of_month
        self.days_of_week = days_of_week
        self.first_day_of_week = first_day_of_week
        self.index = index


class MicrosoftGraphRecurrenceRange(msrest.serialization.Model):
    """recurrenceRange.

    :param type: recurrenceRangeType. Possible values include: "endDate", "noEnd", "numbered".
    :type type: str or ~users_user.models.MicrosoftGraphRecurrenceRangeType
    :param start_date: The date to start applying the recurrence pattern. The first occurrence of
     the meeting may be this date or later, depending on the recurrence pattern of the event. Must
     be the same value as the start property of the recurring event. Required.
    :type start_date: ~datetime.date
    :param end_date: The date to stop applying the recurrence pattern. Depending on the recurrence
     pattern of the event, the last occurrence of the meeting may not be this date. Required if type
     is endDate.
    :type end_date: ~datetime.date
    :param recurrence_time_zone: Time zone for the startDate and endDate properties. Optional. If
     not specified, the time zone of the event is used.
    :type recurrence_time_zone: str
    :param number_of_occurrences: The number of times to repeat the event. Required and must be
     positive if type is numbered.
    :type number_of_occurrences: int
    """

    _validation = {
        'number_of_occurrences': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'start_date': {'key': 'startDate', 'type': 'date'},
        'end_date': {'key': 'endDate', 'type': 'date'},
        'recurrence_time_zone': {'key': 'recurrenceTimeZone', 'type': 'str'},
        'number_of_occurrences': {'key': 'numberOfOccurrences', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "MicrosoftGraphRecurrenceRangeType"]] = None,
        start_date: Optional[datetime.date] = None,
        end_date: Optional[datetime.date] = None,
        recurrence_time_zone: Optional[str] = None,
        number_of_occurrences: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphRecurrenceRange, self).__init__(**kwargs)
        self.type = type
        self.start_date = start_date
        self.end_date = end_date
        self.recurrence_time_zone = recurrence_time_zone
        self.number_of_occurrences = number_of_occurrences


class MicrosoftGraphRelatedPerson(msrest.serialization.Model):
    """relatedPerson.

    :param display_name:
    :type display_name: str
    :param relationship: personRelationship. Possible values include: "manager", "colleague",
     "directReport", "dotLineReport", "assistant", "dotLineManager", "alternateContact", "friend",
     "spouse", "sibling", "child", "parent", "sponsor", "emergencyContact", "other",
     "unknownFutureValue".
    :type relationship: str or ~users_user.models.MicrosoftGraphPersonRelationship
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'relationship': {'key': 'relationship', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        relationship: Optional[Union[str, "MicrosoftGraphPersonRelationship"]] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphRelatedPerson, self).__init__(**kwargs)
        self.display_name = display_name
        self.relationship = relationship
        self.user_principal_name = user_principal_name


class MicrosoftGraphRemoteItem(msrest.serialization.Model):
    """remoteItem.

    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param file: file.
    :type file: ~users_user.models.MicrosoftGraphFile
    :param file_system_info: fileSystemInfo.
    :type file_system_info: ~users_user.models.MicrosoftGraphFileSystemInfo
    :param folder: folder.
    :type folder: ~users_user.models.MicrosoftGraphFolder
    :param id: Unique identifier for the remote item in its drive. Read-only.
    :type id: str
    :param image: image.
    :type image: ~users_user.models.MicrosoftGraphImage
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: Optional. Filename of the remote item. Read-only.
    :type name: str
    :param package: package.
    :type package: ~users_user.models.MicrosoftGraphPackage
    :param parent_reference: itemReference.
    :type parent_reference: ~users_user.models.MicrosoftGraphItemReference
    :param shared: shared.
    :type shared: ~users_user.models.MicrosoftGraphShared
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~users_user.models.MicrosoftGraphSharepointIds
    :param size: Size of the remote item. Read-only.
    :type size: long
    :param special_folder: specialFolder.
    :type special_folder: ~users_user.models.MicrosoftGraphSpecialFolder
    :param video: video.
    :type video: ~users_user.models.MicrosoftGraphVideo
    :param web_dav_url: DAV compatible URL for the item.
    :type web_dav_url: str
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'file': {'key': 'file', 'type': 'MicrosoftGraphFile'},
        'file_system_info': {'key': 'fileSystemInfo', 'type': 'MicrosoftGraphFileSystemInfo'},
        'folder': {'key': 'folder', 'type': 'MicrosoftGraphFolder'},
        'id': {'key': 'id', 'type': 'str'},
        'image': {'key': 'image', 'type': 'MicrosoftGraphImage'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'package': {'key': 'package', 'type': 'MicrosoftGraphPackage'},
        'parent_reference': {'key': 'parentReference', 'type': 'MicrosoftGraphItemReference'},
        'shared': {'key': 'shared', 'type': 'MicrosoftGraphShared'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'size': {'key': 'size', 'type': 'long'},
        'special_folder': {'key': 'specialFolder', 'type': 'MicrosoftGraphSpecialFolder'},
        'video': {'key': 'video', 'type': 'MicrosoftGraphVideo'},
        'web_dav_url': {'key': 'webDavUrl', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        file: Optional["MicrosoftGraphFile"] = None,
        file_system_info: Optional["MicrosoftGraphFileSystemInfo"] = None,
        folder: Optional["MicrosoftGraphFolder"] = None,
        id: Optional[str] = None,
        image: Optional["MicrosoftGraphImage"] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        package: Optional["MicrosoftGraphPackage"] = None,
        parent_reference: Optional["MicrosoftGraphItemReference"] = None,
        shared: Optional["MicrosoftGraphShared"] = None,
        sharepoint_ids: Optional["MicrosoftGraphSharepointIds"] = None,
        size: Optional[int] = None,
        special_folder: Optional["MicrosoftGraphSpecialFolder"] = None,
        video: Optional["MicrosoftGraphVideo"] = None,
        web_dav_url: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphRemoteItem, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_date_time = created_date_time
        self.file = file
        self.file_system_info = file_system_info
        self.folder = folder
        self.id = id
        self.image = image
        self.last_modified_by = last_modified_by
        self.last_modified_date_time = last_modified_date_time
        self.name = name
        self.package = package
        self.parent_reference = parent_reference
        self.shared = shared
        self.sharepoint_ids = sharepoint_ids
        self.size = size
        self.special_folder = special_folder
        self.video = video
        self.web_dav_url = web_dav_url
        self.web_url = web_url


class MicrosoftGraphRenameAction(msrest.serialization.Model):
    """renameAction.

    :param new_name: The new name of the item.
    :type new_name: str
    :param old_name: The previous name of the item.
    :type old_name: str
    """

    _attribute_map = {
        'new_name': {'key': 'newName', 'type': 'str'},
        'old_name': {'key': 'oldName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        new_name: Optional[str] = None,
        old_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphRenameAction, self).__init__(**kwargs)
        self.new_name = new_name
        self.old_name = old_name


class MicrosoftGraphRequest(MicrosoftGraphEntity):
    """request.

    :param id: Read-only.
    :type id: str
    :param approval: approval.
    :type approval: ~users_user.models.MicrosoftGraphApproval
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'approval': {'key': 'approval', 'type': 'MicrosoftGraphApproval'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        approval: Optional["MicrosoftGraphApproval"] = None,
        **kwargs
    ):
        super(MicrosoftGraphRequest, self).__init__(id=id, **kwargs)
        self.approval = approval


class MicrosoftGraphResourceReference(msrest.serialization.Model):
    """resourceReference.

    :param web_url: A URL leading to the referenced item.
    :type web_url: str
    :param id: The item's unique identifier.
    :type id: str
    :param type: A string value that can be used to classify the item, such as
     'microsoft.graph.driveItem'.
    :type type: str
    """

    _attribute_map = {
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        web_url: Optional[str] = None,
        id: Optional[str] = None,
        type: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphResourceReference, self).__init__(**kwargs)
        self.web_url = web_url
        self.id = id
        self.type = type


class MicrosoftGraphResourceSpecificPermissionGrant(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param client_id:
    :type client_id: str
    :param client_app_id:
    :type client_app_id: str
    :param resource_app_id:
    :type resource_app_id: str
    :param permission_type:
    :type permission_type: str
    :param permission:
    :type permission: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_app_id': {'key': 'clientAppId', 'type': 'str'},
        'resource_app_id': {'key': 'resourceAppId', 'type': 'str'},
        'permission_type': {'key': 'permissionType', 'type': 'str'},
        'permission': {'key': 'permission', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        client_id: Optional[str] = None,
        client_app_id: Optional[str] = None,
        resource_app_id: Optional[str] = None,
        permission_type: Optional[str] = None,
        permission: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphResourceSpecificPermissionGrant, self).__init__(id=id, deleted_date_time=deleted_date_time, **kwargs)
        self.client_id = client_id
        self.client_app_id = client_app_id
        self.resource_app_id = resource_app_id
        self.permission_type = permission_type
        self.permission = permission


class MicrosoftGraphResourceVisualization(msrest.serialization.Model):
    """resourceVisualization.

    :param title: The item's title text.
    :type title: str
    :param type: The item's media type. Can be used for filtering for a specific file based on a
     specific type. See below for supported types.
    :type type: str
    :param media_type: The item's media type. Can be used for filtering for a specific type of file
     based on supported IANA Media Mime Types. Note that not all Media Mime Types are supported.
    :type media_type: str
    :param preview_image_url: A URL leading to the preview image for the item.
    :type preview_image_url: str
    :param preview_text: A preview text for the item.
    :type preview_text: str
    :param container_web_url: A path leading to the folder in which the item is stored.
    :type container_web_url: str
    :param container_display_name: A string describing where the item is stored. For example, the
     name of a SharePoint site or the user name identifying the owner of the OneDrive storing the
     item.
    :type container_display_name: str
    :param container_type: Can be used for filtering by the type of container in which the file is
     stored. Such as Site or OneDriveBusiness.
    :type container_type: str
    """

    _attribute_map = {
        'title': {'key': 'title', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'preview_image_url': {'key': 'previewImageUrl', 'type': 'str'},
        'preview_text': {'key': 'previewText', 'type': 'str'},
        'container_web_url': {'key': 'containerWebUrl', 'type': 'str'},
        'container_display_name': {'key': 'containerDisplayName', 'type': 'str'},
        'container_type': {'key': 'containerType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        title: Optional[str] = None,
        type: Optional[str] = None,
        media_type: Optional[str] = None,
        preview_image_url: Optional[str] = None,
        preview_text: Optional[str] = None,
        container_web_url: Optional[str] = None,
        container_display_name: Optional[str] = None,
        container_type: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphResourceVisualization, self).__init__(**kwargs)
        self.title = title
        self.type = type
        self.media_type = media_type
        self.preview_image_url = preview_image_url
        self.preview_text = preview_text
        self.container_web_url = container_web_url
        self.container_display_name = container_display_name
        self.container_type = container_type


class MicrosoftGraphResponseStatus(msrest.serialization.Model):
    """responseStatus.

    :param response: responseType. Possible values include: "none", "organizer",
     "tentativelyAccepted", "accepted", "declined", "notResponded".
    :type response: str or ~users_user.models.MicrosoftGraphResponseType
    :param time: The date and time that the response was returned. It uses ISO 8601 format and is
     always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
     '2014-01-01T00:00:00Z'.
    :type time: ~datetime.datetime
    """

    _attribute_map = {
        'response': {'key': 'response', 'type': 'str'},
        'time': {'key': 'time', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        response: Optional[Union[str, "MicrosoftGraphResponseType"]] = None,
        time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphResponseStatus, self).__init__(**kwargs)
        self.response = response
        self.time = time


class MicrosoftGraphSchedule(MicrosoftGraphEntity):
    """schedule.

    :param id: Read-only.
    :type id: str
    :param enabled:
    :type enabled: bool
    :param time_zone:
    :type time_zone: str
    :param provision_status: operationStatus. Possible values include: "NotStarted", "Running",
     "Completed", "Failed".
    :type provision_status: str or ~users_user.models.MicrosoftGraphOperationStatus
    :param provision_status_code:
    :type provision_status_code: str
    :param workforce_integration_ids:
    :type workforce_integration_ids: list[str]
    :param time_clock_enabled:
    :type time_clock_enabled: bool
    :param open_shifts_enabled:
    :type open_shifts_enabled: bool
    :param swap_shifts_requests_enabled:
    :type swap_shifts_requests_enabled: bool
    :param offer_shift_requests_enabled:
    :type offer_shift_requests_enabled: bool
    :param time_off_requests_enabled:
    :type time_off_requests_enabled: bool
    :param shifts:
    :type shifts: list[~users_user.models.MicrosoftGraphShift]
    :param open_shifts:
    :type open_shifts: list[~users_user.models.MicrosoftGraphOpenShift]
    :param times_off:
    :type times_off: list[~users_user.models.MicrosoftGraphTimeOff]
    :param time_off_reasons:
    :type time_off_reasons: list[~users_user.models.MicrosoftGraphTimeOffReason]
    :param scheduling_groups:
    :type scheduling_groups: list[~users_user.models.MicrosoftGraphSchedulingGroup]
    :param swap_shifts_change_requests:
    :type swap_shifts_change_requests:
     list[~users_user.models.MicrosoftGraphSwapShiftsChangeRequest]
    :param open_shift_change_requests:
    :type open_shift_change_requests: list[~users_user.models.MicrosoftGraphOpenShiftChangeRequest]
    :param offer_shift_requests:
    :type offer_shift_requests: list[~users_user.models.MicrosoftGraphOfferShiftRequest]
    :param time_off_requests:
    :type time_off_requests: list[~users_user.models.MicrosoftGraphTimeOffRequest]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'provision_status': {'key': 'provisionStatus', 'type': 'str'},
        'provision_status_code': {'key': 'provisionStatusCode', 'type': 'str'},
        'workforce_integration_ids': {'key': 'workforceIntegrationIds', 'type': '[str]'},
        'time_clock_enabled': {'key': 'timeClockEnabled', 'type': 'bool'},
        'open_shifts_enabled': {'key': 'openShiftsEnabled', 'type': 'bool'},
        'swap_shifts_requests_enabled': {'key': 'swapShiftsRequestsEnabled', 'type': 'bool'},
        'offer_shift_requests_enabled': {'key': 'offerShiftRequestsEnabled', 'type': 'bool'},
        'time_off_requests_enabled': {'key': 'timeOffRequestsEnabled', 'type': 'bool'},
        'shifts': {'key': 'shifts', 'type': '[MicrosoftGraphShift]'},
        'open_shifts': {'key': 'openShifts', 'type': '[MicrosoftGraphOpenShift]'},
        'times_off': {'key': 'timesOff', 'type': '[MicrosoftGraphTimeOff]'},
        'time_off_reasons': {'key': 'timeOffReasons', 'type': '[MicrosoftGraphTimeOffReason]'},
        'scheduling_groups': {'key': 'schedulingGroups', 'type': '[MicrosoftGraphSchedulingGroup]'},
        'swap_shifts_change_requests': {'key': 'swapShiftsChangeRequests', 'type': '[MicrosoftGraphSwapShiftsChangeRequest]'},
        'open_shift_change_requests': {'key': 'openShiftChangeRequests', 'type': '[MicrosoftGraphOpenShiftChangeRequest]'},
        'offer_shift_requests': {'key': 'offerShiftRequests', 'type': '[MicrosoftGraphOfferShiftRequest]'},
        'time_off_requests': {'key': 'timeOffRequests', 'type': '[MicrosoftGraphTimeOffRequest]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        enabled: Optional[bool] = None,
        time_zone: Optional[str] = None,
        provision_status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        provision_status_code: Optional[str] = None,
        workforce_integration_ids: Optional[List[str]] = None,
        time_clock_enabled: Optional[bool] = None,
        open_shifts_enabled: Optional[bool] = None,
        swap_shifts_requests_enabled: Optional[bool] = None,
        offer_shift_requests_enabled: Optional[bool] = None,
        time_off_requests_enabled: Optional[bool] = None,
        shifts: Optional[List["MicrosoftGraphShift"]] = None,
        open_shifts: Optional[List["MicrosoftGraphOpenShift"]] = None,
        times_off: Optional[List["MicrosoftGraphTimeOff"]] = None,
        time_off_reasons: Optional[List["MicrosoftGraphTimeOffReason"]] = None,
        scheduling_groups: Optional[List["MicrosoftGraphSchedulingGroup"]] = None,
        swap_shifts_change_requests: Optional[List["MicrosoftGraphSwapShiftsChangeRequest"]] = None,
        open_shift_change_requests: Optional[List["MicrosoftGraphOpenShiftChangeRequest"]] = None,
        offer_shift_requests: Optional[List["MicrosoftGraphOfferShiftRequest"]] = None,
        time_off_requests: Optional[List["MicrosoftGraphTimeOffRequest"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSchedule, self).__init__(id=id, **kwargs)
        self.enabled = enabled
        self.time_zone = time_zone
        self.provision_status = provision_status
        self.provision_status_code = provision_status_code
        self.workforce_integration_ids = workforce_integration_ids
        self.time_clock_enabled = time_clock_enabled
        self.open_shifts_enabled = open_shifts_enabled
        self.swap_shifts_requests_enabled = swap_shifts_requests_enabled
        self.offer_shift_requests_enabled = offer_shift_requests_enabled
        self.time_off_requests_enabled = time_off_requests_enabled
        self.shifts = shifts
        self.open_shifts = open_shifts
        self.times_off = times_off
        self.time_off_reasons = time_off_reasons
        self.scheduling_groups = scheduling_groups
        self.swap_shifts_change_requests = swap_shifts_change_requests
        self.open_shift_change_requests = open_shift_change_requests
        self.offer_shift_requests = offer_shift_requests
        self.time_off_requests = time_off_requests


class MicrosoftGraphSchedulingGroup(MicrosoftGraphChangeTrackedEntity):
    """schedulingGroup.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param display_name:
    :type display_name: str
    :param is_active:
    :type is_active: bool
    :param user_ids:
    :type user_ids: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_active': {'key': 'isActive', 'type': 'bool'},
        'user_ids': {'key': 'userIds', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        display_name: Optional[str] = None,
        is_active: Optional[bool] = None,
        user_ids: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSchedulingGroup, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.display_name = display_name
        self.is_active = is_active
        self.user_ids = user_ids


class MicrosoftGraphScopedRoleMembership(MicrosoftGraphEntity):
    """scopedRoleMembership.

    :param id: Read-only.
    :type id: str
    :param role_id:
    :type role_id: str
    :param administrative_unit_id:
    :type administrative_unit_id: str
    :param role_member_info: identity.
    :type role_member_info: ~users_user.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'role_id': {'key': 'roleId', 'type': 'str'},
        'administrative_unit_id': {'key': 'administrativeUnitId', 'type': 'str'},
        'role_member_info': {'key': 'roleMemberInfo', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        role_id: Optional[str] = None,
        administrative_unit_id: Optional[str] = None,
        role_member_info: Optional["MicrosoftGraphIdentity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphScopedRoleMembership, self).__init__(id=id, **kwargs)
        self.role_id = role_id
        self.administrative_unit_id = administrative_unit_id
        self.role_member_info = role_member_info


class MicrosoftGraphSearchResult(msrest.serialization.Model):
    """searchResult.

    :param on_click_telemetry_url: A callback URL that can be used to record telemetry information.
     The application should issue a GET on this URL if the user interacts with this item to improve
     the quality of results.
    :type on_click_telemetry_url: str
    """

    _attribute_map = {
        'on_click_telemetry_url': {'key': 'onClickTelemetryUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        on_click_telemetry_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSearchResult, self).__init__(**kwargs)
        self.on_click_telemetry_url = on_click_telemetry_url


class MicrosoftGraphSectionGroup(MicrosoftGraphOnenoteEntityHierarchyModel):
    """sectionGroup.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param display_name: The name of the notebook.
    :type display_name: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The date and time when the notebook was last modified. The
     timestamp represents date and time information using ISO 8601 format and is always in UTC time.
     For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-
     only.
    :type last_modified_date_time: ~datetime.datetime
    :param sections_url: The URL for the sections navigation property, which returns all the
     sections in the section group. Read-only.
    :type sections_url: str
    :param section_groups_url: The URL for the sectionGroups navigation property, which returns all
     the section groups in the section group. Read-only.
    :type section_groups_url: str
    :param parent_notebook: notebook.
    :type parent_notebook: ~users_user.models.MicrosoftGraphNotebook
    :param parent_section_group: sectionGroup.
    :type parent_section_group: ~users_user.models.MicrosoftGraphSectionGroup
    :param sections: The sections in the section group. Read-only. Nullable.
    :type sections: list[~users_user.models.MicrosoftGraphOnenoteSection]
    :param section_groups: The section groups in the section. Read-only. Nullable.
    :type section_groups: list[~users_user.models.MicrosoftGraphSectionGroup]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'sections_url': {'key': 'sectionsUrl', 'type': 'str'},
        'section_groups_url': {'key': 'sectionGroupsUrl', 'type': 'str'},
        'parent_notebook': {'key': 'parentNotebook', 'type': 'MicrosoftGraphNotebook'},
        'parent_section_group': {'key': 'parentSectionGroup', 'type': 'MicrosoftGraphSectionGroup'},
        'sections': {'key': 'sections', 'type': '[MicrosoftGraphOnenoteSection]'},
        'section_groups': {'key': 'sectionGroups', 'type': '[MicrosoftGraphSectionGroup]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        self_property: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        sections_url: Optional[str] = None,
        section_groups_url: Optional[str] = None,
        parent_notebook: Optional["MicrosoftGraphNotebook"] = None,
        parent_section_group: Optional["MicrosoftGraphSectionGroup"] = None,
        sections: Optional[List["MicrosoftGraphOnenoteSection"]] = None,
        section_groups: Optional[List["MicrosoftGraphSectionGroup"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSectionGroup, self).__init__(id=id, self_property=self_property, created_date_time=created_date_time, display_name=display_name, created_by=created_by, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, **kwargs)
        self.sections_url = sections_url
        self.section_groups_url = section_groups_url
        self.parent_notebook = parent_notebook
        self.parent_section_group = parent_section_group
        self.sections = sections
        self.section_groups = section_groups


class MicrosoftGraphSectionLinks(msrest.serialization.Model):
    """sectionLinks.

    :param one_note_client_url: externalLink.
    :type one_note_client_url: ~users_user.models.MicrosoftGraphExternalLink
    :param one_note_web_url: externalLink.
    :type one_note_web_url: ~users_user.models.MicrosoftGraphExternalLink
    """

    _attribute_map = {
        'one_note_client_url': {'key': 'oneNoteClientUrl', 'type': 'MicrosoftGraphExternalLink'},
        'one_note_web_url': {'key': 'oneNoteWebUrl', 'type': 'MicrosoftGraphExternalLink'},
    }

    def __init__(
        self,
        *,
        one_note_client_url: Optional["MicrosoftGraphExternalLink"] = None,
        one_note_web_url: Optional["MicrosoftGraphExternalLink"] = None,
        **kwargs
    ):
        super(MicrosoftGraphSectionLinks, self).__init__(**kwargs)
        self.one_note_client_url = one_note_client_url
        self.one_note_web_url = one_note_web_url


class MicrosoftGraphSecurityBaselineSettingState(MicrosoftGraphEntity):
    """The security baseline compliance state of a setting for a device.

    :param id: Read-only.
    :type id: str
    :param setting_name: The setting name that is being reported.
    :type setting_name: str
    :param state: securityBaselineComplianceState. Possible values include: "unknown", "secure",
     "notApplicable", "notSecure", "error", "conflict".
    :type state: str or ~users_user.models.MicrosoftGraphSecurityBaselineComplianceState
    :param setting_category_id: The setting category id which this setting belongs to.
    :type setting_category_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'setting_name': {'key': 'settingName', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'setting_category_id': {'key': 'settingCategoryId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        setting_name: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphSecurityBaselineComplianceState"]] = None,
        setting_category_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSecurityBaselineSettingState, self).__init__(id=id, **kwargs)
        self.setting_name = setting_name
        self.state = state
        self.setting_category_id = setting_category_id


class MicrosoftGraphSecurityBaselineState(MicrosoftGraphEntity):
    """Security baseline state for a device.

    :param id: Read-only.
    :type id: str
    :param security_baseline_template_id: The security baseline template id.
    :type security_baseline_template_id: str
    :param display_name: The display name of the security baseline.
    :type display_name: str
    :param setting_states: The security baseline state for different settings for a device.
    :type setting_states: list[~users_user.models.MicrosoftGraphSecurityBaselineSettingState]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'security_baseline_template_id': {'key': 'securityBaselineTemplateId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'setting_states': {'key': 'settingStates', 'type': '[MicrosoftGraphSecurityBaselineSettingState]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        security_baseline_template_id: Optional[str] = None,
        display_name: Optional[str] = None,
        setting_states: Optional[List["MicrosoftGraphSecurityBaselineSettingState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSecurityBaselineState, self).__init__(id=id, **kwargs)
        self.security_baseline_template_id = security_baseline_template_id
        self.display_name = display_name
        self.setting_states = setting_states


class MicrosoftGraphSensitivityLabel(MicrosoftGraphEntity):
    """sensitivityLabel.

    :param id: Read-only.
    :type id: str
    :param name:
    :type name: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param tool_tip:
    :type tool_tip: str
    :param is_endpoint_protection_enabled:
    :type is_endpoint_protection_enabled: bool
    :param is_default:
    :type is_default: bool
    :param application_mode: applicationMode. Possible values include: "manual", "automatic",
     "recommended".
    :type application_mode: str or ~users_user.models.MicrosoftGraphApplicationMode
    :param label_actions:
    :type label_actions: list[~users_user.models.MicrosoftGraphLabelActionBase]
    :param assigned_policies:
    :type assigned_policies: list[~users_user.models.MicrosoftGraphLabelPolicy]
    :param priority:
    :type priority: int
    :param auto_labeling: autoLabeling.
    :type auto_labeling: ~users_user.models.MicrosoftGraphAutoLabeling
    :param applicable_to: sensitivityLabelTarget. Possible values include: "email", "site",
     "unifiedGroup", "unknownFutureValue".
    :type applicable_to: str or ~users_user.models.MicrosoftGraphSensitivityLabelTarget
    :param sublabels:
    :type sublabels: list[~users_user.models.MicrosoftGraphSensitivityLabel]
    """

    _validation = {
        'priority': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tool_tip': {'key': 'toolTip', 'type': 'str'},
        'is_endpoint_protection_enabled': {'key': 'isEndpointProtectionEnabled', 'type': 'bool'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'application_mode': {'key': 'applicationMode', 'type': 'str'},
        'label_actions': {'key': 'labelActions', 'type': '[MicrosoftGraphLabelActionBase]'},
        'assigned_policies': {'key': 'assignedPolicies', 'type': '[MicrosoftGraphLabelPolicy]'},
        'priority': {'key': 'priority', 'type': 'int'},
        'auto_labeling': {'key': 'autoLabeling', 'type': 'MicrosoftGraphAutoLabeling'},
        'applicable_to': {'key': 'applicableTo', 'type': 'str'},
        'sublabels': {'key': 'sublabels', 'type': '[MicrosoftGraphSensitivityLabel]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        tool_tip: Optional[str] = None,
        is_endpoint_protection_enabled: Optional[bool] = None,
        is_default: Optional[bool] = None,
        application_mode: Optional[Union[str, "MicrosoftGraphApplicationMode"]] = None,
        label_actions: Optional[List["MicrosoftGraphLabelActionBase"]] = None,
        assigned_policies: Optional[List["MicrosoftGraphLabelPolicy"]] = None,
        priority: Optional[int] = None,
        auto_labeling: Optional["MicrosoftGraphAutoLabeling"] = None,
        applicable_to: Optional[Union[str, "MicrosoftGraphSensitivityLabelTarget"]] = None,
        sublabels: Optional[List["MicrosoftGraphSensitivityLabel"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSensitivityLabel, self).__init__(id=id, **kwargs)
        self.name = name
        self.display_name = display_name
        self.description = description
        self.tool_tip = tool_tip
        self.is_endpoint_protection_enabled = is_endpoint_protection_enabled
        self.is_default = is_default
        self.application_mode = application_mode
        self.label_actions = label_actions
        self.assigned_policies = assigned_policies
        self.priority = priority
        self.auto_labeling = auto_labeling
        self.applicable_to = applicable_to
        self.sublabels = sublabels


class MicrosoftGraphSensitivityPolicySettings(MicrosoftGraphEntity):
    """sensitivityPolicySettings.

    :param id: Read-only.
    :type id: str
    :param is_mandatory:
    :type is_mandatory: bool
    :param help_web_url:
    :type help_web_url: str
    :param downgrade_sensitivity_requires_justification:
    :type downgrade_sensitivity_requires_justification: bool
    :param applicable_to: sensitivityLabelTarget. Possible values include: "email", "site",
     "unifiedGroup", "unknownFutureValue".
    :type applicable_to: str or ~users_user.models.MicrosoftGraphSensitivityLabelTarget
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'is_mandatory': {'key': 'isMandatory', 'type': 'bool'},
        'help_web_url': {'key': 'helpWebUrl', 'type': 'str'},
        'downgrade_sensitivity_requires_justification': {'key': 'downgradeSensitivityRequiresJustification', 'type': 'bool'},
        'applicable_to': {'key': 'applicableTo', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        is_mandatory: Optional[bool] = None,
        help_web_url: Optional[str] = None,
        downgrade_sensitivity_requires_justification: Optional[bool] = None,
        applicable_to: Optional[Union[str, "MicrosoftGraphSensitivityLabelTarget"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSensitivityPolicySettings, self).__init__(id=id, **kwargs)
        self.is_mandatory = is_mandatory
        self.help_web_url = help_web_url
        self.downgrade_sensitivity_requires_justification = downgrade_sensitivity_requires_justification
        self.applicable_to = applicable_to


class MicrosoftGraphServiceInformation(msrest.serialization.Model):
    """serviceInformation.

    :param name:
    :type name: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphServiceInformation, self).__init__(**kwargs)
        self.name = name
        self.web_url = web_url


class MicrosoftGraphServicePlanInfo(msrest.serialization.Model):
    """servicePlanInfo.

    :param service_plan_id: The unique identifier of the service plan.
    :type service_plan_id: str
    :param service_plan_name: The name of the service plan.
    :type service_plan_name: str
    :param provisioning_status: The provisioning status of the service plan. Possible
     values:'Success' - Service is fully provisioned.'Disabled' - Service has been
     disabled.'PendingInput' - Service is not yet provisioned; awaiting service
     confirmation.'PendingActivation' - Service is provisioned but requires explicit activation by
     administrator (for example, Intune_O365 service plan)'PendingProvisioning' - Microsoft has
     added a new service to the product SKU and it has not been activated in the tenant, yet.
    :type provisioning_status: str
    :param applies_to: The object the service plan can be assigned to. Possible values:'User' -
     service plan can be assigned to individual users.'Company' - service plan can be assigned to
     the entire tenant.
    :type applies_to: str
    """

    _attribute_map = {
        'service_plan_id': {'key': 'servicePlanId', 'type': 'str'},
        'service_plan_name': {'key': 'servicePlanName', 'type': 'str'},
        'provisioning_status': {'key': 'provisioningStatus', 'type': 'str'},
        'applies_to': {'key': 'appliesTo', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        service_plan_id: Optional[str] = None,
        service_plan_name: Optional[str] = None,
        provisioning_status: Optional[str] = None,
        applies_to: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphServicePlanInfo, self).__init__(**kwargs)
        self.service_plan_id = service_plan_id
        self.service_plan_name = service_plan_name
        self.provisioning_status = provisioning_status
        self.applies_to = applies_to


class MicrosoftGraphSettings(msrest.serialization.Model):
    """settings.

    :param has_license:
    :type has_license: bool
    :param has_opted_out:
    :type has_opted_out: bool
    :param has_graph_mailbox:
    :type has_graph_mailbox: bool
    """

    _attribute_map = {
        'has_license': {'key': 'hasLicense', 'type': 'bool'},
        'has_opted_out': {'key': 'hasOptedOut', 'type': 'bool'},
        'has_graph_mailbox': {'key': 'hasGraphMailbox', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        has_license: Optional[bool] = None,
        has_opted_out: Optional[bool] = None,
        has_graph_mailbox: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphSettings, self).__init__(**kwargs)
        self.has_license = has_license
        self.has_opted_out = has_opted_out
        self.has_graph_mailbox = has_graph_mailbox


class MicrosoftGraphSettingSource(msrest.serialization.Model):
    """settingSource.

    :param id: Not yet documented.
    :type id: str
    :param display_name: Not yet documented.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSettingSource, self).__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class MicrosoftGraphSettingValue(msrest.serialization.Model):
    """settingValue.

    :param name: Name of the setting (as defined by the groupSettingTemplate).
    :type name: str
    :param value: Value of the setting.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSettingValue, self).__init__(**kwargs)
        self.name = name
        self.value = value


class MicrosoftGraphShareAction(msrest.serialization.Model):
    """shareAction.

    :param recipients: The identities the item was shared with in this action.
    :type recipients: list[~users_user.models.MicrosoftGraphIdentitySet]
    """

    _attribute_map = {
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphIdentitySet]'},
    }

    def __init__(
        self,
        *,
        recipients: Optional[List["MicrosoftGraphIdentitySet"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphShareAction, self).__init__(**kwargs)
        self.recipients = recipients


class MicrosoftGraphShared(msrest.serialization.Model):
    """shared.

    :param owner: identitySet.
    :type owner: ~users_user.models.MicrosoftGraphIdentitySet
    :param scope: Indicates the scope of how the item is shared: anonymous, organization, or users.
     Read-only.
    :type scope: str
    :param shared_by: identitySet.
    :type shared_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param shared_date_time: The UTC date and time when the item was shared. Read-only.
    :type shared_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'owner': {'key': 'owner', 'type': 'MicrosoftGraphIdentitySet'},
        'scope': {'key': 'scope', 'type': 'str'},
        'shared_by': {'key': 'sharedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'shared_date_time': {'key': 'sharedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        owner: Optional["MicrosoftGraphIdentitySet"] = None,
        scope: Optional[str] = None,
        shared_by: Optional["MicrosoftGraphIdentitySet"] = None,
        shared_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphShared, self).__init__(**kwargs)
        self.owner = owner
        self.scope = scope
        self.shared_by = shared_by
        self.shared_date_time = shared_date_time


class MicrosoftGraphSharedAppleDeviceUser(msrest.serialization.Model):
    """sharedAppleDeviceUser.

    :param user_principal_name: User name.
    :type user_principal_name: str
    :param data_to_sync: Data to sync.
    :type data_to_sync: bool
    :param data_quota: Data quota.
    :type data_quota: long
    :param data_used: Data quota.
    :type data_used: long
    """

    _attribute_map = {
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'data_to_sync': {'key': 'dataToSync', 'type': 'bool'},
        'data_quota': {'key': 'dataQuota', 'type': 'long'},
        'data_used': {'key': 'dataUsed', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        user_principal_name: Optional[str] = None,
        data_to_sync: Optional[bool] = None,
        data_quota: Optional[int] = None,
        data_used: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharedAppleDeviceUser, self).__init__(**kwargs)
        self.user_principal_name = user_principal_name
        self.data_to_sync = data_to_sync
        self.data_quota = data_quota
        self.data_used = data_used


class MicrosoftGraphSharedInsight(MicrosoftGraphEntity):
    """sharedInsight.

    :param id: Read-only.
    :type id: str
    :param last_shared: sharingDetail.
    :type last_shared: ~users_user.models.MicrosoftGraphSharingDetail
    :param sharing_history:
    :type sharing_history: list[~users_user.models.MicrosoftGraphSharingDetail]
    :param resource_visualization: resourceVisualization.
    :type resource_visualization: ~users_user.models.MicrosoftGraphResourceVisualization
    :param resource_reference: resourceReference.
    :type resource_reference: ~users_user.models.MicrosoftGraphResourceReference
    :param last_shared_method: entity.
    :type last_shared_method: ~users_user.models.MicrosoftGraphEntity
    :param resource: entity.
    :type resource: ~users_user.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_shared': {'key': 'lastShared', 'type': 'MicrosoftGraphSharingDetail'},
        'sharing_history': {'key': 'sharingHistory', 'type': '[MicrosoftGraphSharingDetail]'},
        'resource_visualization': {'key': 'resourceVisualization', 'type': 'MicrosoftGraphResourceVisualization'},
        'resource_reference': {'key': 'resourceReference', 'type': 'MicrosoftGraphResourceReference'},
        'last_shared_method': {'key': 'lastSharedMethod', 'type': 'MicrosoftGraphEntity'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        last_shared: Optional["MicrosoftGraphSharingDetail"] = None,
        sharing_history: Optional[List["MicrosoftGraphSharingDetail"]] = None,
        resource_visualization: Optional["MicrosoftGraphResourceVisualization"] = None,
        resource_reference: Optional["MicrosoftGraphResourceReference"] = None,
        last_shared_method: Optional["MicrosoftGraphEntity"] = None,
        resource: Optional["MicrosoftGraphEntity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharedInsight, self).__init__(id=id, **kwargs)
        self.last_shared = last_shared
        self.sharing_history = sharing_history
        self.resource_visualization = resource_visualization
        self.resource_reference = resource_reference
        self.last_shared_method = last_shared_method
        self.resource = resource


class MicrosoftGraphSharepointIds(msrest.serialization.Model):
    """sharepointIds.

    :param list_id: The unique identifier (guid) for the item's list in SharePoint.
    :type list_id: str
    :param list_item_id: An integer identifier for the item within the containing list.
    :type list_item_id: str
    :param list_item_unique_id: The unique identifier (guid) for the item within OneDrive for
     Business or a SharePoint site.
    :type list_item_unique_id: str
    :param site_id: The unique identifier (guid) for the item's site collection (SPSite).
    :type site_id: str
    :param site_url: The SharePoint URL for the site that contains the item.
    :type site_url: str
    :param tenant_id: The unique identifier (guid) for the tenancy.
    :type tenant_id: str
    :param web_id: The unique identifier (guid) for the item's site (SPWeb).
    :type web_id: str
    """

    _attribute_map = {
        'list_id': {'key': 'listId', 'type': 'str'},
        'list_item_id': {'key': 'listItemId', 'type': 'str'},
        'list_item_unique_id': {'key': 'listItemUniqueId', 'type': 'str'},
        'site_id': {'key': 'siteId', 'type': 'str'},
        'site_url': {'key': 'siteUrl', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'web_id': {'key': 'webId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        list_id: Optional[str] = None,
        list_item_id: Optional[str] = None,
        list_item_unique_id: Optional[str] = None,
        site_id: Optional[str] = None,
        site_url: Optional[str] = None,
        tenant_id: Optional[str] = None,
        web_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharepointIds, self).__init__(**kwargs)
        self.list_id = list_id
        self.list_item_id = list_item_id
        self.list_item_unique_id = list_item_unique_id
        self.site_id = site_id
        self.site_url = site_url
        self.tenant_id = tenant_id
        self.web_id = web_id


class MicrosoftGraphSharingDetail(msrest.serialization.Model):
    """sharingDetail.

    :param shared_by: insightIdentity.
    :type shared_by: ~users_user.models.MicrosoftGraphInsightIdentity
    :param shared_date_time: The date and time the file was last shared. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z. Read-only.
    :type shared_date_time: ~datetime.datetime
    :param sharing_subject: The subject with which the document was shared.
    :type sharing_subject: str
    :param sharing_type: Determines the way the document was shared, can be by a 'Link',
     'Attachment', 'Group', 'Site'.
    :type sharing_type: str
    :param sharing_reference: resourceReference.
    :type sharing_reference: ~users_user.models.MicrosoftGraphResourceReference
    """

    _attribute_map = {
        'shared_by': {'key': 'sharedBy', 'type': 'MicrosoftGraphInsightIdentity'},
        'shared_date_time': {'key': 'sharedDateTime', 'type': 'iso-8601'},
        'sharing_subject': {'key': 'sharingSubject', 'type': 'str'},
        'sharing_type': {'key': 'sharingType', 'type': 'str'},
        'sharing_reference': {'key': 'sharingReference', 'type': 'MicrosoftGraphResourceReference'},
    }

    def __init__(
        self,
        *,
        shared_by: Optional["MicrosoftGraphInsightIdentity"] = None,
        shared_date_time: Optional[datetime.datetime] = None,
        sharing_subject: Optional[str] = None,
        sharing_type: Optional[str] = None,
        sharing_reference: Optional["MicrosoftGraphResourceReference"] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharingDetail, self).__init__(**kwargs)
        self.shared_by = shared_by
        self.shared_date_time = shared_date_time
        self.sharing_subject = sharing_subject
        self.sharing_type = sharing_type
        self.sharing_reference = sharing_reference


class MicrosoftGraphSharingInvitation(msrest.serialization.Model):
    """sharingInvitation.

    :param email: The email address provided for the recipient of the sharing invitation. Read-
     only.
    :type email: str
    :param invited_by: identitySet.
    :type invited_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param redeemed_by:
    :type redeemed_by: str
    :param sign_in_required: If true the recipient of the invitation needs to sign in in order to
     access the shared item. Read-only.
    :type sign_in_required: bool
    """

    _attribute_map = {
        'email': {'key': 'email', 'type': 'str'},
        'invited_by': {'key': 'invitedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'redeemed_by': {'key': 'redeemedBy', 'type': 'str'},
        'sign_in_required': {'key': 'signInRequired', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        email: Optional[str] = None,
        invited_by: Optional["MicrosoftGraphIdentitySet"] = None,
        redeemed_by: Optional[str] = None,
        sign_in_required: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharingInvitation, self).__init__(**kwargs)
        self.email = email
        self.invited_by = invited_by
        self.redeemed_by = redeemed_by
        self.sign_in_required = sign_in_required


class MicrosoftGraphSharingLink(msrest.serialization.Model):
    """sharingLink.

    :param application: identity.
    :type application: ~users_user.models.MicrosoftGraphIdentity
    :param prevents_download: If true then the user can only use this link to view the item on the
     web, and cannot use it to download the contents of the item. Only for OneDrive for Business and
     SharePoint.
    :type prevents_download: bool
    :param configurator_url:
    :type configurator_url: str
    :param scope: The scope of the link represented by this permission. Value anonymous indicates
     the link is usable by anyone, organization indicates the link is only usable for users signed
     into the same tenant.
    :type scope: str
    :param type: The type of the link created.
    :type type: str
    :param web_html: For embed links, this property contains the HTML code for an :code:`<iframe>`
     element that will embed the item in a webpage.
    :type web_html: str
    :param web_url: A URL that opens the item in the browser on the OneDrive website.
    :type web_url: str
    """

    _attribute_map = {
        'application': {'key': 'application', 'type': 'MicrosoftGraphIdentity'},
        'prevents_download': {'key': 'preventsDownload', 'type': 'bool'},
        'configurator_url': {'key': 'configuratorUrl', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'web_html': {'key': 'webHtml', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        application: Optional["MicrosoftGraphIdentity"] = None,
        prevents_download: Optional[bool] = None,
        configurator_url: Optional[str] = None,
        scope: Optional[str] = None,
        type: Optional[str] = None,
        web_html: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharingLink, self).__init__(**kwargs)
        self.application = application
        self.prevents_download = prevents_download
        self.configurator_url = configurator_url
        self.scope = scope
        self.type = type
        self.web_html = web_html
        self.web_url = web_url


class MicrosoftGraphShift(MicrosoftGraphChangeTrackedEntity):
    """shift.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param shared_shift: shiftItem.
    :type shared_shift: ~users_user.models.MicrosoftGraphShiftItem
    :param draft_shift: shiftItem.
    :type draft_shift: ~users_user.models.MicrosoftGraphShiftItem
    :param user_id:
    :type user_id: str
    :param scheduling_group_id:
    :type scheduling_group_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'shared_shift': {'key': 'sharedShift', 'type': 'MicrosoftGraphShiftItem'},
        'draft_shift': {'key': 'draftShift', 'type': 'MicrosoftGraphShiftItem'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'scheduling_group_id': {'key': 'schedulingGroupId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        shared_shift: Optional["MicrosoftGraphShiftItem"] = None,
        draft_shift: Optional["MicrosoftGraphShiftItem"] = None,
        user_id: Optional[str] = None,
        scheduling_group_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphShift, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.shared_shift = shared_shift
        self.draft_shift = draft_shift
        self.user_id = user_id
        self.scheduling_group_id = scheduling_group_id


class MicrosoftGraphShiftActivity(msrest.serialization.Model):
    """shiftActivity.

    :param is_paid:
    :type is_paid: bool
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param theme: scheduleEntityTheme. Possible values include: "white", "blue", "green", "purple",
     "pink", "yellow", "gray", "darkBlue", "darkGreen", "darkPurple", "darkPink", "darkYellow",
     "unknownFutureValue".
    :type theme: str or ~users_user.models.MicrosoftGraphScheduleEntityTheme
    """

    _attribute_map = {
        'is_paid': {'key': 'isPaid', 'type': 'bool'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'theme': {'key': 'theme', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        is_paid: Optional[bool] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        theme: Optional[Union[str, "MicrosoftGraphScheduleEntityTheme"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphShiftActivity, self).__init__(**kwargs)
        self.is_paid = is_paid
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.code = code
        self.display_name = display_name
        self.theme = theme


class MicrosoftGraphShiftAvailability(msrest.serialization.Model):
    """shiftAvailability.

    :param recurrence: patternedRecurrence.
    :type recurrence: ~users_user.models.MicrosoftGraphPatternedRecurrence
    :param time_zone:
    :type time_zone: str
    :param time_slots:
    :type time_slots: list[~users_user.models.MicrosoftGraphTimeRange]
    """

    _attribute_map = {
        'recurrence': {'key': 'recurrence', 'type': 'MicrosoftGraphPatternedRecurrence'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'time_slots': {'key': 'timeSlots', 'type': '[MicrosoftGraphTimeRange]'},
    }

    def __init__(
        self,
        *,
        recurrence: Optional["MicrosoftGraphPatternedRecurrence"] = None,
        time_zone: Optional[str] = None,
        time_slots: Optional[List["MicrosoftGraphTimeRange"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphShiftAvailability, self).__init__(**kwargs)
        self.recurrence = recurrence
        self.time_zone = time_zone
        self.time_slots = time_slots


class MicrosoftGraphShiftPreferences(MicrosoftGraphChangeTrackedEntity):
    """shiftPreferences.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param availability:
    :type availability: list[~users_user.models.MicrosoftGraphShiftAvailability]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'availability': {'key': 'availability', 'type': '[MicrosoftGraphShiftAvailability]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        availability: Optional[List["MicrosoftGraphShiftAvailability"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphShiftPreferences, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.availability = availability


class MicrosoftGraphSignInActivity(msrest.serialization.Model):
    """signInActivity.

    :param last_sign_in_date_time:
    :type last_sign_in_date_time: ~datetime.datetime
    :param last_sign_in_request_id:
    :type last_sign_in_request_id: str
    """

    _attribute_map = {
        'last_sign_in_date_time': {'key': 'lastSignInDateTime', 'type': 'iso-8601'},
        'last_sign_in_request_id': {'key': 'lastSignInRequestId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        last_sign_in_date_time: Optional[datetime.datetime] = None,
        last_sign_in_request_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSignInActivity, self).__init__(**kwargs)
        self.last_sign_in_date_time = last_sign_in_date_time
        self.last_sign_in_request_id = last_sign_in_request_id


class MicrosoftGraphSingleValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """singleValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param value: A property value.
    :type value: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSingleValueLegacyExtendedProperty, self).__init__(id=id, **kwargs)
        self.value = value


class MicrosoftGraphSite(MicrosoftGraphBaseItem):
    """site.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param parent_reference: itemReference.
    :type parent_reference: ~users_user.models.MicrosoftGraphItemReference
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~users_user.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~users_user.models.MicrosoftGraphUser
    :param display_name: The full title for the site. Read-only.
    :type display_name: str
    :param root: Any object.
    :type root: object
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~users_user.models.MicrosoftGraphSharepointIds
    :param site_collection: siteCollection.
    :type site_collection: ~users_user.models.MicrosoftGraphSiteCollection
    :param analytics: itemAnalytics.
    :type analytics: ~users_user.models.MicrosoftGraphItemAnalytics
    :param columns: The collection of column definitions reusable across lists under this site.
    :type columns: list[~users_user.models.MicrosoftGraphColumnDefinition]
    :param content_types: The collection of content types defined for this site.
    :type content_types: list[~users_user.models.MicrosoftGraphContentType]
    :param drive: drive.
    :type drive: ~users_user.models.MicrosoftGraphDrive
    :param drives: The collection of drives (document libraries) under this site.
    :type drives: list[~users_user.models.MicrosoftGraphDrive]
    :param items: Used to address any item contained in this site. This collection cannot be
     enumerated.
    :type items: list[~users_user.models.MicrosoftGraphBaseItem]
    :param lists: The collection of lists under this site.
    :type lists: list[~users_user.models.MicrosoftGraphList]
    :param pages:
    :type pages: list[~users_user.models.MicrosoftGraphSitePage]
    :param sites: The collection of the sub-sites under this site.
    :type sites: list[~users_user.models.MicrosoftGraphSite]
    :param onenote: onenote.
    :type onenote: ~users_user.models.MicrosoftGraphOnenote
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'parent_reference': {'key': 'parentReference', 'type': 'MicrosoftGraphItemReference'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'root': {'key': 'root', 'type': 'object'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_collection': {'key': 'siteCollection', 'type': 'MicrosoftGraphSiteCollection'},
        'analytics': {'key': 'analytics', 'type': 'MicrosoftGraphItemAnalytics'},
        'columns': {'key': 'columns', 'type': '[MicrosoftGraphColumnDefinition]'},
        'content_types': {'key': 'contentTypes', 'type': '[MicrosoftGraphContentType]'},
        'drive': {'key': 'drive', 'type': 'MicrosoftGraphDrive'},
        'drives': {'key': 'drives', 'type': '[MicrosoftGraphDrive]'},
        'items': {'key': 'items', 'type': '[MicrosoftGraphBaseItem]'},
        'lists': {'key': 'lists', 'type': '[MicrosoftGraphList]'},
        'pages': {'key': 'pages', 'type': '[MicrosoftGraphSitePage]'},
        'sites': {'key': 'sites', 'type': '[MicrosoftGraphSite]'},
        'onenote': {'key': 'onenote', 'type': 'MicrosoftGraphOnenote'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        e_tag: Optional[str] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        parent_reference: Optional["MicrosoftGraphItemReference"] = None,
        web_url: Optional[str] = None,
        created_by_user: Optional["MicrosoftGraphUser"] = None,
        last_modified_by_user: Optional["MicrosoftGraphUser"] = None,
        display_name: Optional[str] = None,
        root: Optional[object] = None,
        sharepoint_ids: Optional["MicrosoftGraphSharepointIds"] = None,
        site_collection: Optional["MicrosoftGraphSiteCollection"] = None,
        analytics: Optional["MicrosoftGraphItemAnalytics"] = None,
        columns: Optional[List["MicrosoftGraphColumnDefinition"]] = None,
        content_types: Optional[List["MicrosoftGraphContentType"]] = None,
        drive: Optional["MicrosoftGraphDrive"] = None,
        drives: Optional[List["MicrosoftGraphDrive"]] = None,
        items: Optional[List["MicrosoftGraphBaseItem"]] = None,
        lists: Optional[List["MicrosoftGraphList"]] = None,
        pages: Optional[List["MicrosoftGraphSitePage"]] = None,
        sites: Optional[List["MicrosoftGraphSite"]] = None,
        onenote: Optional["MicrosoftGraphOnenote"] = None,
        **kwargs
    ):
        super(MicrosoftGraphSite, self).__init__(id=id, created_by=created_by, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, name=name, parent_reference=parent_reference, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, **kwargs)
        self.display_name = display_name
        self.root = root
        self.sharepoint_ids = sharepoint_ids
        self.site_collection = site_collection
        self.analytics = analytics
        self.columns = columns
        self.content_types = content_types
        self.drive = drive
        self.drives = drives
        self.items = items
        self.lists = lists
        self.pages = pages
        self.sites = sites
        self.onenote = onenote


class MicrosoftGraphSiteCollection(msrest.serialization.Model):
    """siteCollection.

    :param data_location_code: The geographic region code for where this site collection resides.
     Read-only.
    :type data_location_code: str
    :param hostname: The hostname for the site collection. Read-only.
    :type hostname: str
    :param root: Any object.
    :type root: object
    """

    _attribute_map = {
        'data_location_code': {'key': 'dataLocationCode', 'type': 'str'},
        'hostname': {'key': 'hostname', 'type': 'str'},
        'root': {'key': 'root', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        data_location_code: Optional[str] = None,
        hostname: Optional[str] = None,
        root: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftGraphSiteCollection, self).__init__(**kwargs)
        self.data_location_code = data_location_code
        self.hostname = hostname
        self.root = root


class MicrosoftGraphSitePage(MicrosoftGraphBaseItem):
    """sitePage.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param parent_reference: itemReference.
    :type parent_reference: ~users_user.models.MicrosoftGraphItemReference
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~users_user.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~users_user.models.MicrosoftGraphUser
    :param title:
    :type title: str
    :param content_type: contentTypeInfo.
    :type content_type: ~users_user.models.MicrosoftGraphContentTypeInfo
    :param page_layout_type:
    :type page_layout_type: str
    :param web_parts:
    :type web_parts: list[~users_user.models.MicrosoftGraphWebPart]
    :param publishing_state: publicationFacet.
    :type publishing_state: ~users_user.models.MicrosoftGraphPublicationFacet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'parent_reference': {'key': 'parentReference', 'type': 'MicrosoftGraphItemReference'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'title': {'key': 'title', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'MicrosoftGraphContentTypeInfo'},
        'page_layout_type': {'key': 'pageLayoutType', 'type': 'str'},
        'web_parts': {'key': 'webParts', 'type': '[MicrosoftGraphWebPart]'},
        'publishing_state': {'key': 'publishingState', 'type': 'MicrosoftGraphPublicationFacet'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        e_tag: Optional[str] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        parent_reference: Optional["MicrosoftGraphItemReference"] = None,
        web_url: Optional[str] = None,
        created_by_user: Optional["MicrosoftGraphUser"] = None,
        last_modified_by_user: Optional["MicrosoftGraphUser"] = None,
        title: Optional[str] = None,
        content_type: Optional["MicrosoftGraphContentTypeInfo"] = None,
        page_layout_type: Optional[str] = None,
        web_parts: Optional[List["MicrosoftGraphWebPart"]] = None,
        publishing_state: Optional["MicrosoftGraphPublicationFacet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphSitePage, self).__init__(id=id, created_by=created_by, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, name=name, parent_reference=parent_reference, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, **kwargs)
        self.title = title
        self.content_type = content_type
        self.page_layout_type = page_layout_type
        self.web_parts = web_parts
        self.publishing_state = publishing_state


class MicrosoftGraphSizeRange(msrest.serialization.Model):
    """sizeRange.

    :param minimum_size: The minimum size (in kilobytes) that an incoming message must have in
     order for a condition or exception to apply.
    :type minimum_size: int
    :param maximum_size: The maximum size (in kilobytes) that an incoming message must have in
     order for a condition or exception to apply.
    :type maximum_size: int
    """

    _validation = {
        'minimum_size': {'maximum': 2147483647, 'minimum': -2147483648},
        'maximum_size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'minimum_size': {'key': 'minimumSize', 'type': 'int'},
        'maximum_size': {'key': 'maximumSize', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        minimum_size: Optional[int] = None,
        maximum_size: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphSizeRange, self).__init__(**kwargs)
        self.minimum_size = minimum_size
        self.maximum_size = maximum_size


class MicrosoftGraphSkillProficiency(MicrosoftGraphItemFacet):
    """skillProficiency.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param categories:
    :type categories: list[str]
    :param display_name:
    :type display_name: str
    :param proficiency: skillProficiencyLevel. Possible values include: "elementary",
     "limitedWorking", "generalProfessional", "advancedProfessional", "expert",
     "unknownFutureValue".
    :type proficiency: str or ~users_user.models.MicrosoftGraphSkillProficiencyLevel
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'proficiency': {'key': 'proficiency', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        categories: Optional[List[str]] = None,
        display_name: Optional[str] = None,
        proficiency: Optional[Union[str, "MicrosoftGraphSkillProficiencyLevel"]] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkillProficiency, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.categories = categories
        self.display_name = display_name
        self.proficiency = proficiency
        self.web_url = web_url


class MicrosoftGraphSpecialFolder(msrest.serialization.Model):
    """specialFolder.

    :param name: The unique identifier for this item in the /drive/special collection.
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSpecialFolder, self).__init__(**kwargs)
        self.name = name


class MicrosoftGraphStoragePlanInformation(msrest.serialization.Model):
    """storagePlanInformation.

    :param upgrade_available:
    :type upgrade_available: bool
    """

    _attribute_map = {
        'upgrade_available': {'key': 'upgradeAvailable', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        upgrade_available: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphStoragePlanInformation, self).__init__(**kwargs)
        self.upgrade_available = upgrade_available


class MicrosoftGraphSubscription(MicrosoftGraphEntity):
    """subscription.

    :param id: Read-only.
    :type id: str
    :param resource: Required. Specifies the resource that will be monitored for changes. Do not
     include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values
     for each supported resource.
    :type resource: str
    :param change_type: Required. Indicates the type of change in the subscribed resource that will
     raise a notification. The supported values are: created, updated, deleted. Multiple values can
     be combined using a comma-separated list.Note: Drive root item and list notifications support
     only the updated changeType. User and group notifications support updated and deleted
     changeType.
    :type change_type: str
    :param client_state: Optional. Specifies the value of the clientState property sent by the
     service in each notification. The maximum length is 128 characters. The client can check that
     the notification came from the service by comparing the value of the clientState property sent
     with the subscription with the value of the clientState property received with each
     notification.
    :type client_state: str
    :param notification_url: Required. The URL of the endpoint that will receive the notifications.
     This URL must make use of the HTTPS protocol.
    :type notification_url: str
    :param expiration_date_time: Required. Specifies the date and time when the webhook
     subscription expires. The time is in UTC, and can be an amount of time from subscription
     creation that varies for the resource subscribed to.  See the table below for maximum supported
     subscription length of time.
    :type expiration_date_time: ~datetime.datetime
    :param application_id: Identifier of the application used to create the subscription. Read-
     only.
    :type application_id: str
    :param creator_id: Identifier of the user or service principal that created the subscription.
     If the app used delegated permissions to create the subscription, this field contains the id of
     the signed-in user the app called on behalf of. If the app used application permissions, this
     field contains the id of the service principal corresponding to the app. Read-only.
    :type creator_id: str
    :param include_properties:
    :type include_properties: bool
    :param include_resource_data:
    :type include_resource_data: bool
    :param lifecycle_notification_url:
    :type lifecycle_notification_url: str
    :param encryption_certificate:
    :type encryption_certificate: str
    :param encryption_certificate_id:
    :type encryption_certificate_id: str
    :param latest_supported_tls_version: Specifies the latest version of Transport Layer Security
     (TLS) that the notification endpoint, specified by notificationUrl, supports. The possible
     values are: v1_0, v1_1, v1_2, v1_3. For subscribers whose notification endpoint supports a
     version lower than the currently recommended version (TLS 1.2), specifying this property by a
     set timeline allows them to temporarily use their deprecated version of TLS before completing
     their upgrade to TLS 1.2. For these subscribers, not setting this property per the timeline
     would result in subscription operations failing. For subscribers whose notification endpoint
     already supports TLS 1.2, setting this property is optional. In such cases, Microsoft Graph
     defaults the property to v1_2.
    :type latest_supported_tls_version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'change_type': {'key': 'changeType', 'type': 'str'},
        'client_state': {'key': 'clientState', 'type': 'str'},
        'notification_url': {'key': 'notificationUrl', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'creator_id': {'key': 'creatorId', 'type': 'str'},
        'include_properties': {'key': 'includeProperties', 'type': 'bool'},
        'include_resource_data': {'key': 'includeResourceData', 'type': 'bool'},
        'lifecycle_notification_url': {'key': 'lifecycleNotificationUrl', 'type': 'str'},
        'encryption_certificate': {'key': 'encryptionCertificate', 'type': 'str'},
        'encryption_certificate_id': {'key': 'encryptionCertificateId', 'type': 'str'},
        'latest_supported_tls_version': {'key': 'latestSupportedTlsVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        resource: Optional[str] = None,
        change_type: Optional[str] = None,
        client_state: Optional[str] = None,
        notification_url: Optional[str] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        application_id: Optional[str] = None,
        creator_id: Optional[str] = None,
        include_properties: Optional[bool] = None,
        include_resource_data: Optional[bool] = None,
        lifecycle_notification_url: Optional[str] = None,
        encryption_certificate: Optional[str] = None,
        encryption_certificate_id: Optional[str] = None,
        latest_supported_tls_version: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSubscription, self).__init__(id=id, **kwargs)
        self.resource = resource
        self.change_type = change_type
        self.client_state = client_state
        self.notification_url = notification_url
        self.expiration_date_time = expiration_date_time
        self.application_id = application_id
        self.creator_id = creator_id
        self.include_properties = include_properties
        self.include_resource_data = include_resource_data
        self.lifecycle_notification_url = lifecycle_notification_url
        self.encryption_certificate = encryption_certificate
        self.encryption_certificate_id = encryption_certificate_id
        self.latest_supported_tls_version = latest_supported_tls_version


class MicrosoftGraphSwapShiftsChangeRequest(MicrosoftGraphOfferShiftRequest):
    """swapShiftsChangeRequest.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param assigned_to: scheduleChangeRequestActor. Possible values include: "sender", "recipient",
     "manager", "system", "unknownFutureValue".
    :type assigned_to: str or ~users_user.models.MicrosoftGraphScheduleChangeRequestActor
    :param state: scheduleChangeState. Possible values include: "pending", "approved", "declined",
     "unknownFutureValue".
    :type state: str or ~users_user.models.MicrosoftGraphScheduleChangeState
    :param sender_message:
    :type sender_message: str
    :param sender_date_time:
    :type sender_date_time: ~datetime.datetime
    :param manager_action_message:
    :type manager_action_message: str
    :param manager_action_date_time:
    :type manager_action_date_time: ~datetime.datetime
    :param sender_user_id:
    :type sender_user_id: str
    :param manager_user_id:
    :type manager_user_id: str
    :param recipient_action_message:
    :type recipient_action_message: str
    :param recipient_action_date_time:
    :type recipient_action_date_time: ~datetime.datetime
    :param sender_shift_id:
    :type sender_shift_id: str
    :param recipient_user_id:
    :type recipient_user_id: str
    :param recipient_shift_id:
    :type recipient_shift_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'sender_message': {'key': 'senderMessage', 'type': 'str'},
        'sender_date_time': {'key': 'senderDateTime', 'type': 'iso-8601'},
        'manager_action_message': {'key': 'managerActionMessage', 'type': 'str'},
        'manager_action_date_time': {'key': 'managerActionDateTime', 'type': 'iso-8601'},
        'sender_user_id': {'key': 'senderUserId', 'type': 'str'},
        'manager_user_id': {'key': 'managerUserId', 'type': 'str'},
        'recipient_action_message': {'key': 'recipientActionMessage', 'type': 'str'},
        'recipient_action_date_time': {'key': 'recipientActionDateTime', 'type': 'iso-8601'},
        'sender_shift_id': {'key': 'senderShiftId', 'type': 'str'},
        'recipient_user_id': {'key': 'recipientUserId', 'type': 'str'},
        'recipient_shift_id': {'key': 'recipientShiftId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        assigned_to: Optional[Union[str, "MicrosoftGraphScheduleChangeRequestActor"]] = None,
        state: Optional[Union[str, "MicrosoftGraphScheduleChangeState"]] = None,
        sender_message: Optional[str] = None,
        sender_date_time: Optional[datetime.datetime] = None,
        manager_action_message: Optional[str] = None,
        manager_action_date_time: Optional[datetime.datetime] = None,
        sender_user_id: Optional[str] = None,
        manager_user_id: Optional[str] = None,
        recipient_action_message: Optional[str] = None,
        recipient_action_date_time: Optional[datetime.datetime] = None,
        sender_shift_id: Optional[str] = None,
        recipient_user_id: Optional[str] = None,
        recipient_shift_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSwapShiftsChangeRequest, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, assigned_to=assigned_to, state=state, sender_message=sender_message, sender_date_time=sender_date_time, manager_action_message=manager_action_message, manager_action_date_time=manager_action_date_time, sender_user_id=sender_user_id, manager_user_id=manager_user_id, recipient_action_message=recipient_action_message, recipient_action_date_time=recipient_action_date_time, sender_shift_id=sender_shift_id, recipient_user_id=recipient_user_id, **kwargs)
        self.recipient_shift_id = recipient_shift_id


class MicrosoftGraphTargetPolicyEndpoints(msrest.serialization.Model):
    """targetPolicyEndpoints.

    :param platform_types:
    :type platform_types: list[str]
    """

    _attribute_map = {
        'platform_types': {'key': 'platformTypes', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        platform_types: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphTargetPolicyEndpoints, self).__init__(**kwargs)
        self.platform_types = platform_types


class MicrosoftGraphTeam(MicrosoftGraphEntity):
    """team.

    :param id: Read-only.
    :type id: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param internal_id: A unique ID for the team that has been used in a few places such as the
     audit log/Office 365 Management Activity API.
    :type internal_id: str
    :param classification:
    :type classification: str
    :param specialization: teamSpecialization. Possible values include: "none",
     "educationStandard", "educationClass", "educationProfessionalLearningCommunity",
     "educationStaff", "healthcareStandard", "healthcareCareCoordination", "unknownFutureValue".
    :type specialization: str or ~users_user.models.MicrosoftGraphTeamSpecialization
    :param visibility: teamVisibilityType. Possible values include: "private", "public",
     "hiddenMembership", "unknownFutureValue".
    :type visibility: str or ~users_user.models.MicrosoftGraphTeamVisibilityType
    :param web_url: A hyperlink that will go to the team in the Microsoft Teams client. This is the
     URL that you get when you right-click a team in the Microsoft Teams client and select Get link
     to team. This URL should be treated as an opaque blob, and not parsed.
    :type web_url: str
    :param member_settings: teamMemberSettings.
    :type member_settings: ~users_user.models.MicrosoftGraphTeamMemberSettings
    :param guest_settings: teamGuestSettings.
    :type guest_settings: ~users_user.models.MicrosoftGraphTeamGuestSettings
    :param messaging_settings: teamMessagingSettings.
    :type messaging_settings: ~users_user.models.MicrosoftGraphTeamMessagingSettings
    :param fun_settings: teamFunSettings.
    :type fun_settings: ~users_user.models.MicrosoftGraphTeamFunSettings
    :param discovery_settings: teamDiscoverySettings.
    :type discovery_settings: ~users_user.models.MicrosoftGraphTeamDiscoverySettings
    :param is_archived: Whether this team is in read-only mode.
    :type is_archived: bool
    :param schedule: schedule.
    :type schedule: ~users_user.models.MicrosoftGraphSchedule
    :param group: Represents an Azure Active Directory object. The directoryObject type is the base
     type for many other directory entity types.
    :type group: ~users_user.models.MicrosoftGraphGroup
    :param template: entity.
    :type template: ~users_user.models.MicrosoftGraphEntity
    :param photo: profilePhoto.
    :type photo: ~users_user.models.MicrosoftGraphProfilePhoto
    :param owners:
    :type owners: list[~users_user.models.MicrosoftGraphUser]
    :param channels: The collection of channels & messages associated with the team.
    :type channels: list[~users_user.models.MicrosoftGraphChannel]
    :param primary_channel: channel.
    :type primary_channel: ~users_user.models.MicrosoftGraphChannel
    :param apps:
    :type apps: list[~users_user.models.MicrosoftGraphTeamsCatalogApp]
    :param installed_apps: The apps installed in this team.
    :type installed_apps: list[~users_user.models.MicrosoftGraphTeamsAppInstallation]
    :param operations:
    :type operations: list[~users_user.models.MicrosoftGraphTeamsAsyncOperation]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'internal_id': {'key': 'internalId', 'type': 'str'},
        'classification': {'key': 'classification', 'type': 'str'},
        'specialization': {'key': 'specialization', 'type': 'str'},
        'visibility': {'key': 'visibility', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'member_settings': {'key': 'memberSettings', 'type': 'MicrosoftGraphTeamMemberSettings'},
        'guest_settings': {'key': 'guestSettings', 'type': 'MicrosoftGraphTeamGuestSettings'},
        'messaging_settings': {'key': 'messagingSettings', 'type': 'MicrosoftGraphTeamMessagingSettings'},
        'fun_settings': {'key': 'funSettings', 'type': 'MicrosoftGraphTeamFunSettings'},
        'discovery_settings': {'key': 'discoverySettings', 'type': 'MicrosoftGraphTeamDiscoverySettings'},
        'is_archived': {'key': 'isArchived', 'type': 'bool'},
        'schedule': {'key': 'schedule', 'type': 'MicrosoftGraphSchedule'},
        'group': {'key': 'group', 'type': 'MicrosoftGraphGroup'},
        'template': {'key': 'template', 'type': 'MicrosoftGraphEntity'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphProfilePhoto'},
        'owners': {'key': 'owners', 'type': '[MicrosoftGraphUser]'},
        'channels': {'key': 'channels', 'type': '[MicrosoftGraphChannel]'},
        'primary_channel': {'key': 'primaryChannel', 'type': 'MicrosoftGraphChannel'},
        'apps': {'key': 'apps', 'type': '[MicrosoftGraphTeamsCatalogApp]'},
        'installed_apps': {'key': 'installedApps', 'type': '[MicrosoftGraphTeamsAppInstallation]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphTeamsAsyncOperation]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        internal_id: Optional[str] = None,
        classification: Optional[str] = None,
        specialization: Optional[Union[str, "MicrosoftGraphTeamSpecialization"]] = None,
        visibility: Optional[Union[str, "MicrosoftGraphTeamVisibilityType"]] = None,
        web_url: Optional[str] = None,
        member_settings: Optional["MicrosoftGraphTeamMemberSettings"] = None,
        guest_settings: Optional["MicrosoftGraphTeamGuestSettings"] = None,
        messaging_settings: Optional["MicrosoftGraphTeamMessagingSettings"] = None,
        fun_settings: Optional["MicrosoftGraphTeamFunSettings"] = None,
        discovery_settings: Optional["MicrosoftGraphTeamDiscoverySettings"] = None,
        is_archived: Optional[bool] = None,
        schedule: Optional["MicrosoftGraphSchedule"] = None,
        group: Optional["MicrosoftGraphGroup"] = None,
        template: Optional["MicrosoftGraphEntity"] = None,
        photo: Optional["MicrosoftGraphProfilePhoto"] = None,
        owners: Optional[List["MicrosoftGraphUser"]] = None,
        channels: Optional[List["MicrosoftGraphChannel"]] = None,
        primary_channel: Optional["MicrosoftGraphChannel"] = None,
        apps: Optional[List["MicrosoftGraphTeamsCatalogApp"]] = None,
        installed_apps: Optional[List["MicrosoftGraphTeamsAppInstallation"]] = None,
        operations: Optional[List["MicrosoftGraphTeamsAsyncOperation"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeam, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.description = description
        self.internal_id = internal_id
        self.classification = classification
        self.specialization = specialization
        self.visibility = visibility
        self.web_url = web_url
        self.member_settings = member_settings
        self.guest_settings = guest_settings
        self.messaging_settings = messaging_settings
        self.fun_settings = fun_settings
        self.discovery_settings = discovery_settings
        self.is_archived = is_archived
        self.schedule = schedule
        self.group = group
        self.template = template
        self.photo = photo
        self.owners = owners
        self.channels = channels
        self.primary_channel = primary_channel
        self.apps = apps
        self.installed_apps = installed_apps
        self.operations = operations


class MicrosoftGraphTeamDiscoverySettings(msrest.serialization.Model):
    """teamDiscoverySettings.

    :param show_in_teams_search_and_suggestions:
    :type show_in_teams_search_and_suggestions: bool
    """

    _attribute_map = {
        'show_in_teams_search_and_suggestions': {'key': 'showInTeamsSearchAndSuggestions', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        show_in_teams_search_and_suggestions: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamDiscoverySettings, self).__init__(**kwargs)
        self.show_in_teams_search_and_suggestions = show_in_teams_search_and_suggestions


class MicrosoftGraphTeamFunSettings(msrest.serialization.Model):
    """teamFunSettings.

    :param allow_giphy: If set to true, enables Giphy use.
    :type allow_giphy: bool
    :param giphy_content_rating: giphyRatingType. Possible values include: "strict", "moderate",
     "unknownFutureValue".
    :type giphy_content_rating: str or ~users_user.models.MicrosoftGraphGiphyRatingType
    :param allow_stickers_and_memes: If set to true, enables users to include stickers and memes.
    :type allow_stickers_and_memes: bool
    :param allow_custom_memes: If set to true, enables users to include custom memes.
    :type allow_custom_memes: bool
    """

    _attribute_map = {
        'allow_giphy': {'key': 'allowGiphy', 'type': 'bool'},
        'giphy_content_rating': {'key': 'giphyContentRating', 'type': 'str'},
        'allow_stickers_and_memes': {'key': 'allowStickersAndMemes', 'type': 'bool'},
        'allow_custom_memes': {'key': 'allowCustomMemes', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        allow_giphy: Optional[bool] = None,
        giphy_content_rating: Optional[Union[str, "MicrosoftGraphGiphyRatingType"]] = None,
        allow_stickers_and_memes: Optional[bool] = None,
        allow_custom_memes: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamFunSettings, self).__init__(**kwargs)
        self.allow_giphy = allow_giphy
        self.giphy_content_rating = giphy_content_rating
        self.allow_stickers_and_memes = allow_stickers_and_memes
        self.allow_custom_memes = allow_custom_memes


class MicrosoftGraphTeamGuestSettings(msrest.serialization.Model):
    """teamGuestSettings.

    :param allow_create_update_channels: If set to true, guests can add and update channels.
    :type allow_create_update_channels: bool
    :param allow_delete_channels: If set to true, guests can delete channels.
    :type allow_delete_channels: bool
    """

    _attribute_map = {
        'allow_create_update_channels': {'key': 'allowCreateUpdateChannels', 'type': 'bool'},
        'allow_delete_channels': {'key': 'allowDeleteChannels', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        allow_create_update_channels: Optional[bool] = None,
        allow_delete_channels: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamGuestSettings, self).__init__(**kwargs)
        self.allow_create_update_channels = allow_create_update_channels
        self.allow_delete_channels = allow_delete_channels


class MicrosoftGraphTeamMemberSettings(msrest.serialization.Model):
    """teamMemberSettings.

    :param allow_create_update_channels: If set to true, members can add and update channels.
    :type allow_create_update_channels: bool
    :param allow_create_private_channels: If set to true, members can add and update private
     channels.
    :type allow_create_private_channels: bool
    :param allow_delete_channels: If set to true, members can delete channels.
    :type allow_delete_channels: bool
    :param allow_add_remove_apps: If set to true, members can add and remove apps.
    :type allow_add_remove_apps: bool
    :param allow_create_update_remove_tabs: If set to true, members can add, update, and remove
     tabs.
    :type allow_create_update_remove_tabs: bool
    :param allow_create_update_remove_connectors: If set to true, members can add, update, and
     remove connectors.
    :type allow_create_update_remove_connectors: bool
    """

    _attribute_map = {
        'allow_create_update_channels': {'key': 'allowCreateUpdateChannels', 'type': 'bool'},
        'allow_create_private_channels': {'key': 'allowCreatePrivateChannels', 'type': 'bool'},
        'allow_delete_channels': {'key': 'allowDeleteChannels', 'type': 'bool'},
        'allow_add_remove_apps': {'key': 'allowAddRemoveApps', 'type': 'bool'},
        'allow_create_update_remove_tabs': {'key': 'allowCreateUpdateRemoveTabs', 'type': 'bool'},
        'allow_create_update_remove_connectors': {'key': 'allowCreateUpdateRemoveConnectors', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        allow_create_update_channels: Optional[bool] = None,
        allow_create_private_channels: Optional[bool] = None,
        allow_delete_channels: Optional[bool] = None,
        allow_add_remove_apps: Optional[bool] = None,
        allow_create_update_remove_tabs: Optional[bool] = None,
        allow_create_update_remove_connectors: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamMemberSettings, self).__init__(**kwargs)
        self.allow_create_update_channels = allow_create_update_channels
        self.allow_create_private_channels = allow_create_private_channels
        self.allow_delete_channels = allow_delete_channels
        self.allow_add_remove_apps = allow_add_remove_apps
        self.allow_create_update_remove_tabs = allow_create_update_remove_tabs
        self.allow_create_update_remove_connectors = allow_create_update_remove_connectors


class MicrosoftGraphTeamMessagingSettings(msrest.serialization.Model):
    """teamMessagingSettings.

    :param allow_user_edit_messages: If set to true, users can edit their messages.
    :type allow_user_edit_messages: bool
    :param allow_user_delete_messages: If set to true, users can delete their messages.
    :type allow_user_delete_messages: bool
    :param allow_owner_delete_messages: If set to true, owners can delete any message.
    :type allow_owner_delete_messages: bool
    :param allow_team_mentions: If set to true, @team mentions are allowed.
    :type allow_team_mentions: bool
    :param allow_channel_mentions: If set to true, @channel mentions are allowed.
    :type allow_channel_mentions: bool
    """

    _attribute_map = {
        'allow_user_edit_messages': {'key': 'allowUserEditMessages', 'type': 'bool'},
        'allow_user_delete_messages': {'key': 'allowUserDeleteMessages', 'type': 'bool'},
        'allow_owner_delete_messages': {'key': 'allowOwnerDeleteMessages', 'type': 'bool'},
        'allow_team_mentions': {'key': 'allowTeamMentions', 'type': 'bool'},
        'allow_channel_mentions': {'key': 'allowChannelMentions', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        allow_user_edit_messages: Optional[bool] = None,
        allow_user_delete_messages: Optional[bool] = None,
        allow_owner_delete_messages: Optional[bool] = None,
        allow_team_mentions: Optional[bool] = None,
        allow_channel_mentions: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamMessagingSettings, self).__init__(**kwargs)
        self.allow_user_edit_messages = allow_user_edit_messages
        self.allow_user_delete_messages = allow_user_delete_messages
        self.allow_owner_delete_messages = allow_owner_delete_messages
        self.allow_team_mentions = allow_team_mentions
        self.allow_channel_mentions = allow_channel_mentions


class MicrosoftGraphTeamsApp(MicrosoftGraphEntity):
    """teamsApp.

    :param id: Read-only.
    :type id: str
    :param external_id: The ID of the catalog provided by the app developer in the Microsoft Teams
     zip app package.
    :type external_id: str
    :param name:
    :type name: str
    :param display_name: The name of the catalog app provided by the app developer in the Microsoft
     Teams zip app package.
    :type display_name: str
    :param distribution_method: teamsAppDistributionMethod. Possible values include: "store",
     "organization", "sideloaded", "unknownFutureValue".
    :type distribution_method: str or ~users_user.models.MicrosoftGraphTeamsAppDistributionMethod
    :param app_definitions: The details for each version of the app.
    :type app_definitions: list[~users_user.models.MicrosoftGraphTeamsAppDefinition]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'external_id': {'key': 'externalId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'distribution_method': {'key': 'distributionMethod', 'type': 'str'},
        'app_definitions': {'key': 'appDefinitions', 'type': '[MicrosoftGraphTeamsAppDefinition]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        external_id: Optional[str] = None,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        distribution_method: Optional[Union[str, "MicrosoftGraphTeamsAppDistributionMethod"]] = None,
        app_definitions: Optional[List["MicrosoftGraphTeamsAppDefinition"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsApp, self).__init__(id=id, **kwargs)
        self.external_id = external_id
        self.name = name
        self.display_name = display_name
        self.distribution_method = distribution_method
        self.app_definitions = app_definitions


class MicrosoftGraphTeamsAppDefinition(MicrosoftGraphEntity):
    """teamsAppDefinition.

    :param id: Read-only.
    :type id: str
    :param teams_app_id: The id from the Teams App manifest.
    :type teams_app_id: str
    :param display_name: The name of the app provided by the app developer.
    :type display_name: str
    :param version: The version number of the application.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'teams_app_id': {'key': 'teamsAppId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        teams_app_id: Optional[str] = None,
        display_name: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsAppDefinition, self).__init__(id=id, **kwargs)
        self.teams_app_id = teams_app_id
        self.display_name = display_name
        self.version = version


class MicrosoftGraphTeamsAppInstallation(MicrosoftGraphEntity):
    """teamsAppInstallation.

    :param id: Read-only.
    :type id: str
    :param teams_app: teamsApp.
    :type teams_app: ~users_user.models.MicrosoftGraphTeamsApp
    :param teams_app_definition: teamsAppDefinition.
    :type teams_app_definition: ~users_user.models.MicrosoftGraphTeamsAppDefinition
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'teams_app': {'key': 'teamsApp', 'type': 'MicrosoftGraphTeamsApp'},
        'teams_app_definition': {'key': 'teamsAppDefinition', 'type': 'MicrosoftGraphTeamsAppDefinition'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        teams_app: Optional["MicrosoftGraphTeamsApp"] = None,
        teams_app_definition: Optional["MicrosoftGraphTeamsAppDefinition"] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsAppInstallation, self).__init__(id=id, **kwargs)
        self.teams_app = teams_app
        self.teams_app_definition = teams_app_definition


class MicrosoftGraphTeamsAsyncOperation(MicrosoftGraphEntity):
    """teamsAsyncOperation.

    :param id: Read-only.
    :type id: str
    :param operation_type: teamsAsyncOperationType. Possible values include: "invalid",
     "cloneTeam", "archiveTeam", "unarchiveTeam", "createTeam", "unknownFutureValue".
    :type operation_type: str or ~users_user.models.MicrosoftGraphTeamsAsyncOperationType
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param status: teamsAsyncOperationStatus. Possible values include: "invalid", "notStarted",
     "inProgress", "succeeded", "failed", "unknownFutureValue".
    :type status: str or ~users_user.models.MicrosoftGraphTeamsAsyncOperationStatus
    :param last_action_date_time:
    :type last_action_date_time: ~datetime.datetime
    :param attempts_count:
    :type attempts_count: int
    :param target_resource_id:
    :type target_resource_id: str
    :param target_resource_location:
    :type target_resource_location: str
    :param error: operationError.
    :type error: ~users_user.models.MicrosoftGraphOperationError
    """

    _validation = {
        'attempts_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'operation_type': {'key': 'operationType', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'attempts_count': {'key': 'attemptsCount', 'type': 'int'},
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'target_resource_location': {'key': 'targetResourceLocation', 'type': 'str'},
        'error': {'key': 'error', 'type': 'MicrosoftGraphOperationError'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        operation_type: Optional[Union[str, "MicrosoftGraphTeamsAsyncOperationType"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "MicrosoftGraphTeamsAsyncOperationStatus"]] = None,
        last_action_date_time: Optional[datetime.datetime] = None,
        attempts_count: Optional[int] = None,
        target_resource_id: Optional[str] = None,
        target_resource_location: Optional[str] = None,
        error: Optional["MicrosoftGraphOperationError"] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsAsyncOperation, self).__init__(id=id, **kwargs)
        self.operation_type = operation_type
        self.created_date_time = created_date_time
        self.status = status
        self.last_action_date_time = last_action_date_time
        self.attempts_count = attempts_count
        self.target_resource_id = target_resource_id
        self.target_resource_location = target_resource_location
        self.error = error


class MicrosoftGraphTeamsCatalogApp(MicrosoftGraphEntity):
    """teamsCatalogApp.

    :param id: Read-only.
    :type id: str
    :param external_id:
    :type external_id: str
    :param name:
    :type name: str
    :param distribution_method: teamsAppDistributionMethod. Possible values include: "store",
     "organization", "sideloaded", "unknownFutureValue".
    :type distribution_method: str or ~users_user.models.MicrosoftGraphTeamsAppDistributionMethod
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'external_id': {'key': 'externalId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'distribution_method': {'key': 'distributionMethod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        external_id: Optional[str] = None,
        name: Optional[str] = None,
        distribution_method: Optional[Union[str, "MicrosoftGraphTeamsAppDistributionMethod"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsCatalogApp, self).__init__(id=id, **kwargs)
        self.external_id = external_id
        self.name = name
        self.distribution_method = distribution_method


class MicrosoftGraphTeamsTab(MicrosoftGraphEntity):
    """teamsTab.

    :param id: Read-only.
    :type id: str
    :param name:
    :type name: str
    :param display_name: Name of the tab.
    :type display_name: str
    :param teams_app_id:
    :type teams_app_id: str
    :param sort_order_index:
    :type sort_order_index: str
    :param message_id:
    :type message_id: str
    :param web_url: Deep link url of the tab instance. Read only.
    :type web_url: str
    :param configuration: teamsTabConfiguration.
    :type configuration: ~users_user.models.MicrosoftGraphTeamsTabConfiguration
    :param teams_app: teamsApp.
    :type teams_app: ~users_user.models.MicrosoftGraphTeamsApp
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'teams_app_id': {'key': 'teamsAppId', 'type': 'str'},
        'sort_order_index': {'key': 'sortOrderIndex', 'type': 'str'},
        'message_id': {'key': 'messageId', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'configuration': {'key': 'configuration', 'type': 'MicrosoftGraphTeamsTabConfiguration'},
        'teams_app': {'key': 'teamsApp', 'type': 'MicrosoftGraphTeamsApp'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        teams_app_id: Optional[str] = None,
        sort_order_index: Optional[str] = None,
        message_id: Optional[str] = None,
        web_url: Optional[str] = None,
        configuration: Optional["MicrosoftGraphTeamsTabConfiguration"] = None,
        teams_app: Optional["MicrosoftGraphTeamsApp"] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsTab, self).__init__(id=id, **kwargs)
        self.name = name
        self.display_name = display_name
        self.teams_app_id = teams_app_id
        self.sort_order_index = sort_order_index
        self.message_id = message_id
        self.web_url = web_url
        self.configuration = configuration
        self.teams_app = teams_app


class MicrosoftGraphTeamsTabConfiguration(msrest.serialization.Model):
    """teamsTabConfiguration.

    :param entity_id: Identifier for the entity hosted by the tab provider.
    :type entity_id: str
    :param content_url: Url used for rendering tab contents in Teams. Required.
    :type content_url: str
    :param remove_url: Url called by Teams client when a Tab is removed using the Teams Client.
    :type remove_url: str
    :param website_url: Url for showing tab contents outside of Teams.
    :type website_url: str
    """

    _attribute_map = {
        'entity_id': {'key': 'entityId', 'type': 'str'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
        'remove_url': {'key': 'removeUrl', 'type': 'str'},
        'website_url': {'key': 'websiteUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        entity_id: Optional[str] = None,
        content_url: Optional[str] = None,
        remove_url: Optional[str] = None,
        website_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsTabConfiguration, self).__init__(**kwargs)
        self.entity_id = entity_id
        self.content_url = content_url
        self.remove_url = remove_url
        self.website_url = website_url


class MicrosoftGraphTeamsTemplate(MicrosoftGraphEntity):
    """teamsTemplate.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsTemplate, self).__init__(id=id, **kwargs)


class MicrosoftGraphTextColumn(msrest.serialization.Model):
    """textColumn.

    :param allow_multiple_lines: Whether to allow multiple lines of text.
    :type allow_multiple_lines: bool
    :param append_changes_to_existing_text: Whether updates to this column should replace existing
     text, or append to it.
    :type append_changes_to_existing_text: bool
    :param lines_for_editing: The size of the text box.
    :type lines_for_editing: int
    :param max_length: The maximum number of characters for the value.
    :type max_length: int
    :param text_type: The type of text being stored. Must be one of plain or richText.
    :type text_type: str
    """

    _validation = {
        'lines_for_editing': {'maximum': 2147483647, 'minimum': -2147483648},
        'max_length': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'allow_multiple_lines': {'key': 'allowMultipleLines', 'type': 'bool'},
        'append_changes_to_existing_text': {'key': 'appendChangesToExistingText', 'type': 'bool'},
        'lines_for_editing': {'key': 'linesForEditing', 'type': 'int'},
        'max_length': {'key': 'maxLength', 'type': 'int'},
        'text_type': {'key': 'textType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        allow_multiple_lines: Optional[bool] = None,
        append_changes_to_existing_text: Optional[bool] = None,
        lines_for_editing: Optional[int] = None,
        max_length: Optional[int] = None,
        text_type: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTextColumn, self).__init__(**kwargs)
        self.allow_multiple_lines = allow_multiple_lines
        self.append_changes_to_existing_text = append_changes_to_existing_text
        self.lines_for_editing = lines_for_editing
        self.max_length = max_length
        self.text_type = text_type


class MicrosoftGraphThreatAssessmentRequest(MicrosoftGraphEntity):
    """threatAssessmentRequest.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param content_type: threatAssessmentContentType. Possible values include: "mail", "url",
     "file".
    :type content_type: str or ~users_user.models.MicrosoftGraphThreatAssessmentContentType
    :param expected_assessment: threatExpectedAssessment. Possible values include: "block",
     "unblock".
    :type expected_assessment: str or ~users_user.models.MicrosoftGraphThreatExpectedAssessment
    :param category: threatCategory. Possible values include: "undefined", "spam", "phishing",
     "malware", "unknownFutureValue".
    :type category: str or ~users_user.models.MicrosoftGraphThreatCategory
    :param status: threatAssessmentStatus. Possible values include: "pending", "completed".
    :type status: str or ~users_user.models.MicrosoftGraphThreatAssessmentStatus
    :param request_source: threatAssessmentRequestSource. Possible values include: "undefined",
     "user", "administrator".
    :type request_source: str or ~users_user.models.MicrosoftGraphThreatAssessmentRequestSource
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param results: A collection of threat assessment results. Read-only. By default, a GET
     /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.
    :type results: list[~users_user.models.MicrosoftGraphThreatAssessmentResult]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'expected_assessment': {'key': 'expectedAssessment', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'request_source': {'key': 'requestSource', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'results': {'key': 'results', 'type': '[MicrosoftGraphThreatAssessmentResult]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        content_type: Optional[Union[str, "MicrosoftGraphThreatAssessmentContentType"]] = None,
        expected_assessment: Optional[Union[str, "MicrosoftGraphThreatExpectedAssessment"]] = None,
        category: Optional[Union[str, "MicrosoftGraphThreatCategory"]] = None,
        status: Optional[Union[str, "MicrosoftGraphThreatAssessmentStatus"]] = None,
        request_source: Optional[Union[str, "MicrosoftGraphThreatAssessmentRequestSource"]] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        results: Optional[List["MicrosoftGraphThreatAssessmentResult"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphThreatAssessmentRequest, self).__init__(id=id, **kwargs)
        self.created_date_time = created_date_time
        self.content_type = content_type
        self.expected_assessment = expected_assessment
        self.category = category
        self.status = status
        self.request_source = request_source
        self.created_by = created_by
        self.results = results


class MicrosoftGraphThreatAssessmentResult(MicrosoftGraphEntity):
    """threatAssessmentResult.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param result_type: threatAssessmentResultType. Possible values include: "checkPolicy",
     "rescan", "unknownFutureValue".
    :type result_type: str or ~users_user.models.MicrosoftGraphThreatAssessmentResultType
    :param message: The result message for each threat assessment.
    :type message: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'result_type': {'key': 'resultType', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        result_type: Optional[Union[str, "MicrosoftGraphThreatAssessmentResultType"]] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphThreatAssessmentResult, self).__init__(id=id, **kwargs)
        self.created_date_time = created_date_time
        self.result_type = result_type
        self.message = message


class MicrosoftGraphThumbnail(msrest.serialization.Model):
    """thumbnail.

    :param content: The content stream for the thumbnail.
    :type content: bytes
    :param height: The height of the thumbnail, in pixels.
    :type height: int
    :param source_item_id: The unique identifier of the item that provided the thumbnail. This is
     only available when a folder thumbnail is requested.
    :type source_item_id: str
    :param url: The URL used to fetch the thumbnail content.
    :type url: str
    :param width: The width of the thumbnail, in pixels.
    :type width: int
    """

    _validation = {
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'content': {'key': 'content', 'type': 'base64'},
        'height': {'key': 'height', 'type': 'int'},
        'source_item_id': {'key': 'sourceItemId', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        content: Optional[bytes] = None,
        height: Optional[int] = None,
        source_item_id: Optional[str] = None,
        url: Optional[str] = None,
        width: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphThumbnail, self).__init__(**kwargs)
        self.content = content
        self.height = height
        self.source_item_id = source_item_id
        self.url = url
        self.width = width


class MicrosoftGraphThumbnailSet(MicrosoftGraphEntity):
    """thumbnailSet.

    :param id: Read-only.
    :type id: str
    :param large: thumbnail.
    :type large: ~users_user.models.MicrosoftGraphThumbnail
    :param medium: thumbnail.
    :type medium: ~users_user.models.MicrosoftGraphThumbnail
    :param small: thumbnail.
    :type small: ~users_user.models.MicrosoftGraphThumbnail
    :param source: thumbnail.
    :type source: ~users_user.models.MicrosoftGraphThumbnail
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'large': {'key': 'large', 'type': 'MicrosoftGraphThumbnail'},
        'medium': {'key': 'medium', 'type': 'MicrosoftGraphThumbnail'},
        'small': {'key': 'small', 'type': 'MicrosoftGraphThumbnail'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphThumbnail'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        large: Optional["MicrosoftGraphThumbnail"] = None,
        medium: Optional["MicrosoftGraphThumbnail"] = None,
        small: Optional["MicrosoftGraphThumbnail"] = None,
        source: Optional["MicrosoftGraphThumbnail"] = None,
        **kwargs
    ):
        super(MicrosoftGraphThumbnailSet, self).__init__(id=id, **kwargs)
        self.large = large
        self.medium = medium
        self.small = small
        self.source = source


class MicrosoftGraphTimeOff(MicrosoftGraphChangeTrackedEntity):
    """timeOff.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param shared_time_off: timeOffItem.
    :type shared_time_off: ~users_user.models.MicrosoftGraphTimeOffItem
    :param draft_time_off: timeOffItem.
    :type draft_time_off: ~users_user.models.MicrosoftGraphTimeOffItem
    :param user_id:
    :type user_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'shared_time_off': {'key': 'sharedTimeOff', 'type': 'MicrosoftGraphTimeOffItem'},
        'draft_time_off': {'key': 'draftTimeOff', 'type': 'MicrosoftGraphTimeOffItem'},
        'user_id': {'key': 'userId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        shared_time_off: Optional["MicrosoftGraphTimeOffItem"] = None,
        draft_time_off: Optional["MicrosoftGraphTimeOffItem"] = None,
        user_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTimeOff, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.shared_time_off = shared_time_off
        self.draft_time_off = draft_time_off
        self.user_id = user_id


class MicrosoftGraphTimeOffItem(MicrosoftGraphScheduleEntity):
    """timeOffItem.

    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param theme: scheduleEntityTheme. Possible values include: "white", "blue", "green", "purple",
     "pink", "yellow", "gray", "darkBlue", "darkGreen", "darkPurple", "darkPink", "darkYellow",
     "unknownFutureValue".
    :type theme: str or ~users_user.models.MicrosoftGraphScheduleEntityTheme
    :param time_off_reason_id:
    :type time_off_reason_id: str
    """

    _attribute_map = {
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'theme': {'key': 'theme', 'type': 'str'},
        'time_off_reason_id': {'key': 'timeOffReasonId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        theme: Optional[Union[str, "MicrosoftGraphScheduleEntityTheme"]] = None,
        time_off_reason_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTimeOffItem, self).__init__(start_date_time=start_date_time, end_date_time=end_date_time, theme=theme, **kwargs)
        self.time_off_reason_id = time_off_reason_id


class MicrosoftGraphTimeOffReason(MicrosoftGraphChangeTrackedEntity):
    """timeOffReason.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param display_name:
    :type display_name: str
    :param icon_type: timeOffReasonIconType. Possible values include: "none", "car", "calendar",
     "running", "plane", "firstAid", "doctor", "notWorking", "clock", "juryDuty", "globe", "cup",
     "phone", "weather", "umbrella", "piggyBank", "dog", "cake", "trafficCone", "pin", "sunny",
     "unknownFutureValue".
    :type icon_type: str or ~users_user.models.MicrosoftGraphTimeOffReasonIconType
    :param is_active:
    :type is_active: bool
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'icon_type': {'key': 'iconType', 'type': 'str'},
        'is_active': {'key': 'isActive', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        display_name: Optional[str] = None,
        icon_type: Optional[Union[str, "MicrosoftGraphTimeOffReasonIconType"]] = None,
        is_active: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphTimeOffReason, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.display_name = display_name
        self.icon_type = icon_type
        self.is_active = is_active


class MicrosoftGraphTimeOffRequest(MicrosoftGraphScheduleChangeRequest):
    """timeOffRequest.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param assigned_to: scheduleChangeRequestActor. Possible values include: "sender", "recipient",
     "manager", "system", "unknownFutureValue".
    :type assigned_to: str or ~users_user.models.MicrosoftGraphScheduleChangeRequestActor
    :param state: scheduleChangeState. Possible values include: "pending", "approved", "declined",
     "unknownFutureValue".
    :type state: str or ~users_user.models.MicrosoftGraphScheduleChangeState
    :param sender_message:
    :type sender_message: str
    :param sender_date_time:
    :type sender_date_time: ~datetime.datetime
    :param manager_action_message:
    :type manager_action_message: str
    :param manager_action_date_time:
    :type manager_action_date_time: ~datetime.datetime
    :param sender_user_id:
    :type sender_user_id: str
    :param manager_user_id:
    :type manager_user_id: str
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param time_off_reason_id:
    :type time_off_reason_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'sender_message': {'key': 'senderMessage', 'type': 'str'},
        'sender_date_time': {'key': 'senderDateTime', 'type': 'iso-8601'},
        'manager_action_message': {'key': 'managerActionMessage', 'type': 'str'},
        'manager_action_date_time': {'key': 'managerActionDateTime', 'type': 'iso-8601'},
        'sender_user_id': {'key': 'senderUserId', 'type': 'str'},
        'manager_user_id': {'key': 'managerUserId', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'time_off_reason_id': {'key': 'timeOffReasonId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        assigned_to: Optional[Union[str, "MicrosoftGraphScheduleChangeRequestActor"]] = None,
        state: Optional[Union[str, "MicrosoftGraphScheduleChangeState"]] = None,
        sender_message: Optional[str] = None,
        sender_date_time: Optional[datetime.datetime] = None,
        manager_action_message: Optional[str] = None,
        manager_action_date_time: Optional[datetime.datetime] = None,
        sender_user_id: Optional[str] = None,
        manager_user_id: Optional[str] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        time_off_reason_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTimeOffRequest, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, assigned_to=assigned_to, state=state, sender_message=sender_message, sender_date_time=sender_date_time, manager_action_message=manager_action_message, manager_action_date_time=manager_action_date_time, sender_user_id=sender_user_id, manager_user_id=manager_user_id, **kwargs)
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.time_off_reason_id = time_off_reason_id


class MicrosoftGraphTimeRange(msrest.serialization.Model):
    """timeRange.

    :param start_time:
    :type start_time: ~datetime.time
    :param end_time:
    :type end_time: ~datetime.time
    """

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'time'},
        'end_time': {'key': 'endTime', 'type': 'time'},
    }

    def __init__(
        self,
        *,
        start_time: Optional[datetime.time] = None,
        end_time: Optional[datetime.time] = None,
        **kwargs
    ):
        super(MicrosoftGraphTimeRange, self).__init__(**kwargs)
        self.start_time = start_time
        self.end_time = end_time


class MicrosoftGraphTimeSlot(msrest.serialization.Model):
    """timeSlot.

    :param start: dateTimeTimeZone.
    :type start: ~users_user.models.MicrosoftGraphDateTimeZone
    :param end: dateTimeTimeZone.
    :type end: ~users_user.models.MicrosoftGraphDateTimeZone
    """

    _attribute_map = {
        'start': {'key': 'start', 'type': 'MicrosoftGraphDateTimeZone'},
        'end': {'key': 'end', 'type': 'MicrosoftGraphDateTimeZone'},
    }

    def __init__(
        self,
        *,
        start: Optional["MicrosoftGraphDateTimeZone"] = None,
        end: Optional["MicrosoftGraphDateTimeZone"] = None,
        **kwargs
    ):
        super(MicrosoftGraphTimeSlot, self).__init__(**kwargs)
        self.start = start
        self.end = end


class MicrosoftGraphTimeZoneBase(msrest.serialization.Model):
    """timeZoneBase.

    :param name: The name of a time zone. It can be a standard time zone name such as 'Hawaii-
     Aleutian Standard Time', or 'Customized Time Zone' for a custom time zone.
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTimeZoneBase, self).__init__(**kwargs)
        self.name = name


class MicrosoftGraphTrending(MicrosoftGraphEntity):
    """trending.

    :param id: Read-only.
    :type id: str
    :param weight: Value indicating how much the document is currently trending. The larger the
     number, the more the document is currently trending around the user (the more relevant it is).
     Returned documents are sorted by this value.
    :type weight: float
    :param resource_visualization: resourceVisualization.
    :type resource_visualization: ~users_user.models.MicrosoftGraphResourceVisualization
    :param resource_reference: resourceReference.
    :type resource_reference: ~users_user.models.MicrosoftGraphResourceReference
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param resource: entity.
    :type resource: ~users_user.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'weight': {'key': 'weight', 'type': 'float'},
        'resource_visualization': {'key': 'resourceVisualization', 'type': 'MicrosoftGraphResourceVisualization'},
        'resource_reference': {'key': 'resourceReference', 'type': 'MicrosoftGraphResourceReference'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        weight: Optional[float] = None,
        resource_visualization: Optional["MicrosoftGraphResourceVisualization"] = None,
        resource_reference: Optional["MicrosoftGraphResourceReference"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        resource: Optional["MicrosoftGraphEntity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphTrending, self).__init__(id=id, **kwargs)
        self.weight = weight
        self.resource_visualization = resource_visualization
        self.resource_reference = resource_reference
        self.last_modified_date_time = last_modified_date_time
        self.resource = resource


class MicrosoftGraphTypedEmailAddress(MicrosoftGraphEmailAddress):
    """typedEmailAddress.

    :param name: The display name of the person or entity.
    :type name: str
    :param address: The email address of the person or entity.
    :type address: str
    :param type: emailType. Possible values include: "unknown", "work", "personal", "main",
     "other".
    :type type: str or ~users_user.models.MicrosoftGraphEmailType
    :param other_label:
    :type other_label: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'other_label': {'key': 'otherLabel', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        address: Optional[str] = None,
        type: Optional[Union[str, "MicrosoftGraphEmailType"]] = None,
        other_label: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTypedEmailAddress, self).__init__(name=name, address=address, **kwargs)
        self.type = type
        self.other_label = other_label


class MicrosoftGraphUsageDetails(msrest.serialization.Model):
    """usageDetails.

    :param last_accessed_date_time: The date and time the resource was last accessed by the user.
     The timestamp represents date and time information using ISO 8601 format and is always in UTC
     time. For example, midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z.
     Read-only.
    :type last_accessed_date_time: ~datetime.datetime
    :param last_modified_date_time: The date and time the resource was last modified by the user.
     The timestamp represents date and time information using ISO 8601 format and is always in UTC
     time. For example, midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z.
     Read-only.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'last_accessed_date_time': {'key': 'lastAccessedDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        last_accessed_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphUsageDetails, self).__init__(**kwargs)
        self.last_accessed_date_time = last_accessed_date_time
        self.last_modified_date_time = last_modified_date_time


class MicrosoftGraphUsedInsight(MicrosoftGraphEntity):
    """usedInsight.

    :param id: Read-only.
    :type id: str
    :param last_used: usageDetails.
    :type last_used: ~users_user.models.MicrosoftGraphUsageDetails
    :param resource_visualization: resourceVisualization.
    :type resource_visualization: ~users_user.models.MicrosoftGraphResourceVisualization
    :param resource_reference: resourceReference.
    :type resource_reference: ~users_user.models.MicrosoftGraphResourceReference
    :param resource: entity.
    :type resource: ~users_user.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_used': {'key': 'lastUsed', 'type': 'MicrosoftGraphUsageDetails'},
        'resource_visualization': {'key': 'resourceVisualization', 'type': 'MicrosoftGraphResourceVisualization'},
        'resource_reference': {'key': 'resourceReference', 'type': 'MicrosoftGraphResourceReference'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        last_used: Optional["MicrosoftGraphUsageDetails"] = None,
        resource_visualization: Optional["MicrosoftGraphResourceVisualization"] = None,
        resource_reference: Optional["MicrosoftGraphResourceReference"] = None,
        resource: Optional["MicrosoftGraphEntity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphUsedInsight, self).__init__(id=id, **kwargs)
        self.last_used = last_used
        self.resource_visualization = resource_visualization
        self.resource_reference = resource_reference
        self.resource = resource


class MicrosoftGraphUser(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory user object.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param sign_in_activity: signInActivity.
    :type sign_in_activity: ~users_user.models.MicrosoftGraphSignInActivity
    :param account_enabled: true if the account is enabled; otherwise, false. This property is
     required when a user is created. Supports $filter.
    :type account_enabled: bool
    :param age_group: Sets the age group of the user. Allowed values: null, minor, notAdult and
     adult. Refer to the legal age group property definitions for further information.
    :type age_group: str
    :param assigned_licenses: The licenses that are assigned to the user. Not nullable.
    :type assigned_licenses: list[~users_user.models.MicrosoftGraphAssignedLicense]
    :param assigned_plans: The plans that are assigned to the user. Read-only. Not nullable.
    :type assigned_plans: list[~users_user.models.MicrosoftGraphAssignedPlan]
    :param business_phones: The telephone numbers for the user. NOTE: Although this is a string
     collection, only one number can be set for this property.
    :type business_phones: list[str]
    :param city: The city in which the user is located. Supports $filter.
    :type city: str
    :param company_name: The company name which the user is associated. This property can be useful
     for describing the company that an external user comes from.
    :type company_name: str
    :param consent_provided_for_minor: Sets whether consent has been obtained for minors. Allowed
     values: null, granted, denied and notRequired. Refer to the legal age group property
     definitions for further information.
    :type consent_provided_for_minor: str
    :param country: The country/region in which the user is located; for example, 'US' or 'UK'.
     Supports $filter.
    :type country: str
    :param created_date_time: The created date of the user object.
    :type created_date_time: ~datetime.datetime
    :param creation_type: Indicates whether the user account was created as a regular school or
     work account (null), an external account (Invitation), a local account for an Azure Active
     Directory B2C tenant (LocalAccount) or self-service sign-up using email verification
     (EmailVerified). Read-only.
    :type creation_type: str
    :param department: The name for the department in which the user works. Supports $filter.
    :type department: str
    :param device_keys:
    :type device_keys: list[~users_user.models.MicrosoftGraphDeviceKey]
    :param display_name: The name displayed in the address book for the user. This is usually the
     combination of the user's first name, middle initial and last name. This property is required
     when a user is created and it cannot be cleared during updates. Supports $filter and $orderby.
    :type display_name: str
    :param employee_id: The employee identifier assigned to the user by the organization. Supports
     $filter.
    :type employee_id: str
    :param fax_number: The fax number of the user.
    :type fax_number: str
    :param given_name: The given name (first name) of the user. Supports $filter.
    :type given_name: str
    :param identities: Represents the identities that can be used to sign in to this user account.
     An identity can be provided by Microsoft (also known as a local account), by organizations, or
     by social identity providers such as Facebook, Google, and Microsoft, and tied to a user
     account. May contain multiple items with the same signInType value. Supports $filter.
    :type identities: list[~users_user.models.MicrosoftGraphObjectIdentity]
    :param im_addresses: The instant message voice over IP (VOIP) session initiation protocol (SIP)
     addresses for the user. Read-only.
    :type im_addresses: list[str]
    :param is_resource_account: true if the user is a resource account; otherwise, false. Null
     value should be considered false.
    :type is_resource_account: bool
    :param job_title: The user’s job title. Supports $filter.
    :type job_title: str
    :param last_password_change_date_time: The time when this Azure AD user last changed their
     password. The date and time information uses ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type last_password_change_date_time: ~datetime.datetime
    :param legal_age_group_classification: Used by enterprise applications to determine the legal
     age group of the user. This property is read-only and calculated based on ageGroup and
     consentProvidedForMinor properties. Allowed values: null, minorWithOutParentalConsent,
     minorWithParentalConsent, minorNoParentalConsentRequired, notAdult and adult. Refer to the
     legal age group property definitions for further information.).
    :type legal_age_group_classification: str
    :param license_assignment_states: State of license assignments for this user. Read-only.
    :type license_assignment_states: list[~users_user.models.MicrosoftGraphLicenseAssignmentState]
    :param mail: The SMTP address for the user, for example, 'jeff@contoso.onmicrosoft.com'. Read-
     Only. Supports $filter.
    :type mail: str
    :param mail_nickname: The mail alias for the user. This property must be specified when a user
     is created. Supports $filter.
    :type mail_nickname: str
    :param mobile_phone: The primary cellular telephone number for the user.
    :type mobile_phone: str
    :param on_premises_distinguished_name: Contains the on-premises Active Directory distinguished
     name or DN. The property is only populated for customers who are synchronizing their on-
     premises directory to Azure Active Directory via Azure AD Connect. Read-only.
    :type on_premises_distinguished_name: str
    :param on_premises_extension_attributes: onPremisesExtensionAttributes.
    :type on_premises_extension_attributes:
     ~users_user.models.MicrosoftGraphOnPremisesExtensionAttributes
    :param on_premises_immutable_id: This property is used to associate an on-premises Active
     Directory user account to their Azure AD user object. This property must be specified when
     creating a new user account in the Graph if you are using a federated domain for the user’s
     userPrincipalName (UPN) property. Important: The $ and _ characters cannot be used when
     specifying this property. Supports $filter.
    :type on_premises_immutable_id: str
    :param on_premises_last_sync_date_time: Indicates the last time at which the object was synced
     with the on-premises directory; for example: '2013-02-16T03:04:54Z'. The Timestamp type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type on_premises_last_sync_date_time: ~datetime.datetime
    :param on_premises_provisioning_errors: Errors when using Microsoft synchronization product
     during provisioning.
    :type on_premises_provisioning_errors:
     list[~users_user.models.MicrosoftGraphOnPremisesProvisioningError]
    :param on_premises_security_identifier: Contains the on-premises security identifier (SID) for
     the user that was synchronized from on-premises to the cloud. Read-only.
    :type on_premises_security_identifier: str
    :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
     false if this object was originally synced from an on-premises directory but is no longer
     synced; null if this object has never been synced from an on-premises directory (default).
     Read-only.
    :type on_premises_sync_enabled: bool
    :param on_premises_domain_name: Contains the on-premises domainFQDN, also called dnsDomainName
     synchronized from the on-premises directory. The property is only populated for customers who
     are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.
     Read-only.
    :type on_premises_domain_name: str
    :param on_premises_sam_account_name: Contains the on-premises samAccountName synchronized from
     the on-premises directory. The property is only populated for customers who are synchronizing
     their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only.
    :type on_premises_sam_account_name: str
    :param on_premises_user_principal_name: Contains the on-premises userPrincipalName synchronized
     from the on-premises directory. The property is only populated for customers who are
     synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-
     only.
    :type on_premises_user_principal_name: str
    :param other_mails: A list of additional email addresses for the user; for example:
     ['bob@contoso.com', 'Robert@fabrikam.com']. Supports $filter.
    :type other_mails: list[str]
    :param password_policies: Specifies password policies for the user. This value is an
     enumeration with one possible value being 'DisableStrongPassword', which allows weaker
     passwords than the default policy to be specified. 'DisablePasswordExpiration' can also be
     specified. The two may be specified together; for example: 'DisablePasswordExpiration,
     DisableStrongPassword'.
    :type password_policies: str
    :param password_profile: passwordProfile.
    :type password_profile: ~users_user.models.MicrosoftGraphPasswordProfile
    :param office_location: The office location in the user's place of business.
    :type office_location: str
    :param postal_code: The postal code for the user's postal address. The postal code is specific
     to the user's country/region. In the United States of America, this attribute contains the ZIP
     code.
    :type postal_code: str
    :param preferred_data_location: The preferred data location for the user. For more information,
     see OneDrive Online Multi-Geo.
    :type preferred_data_location: str
    :param preferred_language: The preferred language for the user. Should follow ISO 639-1 Code;
     for example 'en-US'.
    :type preferred_language: str
    :param provisioned_plans: The plans that are provisioned for the user. Read-only. Not nullable.
    :type provisioned_plans: list[~users_user.models.MicrosoftGraphProvisionedPlan]
    :param proxy_addresses: For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']
     The any operator is required for filter expressions on multi-valued properties. Read-only, Not
     nullable. Supports $filter.
    :type proxy_addresses: list[str]
    :param refresh_tokens_valid_from_date_time: Any refresh tokens or sessions tokens (session
     cookies) issued before this time are invalid, and applications will get an error when using an
     invalid refresh or sessions token to acquire a delegated access token (to access APIs such as
     Microsoft Graph).  If this happens, the application will need to acquire a new refresh token by
     making a request to the authorize endpoint. Returned only on $select. Read-only.
    :type refresh_tokens_valid_from_date_time: ~datetime.datetime
    :param show_in_address_list: true if the Outlook global address list should contain this user,
     otherwise false. If not set, this will be treated as true. For users invited through the
     invitation manager, this property will be set to false.
    :type show_in_address_list: bool
    :param sign_in_sessions_valid_from_date_time: Any refresh tokens or sessions tokens (session
     cookies) issued before this time are invalid, and applications will get an error when using an
     invalid refresh or sessions token to acquire a delegated access token (to access APIs such as
     Microsoft Graph).  If this happens, the application will need to acquire a new refresh token by
     making a request to the authorize endpoint. Read-only. Use revokeSignInSessions to reset.
    :type sign_in_sessions_valid_from_date_time: ~datetime.datetime
    :param state: The state or province in the user's address. Supports $filter.
    :type state: str
    :param street_address: The street address of the user's place of business.
    :type street_address: str
    :param surname: The user's surname (family name or last name). Supports $filter.
    :type surname: str
    :param usage_location: A two letter country code (ISO standard 3166). Required for users that
     will be assigned licenses due to legal requirement to check for availability of services in
     countries.  Examples include: 'US', 'JP', and 'GB'. Not nullable. Supports $filter.
    :type usage_location: str
    :param user_principal_name: The user principal name (UPN) of the user. The UPN is an Internet-
     style login name for the user based on the Internet standard RFC 822. By convention, this
     should map to the user's email name. The general format is alias@domain, where domain must be
     present in the tenant’s collection of verified domains. This property is required when a user
     is created. The verified domains for the tenant can be accessed from the verifiedDomains
     property of organization. Supports $filter and $orderby.
    :type user_principal_name: str
    :param external_user_state:
    :type external_user_state: str
    :param external_user_state_change_date_time:
    :type external_user_state_change_date_time: str
    :param user_type: A string value that can be used to classify user types in your directory,
     such as 'Member' and 'Guest'. Supports $filter.
    :type user_type: str
    :param mailbox_settings: mailboxSettings.
    :type mailbox_settings: ~users_user.models.MicrosoftGraphMailboxSettings
    :param identity_user_risk: identityUserRisk.
    :type identity_user_risk: ~users_user.models.MicrosoftGraphIdentityUserRisk
    :param device_enrollment_limit: The limit on the maximum number of devices that the user is
     permitted to enroll. Allowed values are 5 or 1000.
    :type device_enrollment_limit: int
    :param about_me: A freeform text entry field for the user to describe themselves.
    :type about_me: str
    :param birthday: The birthday of the user. The Timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type birthday: ~datetime.datetime
    :param hire_date: The hire date of the user. The Timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type hire_date: ~datetime.datetime
    :param interests: A list for the user to describe their interests.
    :type interests: list[str]
    :param my_site: The URL for the user's personal site.
    :type my_site: str
    :param past_projects: A list for the user to enumerate their past projects.
    :type past_projects: list[str]
    :param preferred_name: The preferred name for the user.
    :type preferred_name: str
    :param responsibilities: A list for the user to enumerate their responsibilities.
    :type responsibilities: list[str]
    :param schools: A list for the user to enumerate the schools they have attended.
    :type schools: list[str]
    :param skills: A list for the user to enumerate their skills.
    :type skills: list[str]
    :param analytics: userAnalytics.
    :type analytics: ~users_user.models.MicrosoftGraphUserAnalytics
    :param information_protection: informationProtection.
    :type information_protection: ~users_user.models.MicrosoftGraphInformationProtection
    :param app_role_assignments:
    :type app_role_assignments: list[~users_user.models.MicrosoftGraphAppRoleAssignment]
    :param created_objects: Directory objects that were created by the user. Read-only. Nullable.
    :type created_objects: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param direct_reports: The users and contacts that report to the user. (The users and contacts
     that have their manager property set to this user.) Read-only. Nullable.
    :type direct_reports: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param license_details: A collection of this user's license details. Read-only.
    :type license_details: list[~users_user.models.MicrosoftGraphLicenseDetails]
    :param manager: Represents an Azure Active Directory object. The directoryObject type is the
     base type for many other directory entity types.
    :type manager: ~users_user.models.MicrosoftGraphDirectoryObject
    :param member_of: The groups and directory roles that the user is a member of. Read-only.
     Nullable.
    :type member_of: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param owned_devices: Devices that are owned by the user. Read-only. Nullable.
    :type owned_devices: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param owned_objects: Directory objects that are owned by the user. Read-only. Nullable.
    :type owned_objects: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param registered_devices: Devices that are registered for the user. Read-only. Nullable.
    :type registered_devices: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param scoped_role_member_of:
    :type scoped_role_member_of: list[~users_user.models.MicrosoftGraphScopedRoleMembership]
    :param transitive_member_of:
    :type transitive_member_of: list[~users_user.models.MicrosoftGraphDirectoryObject]
    :param outlook: outlookUser.
    :type outlook: ~users_user.models.MicrosoftGraphOutlookUser
    :param messages: The messages in a mailbox or folder. Read-only. Nullable.
    :type messages: list[~users_user.models.MicrosoftGraphMessage]
    :param joined_groups:
    :type joined_groups: list[~users_user.models.MicrosoftGraphGroup]
    :param mail_folders: The user's mail folders. Read-only. Nullable.
    :type mail_folders: list[~users_user.models.MicrosoftGraphMailFolder]
    :param calendar: calendar.
    :type calendar: ~users_user.models.MicrosoftGraphCalendar
    :param calendars: The user's calendars. Read-only. Nullable.
    :type calendars: list[~users_user.models.MicrosoftGraphCalendar]
    :param calendar_groups: The user's calendar groups. Read-only. Nullable.
    :type calendar_groups: list[~users_user.models.MicrosoftGraphCalendarGroup]
    :param calendar_view: The calendar view for the calendar. Read-only. Nullable.
    :type calendar_view: list[~users_user.models.MicrosoftGraphEvent]
    :param events: The user's events. Default is to show Events under the Default Calendar. Read-
     only. Nullable.
    :type events: list[~users_user.models.MicrosoftGraphEvent]
    :param people: People that are relevant to the user. Read-only. Nullable.
    :type people: list[~users_user.models.MicrosoftGraphPerson]
    :param contacts: The user's contacts. Read-only. Nullable.
    :type contacts: list[~users_user.models.MicrosoftGraphContact]
    :param contact_folders: The user's contacts folders. Read-only. Nullable.
    :type contact_folders: list[~users_user.models.MicrosoftGraphContactFolder]
    :param inference_classification: inferenceClassification.
    :type inference_classification: ~users_user.models.MicrosoftGraphInferenceClassification
    :param photo: profilePhoto.
    :type photo: ~users_user.models.MicrosoftGraphProfilePhoto
    :param photos:
    :type photos: list[~users_user.models.MicrosoftGraphProfilePhoto]
    :param drive: drive.
    :type drive: ~users_user.models.MicrosoftGraphDrive
    :param drives: A collection of drives available for this user. Read-only.
    :type drives: list[~users_user.models.MicrosoftGraphDrive]
    :param followed_sites:
    :type followed_sites: list[~users_user.models.MicrosoftGraphSite]
    :param extensions: The collection of open extensions defined for the user. Read-only. Nullable.
    :type extensions: list[~users_user.models.MicrosoftGraphEntity]
    :param approvals:
    :type approvals: list[~users_user.models.MicrosoftGraphApproval]
    :param app_consent_requests_for_approval:
    :type app_consent_requests_for_approval:
     list[~users_user.models.MicrosoftGraphAppConsentRequest]
    :param agreement_acceptances:
    :type agreement_acceptances: list[~users_user.models.MicrosoftGraphAgreementAcceptance]
    :param device_enrollment_configurations:
    :type device_enrollment_configurations:
     list[~users_user.models.MicrosoftGraphDeviceEnrollmentConfiguration]
    :param managed_devices: The managed devices associated with the user.
    :type managed_devices: list[~users_user.models.MicrosoftGraphManagedDevice]
    :param managed_app_registrations: Zero or more managed app registrations that belong to the
     user.
    :type managed_app_registrations: list[~users_user.models.MicrosoftGraphManagedAppRegistration]
    :param windows_information_protection_device_registrations: Zero or more WIP device
     registrations that belong to the user.
    :type windows_information_protection_device_registrations:
     list[~users_user.models.MicrosoftGraphWindowsInformationProtectionDeviceRegistration]
    :param device_management_troubleshooting_events: The list of troubleshooting events for this
     user.
    :type device_management_troubleshooting_events:
     list[~users_user.models.MicrosoftGraphDeviceManagementTroubleshootingEvent]
    :param mobile_app_intent_and_states: The list of troubleshooting events for this user.
    :type mobile_app_intent_and_states:
     list[~users_user.models.MicrosoftGraphMobileAppIntentAndState]
    :param mobile_app_troubleshooting_events: The list of mobile app troubleshooting events for
     this user.
    :type mobile_app_troubleshooting_events:
     list[~users_user.models.MicrosoftGraphMobileAppTroubleshootingEvent]
    :param notifications:
    :type notifications: list[~users_user.models.MicrosoftGraphNotification]
    :param planner: plannerUser.
    :type planner: ~users_user.models.MicrosoftGraphPlannerUser
    :param insights: officeGraphInsights.
    :type insights: ~users_user.models.MicrosoftGraphOfficeGraphInsights
    :param settings: userSettings.
    :type settings: ~users_user.models.MicrosoftGraphUserSettings
    :param onenote: onenote.
    :type onenote: ~users_user.models.MicrosoftGraphOnenote
    :param profile: profile.
    :type profile: ~users_user.models.MicrosoftGraphProfile
    :param activities: The user's activities across devices. Read-only. Nullable.
    :type activities: list[~users_user.models.MicrosoftGraphUserActivity]
    :param devices:
    :type devices: list[~users_user.models.MicrosoftGraphDevice]
    :param online_meetings:
    :type online_meetings: list[~users_user.models.MicrosoftGraphOnlineMeeting]
    :param presence: presence.
    :type presence: ~users_user.models.MicrosoftGraphPresence
    :param authentication: authentication.
    :type authentication: ~users_user.models.MicrosoftGraphAuthentication
    :param chats:
    :type chats: list[~users_user.models.MicrosoftGraphChat]
    :param joined_teams:
    :type joined_teams: list[~users_user.models.MicrosoftGraphTeam]
    :param teamwork: userTeamwork.
    :type teamwork: ~users_user.models.MicrosoftGraphUserTeamwork
    """

    _validation = {
        'device_enrollment_limit': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'sign_in_activity': {'key': 'signInActivity', 'type': 'MicrosoftGraphSignInActivity'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'age_group': {'key': 'ageGroup', 'type': 'str'},
        'assigned_licenses': {'key': 'assignedLicenses', 'type': '[MicrosoftGraphAssignedLicense]'},
        'assigned_plans': {'key': 'assignedPlans', 'type': '[MicrosoftGraphAssignedPlan]'},
        'business_phones': {'key': 'businessPhones', 'type': '[str]'},
        'city': {'key': 'city', 'type': 'str'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'consent_provided_for_minor': {'key': 'consentProvidedForMinor', 'type': 'str'},
        'country': {'key': 'country', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'creation_type': {'key': 'creationType', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'device_keys': {'key': 'deviceKeys', 'type': '[MicrosoftGraphDeviceKey]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'employee_id': {'key': 'employeeId', 'type': 'str'},
        'fax_number': {'key': 'faxNumber', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'identities': {'key': 'identities', 'type': '[MicrosoftGraphObjectIdentity]'},
        'im_addresses': {'key': 'imAddresses', 'type': '[str]'},
        'is_resource_account': {'key': 'isResourceAccount', 'type': 'bool'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'last_password_change_date_time': {'key': 'lastPasswordChangeDateTime', 'type': 'iso-8601'},
        'legal_age_group_classification': {'key': 'legalAgeGroupClassification', 'type': 'str'},
        'license_assignment_states': {'key': 'licenseAssignmentStates', 'type': '[MicrosoftGraphLicenseAssignmentState]'},
        'mail': {'key': 'mail', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'mobile_phone': {'key': 'mobilePhone', 'type': 'str'},
        'on_premises_distinguished_name': {'key': 'onPremisesDistinguishedName', 'type': 'str'},
        'on_premises_extension_attributes': {'key': 'onPremisesExtensionAttributes', 'type': 'MicrosoftGraphOnPremisesExtensionAttributes'},
        'on_premises_immutable_id': {'key': 'onPremisesImmutableId', 'type': 'str'},
        'on_premises_last_sync_date_time': {'key': 'onPremisesLastSyncDateTime', 'type': 'iso-8601'},
        'on_premises_provisioning_errors': {'key': 'onPremisesProvisioningErrors', 'type': '[MicrosoftGraphOnPremisesProvisioningError]'},
        'on_premises_security_identifier': {'key': 'onPremisesSecurityIdentifier', 'type': 'str'},
        'on_premises_sync_enabled': {'key': 'onPremisesSyncEnabled', 'type': 'bool'},
        'on_premises_domain_name': {'key': 'onPremisesDomainName', 'type': 'str'},
        'on_premises_sam_account_name': {'key': 'onPremisesSamAccountName', 'type': 'str'},
        'on_premises_user_principal_name': {'key': 'onPremisesUserPrincipalName', 'type': 'str'},
        'other_mails': {'key': 'otherMails', 'type': '[str]'},
        'password_policies': {'key': 'passwordPolicies', 'type': 'str'},
        'password_profile': {'key': 'passwordProfile', 'type': 'MicrosoftGraphPasswordProfile'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'preferred_data_location': {'key': 'preferredDataLocation', 'type': 'str'},
        'preferred_language': {'key': 'preferredLanguage', 'type': 'str'},
        'provisioned_plans': {'key': 'provisionedPlans', 'type': '[MicrosoftGraphProvisionedPlan]'},
        'proxy_addresses': {'key': 'proxyAddresses', 'type': '[str]'},
        'refresh_tokens_valid_from_date_time': {'key': 'refreshTokensValidFromDateTime', 'type': 'iso-8601'},
        'show_in_address_list': {'key': 'showInAddressList', 'type': 'bool'},
        'sign_in_sessions_valid_from_date_time': {'key': 'signInSessionsValidFromDateTime', 'type': 'iso-8601'},
        'state': {'key': 'state', 'type': 'str'},
        'street_address': {'key': 'streetAddress', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'usage_location': {'key': 'usageLocation', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'external_user_state': {'key': 'externalUserState', 'type': 'str'},
        'external_user_state_change_date_time': {'key': 'externalUserStateChangeDateTime', 'type': 'str'},
        'user_type': {'key': 'userType', 'type': 'str'},
        'mailbox_settings': {'key': 'mailboxSettings', 'type': 'MicrosoftGraphMailboxSettings'},
        'identity_user_risk': {'key': 'identityUserRisk', 'type': 'MicrosoftGraphIdentityUserRisk'},
        'device_enrollment_limit': {'key': 'deviceEnrollmentLimit', 'type': 'int'},
        'about_me': {'key': 'aboutMe', 'type': 'str'},
        'birthday': {'key': 'birthday', 'type': 'iso-8601'},
        'hire_date': {'key': 'hireDate', 'type': 'iso-8601'},
        'interests': {'key': 'interests', 'type': '[str]'},
        'my_site': {'key': 'mySite', 'type': 'str'},
        'past_projects': {'key': 'pastProjects', 'type': '[str]'},
        'preferred_name': {'key': 'preferredName', 'type': 'str'},
        'responsibilities': {'key': 'responsibilities', 'type': '[str]'},
        'schools': {'key': 'schools', 'type': '[str]'},
        'skills': {'key': 'skills', 'type': '[str]'},
        'analytics': {'key': 'analytics', 'type': 'MicrosoftGraphUserAnalytics'},
        'information_protection': {'key': 'informationProtection', 'type': 'MicrosoftGraphInformationProtection'},
        'app_role_assignments': {'key': 'appRoleAssignments', 'type': '[MicrosoftGraphAppRoleAssignment]'},
        'created_objects': {'key': 'createdObjects', 'type': '[MicrosoftGraphDirectoryObject]'},
        'direct_reports': {'key': 'directReports', 'type': '[MicrosoftGraphDirectoryObject]'},
        'license_details': {'key': 'licenseDetails', 'type': '[MicrosoftGraphLicenseDetails]'},
        'manager': {'key': 'manager', 'type': 'MicrosoftGraphDirectoryObject'},
        'member_of': {'key': 'memberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'owned_devices': {'key': 'ownedDevices', 'type': '[MicrosoftGraphDirectoryObject]'},
        'owned_objects': {'key': 'ownedObjects', 'type': '[MicrosoftGraphDirectoryObject]'},
        'registered_devices': {'key': 'registeredDevices', 'type': '[MicrosoftGraphDirectoryObject]'},
        'scoped_role_member_of': {'key': 'scopedRoleMemberOf', 'type': '[MicrosoftGraphScopedRoleMembership]'},
        'transitive_member_of': {'key': 'transitiveMemberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'outlook': {'key': 'outlook', 'type': 'MicrosoftGraphOutlookUser'},
        'messages': {'key': 'messages', 'type': '[MicrosoftGraphMessage]'},
        'joined_groups': {'key': 'joinedGroups', 'type': '[MicrosoftGraphGroup]'},
        'mail_folders': {'key': 'mailFolders', 'type': '[MicrosoftGraphMailFolder]'},
        'calendar': {'key': 'calendar', 'type': 'MicrosoftGraphCalendar'},
        'calendars': {'key': 'calendars', 'type': '[MicrosoftGraphCalendar]'},
        'calendar_groups': {'key': 'calendarGroups', 'type': '[MicrosoftGraphCalendarGroup]'},
        'calendar_view': {'key': 'calendarView', 'type': '[MicrosoftGraphEvent]'},
        'events': {'key': 'events', 'type': '[MicrosoftGraphEvent]'},
        'people': {'key': 'people', 'type': '[MicrosoftGraphPerson]'},
        'contacts': {'key': 'contacts', 'type': '[MicrosoftGraphContact]'},
        'contact_folders': {'key': 'contactFolders', 'type': '[MicrosoftGraphContactFolder]'},
        'inference_classification': {'key': 'inferenceClassification', 'type': 'MicrosoftGraphInferenceClassification'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphProfilePhoto'},
        'photos': {'key': 'photos', 'type': '[MicrosoftGraphProfilePhoto]'},
        'drive': {'key': 'drive', 'type': 'MicrosoftGraphDrive'},
        'drives': {'key': 'drives', 'type': '[MicrosoftGraphDrive]'},
        'followed_sites': {'key': 'followedSites', 'type': '[MicrosoftGraphSite]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphEntity]'},
        'approvals': {'key': 'approvals', 'type': '[MicrosoftGraphApproval]'},
        'app_consent_requests_for_approval': {'key': 'appConsentRequestsForApproval', 'type': '[MicrosoftGraphAppConsentRequest]'},
        'agreement_acceptances': {'key': 'agreementAcceptances', 'type': '[MicrosoftGraphAgreementAcceptance]'},
        'device_enrollment_configurations': {'key': 'deviceEnrollmentConfigurations', 'type': '[MicrosoftGraphDeviceEnrollmentConfiguration]'},
        'managed_devices': {'key': 'managedDevices', 'type': '[MicrosoftGraphManagedDevice]'},
        'managed_app_registrations': {'key': 'managedAppRegistrations', 'type': '[MicrosoftGraphManagedAppRegistration]'},
        'windows_information_protection_device_registrations': {'key': 'windowsInformationProtectionDeviceRegistrations', 'type': '[MicrosoftGraphWindowsInformationProtectionDeviceRegistration]'},
        'device_management_troubleshooting_events': {'key': 'deviceManagementTroubleshootingEvents', 'type': '[MicrosoftGraphDeviceManagementTroubleshootingEvent]'},
        'mobile_app_intent_and_states': {'key': 'mobileAppIntentAndStates', 'type': '[MicrosoftGraphMobileAppIntentAndState]'},
        'mobile_app_troubleshooting_events': {'key': 'mobileAppTroubleshootingEvents', 'type': '[MicrosoftGraphMobileAppTroubleshootingEvent]'},
        'notifications': {'key': 'notifications', 'type': '[MicrosoftGraphNotification]'},
        'planner': {'key': 'planner', 'type': 'MicrosoftGraphPlannerUser'},
        'insights': {'key': 'insights', 'type': 'MicrosoftGraphOfficeGraphInsights'},
        'settings': {'key': 'settings', 'type': 'MicrosoftGraphUserSettings'},
        'onenote': {'key': 'onenote', 'type': 'MicrosoftGraphOnenote'},
        'profile': {'key': 'profile', 'type': 'MicrosoftGraphProfile'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphUserActivity]'},
        'devices': {'key': 'devices', 'type': '[MicrosoftGraphDevice]'},
        'online_meetings': {'key': 'onlineMeetings', 'type': '[MicrosoftGraphOnlineMeeting]'},
        'presence': {'key': 'presence', 'type': 'MicrosoftGraphPresence'},
        'authentication': {'key': 'authentication', 'type': 'MicrosoftGraphAuthentication'},
        'chats': {'key': 'chats', 'type': '[MicrosoftGraphChat]'},
        'joined_teams': {'key': 'joinedTeams', 'type': '[MicrosoftGraphTeam]'},
        'teamwork': {'key': 'teamwork', 'type': 'MicrosoftGraphUserTeamwork'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        sign_in_activity: Optional["MicrosoftGraphSignInActivity"] = None,
        account_enabled: Optional[bool] = None,
        age_group: Optional[str] = None,
        assigned_licenses: Optional[List["MicrosoftGraphAssignedLicense"]] = None,
        assigned_plans: Optional[List["MicrosoftGraphAssignedPlan"]] = None,
        business_phones: Optional[List[str]] = None,
        city: Optional[str] = None,
        company_name: Optional[str] = None,
        consent_provided_for_minor: Optional[str] = None,
        country: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        creation_type: Optional[str] = None,
        department: Optional[str] = None,
        device_keys: Optional[List["MicrosoftGraphDeviceKey"]] = None,
        display_name: Optional[str] = None,
        employee_id: Optional[str] = None,
        fax_number: Optional[str] = None,
        given_name: Optional[str] = None,
        identities: Optional[List["MicrosoftGraphObjectIdentity"]] = None,
        im_addresses: Optional[List[str]] = None,
        is_resource_account: Optional[bool] = None,
        job_title: Optional[str] = None,
        last_password_change_date_time: Optional[datetime.datetime] = None,
        legal_age_group_classification: Optional[str] = None,
        license_assignment_states: Optional[List["MicrosoftGraphLicenseAssignmentState"]] = None,
        mail: Optional[str] = None,
        mail_nickname: Optional[str] = None,
        mobile_phone: Optional[str] = None,
        on_premises_distinguished_name: Optional[str] = None,
        on_premises_extension_attributes: Optional["MicrosoftGraphOnPremisesExtensionAttributes"] = None,
        on_premises_immutable_id: Optional[str] = None,
        on_premises_last_sync_date_time: Optional[datetime.datetime] = None,
        on_premises_provisioning_errors: Optional[List["MicrosoftGraphOnPremisesProvisioningError"]] = None,
        on_premises_security_identifier: Optional[str] = None,
        on_premises_sync_enabled: Optional[bool] = None,
        on_premises_domain_name: Optional[str] = None,
        on_premises_sam_account_name: Optional[str] = None,
        on_premises_user_principal_name: Optional[str] = None,
        other_mails: Optional[List[str]] = None,
        password_policies: Optional[str] = None,
        password_profile: Optional["MicrosoftGraphPasswordProfile"] = None,
        office_location: Optional[str] = None,
        postal_code: Optional[str] = None,
        preferred_data_location: Optional[str] = None,
        preferred_language: Optional[str] = None,
        provisioned_plans: Optional[List["MicrosoftGraphProvisionedPlan"]] = None,
        proxy_addresses: Optional[List[str]] = None,
        refresh_tokens_valid_from_date_time: Optional[datetime.datetime] = None,
        show_in_address_list: Optional[bool] = None,
        sign_in_sessions_valid_from_date_time: Optional[datetime.datetime] = None,
        state: Optional[str] = None,
        street_address: Optional[str] = None,
        surname: Optional[str] = None,
        usage_location: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        external_user_state: Optional[str] = None,
        external_user_state_change_date_time: Optional[str] = None,
        user_type: Optional[str] = None,
        mailbox_settings: Optional["MicrosoftGraphMailboxSettings"] = None,
        identity_user_risk: Optional["MicrosoftGraphIdentityUserRisk"] = None,
        device_enrollment_limit: Optional[int] = None,
        about_me: Optional[str] = None,
        birthday: Optional[datetime.datetime] = None,
        hire_date: Optional[datetime.datetime] = None,
        interests: Optional[List[str]] = None,
        my_site: Optional[str] = None,
        past_projects: Optional[List[str]] = None,
        preferred_name: Optional[str] = None,
        responsibilities: Optional[List[str]] = None,
        schools: Optional[List[str]] = None,
        skills: Optional[List[str]] = None,
        analytics: Optional["MicrosoftGraphUserAnalytics"] = None,
        information_protection: Optional["MicrosoftGraphInformationProtection"] = None,
        app_role_assignments: Optional[List["MicrosoftGraphAppRoleAssignment"]] = None,
        created_objects: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        direct_reports: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        license_details: Optional[List["MicrosoftGraphLicenseDetails"]] = None,
        manager: Optional["MicrosoftGraphDirectoryObject"] = None,
        member_of: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        owned_devices: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        owned_objects: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        registered_devices: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        scoped_role_member_of: Optional[List["MicrosoftGraphScopedRoleMembership"]] = None,
        transitive_member_of: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        outlook: Optional["MicrosoftGraphOutlookUser"] = None,
        messages: Optional[List["MicrosoftGraphMessage"]] = None,
        joined_groups: Optional[List["MicrosoftGraphGroup"]] = None,
        mail_folders: Optional[List["MicrosoftGraphMailFolder"]] = None,
        calendar: Optional["MicrosoftGraphCalendar"] = None,
        calendars: Optional[List["MicrosoftGraphCalendar"]] = None,
        calendar_groups: Optional[List["MicrosoftGraphCalendarGroup"]] = None,
        calendar_view: Optional[List["MicrosoftGraphEvent"]] = None,
        events: Optional[List["MicrosoftGraphEvent"]] = None,
        people: Optional[List["MicrosoftGraphPerson"]] = None,
        contacts: Optional[List["MicrosoftGraphContact"]] = None,
        contact_folders: Optional[List["MicrosoftGraphContactFolder"]] = None,
        inference_classification: Optional["MicrosoftGraphInferenceClassification"] = None,
        photo: Optional["MicrosoftGraphProfilePhoto"] = None,
        photos: Optional[List["MicrosoftGraphProfilePhoto"]] = None,
        drive: Optional["MicrosoftGraphDrive"] = None,
        drives: Optional[List["MicrosoftGraphDrive"]] = None,
        followed_sites: Optional[List["MicrosoftGraphSite"]] = None,
        extensions: Optional[List["MicrosoftGraphEntity"]] = None,
        approvals: Optional[List["MicrosoftGraphApproval"]] = None,
        app_consent_requests_for_approval: Optional[List["MicrosoftGraphAppConsentRequest"]] = None,
        agreement_acceptances: Optional[List["MicrosoftGraphAgreementAcceptance"]] = None,
        device_enrollment_configurations: Optional[List["MicrosoftGraphDeviceEnrollmentConfiguration"]] = None,
        managed_devices: Optional[List["MicrosoftGraphManagedDevice"]] = None,
        managed_app_registrations: Optional[List["MicrosoftGraphManagedAppRegistration"]] = None,
        windows_information_protection_device_registrations: Optional[List["MicrosoftGraphWindowsInformationProtectionDeviceRegistration"]] = None,
        device_management_troubleshooting_events: Optional[List["MicrosoftGraphDeviceManagementTroubleshootingEvent"]] = None,
        mobile_app_intent_and_states: Optional[List["MicrosoftGraphMobileAppIntentAndState"]] = None,
        mobile_app_troubleshooting_events: Optional[List["MicrosoftGraphMobileAppTroubleshootingEvent"]] = None,
        notifications: Optional[List["MicrosoftGraphNotification"]] = None,
        planner: Optional["MicrosoftGraphPlannerUser"] = None,
        insights: Optional["MicrosoftGraphOfficeGraphInsights"] = None,
        settings: Optional["MicrosoftGraphUserSettings"] = None,
        onenote: Optional["MicrosoftGraphOnenote"] = None,
        profile: Optional["MicrosoftGraphProfile"] = None,
        activities: Optional[List["MicrosoftGraphUserActivity"]] = None,
        devices: Optional[List["MicrosoftGraphDevice"]] = None,
        online_meetings: Optional[List["MicrosoftGraphOnlineMeeting"]] = None,
        presence: Optional["MicrosoftGraphPresence"] = None,
        authentication: Optional["MicrosoftGraphAuthentication"] = None,
        chats: Optional[List["MicrosoftGraphChat"]] = None,
        joined_teams: Optional[List["MicrosoftGraphTeam"]] = None,
        teamwork: Optional["MicrosoftGraphUserTeamwork"] = None,
        **kwargs
    ):
        super(MicrosoftGraphUser, self).__init__(id=id, deleted_date_time=deleted_date_time, **kwargs)
        self.sign_in_activity = sign_in_activity
        self.account_enabled = account_enabled
        self.age_group = age_group
        self.assigned_licenses = assigned_licenses
        self.assigned_plans = assigned_plans
        self.business_phones = business_phones
        self.city = city
        self.company_name = company_name
        self.consent_provided_for_minor = consent_provided_for_minor
        self.country = country
        self.created_date_time = created_date_time
        self.creation_type = creation_type
        self.department = department
        self.device_keys = device_keys
        self.display_name = display_name
        self.employee_id = employee_id
        self.fax_number = fax_number
        self.given_name = given_name
        self.identities = identities
        self.im_addresses = im_addresses
        self.is_resource_account = is_resource_account
        self.job_title = job_title
        self.last_password_change_date_time = last_password_change_date_time
        self.legal_age_group_classification = legal_age_group_classification
        self.license_assignment_states = license_assignment_states
        self.mail = mail
        self.mail_nickname = mail_nickname
        self.mobile_phone = mobile_phone
        self.on_premises_distinguished_name = on_premises_distinguished_name
        self.on_premises_extension_attributes = on_premises_extension_attributes
        self.on_premises_immutable_id = on_premises_immutable_id
        self.on_premises_last_sync_date_time = on_premises_last_sync_date_time
        self.on_premises_provisioning_errors = on_premises_provisioning_errors
        self.on_premises_security_identifier = on_premises_security_identifier
        self.on_premises_sync_enabled = on_premises_sync_enabled
        self.on_premises_domain_name = on_premises_domain_name
        self.on_premises_sam_account_name = on_premises_sam_account_name
        self.on_premises_user_principal_name = on_premises_user_principal_name
        self.other_mails = other_mails
        self.password_policies = password_policies
        self.password_profile = password_profile
        self.office_location = office_location
        self.postal_code = postal_code
        self.preferred_data_location = preferred_data_location
        self.preferred_language = preferred_language
        self.provisioned_plans = provisioned_plans
        self.proxy_addresses = proxy_addresses
        self.refresh_tokens_valid_from_date_time = refresh_tokens_valid_from_date_time
        self.show_in_address_list = show_in_address_list
        self.sign_in_sessions_valid_from_date_time = sign_in_sessions_valid_from_date_time
        self.state = state
        self.street_address = street_address
        self.surname = surname
        self.usage_location = usage_location
        self.user_principal_name = user_principal_name
        self.external_user_state = external_user_state
        self.external_user_state_change_date_time = external_user_state_change_date_time
        self.user_type = user_type
        self.mailbox_settings = mailbox_settings
        self.identity_user_risk = identity_user_risk
        self.device_enrollment_limit = device_enrollment_limit
        self.about_me = about_me
        self.birthday = birthday
        self.hire_date = hire_date
        self.interests = interests
        self.my_site = my_site
        self.past_projects = past_projects
        self.preferred_name = preferred_name
        self.responsibilities = responsibilities
        self.schools = schools
        self.skills = skills
        self.analytics = analytics
        self.information_protection = information_protection
        self.app_role_assignments = app_role_assignments
        self.created_objects = created_objects
        self.direct_reports = direct_reports
        self.license_details = license_details
        self.manager = manager
        self.member_of = member_of
        self.owned_devices = owned_devices
        self.owned_objects = owned_objects
        self.registered_devices = registered_devices
        self.scoped_role_member_of = scoped_role_member_of
        self.transitive_member_of = transitive_member_of
        self.outlook = outlook
        self.messages = messages
        self.joined_groups = joined_groups
        self.mail_folders = mail_folders
        self.calendar = calendar
        self.calendars = calendars
        self.calendar_groups = calendar_groups
        self.calendar_view = calendar_view
        self.events = events
        self.people = people
        self.contacts = contacts
        self.contact_folders = contact_folders
        self.inference_classification = inference_classification
        self.photo = photo
        self.photos = photos
        self.drive = drive
        self.drives = drives
        self.followed_sites = followed_sites
        self.extensions = extensions
        self.approvals = approvals
        self.app_consent_requests_for_approval = app_consent_requests_for_approval
        self.agreement_acceptances = agreement_acceptances
        self.device_enrollment_configurations = device_enrollment_configurations
        self.managed_devices = managed_devices
        self.managed_app_registrations = managed_app_registrations
        self.windows_information_protection_device_registrations = windows_information_protection_device_registrations
        self.device_management_troubleshooting_events = device_management_troubleshooting_events
        self.mobile_app_intent_and_states = mobile_app_intent_and_states
        self.mobile_app_troubleshooting_events = mobile_app_troubleshooting_events
        self.notifications = notifications
        self.planner = planner
        self.insights = insights
        self.settings = settings
        self.onenote = onenote
        self.profile = profile
        self.activities = activities
        self.devices = devices
        self.online_meetings = online_meetings
        self.presence = presence
        self.authentication = authentication
        self.chats = chats
        self.joined_teams = joined_teams
        self.teamwork = teamwork


class MicrosoftGraphUserAccountInformation(MicrosoftGraphItemFacet):
    """userAccountInformation.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param age_group:
    :type age_group: str
    :param country_code:
    :type country_code: str
    :param preferred_language_tag: localeInfo.
    :type preferred_language_tag: ~users_user.models.MicrosoftGraphLocaleInfo
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'age_group': {'key': 'ageGroup', 'type': 'str'},
        'country_code': {'key': 'countryCode', 'type': 'str'},
        'preferred_language_tag': {'key': 'preferredLanguageTag', 'type': 'MicrosoftGraphLocaleInfo'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        age_group: Optional[str] = None,
        country_code: Optional[str] = None,
        preferred_language_tag: Optional["MicrosoftGraphLocaleInfo"] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserAccountInformation, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.age_group = age_group
        self.country_code = country_code
        self.preferred_language_tag = preferred_language_tag
        self.user_principal_name = user_principal_name


class MicrosoftGraphUserActivity(MicrosoftGraphEntity):
    """userActivity.

    :param id: Read-only.
    :type id: str
    :param visual_elements: visualInfo.
    :type visual_elements: ~users_user.models.MicrosoftGraphVisualInfo
    :param activity_source_host: Required. URL for the domain representing the cross-platform
     identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or
     configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and
     is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain.
     For example: https://contoso.com or https://myapp.contoso.com but NOT
     https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per
     cross-platform app identity. For example, a separate file and domain is needed for Word vs.
     PowerPoint.
    :type activity_source_host: str
    :param activation_url: Required. URL used to launch the activity in the best native experience
     represented by the appId. Might launch a web-based app if no native app exists.
    :type activation_url: str
    :param app_activity_id: Required. The unique activity ID in the context of the app - supplied
     by caller and immutable thereafter.
    :type app_activity_id: str
    :param app_display_name: Optional. Short text description of the app used to generate the
     activity for use in cases when the app is not installed on the user’s local device.
    :type app_display_name: str
    :param content_url: Optional. Used in the event the content can be rendered outside of a native
     or web-based app experience (for example, a pointer to an item in an RSS feed).
    :type content_url: str
    :param created_date_time: Set by the server. DateTime in UTC when the object was created on the
     server.
    :type created_date_time: ~datetime.datetime
    :param expiration_date_time: Set by the server. DateTime in UTC when the object expired on the
     server.
    :type expiration_date_time: ~datetime.datetime
    :param fallback_url: Optional. URL used to launch the activity in a web-based app, if
     available.
    :type fallback_url: str
    :param last_modified_date_time: Set by the server. DateTime in UTC when the object was modified
     on the server.
    :type last_modified_date_time: ~datetime.datetime
    :param user_timezone: Optional. The timezone in which the user's device used to generate the
     activity was located at activity creation time; values supplied as Olson IDs in order to
     support cross-platform representation.
    :type user_timezone: str
    :param content_info: Any object.
    :type content_info: object
    :param status: status. Possible values include: "active", "updated", "deleted", "ignored",
     "unknownFutureValue".
    :type status: str or ~users_user.models.MicrosoftGraphStatus
    :param history_items: Optional. NavigationProperty/Containment; navigation property to the
     activity's historyItems.
    :type history_items: list[~users_user.models.MicrosoftGraphActivityHistoryItem]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'visual_elements': {'key': 'visualElements', 'type': 'MicrosoftGraphVisualInfo'},
        'activity_source_host': {'key': 'activitySourceHost', 'type': 'str'},
        'activation_url': {'key': 'activationUrl', 'type': 'str'},
        'app_activity_id': {'key': 'appActivityId', 'type': 'str'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'fallback_url': {'key': 'fallbackUrl', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'user_timezone': {'key': 'userTimezone', 'type': 'str'},
        'content_info': {'key': 'contentInfo', 'type': 'object'},
        'status': {'key': 'status', 'type': 'str'},
        'history_items': {'key': 'historyItems', 'type': '[MicrosoftGraphActivityHistoryItem]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        visual_elements: Optional["MicrosoftGraphVisualInfo"] = None,
        activity_source_host: Optional[str] = None,
        activation_url: Optional[str] = None,
        app_activity_id: Optional[str] = None,
        app_display_name: Optional[str] = None,
        content_url: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        fallback_url: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        user_timezone: Optional[str] = None,
        content_info: Optional[object] = None,
        status: Optional[Union[str, "MicrosoftGraphStatus"]] = None,
        history_items: Optional[List["MicrosoftGraphActivityHistoryItem"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserActivity, self).__init__(id=id, **kwargs)
        self.visual_elements = visual_elements
        self.activity_source_host = activity_source_host
        self.activation_url = activation_url
        self.app_activity_id = app_activity_id
        self.app_display_name = app_display_name
        self.content_url = content_url
        self.created_date_time = created_date_time
        self.expiration_date_time = expiration_date_time
        self.fallback_url = fallback_url
        self.last_modified_date_time = last_modified_date_time
        self.user_timezone = user_timezone
        self.content_info = content_info
        self.status = status
        self.history_items = history_items


class MicrosoftGraphUserAnalytics(MicrosoftGraphEntity):
    """userAnalytics.

    :param id: Read-only.
    :type id: str
    :param settings: settings.
    :type settings: ~users_user.models.MicrosoftGraphSettings
    :param activity_statistics:
    :type activity_statistics: list[~users_user.models.MicrosoftGraphActivityStatistics]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'settings': {'key': 'settings', 'type': 'MicrosoftGraphSettings'},
        'activity_statistics': {'key': 'activityStatistics', 'type': '[MicrosoftGraphActivityStatistics]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        settings: Optional["MicrosoftGraphSettings"] = None,
        activity_statistics: Optional[List["MicrosoftGraphActivityStatistics"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserAnalytics, self).__init__(id=id, **kwargs)
        self.settings = settings
        self.activity_statistics = activity_statistics


class MicrosoftGraphUserConfiguration(MicrosoftGraphEntity):
    """userConfiguration.

    :param id: Read-only.
    :type id: str
    :param binary_data:
    :type binary_data: bytes
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'binary_data': {'key': 'binaryData', 'type': 'base64'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        binary_data: Optional[bytes] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserConfiguration, self).__init__(id=id, **kwargs)
        self.binary_data = binary_data


class MicrosoftGraphUserConsentRequest(MicrosoftGraphRequest):
    """userConsentRequest.

    :param id: Read-only.
    :type id: str
    :param approval: approval.
    :type approval: ~users_user.models.MicrosoftGraphApproval
    :param reason:
    :type reason: str
    :param created_by: userIdentity.
    :type created_by: ~users_user.models.MicrosoftGraphUserIdentity
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'approval': {'key': 'approval', 'type': 'MicrosoftGraphApproval'},
        'reason': {'key': 'reason', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphUserIdentity'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        approval: Optional["MicrosoftGraphApproval"] = None,
        reason: Optional[str] = None,
        created_by: Optional["MicrosoftGraphUserIdentity"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserConsentRequest, self).__init__(id=id, approval=approval, **kwargs)
        self.reason = reason
        self.created_by = created_by
        self.created_date_time = created_date_time


class MicrosoftGraphUserIdentity(MicrosoftGraphIdentity):
    """userIdentity.

    :param id: Unique identifier for the identity.
    :type id: str
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param ip_address: Indicates the client IP address used by user performing the activity (audit
     log only).
    :type ip_address: str
    :param user_principal_name: The userPrincipalName attribute of the user.
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        ip_address: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserIdentity, self).__init__(id=id, display_name=display_name, **kwargs)
        self.ip_address = ip_address
        self.user_principal_name = user_principal_name


class MicrosoftGraphUserSettings(MicrosoftGraphEntity):
    """userSettings.

    :param id: Read-only.
    :type id: str
    :param contribution_to_content_discovery_disabled:
    :type contribution_to_content_discovery_disabled: bool
    :param contribution_to_content_discovery_as_organization_disabled:
    :type contribution_to_content_discovery_as_organization_disabled: bool
    :param shift_preferences: shiftPreferences.
    :type shift_preferences: ~users_user.models.MicrosoftGraphShiftPreferences
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'contribution_to_content_discovery_disabled': {'key': 'contributionToContentDiscoveryDisabled', 'type': 'bool'},
        'contribution_to_content_discovery_as_organization_disabled': {'key': 'contributionToContentDiscoveryAsOrganizationDisabled', 'type': 'bool'},
        'shift_preferences': {'key': 'shiftPreferences', 'type': 'MicrosoftGraphShiftPreferences'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        contribution_to_content_discovery_disabled: Optional[bool] = None,
        contribution_to_content_discovery_as_organization_disabled: Optional[bool] = None,
        shift_preferences: Optional["MicrosoftGraphShiftPreferences"] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserSettings, self).__init__(id=id, **kwargs)
        self.contribution_to_content_discovery_disabled = contribution_to_content_discovery_disabled
        self.contribution_to_content_discovery_as_organization_disabled = contribution_to_content_discovery_as_organization_disabled
        self.shift_preferences = shift_preferences


class MicrosoftGraphUserTeamwork(MicrosoftGraphEntity):
    """userTeamwork.

    :param id: Read-only.
    :type id: str
    :param installed_apps:
    :type installed_apps: list[~users_user.models.MicrosoftGraphTeamsAppInstallation]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'installed_apps': {'key': 'installedApps', 'type': '[MicrosoftGraphTeamsAppInstallation]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        installed_apps: Optional[List["MicrosoftGraphTeamsAppInstallation"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserTeamwork, self).__init__(id=id, **kwargs)
        self.installed_apps = installed_apps


class MicrosoftGraphVersionAction(msrest.serialization.Model):
    """versionAction.

    :param new_version: The name of the new version that was created by this action.
    :type new_version: str
    """

    _attribute_map = {
        'new_version': {'key': 'newVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        new_version: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphVersionAction, self).__init__(**kwargs)
        self.new_version = new_version


class MicrosoftGraphVideo(msrest.serialization.Model):
    """video.

    :param audio_bits_per_sample: Number of audio bits per sample.
    :type audio_bits_per_sample: int
    :param audio_channels: Number of audio channels.
    :type audio_channels: int
    :param audio_format: Name of the audio format (AAC, MP3, etc.).
    :type audio_format: str
    :param audio_samples_per_second: Number of audio samples per second.
    :type audio_samples_per_second: int
    :param bitrate: Bit rate of the video in bits per second.
    :type bitrate: int
    :param duration: Duration of the file in milliseconds.
    :type duration: long
    :param four_cc: 'Four character code' name of the video format.
    :type four_cc: str
    :param frame_rate: Frame rate of the video.
    :type frame_rate: float
    :param height: Height of the video, in pixels.
    :type height: int
    :param width: Width of the video, in pixels.
    :type width: int
    """

    _validation = {
        'audio_bits_per_sample': {'maximum': 2147483647, 'minimum': -2147483648},
        'audio_channels': {'maximum': 2147483647, 'minimum': -2147483648},
        'audio_samples_per_second': {'maximum': 2147483647, 'minimum': -2147483648},
        'bitrate': {'maximum': 2147483647, 'minimum': -2147483648},
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'audio_bits_per_sample': {'key': 'audioBitsPerSample', 'type': 'int'},
        'audio_channels': {'key': 'audioChannels', 'type': 'int'},
        'audio_format': {'key': 'audioFormat', 'type': 'str'},
        'audio_samples_per_second': {'key': 'audioSamplesPerSecond', 'type': 'int'},
        'bitrate': {'key': 'bitrate', 'type': 'int'},
        'duration': {'key': 'duration', 'type': 'long'},
        'four_cc': {'key': 'fourCC', 'type': 'str'},
        'frame_rate': {'key': 'frameRate', 'type': 'float'},
        'height': {'key': 'height', 'type': 'int'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        audio_bits_per_sample: Optional[int] = None,
        audio_channels: Optional[int] = None,
        audio_format: Optional[str] = None,
        audio_samples_per_second: Optional[int] = None,
        bitrate: Optional[int] = None,
        duration: Optional[int] = None,
        four_cc: Optional[str] = None,
        frame_rate: Optional[float] = None,
        height: Optional[int] = None,
        width: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphVideo, self).__init__(**kwargs)
        self.audio_bits_per_sample = audio_bits_per_sample
        self.audio_channels = audio_channels
        self.audio_format = audio_format
        self.audio_samples_per_second = audio_samples_per_second
        self.bitrate = bitrate
        self.duration = duration
        self.four_cc = four_cc
        self.frame_rate = frame_rate
        self.height = height
        self.width = width


class MicrosoftGraphVisualInfo(msrest.serialization.Model):
    """visualInfo.

    :param attribution: imageInfo.
    :type attribution: ~users_user.models.MicrosoftGraphImageInfo
    :param background_color: Optional. Background color used to render the activity in the UI -
     brand color for the application source of the activity. Must be a valid hex color.
    :type background_color: str
    :param description: Optional. Longer text description of the user's unique activity (example:
     document name, first sentence, and/or metadata).
    :type description: str
    :param display_text: Required. Short text description of the user's unique activity (for
     example, document name in cases where an activity refers to document creation).
    :type display_text: str
    :param content: Any object.
    :type content: object
    """

    _attribute_map = {
        'attribution': {'key': 'attribution', 'type': 'MicrosoftGraphImageInfo'},
        'background_color': {'key': 'backgroundColor', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'display_text': {'key': 'displayText', 'type': 'str'},
        'content': {'key': 'content', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        attribution: Optional["MicrosoftGraphImageInfo"] = None,
        background_color: Optional[str] = None,
        description: Optional[str] = None,
        display_text: Optional[str] = None,
        content: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftGraphVisualInfo, self).__init__(**kwargs)
        self.attribution = attribution
        self.background_color = background_color
        self.description = description
        self.display_text = display_text
        self.content = content


class MicrosoftGraphVisualProperties(msrest.serialization.Model):
    """visualProperties.

    :param title:
    :type title: str
    :param body:
    :type body: str
    """

    _attribute_map = {
        'title': {'key': 'title', 'type': 'str'},
        'body': {'key': 'body', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        title: Optional[str] = None,
        body: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphVisualProperties, self).__init__(**kwargs)
        self.title = title
        self.body = body


class MicrosoftGraphWebAccount(MicrosoftGraphItemFacet):
    """webAccount.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param description:
    :type description: str
    :param user_id:
    :type user_id: str
    :param service: serviceInformation.
    :type service: ~users_user.models.MicrosoftGraphServiceInformation
    :param status_message:
    :type status_message: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'description': {'key': 'description', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'service': {'key': 'service', 'type': 'MicrosoftGraphServiceInformation'},
        'status_message': {'key': 'statusMessage', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        description: Optional[str] = None,
        user_id: Optional[str] = None,
        service: Optional["MicrosoftGraphServiceInformation"] = None,
        status_message: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWebAccount, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.description = description
        self.user_id = user_id
        self.service = service
        self.status_message = status_message
        self.web_url = web_url


class MicrosoftGraphWebPart(msrest.serialization.Model):
    """webPart.

    :param type:
    :type type: str
    :param data: Any object.
    :type data: object
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'data': {'key': 'data', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        data: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftGraphWebPart, self).__init__(**kwargs)
        self.type = type
        self.data = data


class MicrosoftGraphWebsite(msrest.serialization.Model):
    """website.

    :param type: websiteType. Possible values include: "other", "home", "work", "blog", "profile".
    :type type: str or ~users_user.models.MicrosoftGraphWebsiteType
    :param address: The URL of the website.
    :type address: str
    :param display_name: The display name of the web site.
    :type display_name: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "MicrosoftGraphWebsiteType"]] = None,
        address: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWebsite, self).__init__(**kwargs)
        self.type = type
        self.address = address
        self.display_name = display_name


class MicrosoftGraphWindowsDeviceMalwareState(MicrosoftGraphEntity):
    """Malware detection entity.

    :param id: Read-only.
    :type id: str
    :param display_name: Malware name.
    :type display_name: str
    :param additional_information_url: Information URL to learn more about the malware.
    :type additional_information_url: str
    :param severity: windowsMalwareSeverity. Possible values include: "unknown", "low", "moderate",
     "high", "severe".
    :type severity: str or ~users_user.models.MicrosoftGraphWindowsMalwareSeverity
    :param catetgory: windowsMalwareCategory. Possible values include: "invalid", "adware",
     "spyware", "passwordStealer", "trojanDownloader", "worm", "backdoor", "remoteAccessTrojan",
     "trojan", "emailFlooder", "keylogger", "dialer", "monitoringSoftware", "browserModifier",
     "cookie", "browserPlugin", "aolExploit", "nuker", "securityDisabler", "jokeProgram",
     "hostileActiveXControl", "softwareBundler", "stealthNotifier", "settingsModifier", "toolBar",
     "remoteControlSoftware", "trojanFtp", "potentialUnwantedSoftware", "icqExploit",
     "trojanTelnet", "exploit", "filesharingProgram", "malwareCreationTool", "tool",
     "trojanDenialOfService", "trojanDropper", "trojanMassMailer", "trojanMonitoringSoftware",
     "trojanProxyServer", "virus", "known", "unknown", "spp", "behavior", "vulnerability", "policy",
     "enterpriseUnwantedSoftware", "ransom", "hipsRule".
    :type catetgory: str or ~users_user.models.MicrosoftGraphWindowsMalwareCategory
    :param execution_state: windowsMalwareExecutionState. Possible values include: "unknown",
     "blocked", "allowed", "running", "notRunning".
    :type execution_state: str or ~users_user.models.MicrosoftGraphWindowsMalwareExecutionState
    :param state: windowsMalwareState. Possible values include: "unknown", "detected", "cleaned",
     "quarantined", "removed", "allowed", "blocked", "cleanFailed", "quarantineFailed",
     "removeFailed", "allowFailed", "abandoned", "blockFailed".
    :type state: str or ~users_user.models.MicrosoftGraphWindowsMalwareState
    :param threat_state: windowsMalwareThreatState. Possible values include: "active",
     "actionFailed", "manualStepsRequired", "fullScanRequired", "rebootRequired",
     "remediatedWithNonCriticalFailures", "quarantined", "removed", "cleaned", "allowed",
     "noStatusCleared".
    :type threat_state: str or ~users_user.models.MicrosoftGraphWindowsMalwareThreatState
    :param initial_detection_date_time: Initial detection datetime of the malware.
    :type initial_detection_date_time: ~datetime.datetime
    :param last_state_change_date_time: The last time this particular threat was changed.
    :type last_state_change_date_time: ~datetime.datetime
    :param detection_count: Number of times the malware is detected.
    :type detection_count: int
    :param category: windowsMalwareCategory. Possible values include: "invalid", "adware",
     "spyware", "passwordStealer", "trojanDownloader", "worm", "backdoor", "remoteAccessTrojan",
     "trojan", "emailFlooder", "keylogger", "dialer", "monitoringSoftware", "browserModifier",
     "cookie", "browserPlugin", "aolExploit", "nuker", "securityDisabler", "jokeProgram",
     "hostileActiveXControl", "softwareBundler", "stealthNotifier", "settingsModifier", "toolBar",
     "remoteControlSoftware", "trojanFtp", "potentialUnwantedSoftware", "icqExploit",
     "trojanTelnet", "exploit", "filesharingProgram", "malwareCreationTool", "tool",
     "trojanDenialOfService", "trojanDropper", "trojanMassMailer", "trojanMonitoringSoftware",
     "trojanProxyServer", "virus", "known", "unknown", "spp", "behavior", "vulnerability", "policy",
     "enterpriseUnwantedSoftware", "ransom", "hipsRule".
    :type category: str or ~users_user.models.MicrosoftGraphWindowsMalwareCategory
    """

    _validation = {
        'detection_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'additional_information_url': {'key': 'additionalInformationUrl', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'catetgory': {'key': 'catetgory', 'type': 'str'},
        'execution_state': {'key': 'executionState', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'threat_state': {'key': 'threatState', 'type': 'str'},
        'initial_detection_date_time': {'key': 'initialDetectionDateTime', 'type': 'iso-8601'},
        'last_state_change_date_time': {'key': 'lastStateChangeDateTime', 'type': 'iso-8601'},
        'detection_count': {'key': 'detectionCount', 'type': 'int'},
        'category': {'key': 'category', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        additional_information_url: Optional[str] = None,
        severity: Optional[Union[str, "MicrosoftGraphWindowsMalwareSeverity"]] = None,
        catetgory: Optional[Union[str, "MicrosoftGraphWindowsMalwareCategory"]] = None,
        execution_state: Optional[Union[str, "MicrosoftGraphWindowsMalwareExecutionState"]] = None,
        state: Optional[Union[str, "MicrosoftGraphWindowsMalwareState"]] = None,
        threat_state: Optional[Union[str, "MicrosoftGraphWindowsMalwareThreatState"]] = None,
        initial_detection_date_time: Optional[datetime.datetime] = None,
        last_state_change_date_time: Optional[datetime.datetime] = None,
        detection_count: Optional[int] = None,
        category: Optional[Union[str, "MicrosoftGraphWindowsMalwareCategory"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphWindowsDeviceMalwareState, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.additional_information_url = additional_information_url
        self.severity = severity
        self.catetgory = catetgory
        self.execution_state = execution_state
        self.state = state
        self.threat_state = threat_state
        self.initial_detection_date_time = initial_detection_date_time
        self.last_state_change_date_time = last_state_change_date_time
        self.detection_count = detection_count
        self.category = category


class MicrosoftGraphWindowsInformationProtectionDeviceRegistration(MicrosoftGraphEntity):
    """Represents device registration records for Bring-Your-Own-Device(BYOD) Windows devices.

    :param id: Read-only.
    :type id: str
    :param user_id: UserId associated with this device registration record.
    :type user_id: str
    :param device_registration_id: Device identifier for this device registration record.
    :type device_registration_id: str
    :param device_name: Device name.
    :type device_name: str
    :param device_type: Device type, for example, Windows laptop VS Windows phone.
    :type device_type: str
    :param device_mac_address: Device Mac address.
    :type device_mac_address: str
    :param last_check_in_date_time: Last checkin time of the device.
    :type last_check_in_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'device_registration_id': {'key': 'deviceRegistrationId', 'type': 'str'},
        'device_name': {'key': 'deviceName', 'type': 'str'},
        'device_type': {'key': 'deviceType', 'type': 'str'},
        'device_mac_address': {'key': 'deviceMacAddress', 'type': 'str'},
        'last_check_in_date_time': {'key': 'lastCheckInDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        user_id: Optional[str] = None,
        device_registration_id: Optional[str] = None,
        device_name: Optional[str] = None,
        device_type: Optional[str] = None,
        device_mac_address: Optional[str] = None,
        last_check_in_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphWindowsInformationProtectionDeviceRegistration, self).__init__(id=id, **kwargs)
        self.user_id = user_id
        self.device_registration_id = device_registration_id
        self.device_name = device_name
        self.device_type = device_type
        self.device_mac_address = device_mac_address
        self.last_check_in_date_time = last_check_in_date_time


class MicrosoftGraphWindowsProtectionState(MicrosoftGraphEntity):
    """Device protection status entity.

    :param id: Read-only.
    :type id: str
    :param malware_protection_enabled: Anti malware is enabled or not.
    :type malware_protection_enabled: bool
    :param device_state: windowsDeviceHealthState. Possible values include: "clean",
     "fullScanPending", "rebootPending", "manualStepsPending", "offlineScanPending", "critical".
    :type device_state: str or ~users_user.models.MicrosoftGraphWindowsDeviceHealthState
    :param real_time_protection_enabled: Real time protection is enabled or not?.
    :type real_time_protection_enabled: bool
    :param network_inspection_system_enabled: Network inspection system enabled or not?.
    :type network_inspection_system_enabled: bool
    :param quick_scan_overdue: Quick scan overdue or not?.
    :type quick_scan_overdue: bool
    :param full_scan_overdue: Full scan overdue or not?.
    :type full_scan_overdue: bool
    :param signature_update_overdue: Signature out of date or not?.
    :type signature_update_overdue: bool
    :param reboot_required: Reboot required or not?.
    :type reboot_required: bool
    :param full_scan_required: Full scan required or not?.
    :type full_scan_required: bool
    :param engine_version: Current endpoint protection engine's version.
    :type engine_version: str
    :param signature_version: Current malware definitions version.
    :type signature_version: str
    :param anti_malware_version: Current anti malware version.
    :type anti_malware_version: str
    :param last_quick_scan_date_time: Last quick scan datetime.
    :type last_quick_scan_date_time: ~datetime.datetime
    :param last_full_scan_date_time: Last quick scan datetime.
    :type last_full_scan_date_time: ~datetime.datetime
    :param last_quick_scan_signature_version: Last quick scan signature version.
    :type last_quick_scan_signature_version: str
    :param last_full_scan_signature_version: Last full scan signature version.
    :type last_full_scan_signature_version: str
    :param last_reported_date_time: Last device health status reported time.
    :type last_reported_date_time: ~datetime.datetime
    :param detected_malware_state: Device malware list.
    :type detected_malware_state: list[~users_user.models.MicrosoftGraphWindowsDeviceMalwareState]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'malware_protection_enabled': {'key': 'malwareProtectionEnabled', 'type': 'bool'},
        'device_state': {'key': 'deviceState', 'type': 'str'},
        'real_time_protection_enabled': {'key': 'realTimeProtectionEnabled', 'type': 'bool'},
        'network_inspection_system_enabled': {'key': 'networkInspectionSystemEnabled', 'type': 'bool'},
        'quick_scan_overdue': {'key': 'quickScanOverdue', 'type': 'bool'},
        'full_scan_overdue': {'key': 'fullScanOverdue', 'type': 'bool'},
        'signature_update_overdue': {'key': 'signatureUpdateOverdue', 'type': 'bool'},
        'reboot_required': {'key': 'rebootRequired', 'type': 'bool'},
        'full_scan_required': {'key': 'fullScanRequired', 'type': 'bool'},
        'engine_version': {'key': 'engineVersion', 'type': 'str'},
        'signature_version': {'key': 'signatureVersion', 'type': 'str'},
        'anti_malware_version': {'key': 'antiMalwareVersion', 'type': 'str'},
        'last_quick_scan_date_time': {'key': 'lastQuickScanDateTime', 'type': 'iso-8601'},
        'last_full_scan_date_time': {'key': 'lastFullScanDateTime', 'type': 'iso-8601'},
        'last_quick_scan_signature_version': {'key': 'lastQuickScanSignatureVersion', 'type': 'str'},
        'last_full_scan_signature_version': {'key': 'lastFullScanSignatureVersion', 'type': 'str'},
        'last_reported_date_time': {'key': 'lastReportedDateTime', 'type': 'iso-8601'},
        'detected_malware_state': {'key': 'detectedMalwareState', 'type': '[MicrosoftGraphWindowsDeviceMalwareState]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        malware_protection_enabled: Optional[bool] = None,
        device_state: Optional[Union[str, "MicrosoftGraphWindowsDeviceHealthState"]] = None,
        real_time_protection_enabled: Optional[bool] = None,
        network_inspection_system_enabled: Optional[bool] = None,
        quick_scan_overdue: Optional[bool] = None,
        full_scan_overdue: Optional[bool] = None,
        signature_update_overdue: Optional[bool] = None,
        reboot_required: Optional[bool] = None,
        full_scan_required: Optional[bool] = None,
        engine_version: Optional[str] = None,
        signature_version: Optional[str] = None,
        anti_malware_version: Optional[str] = None,
        last_quick_scan_date_time: Optional[datetime.datetime] = None,
        last_full_scan_date_time: Optional[datetime.datetime] = None,
        last_quick_scan_signature_version: Optional[str] = None,
        last_full_scan_signature_version: Optional[str] = None,
        last_reported_date_time: Optional[datetime.datetime] = None,
        detected_malware_state: Optional[List["MicrosoftGraphWindowsDeviceMalwareState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphWindowsProtectionState, self).__init__(id=id, **kwargs)
        self.malware_protection_enabled = malware_protection_enabled
        self.device_state = device_state
        self.real_time_protection_enabled = real_time_protection_enabled
        self.network_inspection_system_enabled = network_inspection_system_enabled
        self.quick_scan_overdue = quick_scan_overdue
        self.full_scan_overdue = full_scan_overdue
        self.signature_update_overdue = signature_update_overdue
        self.reboot_required = reboot_required
        self.full_scan_required = full_scan_required
        self.engine_version = engine_version
        self.signature_version = signature_version
        self.anti_malware_version = anti_malware_version
        self.last_quick_scan_date_time = last_quick_scan_date_time
        self.last_full_scan_date_time = last_full_scan_date_time
        self.last_quick_scan_signature_version = last_quick_scan_signature_version
        self.last_full_scan_signature_version = last_full_scan_signature_version
        self.last_reported_date_time = last_reported_date_time
        self.detected_malware_state = detected_malware_state


class MicrosoftGraphWorkbook(MicrosoftGraphEntity):
    """workbook.

    :param id: Read-only.
    :type id: str
    :param application: workbookApplication.
    :type application: ~users_user.models.MicrosoftGraphWorkbookApplication
    :param names: Represents a collection of workbook scoped named items (named ranges and
     constants). Read-only.
    :type names: list[~users_user.models.MicrosoftGraphWorkbookNamedItem]
    :param tables: Represents a collection of tables associated with the workbook. Read-only.
    :type tables: list[~users_user.models.MicrosoftGraphWorkbookTable]
    :param worksheets: Represents a collection of worksheets associated with the workbook. Read-
     only.
    :type worksheets: list[~users_user.models.MicrosoftGraphWorkbookWorksheet]
    :param comments:
    :type comments: list[~users_user.models.MicrosoftGraphWorkbookComment]
    :param functions: entity.
    :type functions: ~users_user.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'application': {'key': 'application', 'type': 'MicrosoftGraphWorkbookApplication'},
        'names': {'key': 'names', 'type': '[MicrosoftGraphWorkbookNamedItem]'},
        'tables': {'key': 'tables', 'type': '[MicrosoftGraphWorkbookTable]'},
        'worksheets': {'key': 'worksheets', 'type': '[MicrosoftGraphWorkbookWorksheet]'},
        'comments': {'key': 'comments', 'type': '[MicrosoftGraphWorkbookComment]'},
        'functions': {'key': 'functions', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        application: Optional["MicrosoftGraphWorkbookApplication"] = None,
        names: Optional[List["MicrosoftGraphWorkbookNamedItem"]] = None,
        tables: Optional[List["MicrosoftGraphWorkbookTable"]] = None,
        worksheets: Optional[List["MicrosoftGraphWorkbookWorksheet"]] = None,
        comments: Optional[List["MicrosoftGraphWorkbookComment"]] = None,
        functions: Optional["MicrosoftGraphEntity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbook, self).__init__(id=id, **kwargs)
        self.application = application
        self.names = names
        self.tables = tables
        self.worksheets = worksheets
        self.comments = comments
        self.functions = functions


class MicrosoftGraphWorkbookApplication(MicrosoftGraphEntity):
    """workbookApplication.

    :param id: Read-only.
    :type id: str
    :param calculation_mode: Returns the calculation mode used in the workbook. Possible values
     are: Automatic, AutomaticExceptTables, Manual.
    :type calculation_mode: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'calculation_mode': {'key': 'calculationMode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        calculation_mode: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookApplication, self).__init__(id=id, **kwargs)
        self.calculation_mode = calculation_mode


class MicrosoftGraphWorkbookChart(MicrosoftGraphEntity):
    """workbookChart.

    :param id: Read-only.
    :type id: str
    :param height: Represents the height, in points, of the chart object.
    :type height: float
    :param left: The distance, in points, from the left side of the chart to the worksheet origin.
    :type left: float
    :param name: Represents the name of a chart object.
    :type name: str
    :param top: Represents the distance, in points, from the top edge of the object to the top of
     row 1 (on a worksheet) or the top of the chart area (on a chart).
    :type top: float
    :param width: Represents the width, in points, of the chart object.
    :type width: float
    :param axes: workbookChartAxes.
    :type axes: ~users_user.models.MicrosoftGraphWorkbookChartAxes
    :param data_labels: workbookChartDataLabels.
    :type data_labels: ~users_user.models.MicrosoftGraphWorkbookChartDataLabels
    :param format: workbookChartAreaFormat.
    :type format: ~users_user.models.MicrosoftGraphWorkbookChartAreaFormat
    :param legend: workbookChartLegend.
    :type legend: ~users_user.models.MicrosoftGraphWorkbookChartLegend
    :param series: Represents either a single series or collection of series in the chart. Read-
     only.
    :type series: list[~users_user.models.MicrosoftGraphWorkbookChartSeries]
    :param title: workbookChartTitle.
    :type title: ~users_user.models.MicrosoftGraphWorkbookChartTitle
    :param worksheet: workbookWorksheet.
    :type worksheet: ~users_user.models.MicrosoftGraphWorkbookWorksheet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'height': {'key': 'height', 'type': 'float'},
        'left': {'key': 'left', 'type': 'float'},
        'name': {'key': 'name', 'type': 'str'},
        'top': {'key': 'top', 'type': 'float'},
        'width': {'key': 'width', 'type': 'float'},
        'axes': {'key': 'axes', 'type': 'MicrosoftGraphWorkbookChartAxes'},
        'data_labels': {'key': 'dataLabels', 'type': 'MicrosoftGraphWorkbookChartDataLabels'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartAreaFormat'},
        'legend': {'key': 'legend', 'type': 'MicrosoftGraphWorkbookChartLegend'},
        'series': {'key': 'series', 'type': '[MicrosoftGraphWorkbookChartSeries]'},
        'title': {'key': 'title', 'type': 'MicrosoftGraphWorkbookChartTitle'},
        'worksheet': {'key': 'worksheet', 'type': 'MicrosoftGraphWorkbookWorksheet'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        height: Optional[float] = None,
        left: Optional[float] = None,
        name: Optional[str] = None,
        top: Optional[float] = None,
        width: Optional[float] = None,
        axes: Optional["MicrosoftGraphWorkbookChartAxes"] = None,
        data_labels: Optional["MicrosoftGraphWorkbookChartDataLabels"] = None,
        format: Optional["MicrosoftGraphWorkbookChartAreaFormat"] = None,
        legend: Optional["MicrosoftGraphWorkbookChartLegend"] = None,
        series: Optional[List["MicrosoftGraphWorkbookChartSeries"]] = None,
        title: Optional["MicrosoftGraphWorkbookChartTitle"] = None,
        worksheet: Optional["MicrosoftGraphWorkbookWorksheet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChart, self).__init__(id=id, **kwargs)
        self.height = height
        self.left = left
        self.name = name
        self.top = top
        self.width = width
        self.axes = axes
        self.data_labels = data_labels
        self.format = format
        self.legend = legend
        self.series = series
        self.title = title
        self.worksheet = worksheet


class MicrosoftGraphWorkbookChartAreaFormat(MicrosoftGraphEntity):
    """workbookChartAreaFormat.

    :param id: Read-only.
    :type id: str
    :param fill: entity.
    :type fill: ~users_user.models.MicrosoftGraphEntity
    :param font: workbookChartFont.
    :type font: ~users_user.models.MicrosoftGraphWorkbookChartFont
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphEntity'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        fill: Optional["MicrosoftGraphEntity"] = None,
        font: Optional["MicrosoftGraphWorkbookChartFont"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAreaFormat, self).__init__(id=id, **kwargs)
        self.fill = fill
        self.font = font


class MicrosoftGraphWorkbookChartAxes(MicrosoftGraphEntity):
    """workbookChartAxes.

    :param id: Read-only.
    :type id: str
    :param category_axis: workbookChartAxis.
    :type category_axis: ~users_user.models.MicrosoftGraphWorkbookChartAxis
    :param series_axis: workbookChartAxis.
    :type series_axis: ~users_user.models.MicrosoftGraphWorkbookChartAxis
    :param value_axis: workbookChartAxis.
    :type value_axis: ~users_user.models.MicrosoftGraphWorkbookChartAxis
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'category_axis': {'key': 'categoryAxis', 'type': 'MicrosoftGraphWorkbookChartAxis'},
        'series_axis': {'key': 'seriesAxis', 'type': 'MicrosoftGraphWorkbookChartAxis'},
        'value_axis': {'key': 'valueAxis', 'type': 'MicrosoftGraphWorkbookChartAxis'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        category_axis: Optional["MicrosoftGraphWorkbookChartAxis"] = None,
        series_axis: Optional["MicrosoftGraphWorkbookChartAxis"] = None,
        value_axis: Optional["MicrosoftGraphWorkbookChartAxis"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAxes, self).__init__(id=id, **kwargs)
        self.category_axis = category_axis
        self.series_axis = series_axis
        self.value_axis = value_axis


class MicrosoftGraphWorkbookChartAxis(MicrosoftGraphEntity):
    """workbookChartAxis.

    :param id: Read-only.
    :type id: str
    :param major_unit: Any object.
    :type major_unit: object
    :param maximum: Any object.
    :type maximum: object
    :param minimum: Any object.
    :type minimum: object
    :param minor_unit: Any object.
    :type minor_unit: object
    :param format: workbookChartAxisFormat.
    :type format: ~users_user.models.MicrosoftGraphWorkbookChartAxisFormat
    :param major_gridlines: workbookChartGridlines.
    :type major_gridlines: ~users_user.models.MicrosoftGraphWorkbookChartGridlines
    :param minor_gridlines: workbookChartGridlines.
    :type minor_gridlines: ~users_user.models.MicrosoftGraphWorkbookChartGridlines
    :param title: workbookChartAxisTitle.
    :type title: ~users_user.models.MicrosoftGraphWorkbookChartAxisTitle
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'major_unit': {'key': 'majorUnit', 'type': 'object'},
        'maximum': {'key': 'maximum', 'type': 'object'},
        'minimum': {'key': 'minimum', 'type': 'object'},
        'minor_unit': {'key': 'minorUnit', 'type': 'object'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartAxisFormat'},
        'major_gridlines': {'key': 'majorGridlines', 'type': 'MicrosoftGraphWorkbookChartGridlines'},
        'minor_gridlines': {'key': 'minorGridlines', 'type': 'MicrosoftGraphWorkbookChartGridlines'},
        'title': {'key': 'title', 'type': 'MicrosoftGraphWorkbookChartAxisTitle'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        major_unit: Optional[object] = None,
        maximum: Optional[object] = None,
        minimum: Optional[object] = None,
        minor_unit: Optional[object] = None,
        format: Optional["MicrosoftGraphWorkbookChartAxisFormat"] = None,
        major_gridlines: Optional["MicrosoftGraphWorkbookChartGridlines"] = None,
        minor_gridlines: Optional["MicrosoftGraphWorkbookChartGridlines"] = None,
        title: Optional["MicrosoftGraphWorkbookChartAxisTitle"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAxis, self).__init__(id=id, **kwargs)
        self.major_unit = major_unit
        self.maximum = maximum
        self.minimum = minimum
        self.minor_unit = minor_unit
        self.format = format
        self.major_gridlines = major_gridlines
        self.minor_gridlines = minor_gridlines
        self.title = title


class MicrosoftGraphWorkbookChartAxisFormat(MicrosoftGraphEntity):
    """workbookChartAxisFormat.

    :param id: Read-only.
    :type id: str
    :param font: workbookChartFont.
    :type font: ~users_user.models.MicrosoftGraphWorkbookChartFont
    :param line: workbookChartLineFormat.
    :type line: ~users_user.models.MicrosoftGraphWorkbookChartLineFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
        'line': {'key': 'line', 'type': 'MicrosoftGraphWorkbookChartLineFormat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        font: Optional["MicrosoftGraphWorkbookChartFont"] = None,
        line: Optional["MicrosoftGraphWorkbookChartLineFormat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAxisFormat, self).__init__(id=id, **kwargs)
        self.font = font
        self.line = line


class MicrosoftGraphWorkbookChartAxisTitle(MicrosoftGraphEntity):
    """workbookChartAxisTitle.

    :param id: Read-only.
    :type id: str
    :param text: Represents the axis title.
    :type text: str
    :param visible: A boolean that specifies the visibility of an axis title.
    :type visible: bool
    :param format: workbookChartAxisTitleFormat.
    :type format: ~users_user.models.MicrosoftGraphWorkbookChartAxisTitleFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
        'visible': {'key': 'visible', 'type': 'bool'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartAxisTitleFormat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        text: Optional[str] = None,
        visible: Optional[bool] = None,
        format: Optional["MicrosoftGraphWorkbookChartAxisTitleFormat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAxisTitle, self).__init__(id=id, **kwargs)
        self.text = text
        self.visible = visible
        self.format = format


class MicrosoftGraphWorkbookChartAxisTitleFormat(MicrosoftGraphEntity):
    """workbookChartAxisTitleFormat.

    :param id: Read-only.
    :type id: str
    :param font: workbookChartFont.
    :type font: ~users_user.models.MicrosoftGraphWorkbookChartFont
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        font: Optional["MicrosoftGraphWorkbookChartFont"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAxisTitleFormat, self).__init__(id=id, **kwargs)
        self.font = font


class MicrosoftGraphWorkbookChartDataLabelFormat(MicrosoftGraphEntity):
    """workbookChartDataLabelFormat.

    :param id: Read-only.
    :type id: str
    :param fill: entity.
    :type fill: ~users_user.models.MicrosoftGraphEntity
    :param font: workbookChartFont.
    :type font: ~users_user.models.MicrosoftGraphWorkbookChartFont
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphEntity'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        fill: Optional["MicrosoftGraphEntity"] = None,
        font: Optional["MicrosoftGraphWorkbookChartFont"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartDataLabelFormat, self).__init__(id=id, **kwargs)
        self.fill = fill
        self.font = font


class MicrosoftGraphWorkbookChartDataLabels(MicrosoftGraphEntity):
    """workbookChartDataLabels.

    :param id: Read-only.
    :type id: str
    :param position: DataLabelPosition value that represents the position of the data label. The
     possible values are: None, Center, InsideEnd, InsideBase, OutsideEnd, Left, Right, Top, Bottom,
     BestFit, Callout.
    :type position: str
    :param separator: String representing the separator used for the data labels on a chart.
    :type separator: str
    :param show_bubble_size: Boolean value representing if the data label bubble size is visible or
     not.
    :type show_bubble_size: bool
    :param show_category_name: Boolean value representing if the data label category name is
     visible or not.
    :type show_category_name: bool
    :param show_legend_key: Boolean value representing if the data label legend key is visible or
     not.
    :type show_legend_key: bool
    :param show_percentage: Boolean value representing if the data label percentage is visible or
     not.
    :type show_percentage: bool
    :param show_series_name: Boolean value representing if the data label series name is visible or
     not.
    :type show_series_name: bool
    :param show_value: Boolean value representing if the data label value is visible or not.
    :type show_value: bool
    :param format: workbookChartDataLabelFormat.
    :type format: ~users_user.models.MicrosoftGraphWorkbookChartDataLabelFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'position': {'key': 'position', 'type': 'str'},
        'separator': {'key': 'separator', 'type': 'str'},
        'show_bubble_size': {'key': 'showBubbleSize', 'type': 'bool'},
        'show_category_name': {'key': 'showCategoryName', 'type': 'bool'},
        'show_legend_key': {'key': 'showLegendKey', 'type': 'bool'},
        'show_percentage': {'key': 'showPercentage', 'type': 'bool'},
        'show_series_name': {'key': 'showSeriesName', 'type': 'bool'},
        'show_value': {'key': 'showValue', 'type': 'bool'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartDataLabelFormat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        position: Optional[str] = None,
        separator: Optional[str] = None,
        show_bubble_size: Optional[bool] = None,
        show_category_name: Optional[bool] = None,
        show_legend_key: Optional[bool] = None,
        show_percentage: Optional[bool] = None,
        show_series_name: Optional[bool] = None,
        show_value: Optional[bool] = None,
        format: Optional["MicrosoftGraphWorkbookChartDataLabelFormat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartDataLabels, self).__init__(id=id, **kwargs)
        self.position = position
        self.separator = separator
        self.show_bubble_size = show_bubble_size
        self.show_category_name = show_category_name
        self.show_legend_key = show_legend_key
        self.show_percentage = show_percentage
        self.show_series_name = show_series_name
        self.show_value = show_value
        self.format = format


class MicrosoftGraphWorkbookChartFill(MicrosoftGraphEntity):
    """workbookChartFill.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartFill, self).__init__(id=id, **kwargs)


class MicrosoftGraphWorkbookChartFont(MicrosoftGraphEntity):
    """workbookChartFont.

    :param id: Read-only.
    :type id: str
    :param bold: Represents the bold status of font.
    :type bold: bool
    :param color: HTML color code representation of the text color. E.g. #FF0000 represents Red.
    :type color: str
    :param italic: Represents the italic status of the font.
    :type italic: bool
    :param name: Font name (e.g. 'Calibri').
    :type name: str
    :param size: Size of the font (e.g. 11).
    :type size: float
    :param underline: Type of underline applied to the font. The possible values are: None, Single.
    :type underline: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'bold': {'key': 'bold', 'type': 'bool'},
        'color': {'key': 'color', 'type': 'str'},
        'italic': {'key': 'italic', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'size': {'key': 'size', 'type': 'float'},
        'underline': {'key': 'underline', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        bold: Optional[bool] = None,
        color: Optional[str] = None,
        italic: Optional[bool] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
        underline: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartFont, self).__init__(id=id, **kwargs)
        self.bold = bold
        self.color = color
        self.italic = italic
        self.name = name
        self.size = size
        self.underline = underline


class MicrosoftGraphWorkbookChartGridlines(MicrosoftGraphEntity):
    """workbookChartGridlines.

    :param id: Read-only.
    :type id: str
    :param visible: Boolean value representing if the axis gridlines are visible or not.
    :type visible: bool
    :param format: workbookChartGridlinesFormat.
    :type format: ~users_user.models.MicrosoftGraphWorkbookChartGridlinesFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'visible': {'key': 'visible', 'type': 'bool'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartGridlinesFormat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        visible: Optional[bool] = None,
        format: Optional["MicrosoftGraphWorkbookChartGridlinesFormat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartGridlines, self).__init__(id=id, **kwargs)
        self.visible = visible
        self.format = format


class MicrosoftGraphWorkbookChartGridlinesFormat(MicrosoftGraphEntity):
    """workbookChartGridlinesFormat.

    :param id: Read-only.
    :type id: str
    :param line: workbookChartLineFormat.
    :type line: ~users_user.models.MicrosoftGraphWorkbookChartLineFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'line': {'key': 'line', 'type': 'MicrosoftGraphWorkbookChartLineFormat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        line: Optional["MicrosoftGraphWorkbookChartLineFormat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartGridlinesFormat, self).__init__(id=id, **kwargs)
        self.line = line


class MicrosoftGraphWorkbookChartLegend(MicrosoftGraphEntity):
    """workbookChartLegend.

    :param id: Read-only.
    :type id: str
    :param overlay: Boolean value for whether the chart legend should overlap with the main body of
     the chart.
    :type overlay: bool
    :param position: Represents the position of the legend on the chart. The possible values are:
     Top, Bottom, Left, Right, Corner, Custom.
    :type position: str
    :param visible: A boolean value the represents the visibility of a ChartLegend object.
    :type visible: bool
    :param format: workbookChartLegendFormat.
    :type format: ~users_user.models.MicrosoftGraphWorkbookChartLegendFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'overlay': {'key': 'overlay', 'type': 'bool'},
        'position': {'key': 'position', 'type': 'str'},
        'visible': {'key': 'visible', 'type': 'bool'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartLegendFormat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        overlay: Optional[bool] = None,
        position: Optional[str] = None,
        visible: Optional[bool] = None,
        format: Optional["MicrosoftGraphWorkbookChartLegendFormat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartLegend, self).__init__(id=id, **kwargs)
        self.overlay = overlay
        self.position = position
        self.visible = visible
        self.format = format


class MicrosoftGraphWorkbookChartLegendFormat(MicrosoftGraphEntity):
    """workbookChartLegendFormat.

    :param id: Read-only.
    :type id: str
    :param fill: entity.
    :type fill: ~users_user.models.MicrosoftGraphEntity
    :param font: workbookChartFont.
    :type font: ~users_user.models.MicrosoftGraphWorkbookChartFont
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphEntity'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        fill: Optional["MicrosoftGraphEntity"] = None,
        font: Optional["MicrosoftGraphWorkbookChartFont"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartLegendFormat, self).__init__(id=id, **kwargs)
        self.fill = fill
        self.font = font


class MicrosoftGraphWorkbookChartLineFormat(MicrosoftGraphEntity):
    """workbookChartLineFormat.

    :param id: Read-only.
    :type id: str
    :param color: HTML color code representing the color of lines in the chart.
    :type color: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'color': {'key': 'color', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        color: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartLineFormat, self).__init__(id=id, **kwargs)
        self.color = color


class MicrosoftGraphWorkbookChartPoint(MicrosoftGraphEntity):
    """workbookChartPoint.

    :param id: Read-only.
    :type id: str
    :param value: Any object.
    :type value: object
    :param format: workbookChartPointFormat.
    :type format: ~users_user.models.MicrosoftGraphWorkbookChartPointFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartPointFormat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        value: Optional[object] = None,
        format: Optional["MicrosoftGraphWorkbookChartPointFormat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartPoint, self).__init__(id=id, **kwargs)
        self.value = value
        self.format = format


class MicrosoftGraphWorkbookChartPointFormat(MicrosoftGraphEntity):
    """workbookChartPointFormat.

    :param id: Read-only.
    :type id: str
    :param fill: entity.
    :type fill: ~users_user.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        fill: Optional["MicrosoftGraphEntity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartPointFormat, self).__init__(id=id, **kwargs)
        self.fill = fill


class MicrosoftGraphWorkbookChartSeries(MicrosoftGraphEntity):
    """workbookChartSeries.

    :param id: Read-only.
    :type id: str
    :param name: Represents the name of a series in a chart.
    :type name: str
    :param format: workbookChartSeriesFormat.
    :type format: ~users_user.models.MicrosoftGraphWorkbookChartSeriesFormat
    :param points: Represents a collection of all points in the series. Read-only.
    :type points: list[~users_user.models.MicrosoftGraphWorkbookChartPoint]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartSeriesFormat'},
        'points': {'key': 'points', 'type': '[MicrosoftGraphWorkbookChartPoint]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        format: Optional["MicrosoftGraphWorkbookChartSeriesFormat"] = None,
        points: Optional[List["MicrosoftGraphWorkbookChartPoint"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartSeries, self).__init__(id=id, **kwargs)
        self.name = name
        self.format = format
        self.points = points


class MicrosoftGraphWorkbookChartSeriesFormat(MicrosoftGraphEntity):
    """workbookChartSeriesFormat.

    :param id: Read-only.
    :type id: str
    :param fill: entity.
    :type fill: ~users_user.models.MicrosoftGraphEntity
    :param line: workbookChartLineFormat.
    :type line: ~users_user.models.MicrosoftGraphWorkbookChartLineFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphEntity'},
        'line': {'key': 'line', 'type': 'MicrosoftGraphWorkbookChartLineFormat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        fill: Optional["MicrosoftGraphEntity"] = None,
        line: Optional["MicrosoftGraphWorkbookChartLineFormat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartSeriesFormat, self).__init__(id=id, **kwargs)
        self.fill = fill
        self.line = line


class MicrosoftGraphWorkbookChartTitle(MicrosoftGraphEntity):
    """workbookChartTitle.

    :param id: Read-only.
    :type id: str
    :param overlay: Boolean value representing if the chart title will overlay the chart or not.
    :type overlay: bool
    :param text: Represents the title text of a chart.
    :type text: str
    :param visible: A boolean value the represents the visibility of a chart title object.
    :type visible: bool
    :param format: workbookChartTitleFormat.
    :type format: ~users_user.models.MicrosoftGraphWorkbookChartTitleFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'overlay': {'key': 'overlay', 'type': 'bool'},
        'text': {'key': 'text', 'type': 'str'},
        'visible': {'key': 'visible', 'type': 'bool'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartTitleFormat'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        overlay: Optional[bool] = None,
        text: Optional[str] = None,
        visible: Optional[bool] = None,
        format: Optional["MicrosoftGraphWorkbookChartTitleFormat"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartTitle, self).__init__(id=id, **kwargs)
        self.overlay = overlay
        self.text = text
        self.visible = visible
        self.format = format


class MicrosoftGraphWorkbookChartTitleFormat(MicrosoftGraphEntity):
    """workbookChartTitleFormat.

    :param id: Read-only.
    :type id: str
    :param fill: entity.
    :type fill: ~users_user.models.MicrosoftGraphEntity
    :param font: workbookChartFont.
    :type font: ~users_user.models.MicrosoftGraphWorkbookChartFont
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphEntity'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        fill: Optional["MicrosoftGraphEntity"] = None,
        font: Optional["MicrosoftGraphWorkbookChartFont"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartTitleFormat, self).__init__(id=id, **kwargs)
        self.fill = fill
        self.font = font


class MicrosoftGraphWorkbookComment(MicrosoftGraphEntity):
    """workbookComment.

    :param id: Read-only.
    :type id: str
    :param content: The content of comment.
    :type content: str
    :param content_type: Indicates the type for the comment.
    :type content_type: str
    :param replies: Read-only. Nullable.
    :type replies: list[~users_user.models.MicrosoftGraphWorkbookCommentReply]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'replies': {'key': 'replies', 'type': '[MicrosoftGraphWorkbookCommentReply]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        content: Optional[str] = None,
        content_type: Optional[str] = None,
        replies: Optional[List["MicrosoftGraphWorkbookCommentReply"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookComment, self).__init__(id=id, **kwargs)
        self.content = content
        self.content_type = content_type
        self.replies = replies


class MicrosoftGraphWorkbookCommentReply(MicrosoftGraphEntity):
    """workbookCommentReply.

    :param id: Read-only.
    :type id: str
    :param content: The content of a comment reply.
    :type content: str
    :param content_type: Indicates the type for the comment reply.
    :type content_type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        content: Optional[str] = None,
        content_type: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookCommentReply, self).__init__(id=id, **kwargs)
        self.content = content
        self.content_type = content_type


class MicrosoftGraphWorkbookFilter(MicrosoftGraphEntity):
    """workbookFilter.

    :param id: Read-only.
    :type id: str
    :param criteria: workbookFilterCriteria.
    :type criteria: ~users_user.models.MicrosoftGraphWorkbookFilterCriteria
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'criteria': {'key': 'criteria', 'type': 'MicrosoftGraphWorkbookFilterCriteria'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        criteria: Optional["MicrosoftGraphWorkbookFilterCriteria"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookFilter, self).__init__(id=id, **kwargs)
        self.criteria = criteria


class MicrosoftGraphWorkbookFilterCriteria(msrest.serialization.Model):
    """workbookFilterCriteria.

    :param color:
    :type color: str
    :param criterion1:
    :type criterion1: str
    :param criterion2:
    :type criterion2: str
    :param dynamic_criteria:
    :type dynamic_criteria: str
    :param filter_on:
    :type filter_on: str
    :param icon: workbookIcon.
    :type icon: ~users_user.models.MicrosoftGraphWorkbookIcon
    :param operator:
    :type operator: str
    :param values: Any object.
    :type values: object
    """

    _attribute_map = {
        'color': {'key': 'color', 'type': 'str'},
        'criterion1': {'key': 'criterion1', 'type': 'str'},
        'criterion2': {'key': 'criterion2', 'type': 'str'},
        'dynamic_criteria': {'key': 'dynamicCriteria', 'type': 'str'},
        'filter_on': {'key': 'filterOn', 'type': 'str'},
        'icon': {'key': 'icon', 'type': 'MicrosoftGraphWorkbookIcon'},
        'operator': {'key': 'operator', 'type': 'str'},
        'values': {'key': 'values', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        color: Optional[str] = None,
        criterion1: Optional[str] = None,
        criterion2: Optional[str] = None,
        dynamic_criteria: Optional[str] = None,
        filter_on: Optional[str] = None,
        icon: Optional["MicrosoftGraphWorkbookIcon"] = None,
        operator: Optional[str] = None,
        values: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookFilterCriteria, self).__init__(**kwargs)
        self.color = color
        self.criterion1 = criterion1
        self.criterion2 = criterion2
        self.dynamic_criteria = dynamic_criteria
        self.filter_on = filter_on
        self.icon = icon
        self.operator = operator
        self.values = values


class MicrosoftGraphWorkbookFunctions(MicrosoftGraphEntity):
    """workbookFunctions.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookFunctions, self).__init__(id=id, **kwargs)


class MicrosoftGraphWorkbookIcon(msrest.serialization.Model):
    """workbookIcon.

    :param index: Represents the index of the icon in the given set.
    :type index: int
    :param set: Represents the set that the icon is part of. The possible values are: Invalid,
     ThreeArrows, ThreeArrowsGray, ThreeFlags, ThreeTrafficLights1, ThreeTrafficLights2, ThreeSigns,
     ThreeSymbols, ThreeSymbols2, FourArrows, FourArrowsGray, FourRedToBlack, FourRating,
     FourTrafficLights, FiveArrows, FiveArrowsGray, FiveRating, FiveQuarters, ThreeStars,
     ThreeTriangles, FiveBoxes.
    :type set: str
    """

    _validation = {
        'index': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'index': {'key': 'index', 'type': 'int'},
        'set': {'key': 'set', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        index: Optional[int] = None,
        set: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookIcon, self).__init__(**kwargs)
        self.index = index
        self.set = set


class MicrosoftGraphWorkbookNamedItem(MicrosoftGraphEntity):
    """workbookNamedItem.

    :param id: Read-only.
    :type id: str
    :param comment: Represents the comment associated with this name.
    :type comment: str
    :param name: The name of the object. Read-only.
    :type name: str
    :param scope: Indicates whether the name is scoped to the workbook or to a specific worksheet.
     Read-only.
    :type scope: str
    :param type: Indicates what type of reference is associated with the name. The possible values
     are: String, Integer, Double, Boolean, Range. Read-only.
    :type type: str
    :param value: Any object.
    :type value: object
    :param visible: Specifies whether the object is visible or not.
    :type visible: bool
    :param worksheet: workbookWorksheet.
    :type worksheet: ~users_user.models.MicrosoftGraphWorkbookWorksheet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'comment': {'key': 'comment', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
        'visible': {'key': 'visible', 'type': 'bool'},
        'worksheet': {'key': 'worksheet', 'type': 'MicrosoftGraphWorkbookWorksheet'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        comment: Optional[str] = None,
        name: Optional[str] = None,
        scope: Optional[str] = None,
        type: Optional[str] = None,
        value: Optional[object] = None,
        visible: Optional[bool] = None,
        worksheet: Optional["MicrosoftGraphWorkbookWorksheet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookNamedItem, self).__init__(id=id, **kwargs)
        self.comment = comment
        self.name = name
        self.scope = scope
        self.type = type
        self.value = value
        self.visible = visible
        self.worksheet = worksheet


class MicrosoftGraphWorkbookPivotTable(MicrosoftGraphEntity):
    """workbookPivotTable.

    :param id: Read-only.
    :type id: str
    :param name: Name of the PivotTable.
    :type name: str
    :param worksheet: workbookWorksheet.
    :type worksheet: ~users_user.models.MicrosoftGraphWorkbookWorksheet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'worksheet': {'key': 'worksheet', 'type': 'MicrosoftGraphWorkbookWorksheet'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        worksheet: Optional["MicrosoftGraphWorkbookWorksheet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookPivotTable, self).__init__(id=id, **kwargs)
        self.name = name
        self.worksheet = worksheet


class MicrosoftGraphWorkbookSortField(msrest.serialization.Model):
    """workbookSortField.

    :param ascending: Represents whether the sorting is done in an ascending fashion.
    :type ascending: bool
    :param color: Represents the color that is the target of the condition if the sorting is on
     font or cell color.
    :type color: str
    :param data_option: Represents additional sorting options for this field. The possible values
     are: Normal, TextAsNumber.
    :type data_option: str
    :param icon: workbookIcon.
    :type icon: ~users_user.models.MicrosoftGraphWorkbookIcon
    :param key: Represents the column (or row, depending on the sort orientation) that the
     condition is on. Represented as an offset from the first column (or row).
    :type key: int
    :param sort_on: Represents the type of sorting of this condition. The possible values are:
     Value, CellColor, FontColor, Icon.
    :type sort_on: str
    """

    _validation = {
        'key': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'ascending': {'key': 'ascending', 'type': 'bool'},
        'color': {'key': 'color', 'type': 'str'},
        'data_option': {'key': 'dataOption', 'type': 'str'},
        'icon': {'key': 'icon', 'type': 'MicrosoftGraphWorkbookIcon'},
        'key': {'key': 'key', 'type': 'int'},
        'sort_on': {'key': 'sortOn', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        ascending: Optional[bool] = None,
        color: Optional[str] = None,
        data_option: Optional[str] = None,
        icon: Optional["MicrosoftGraphWorkbookIcon"] = None,
        key: Optional[int] = None,
        sort_on: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookSortField, self).__init__(**kwargs)
        self.ascending = ascending
        self.color = color
        self.data_option = data_option
        self.icon = icon
        self.key = key
        self.sort_on = sort_on


class MicrosoftGraphWorkbookTable(MicrosoftGraphEntity):
    """workbookTable.

    :param id: Read-only.
    :type id: str
    :param highlight_first_column: Indicates whether the first column contains special formatting.
    :type highlight_first_column: bool
    :param highlight_last_column: Indicates whether the last column contains special formatting.
    :type highlight_last_column: bool
    :param legacy_id: Legacy Id used in older Excle clients. The value of the identifier remains
     the same even when the table is renamed. This property should be interpreted as an opaque
     string value and should not be parsed to any other type. Read-only.
    :type legacy_id: str
    :param name: Name of the table.
    :type name: str
    :param show_banded_columns: Indicates whether the columns show banded formatting in which odd
     columns are highlighted differently from even ones to make reading the table easier.
    :type show_banded_columns: bool
    :param show_banded_rows: Indicates whether the rows show banded formatting in which odd rows
     are highlighted differently from even ones to make reading the table easier.
    :type show_banded_rows: bool
    :param show_filter_button: Indicates whether the filter buttons are visible at the top of each
     column header. Setting this is only allowed if the table contains a header row.
    :type show_filter_button: bool
    :param show_headers: Indicates whether the header row is visible or not. This value can be set
     to show or remove the header row.
    :type show_headers: bool
    :param show_totals: Indicates whether the total row is visible or not. This value can be set to
     show or remove the total row.
    :type show_totals: bool
    :param style: Constant value that represents the Table style. The possible values are:
     TableStyleLight1 thru TableStyleLight21, TableStyleMedium1 thru TableStyleMedium28,
     TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined style present in the
     workbook can also be specified.
    :type style: str
    :param columns: Represents a collection of all the columns in the table. Read-only.
    :type columns: list[~users_user.models.MicrosoftGraphWorkbookTableColumn]
    :param rows: Represents a collection of all the rows in the table. Read-only.
    :type rows: list[~users_user.models.MicrosoftGraphWorkbookTableRow]
    :param sort: workbookTableSort.
    :type sort: ~users_user.models.MicrosoftGraphWorkbookTableSort
    :param worksheet: workbookWorksheet.
    :type worksheet: ~users_user.models.MicrosoftGraphWorkbookWorksheet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'highlight_first_column': {'key': 'highlightFirstColumn', 'type': 'bool'},
        'highlight_last_column': {'key': 'highlightLastColumn', 'type': 'bool'},
        'legacy_id': {'key': 'legacyId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'show_banded_columns': {'key': 'showBandedColumns', 'type': 'bool'},
        'show_banded_rows': {'key': 'showBandedRows', 'type': 'bool'},
        'show_filter_button': {'key': 'showFilterButton', 'type': 'bool'},
        'show_headers': {'key': 'showHeaders', 'type': 'bool'},
        'show_totals': {'key': 'showTotals', 'type': 'bool'},
        'style': {'key': 'style', 'type': 'str'},
        'columns': {'key': 'columns', 'type': '[MicrosoftGraphWorkbookTableColumn]'},
        'rows': {'key': 'rows', 'type': '[MicrosoftGraphWorkbookTableRow]'},
        'sort': {'key': 'sort', 'type': 'MicrosoftGraphWorkbookTableSort'},
        'worksheet': {'key': 'worksheet', 'type': 'MicrosoftGraphWorkbookWorksheet'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        highlight_first_column: Optional[bool] = None,
        highlight_last_column: Optional[bool] = None,
        legacy_id: Optional[str] = None,
        name: Optional[str] = None,
        show_banded_columns: Optional[bool] = None,
        show_banded_rows: Optional[bool] = None,
        show_filter_button: Optional[bool] = None,
        show_headers: Optional[bool] = None,
        show_totals: Optional[bool] = None,
        style: Optional[str] = None,
        columns: Optional[List["MicrosoftGraphWorkbookTableColumn"]] = None,
        rows: Optional[List["MicrosoftGraphWorkbookTableRow"]] = None,
        sort: Optional["MicrosoftGraphWorkbookTableSort"] = None,
        worksheet: Optional["MicrosoftGraphWorkbookWorksheet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookTable, self).__init__(id=id, **kwargs)
        self.highlight_first_column = highlight_first_column
        self.highlight_last_column = highlight_last_column
        self.legacy_id = legacy_id
        self.name = name
        self.show_banded_columns = show_banded_columns
        self.show_banded_rows = show_banded_rows
        self.show_filter_button = show_filter_button
        self.show_headers = show_headers
        self.show_totals = show_totals
        self.style = style
        self.columns = columns
        self.rows = rows
        self.sort = sort
        self.worksheet = worksheet


class MicrosoftGraphWorkbookTableColumn(MicrosoftGraphEntity):
    """workbookTableColumn.

    :param id: Read-only.
    :type id: str
    :param index: Returns the index number of the column within the columns collection of the
     table. Zero-indexed. Read-only.
    :type index: int
    :param name: Returns the name of the table column.
    :type name: str
    :param values: Any object.
    :type values: object
    :param filter: workbookFilter.
    :type filter: ~users_user.models.MicrosoftGraphWorkbookFilter
    """

    _validation = {
        'index': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'index': {'key': 'index', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'values': {'key': 'values', 'type': 'object'},
        'filter': {'key': 'filter', 'type': 'MicrosoftGraphWorkbookFilter'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        index: Optional[int] = None,
        name: Optional[str] = None,
        values: Optional[object] = None,
        filter: Optional["MicrosoftGraphWorkbookFilter"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookTableColumn, self).__init__(id=id, **kwargs)
        self.index = index
        self.name = name
        self.values = values
        self.filter = filter


class MicrosoftGraphWorkbookTableRow(MicrosoftGraphEntity):
    """workbookTableRow.

    :param id: Read-only.
    :type id: str
    :param index: Returns the index number of the row within the rows collection of the table.
     Zero-indexed. Read-only.
    :type index: int
    :param values: Any object.
    :type values: object
    """

    _validation = {
        'index': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'index': {'key': 'index', 'type': 'int'},
        'values': {'key': 'values', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        index: Optional[int] = None,
        values: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookTableRow, self).__init__(id=id, **kwargs)
        self.index = index
        self.values = values


class MicrosoftGraphWorkbookTableSort(MicrosoftGraphEntity):
    """workbookTableSort.

    :param id: Read-only.
    :type id: str
    :param fields: Represents the current conditions used to last sort the table. Read-only.
    :type fields: list[~users_user.models.MicrosoftGraphWorkbookSortField]
    :param match_case: Represents whether the casing impacted the last sort of the table. Read-
     only.
    :type match_case: bool
    :param method: Represents Chinese character ordering method last used to sort the table. The
     possible values are: PinYin, StrokeCount. Read-only.
    :type method: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'fields': {'key': 'fields', 'type': '[MicrosoftGraphWorkbookSortField]'},
        'match_case': {'key': 'matchCase', 'type': 'bool'},
        'method': {'key': 'method', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        fields: Optional[List["MicrosoftGraphWorkbookSortField"]] = None,
        match_case: Optional[bool] = None,
        method: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookTableSort, self).__init__(id=id, **kwargs)
        self.fields = fields
        self.match_case = match_case
        self.method = method


class MicrosoftGraphWorkbookWorksheet(MicrosoftGraphEntity):
    """workbookWorksheet.

    :param id: Read-only.
    :type id: str
    :param name: The display name of the worksheet.
    :type name: str
    :param position: The zero-based position of the worksheet within the workbook.
    :type position: int
    :param visibility: The Visibility of the worksheet. The possible values are: Visible, Hidden,
     VeryHidden.
    :type visibility: str
    :param charts: Returns collection of charts that are part of the worksheet. Read-only.
    :type charts: list[~users_user.models.MicrosoftGraphWorkbookChart]
    :param names: Returns collection of names that are associated with the worksheet. Read-only.
    :type names: list[~users_user.models.MicrosoftGraphWorkbookNamedItem]
    :param pivot_tables: Collection of PivotTables that are part of the worksheet.
    :type pivot_tables: list[~users_user.models.MicrosoftGraphWorkbookPivotTable]
    :param protection: workbookWorksheetProtection.
    :type protection: ~users_user.models.MicrosoftGraphWorkbookWorksheetProtection
    :param tables: Collection of tables that are part of the worksheet. Read-only.
    :type tables: list[~users_user.models.MicrosoftGraphWorkbookTable]
    """

    _validation = {
        'position': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'position': {'key': 'position', 'type': 'int'},
        'visibility': {'key': 'visibility', 'type': 'str'},
        'charts': {'key': 'charts', 'type': '[MicrosoftGraphWorkbookChart]'},
        'names': {'key': 'names', 'type': '[MicrosoftGraphWorkbookNamedItem]'},
        'pivot_tables': {'key': 'pivotTables', 'type': '[MicrosoftGraphWorkbookPivotTable]'},
        'protection': {'key': 'protection', 'type': 'MicrosoftGraphWorkbookWorksheetProtection'},
        'tables': {'key': 'tables', 'type': '[MicrosoftGraphWorkbookTable]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        position: Optional[int] = None,
        visibility: Optional[str] = None,
        charts: Optional[List["MicrosoftGraphWorkbookChart"]] = None,
        names: Optional[List["MicrosoftGraphWorkbookNamedItem"]] = None,
        pivot_tables: Optional[List["MicrosoftGraphWorkbookPivotTable"]] = None,
        protection: Optional["MicrosoftGraphWorkbookWorksheetProtection"] = None,
        tables: Optional[List["MicrosoftGraphWorkbookTable"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookWorksheet, self).__init__(id=id, **kwargs)
        self.name = name
        self.position = position
        self.visibility = visibility
        self.charts = charts
        self.names = names
        self.pivot_tables = pivot_tables
        self.protection = protection
        self.tables = tables


class MicrosoftGraphWorkbookWorksheetProtection(MicrosoftGraphEntity):
    """workbookWorksheetProtection.

    :param id: Read-only.
    :type id: str
    :param options: workbookWorksheetProtectionOptions.
    :type options: ~users_user.models.MicrosoftGraphWorkbookWorksheetProtectionOptions
    :param protected: Indicates if the worksheet is protected.  Read-only.
    :type protected: bool
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'options': {'key': 'options', 'type': 'MicrosoftGraphWorkbookWorksheetProtectionOptions'},
        'protected': {'key': 'protected', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        options: Optional["MicrosoftGraphWorkbookWorksheetProtectionOptions"] = None,
        protected: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookWorksheetProtection, self).__init__(id=id, **kwargs)
        self.options = options
        self.protected = protected


class MicrosoftGraphWorkbookWorksheetProtectionOptions(msrest.serialization.Model):
    """workbookWorksheetProtectionOptions.

    :param allow_auto_filter: Represents the worksheet protection option of allowing using auto
     filter feature.
    :type allow_auto_filter: bool
    :param allow_delete_columns: Represents the worksheet protection option of allowing deleting
     columns.
    :type allow_delete_columns: bool
    :param allow_delete_rows: Represents the worksheet protection option of allowing deleting rows.
    :type allow_delete_rows: bool
    :param allow_format_cells: Represents the worksheet protection option of allowing formatting
     cells.
    :type allow_format_cells: bool
    :param allow_format_columns: Represents the worksheet protection option of allowing formatting
     columns.
    :type allow_format_columns: bool
    :param allow_format_rows: Represents the worksheet protection option of allowing formatting
     rows.
    :type allow_format_rows: bool
    :param allow_insert_columns: Represents the worksheet protection option of allowing inserting
     columns.
    :type allow_insert_columns: bool
    :param allow_insert_hyperlinks: Represents the worksheet protection option of allowing
     inserting hyperlinks.
    :type allow_insert_hyperlinks: bool
    :param allow_insert_rows: Represents the worksheet protection option of allowing inserting
     rows.
    :type allow_insert_rows: bool
    :param allow_pivot_tables: Represents the worksheet protection option of allowing using pivot
     table feature.
    :type allow_pivot_tables: bool
    :param allow_sort: Represents the worksheet protection option of allowing using sort feature.
    :type allow_sort: bool
    """

    _attribute_map = {
        'allow_auto_filter': {'key': 'allowAutoFilter', 'type': 'bool'},
        'allow_delete_columns': {'key': 'allowDeleteColumns', 'type': 'bool'},
        'allow_delete_rows': {'key': 'allowDeleteRows', 'type': 'bool'},
        'allow_format_cells': {'key': 'allowFormatCells', 'type': 'bool'},
        'allow_format_columns': {'key': 'allowFormatColumns', 'type': 'bool'},
        'allow_format_rows': {'key': 'allowFormatRows', 'type': 'bool'},
        'allow_insert_columns': {'key': 'allowInsertColumns', 'type': 'bool'},
        'allow_insert_hyperlinks': {'key': 'allowInsertHyperlinks', 'type': 'bool'},
        'allow_insert_rows': {'key': 'allowInsertRows', 'type': 'bool'},
        'allow_pivot_tables': {'key': 'allowPivotTables', 'type': 'bool'},
        'allow_sort': {'key': 'allowSort', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        allow_auto_filter: Optional[bool] = None,
        allow_delete_columns: Optional[bool] = None,
        allow_delete_rows: Optional[bool] = None,
        allow_format_cells: Optional[bool] = None,
        allow_format_columns: Optional[bool] = None,
        allow_format_rows: Optional[bool] = None,
        allow_insert_columns: Optional[bool] = None,
        allow_insert_hyperlinks: Optional[bool] = None,
        allow_insert_rows: Optional[bool] = None,
        allow_pivot_tables: Optional[bool] = None,
        allow_sort: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookWorksheetProtectionOptions, self).__init__(**kwargs)
        self.allow_auto_filter = allow_auto_filter
        self.allow_delete_columns = allow_delete_columns
        self.allow_delete_rows = allow_delete_rows
        self.allow_format_cells = allow_format_cells
        self.allow_format_columns = allow_format_columns
        self.allow_format_rows = allow_format_rows
        self.allow_insert_columns = allow_insert_columns
        self.allow_insert_hyperlinks = allow_insert_hyperlinks
        self.allow_insert_rows = allow_insert_rows
        self.allow_pivot_tables = allow_pivot_tables
        self.allow_sort = allow_sort


class MicrosoftGraphWorkingHours(msrest.serialization.Model):
    """workingHours.

    :param days_of_week: The days of the week on which the user works.
    :type days_of_week: list[str or ~users_user.models.MicrosoftGraphDayOfWeek]
    :param start_time: The time of the day that the user starts working.
    :type start_time: ~datetime.time
    :param end_time: The time of the day that the user stops working.
    :type end_time: ~datetime.time
    :param time_zone: timeZoneBase.
    :type time_zone: ~users_user.models.MicrosoftGraphTimeZoneBase
    """

    _attribute_map = {
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'start_time': {'key': 'startTime', 'type': 'time'},
        'end_time': {'key': 'endTime', 'type': 'time'},
        'time_zone': {'key': 'timeZone', 'type': 'MicrosoftGraphTimeZoneBase'},
    }

    def __init__(
        self,
        *,
        days_of_week: Optional[List[Union[str, "MicrosoftGraphDayOfWeek"]]] = None,
        start_time: Optional[datetime.time] = None,
        end_time: Optional[datetime.time] = None,
        time_zone: Optional["MicrosoftGraphTimeZoneBase"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkingHours, self).__init__(**kwargs)
        self.days_of_week = days_of_week
        self.start_time = start_time
        self.end_time = end_time
        self.time_zone = time_zone


class MicrosoftGraphWorkPosition(MicrosoftGraphItemFacet):
    """workPosition.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences: allowedAudiences. Possible values include: "me", "family",
     "contacts", "groupMembers", "organization", "federatedOrganizations", "everyone",
     "unknownFutureValue".
    :type allowed_audiences: str or ~users_user.models.MicrosoftGraphAllowedAudiences
    :param inference: inferenceData.
    :type inference: ~users_user.models.MicrosoftGraphInferenceData
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~users_user.models.MicrosoftGraphIdentitySet
    :param categories:
    :type categories: list[str]
    :param detail: positionDetail.
    :type detail: ~users_user.models.MicrosoftGraphPositionDetail
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'detail': {'key': 'detail', 'type': 'MicrosoftGraphPositionDetail'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "MicrosoftGraphAllowedAudiences"]] = None,
        inference: Optional["MicrosoftGraphInferenceData"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        created_by: Optional["MicrosoftGraphIdentitySet"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_modified_by: Optional["MicrosoftGraphIdentitySet"] = None,
        categories: Optional[List[str]] = None,
        detail: Optional["MicrosoftGraphPositionDetail"] = None,
        **kwargs
    ):
        super(MicrosoftGraphWorkPosition, self).__init__(id=id, allowed_audiences=allowed_audiences, inference=inference, created_date_time=created_date_time, created_by=created_by, last_modified_date_time=last_modified_date_time, last_modified_by=last_modified_by, **kwargs)
        self.categories = categories
        self.detail = detail


class MicrosoftGraphYomiPersonName(msrest.serialization.Model):
    """yomiPersonName.

    :param display_name:
    :type display_name: str
    :param first:
    :type first: str
    :param maiden:
    :type maiden: str
    :param middle:
    :type middle: str
    :param last:
    :type last: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'first': {'key': 'first', 'type': 'str'},
        'maiden': {'key': 'maiden', 'type': 'str'},
        'middle': {'key': 'middle', 'type': 'str'},
        'last': {'key': 'last', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        first: Optional[str] = None,
        maiden: Optional[str] = None,
        middle: Optional[str] = None,
        last: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphYomiPersonName, self).__init__(**kwargs)
        self.display_name = display_name
        self.first = first
        self.maiden = maiden
        self.middle = middle
        self.last = last


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~users_user.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~users_user.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[object] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror

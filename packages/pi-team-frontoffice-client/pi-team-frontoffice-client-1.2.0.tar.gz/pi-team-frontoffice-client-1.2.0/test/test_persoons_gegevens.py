# coding: utf-8

"""
    MN Frontoffice CORE & PERE

    Highly available and searchable datastore for MN  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import frontoffice
from frontoffice.models.persoons_gegevens import PersoonsGegevens  # noqa: E501
from frontoffice.rest import ApiException

class TestPersoonsGegevens(unittest.TestCase):
    """PersoonsGegevens unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PersoonsGegevens
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = frontoffice.models.persoons_gegevens.PersoonsGegevens()  # noqa: E501
        if include_optional :
            return PersoonsGegevens(
                burgerservicenummer = '0', 
                persoonsnummer = '0', 
                relatienummer = '0', 
                anummer = '0', 
                naam = '0', 
                voornamen = '0', 
                voorlettes = '0', 
                voorvoegsels = '0', 
                naamgebruik = '0', 
                opgemaakte_naam = '0', 
                voorkeursnaam = '0', 
                geboortedatum = frontoffice.models.datum_delen.DatumDelen(
                    dag = 56, 
                    maand = 56, 
                    jaar = 56, ), 
                overlijdensdatum = frontoffice.models.datum_delen.DatumDelen(
                    dag = 56, 
                    maand = 56, 
                    jaar = 56, ), 
                geslacht = '0', 
                partner_naam = '0', 
                partner_voorvoegsels = '0', 
                gba_status = '0', 
                afnemersindicatie = True, 
                partnerschappen = [
                    frontoffice.models.partnerschap.Partnerschap(
                        partner = frontoffice.models.persoons_gegevens_basic.PersoonsGegevensBasic(
                            burgerservicenummer = '0', 
                            persoonsnummer = '0', 
                            relatienummer = '0', 
                            anummer = '0', 
                            naam = '0', 
                            voornamen = '0', 
                            voorlettes = '0', 
                            voorvoegsels = '0', 
                            naamgebruik = '0', 
                            opgemaakte_naam = '0', 
                            voorkeursnaam = '0', 
                            geboortedatum = frontoffice.models.datum_delen.DatumDelen(
                                dag = 56, 
                                maand = 56, 
                                jaar = 56, ), 
                            overlijdensdatum = frontoffice.models.datum_delen.DatumDelen(
                                dag = 56, 
                                maand = 56, 
                                jaar = 56, ), 
                            geslacht = '0', 
                            partner_naam = '0', 
                            partner_voorvoegsels = '0', ), 
                        soort = '0', 
                        begindatum = frontoffice.models.datum_delen.DatumDelen(
                            dag = 56, 
                            maand = 56, 
                            jaar = 56, ), 
                        einddatum = frontoffice.models.datum_delen.DatumDelen(
                            dag = 56, 
                            maand = 56, 
                            jaar = 56, ), )
                    ], 
                kinderen = [
                    frontoffice.models.persoons_gegevens_basic.PersoonsGegevensBasic(
                        burgerservicenummer = '0', 
                        persoonsnummer = '0', 
                        relatienummer = '0', 
                        anummer = '0', 
                        naam = '0', 
                        voornamen = '0', 
                        voorlettes = '0', 
                        voorvoegsels = '0', 
                        naamgebruik = '0', 
                        opgemaakte_naam = '0', 
                        voorkeursnaam = '0', 
                        geboortedatum = frontoffice.models.datum_delen.DatumDelen(
                            dag = 56, 
                            maand = 56, 
                            jaar = 56, ), 
                        overlijdensdatum = frontoffice.models.datum_delen.DatumDelen(
                            dag = 56, 
                            maand = 56, 
                            jaar = 56, ), 
                        geslacht = '0', 
                        partner_naam = '0', 
                        partner_voorvoegsels = '0', )
                    ], 
                ouders = [
                    frontoffice.models.persoons_gegevens_basic.PersoonsGegevensBasic(
                        burgerservicenummer = '0', 
                        persoonsnummer = '0', 
                        relatienummer = '0', 
                        anummer = '0', 
                        naam = '0', 
                        voornamen = '0', 
                        voorlettes = '0', 
                        voorvoegsels = '0', 
                        naamgebruik = '0', 
                        opgemaakte_naam = '0', 
                        voorkeursnaam = '0', 
                        geboortedatum = frontoffice.models.datum_delen.DatumDelen(
                            dag = 56, 
                            maand = 56, 
                            jaar = 56, ), 
                        overlijdensdatum = frontoffice.models.datum_delen.DatumDelen(
                            dag = 56, 
                            maand = 56, 
                            jaar = 56, ), 
                        geslacht = '0', 
                        partner_naam = '0', 
                        partner_voorvoegsels = '0', )
                    ]
            )
        else :
            return PersoonsGegevens(
                persoonsnummer = '0',
        )

    def testPersoonsGegevens(self):
        """Test PersoonsGegevens"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()

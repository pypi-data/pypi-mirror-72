# coding: utf-8

"""
    MN Frontoffice CORE & PERE

    Highly available and searchable datastore for MN  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontoffice.configuration import Configuration


class PersoonContactGegevens(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'adressen': 'list[AdresMutatie]',
        'kanaalvoorkeur': 'str',
        'nieuwsbrief': 'bool',
        'klanttevredenheidsonderzoek': 'bool',
        'magazine': 'str',
        'telefoonnummer1': 'str',
        'telefoonnummer2': 'str',
        'email_adresseerbaar': 'bool',
        'opgemaakte_naam': 'str',
        'geboortedatum': 'DatumDelen',
        'overlijdensdatum': 'DatumDelen',
        'relatienummer': 'str'
    }

    attribute_map = {
        'email': 'email',
        'adressen': 'adressen',
        'kanaalvoorkeur': 'kanaalvoorkeur',
        'nieuwsbrief': 'nieuwsbrief',
        'klanttevredenheidsonderzoek': 'klanttevredenheidsonderzoek',
        'magazine': 'magazine',
        'telefoonnummer1': 'telefoonnummer1',
        'telefoonnummer2': 'telefoonnummer2',
        'email_adresseerbaar': 'emailAdresseerbaar',
        'opgemaakte_naam': 'opgemaakteNaam',
        'geboortedatum': 'Geboortedatum',
        'overlijdensdatum': 'Overlijdensdatum',
        'relatienummer': 'relatienummer'
    }

    def __init__(self, email=None, adressen=[], kanaalvoorkeur=None, nieuwsbrief=None, klanttevredenheidsonderzoek=None, magazine=None, telefoonnummer1=None, telefoonnummer2=None, email_adresseerbaar=None, opgemaakte_naam=None, geboortedatum=None, overlijdensdatum=None, relatienummer=None, local_vars_configuration=None):  # noqa: E501
        """PersoonContactGegevens - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._adressen = None
        self._kanaalvoorkeur = None
        self._nieuwsbrief = None
        self._klanttevredenheidsonderzoek = None
        self._magazine = None
        self._telefoonnummer1 = None
        self._telefoonnummer2 = None
        self._email_adresseerbaar = None
        self._opgemaakte_naam = None
        self._geboortedatum = None
        self._overlijdensdatum = None
        self._relatienummer = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if adressen is not None:
            self.adressen = adressen
        if kanaalvoorkeur is not None:
            self.kanaalvoorkeur = kanaalvoorkeur
        if nieuwsbrief is not None:
            self.nieuwsbrief = nieuwsbrief
        if klanttevredenheidsonderzoek is not None:
            self.klanttevredenheidsonderzoek = klanttevredenheidsonderzoek
        if magazine is not None:
            self.magazine = magazine
        if telefoonnummer1 is not None:
            self.telefoonnummer1 = telefoonnummer1
        if telefoonnummer2 is not None:
            self.telefoonnummer2 = telefoonnummer2
        if email_adresseerbaar is not None:
            self.email_adresseerbaar = email_adresseerbaar
        if opgemaakte_naam is not None:
            self.opgemaakte_naam = opgemaakte_naam
        if geboortedatum is not None:
            self.geboortedatum = geboortedatum
        if overlijdensdatum is not None:
            self.overlijdensdatum = overlijdensdatum
        if relatienummer is not None:
            self.relatienummer = relatienummer

    @property
    def email(self):
        """Gets the email of this PersoonContactGegevens.  # noqa: E501


        :return: The email of this PersoonContactGegevens.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PersoonContactGegevens.


        :param email: The email of this PersoonContactGegevens.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def adressen(self):
        """Gets the adressen of this PersoonContactGegevens.  # noqa: E501


        :return: The adressen of this PersoonContactGegevens.  # noqa: E501
        :rtype: list[AdresMutatie]
        """
        return self._adressen

    @adressen.setter
    def adressen(self, adressen):
        """Sets the adressen of this PersoonContactGegevens.


        :param adressen: The adressen of this PersoonContactGegevens.  # noqa: E501
        :type: list[AdresMutatie]
        """

        self._adressen = adressen

    @property
    def kanaalvoorkeur(self):
        """Gets the kanaalvoorkeur of this PersoonContactGegevens.  # noqa: E501


        :return: The kanaalvoorkeur of this PersoonContactGegevens.  # noqa: E501
        :rtype: str
        """
        return self._kanaalvoorkeur

    @kanaalvoorkeur.setter
    def kanaalvoorkeur(self, kanaalvoorkeur):
        """Sets the kanaalvoorkeur of this PersoonContactGegevens.


        :param kanaalvoorkeur: The kanaalvoorkeur of this PersoonContactGegevens.  # noqa: E501
        :type: str
        """
        allowed_values = ["POST", "PORTAAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and kanaalvoorkeur not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `kanaalvoorkeur` ({0}), must be one of {1}"  # noqa: E501
                .format(kanaalvoorkeur, allowed_values)
            )

        self._kanaalvoorkeur = kanaalvoorkeur

    @property
    def nieuwsbrief(self):
        """Gets the nieuwsbrief of this PersoonContactGegevens.  # noqa: E501


        :return: The nieuwsbrief of this PersoonContactGegevens.  # noqa: E501
        :rtype: bool
        """
        return self._nieuwsbrief

    @nieuwsbrief.setter
    def nieuwsbrief(self, nieuwsbrief):
        """Sets the nieuwsbrief of this PersoonContactGegevens.


        :param nieuwsbrief: The nieuwsbrief of this PersoonContactGegevens.  # noqa: E501
        :type: bool
        """

        self._nieuwsbrief = nieuwsbrief

    @property
    def klanttevredenheidsonderzoek(self):
        """Gets the klanttevredenheidsonderzoek of this PersoonContactGegevens.  # noqa: E501


        :return: The klanttevredenheidsonderzoek of this PersoonContactGegevens.  # noqa: E501
        :rtype: bool
        """
        return self._klanttevredenheidsonderzoek

    @klanttevredenheidsonderzoek.setter
    def klanttevredenheidsonderzoek(self, klanttevredenheidsonderzoek):
        """Sets the klanttevredenheidsonderzoek of this PersoonContactGegevens.


        :param klanttevredenheidsonderzoek: The klanttevredenheidsonderzoek of this PersoonContactGegevens.  # noqa: E501
        :type: bool
        """

        self._klanttevredenheidsonderzoek = klanttevredenheidsonderzoek

    @property
    def magazine(self):
        """Gets the magazine of this PersoonContactGegevens.  # noqa: E501


        :return: The magazine of this PersoonContactGegevens.  # noqa: E501
        :rtype: str
        """
        return self._magazine

    @magazine.setter
    def magazine(self, magazine):
        """Sets the magazine of this PersoonContactGegevens.


        :param magazine: The magazine of this PersoonContactGegevens.  # noqa: E501
        :type: str
        """
        allowed_values = ["POST", "PORTAAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and magazine not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `magazine` ({0}), must be one of {1}"  # noqa: E501
                .format(magazine, allowed_values)
            )

        self._magazine = magazine

    @property
    def telefoonnummer1(self):
        """Gets the telefoonnummer1 of this PersoonContactGegevens.  # noqa: E501


        :return: The telefoonnummer1 of this PersoonContactGegevens.  # noqa: E501
        :rtype: str
        """
        return self._telefoonnummer1

    @telefoonnummer1.setter
    def telefoonnummer1(self, telefoonnummer1):
        """Sets the telefoonnummer1 of this PersoonContactGegevens.


        :param telefoonnummer1: The telefoonnummer1 of this PersoonContactGegevens.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                telefoonnummer1 is not None and not re.search(r'^[+]?[\-\d]+$', telefoonnummer1)):  # noqa: E501
            raise ValueError(r"Invalid value for `telefoonnummer1`, must be a follow pattern or equal to `/^[+]?[\-\d]+$/`")  # noqa: E501

        self._telefoonnummer1 = telefoonnummer1

    @property
    def telefoonnummer2(self):
        """Gets the telefoonnummer2 of this PersoonContactGegevens.  # noqa: E501


        :return: The telefoonnummer2 of this PersoonContactGegevens.  # noqa: E501
        :rtype: str
        """
        return self._telefoonnummer2

    @telefoonnummer2.setter
    def telefoonnummer2(self, telefoonnummer2):
        """Sets the telefoonnummer2 of this PersoonContactGegevens.


        :param telefoonnummer2: The telefoonnummer2 of this PersoonContactGegevens.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                telefoonnummer2 is not None and not re.search(r'^[+]?[\-\d]+$', telefoonnummer2)):  # noqa: E501
            raise ValueError(r"Invalid value for `telefoonnummer2`, must be a follow pattern or equal to `/^[+]?[\-\d]+$/`")  # noqa: E501

        self._telefoonnummer2 = telefoonnummer2

    @property
    def email_adresseerbaar(self):
        """Gets the email_adresseerbaar of this PersoonContactGegevens.  # noqa: E501


        :return: The email_adresseerbaar of this PersoonContactGegevens.  # noqa: E501
        :rtype: bool
        """
        return self._email_adresseerbaar

    @email_adresseerbaar.setter
    def email_adresseerbaar(self, email_adresseerbaar):
        """Sets the email_adresseerbaar of this PersoonContactGegevens.


        :param email_adresseerbaar: The email_adresseerbaar of this PersoonContactGegevens.  # noqa: E501
        :type: bool
        """

        self._email_adresseerbaar = email_adresseerbaar

    @property
    def opgemaakte_naam(self):
        """Gets the opgemaakte_naam of this PersoonContactGegevens.  # noqa: E501


        :return: The opgemaakte_naam of this PersoonContactGegevens.  # noqa: E501
        :rtype: str
        """
        return self._opgemaakte_naam

    @opgemaakte_naam.setter
    def opgemaakte_naam(self, opgemaakte_naam):
        """Sets the opgemaakte_naam of this PersoonContactGegevens.


        :param opgemaakte_naam: The opgemaakte_naam of this PersoonContactGegevens.  # noqa: E501
        :type: str
        """

        self._opgemaakte_naam = opgemaakte_naam

    @property
    def geboortedatum(self):
        """Gets the geboortedatum of this PersoonContactGegevens.  # noqa: E501


        :return: The geboortedatum of this PersoonContactGegevens.  # noqa: E501
        :rtype: DatumDelen
        """
        return self._geboortedatum

    @geboortedatum.setter
    def geboortedatum(self, geboortedatum):
        """Sets the geboortedatum of this PersoonContactGegevens.


        :param geboortedatum: The geboortedatum of this PersoonContactGegevens.  # noqa: E501
        :type: DatumDelen
        """

        self._geboortedatum = geboortedatum

    @property
    def overlijdensdatum(self):
        """Gets the overlijdensdatum of this PersoonContactGegevens.  # noqa: E501


        :return: The overlijdensdatum of this PersoonContactGegevens.  # noqa: E501
        :rtype: DatumDelen
        """
        return self._overlijdensdatum

    @overlijdensdatum.setter
    def overlijdensdatum(self, overlijdensdatum):
        """Sets the overlijdensdatum of this PersoonContactGegevens.


        :param overlijdensdatum: The overlijdensdatum of this PersoonContactGegevens.  # noqa: E501
        :type: DatumDelen
        """

        self._overlijdensdatum = overlijdensdatum

    @property
    def relatienummer(self):
        """Gets the relatienummer of this PersoonContactGegevens.  # noqa: E501


        :return: The relatienummer of this PersoonContactGegevens.  # noqa: E501
        :rtype: str
        """
        return self._relatienummer

    @relatienummer.setter
    def relatienummer(self, relatienummer):
        """Sets the relatienummer of this PersoonContactGegevens.


        :param relatienummer: The relatienummer of this PersoonContactGegevens.  # noqa: E501
        :type: str
        """

        self._relatienummer = relatienummer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersoonContactGegevens):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PersoonContactGegevens):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    MN Frontoffice CORE & PERE

    Highly available and searchable datastore for MN  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontoffice.configuration import Configuration


class ContactgegevensEventInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bron': 'str',
        'correlatie_id': 'str',
        'event_datum_bron': 'datetime',
        'event_title': 'str',
        'indiener': 'str',
        'event_payload': 'AnyOfPersoonContactGegevensContactpersoonGegevensWerkgegeverContactGegevens'
    }

    attribute_map = {
        'bron': 'bron',
        'correlatie_id': 'correlatie_id',
        'event_datum_bron': 'event_datum_bron',
        'event_title': 'event_title',
        'indiener': 'indiener',
        'event_payload': 'event_payload'
    }

    def __init__(self, bron=None, correlatie_id=None, event_datum_bron=None, event_title=None, indiener=None, event_payload=None, local_vars_configuration=None):  # noqa: E501
        """ContactgegevensEventInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bron = None
        self._correlatie_id = None
        self._event_datum_bron = None
        self._event_title = None
        self._indiener = None
        self._event_payload = None
        self.discriminator = None

        self.bron = bron
        self.correlatie_id = correlatie_id
        self.event_datum_bron = event_datum_bron
        self.event_title = event_title
        self.indiener = indiener
        self.event_payload = event_payload

    @property
    def bron(self):
        """Gets the bron of this ContactgegevensEventInput.  # noqa: E501


        :return: The bron of this ContactgegevensEventInput.  # noqa: E501
        :rtype: str
        """
        return self._bron

    @bron.setter
    def bron(self, bron):
        """Sets the bron of this ContactgegevensEventInput.


        :param bron: The bron of this ContactgegevensEventInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bron is None:  # noqa: E501
            raise ValueError("Invalid value for `bron`, must not be `None`")  # noqa: E501

        self._bron = bron

    @property
    def correlatie_id(self):
        """Gets the correlatie_id of this ContactgegevensEventInput.  # noqa: E501


        :return: The correlatie_id of this ContactgegevensEventInput.  # noqa: E501
        :rtype: str
        """
        return self._correlatie_id

    @correlatie_id.setter
    def correlatie_id(self, correlatie_id):
        """Sets the correlatie_id of this ContactgegevensEventInput.


        :param correlatie_id: The correlatie_id of this ContactgegevensEventInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and correlatie_id is None:  # noqa: E501
            raise ValueError("Invalid value for `correlatie_id`, must not be `None`")  # noqa: E501

        self._correlatie_id = correlatie_id

    @property
    def event_datum_bron(self):
        """Gets the event_datum_bron of this ContactgegevensEventInput.  # noqa: E501


        :return: The event_datum_bron of this ContactgegevensEventInput.  # noqa: E501
        :rtype: datetime
        """
        return self._event_datum_bron

    @event_datum_bron.setter
    def event_datum_bron(self, event_datum_bron):
        """Sets the event_datum_bron of this ContactgegevensEventInput.


        :param event_datum_bron: The event_datum_bron of this ContactgegevensEventInput.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and event_datum_bron is None:  # noqa: E501
            raise ValueError("Invalid value for `event_datum_bron`, must not be `None`")  # noqa: E501

        self._event_datum_bron = event_datum_bron

    @property
    def event_title(self):
        """Gets the event_title of this ContactgegevensEventInput.  # noqa: E501


        :return: The event_title of this ContactgegevensEventInput.  # noqa: E501
        :rtype: str
        """
        return self._event_title

    @event_title.setter
    def event_title(self, event_title):
        """Sets the event_title of this ContactgegevensEventInput.


        :param event_title: The event_title of this ContactgegevensEventInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and event_title is None:  # noqa: E501
            raise ValueError("Invalid value for `event_title`, must not be `None`")  # noqa: E501

        self._event_title = event_title

    @property
    def indiener(self):
        """Gets the indiener of this ContactgegevensEventInput.  # noqa: E501


        :return: The indiener of this ContactgegevensEventInput.  # noqa: E501
        :rtype: str
        """
        return self._indiener

    @indiener.setter
    def indiener(self, indiener):
        """Sets the indiener of this ContactgegevensEventInput.


        :param indiener: The indiener of this ContactgegevensEventInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and indiener is None:  # noqa: E501
            raise ValueError("Invalid value for `indiener`, must not be `None`")  # noqa: E501

        self._indiener = indiener

    @property
    def event_payload(self):
        """Gets the event_payload of this ContactgegevensEventInput.  # noqa: E501


        :return: The event_payload of this ContactgegevensEventInput.  # noqa: E501
        :rtype: AnyOfPersoonContactGegevensContactpersoonGegevensWerkgegeverContactGegevens
        """
        return self._event_payload

    @event_payload.setter
    def event_payload(self, event_payload):
        """Sets the event_payload of this ContactgegevensEventInput.


        :param event_payload: The event_payload of this ContactgegevensEventInput.  # noqa: E501
        :type: AnyOfPersoonContactGegevensContactpersoonGegevensWerkgegeverContactGegevens
        """
        if self.local_vars_configuration.client_side_validation and event_payload is None:  # noqa: E501
            raise ValueError("Invalid value for `event_payload`, must not be `None`")  # noqa: E501

        self._event_payload = event_payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactgegevensEventInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactgegevensEventInput):
            return True

        return self.to_dict() != other.to_dict()

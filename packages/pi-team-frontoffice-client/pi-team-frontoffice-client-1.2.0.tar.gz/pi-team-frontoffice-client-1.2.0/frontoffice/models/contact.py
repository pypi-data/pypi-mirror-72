# coding: utf-8

"""
    MN Frontoffice CORE & PERE

    Highly available and searchable datastore for MN  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontoffice.configuration import Configuration


class Contact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'version': 'int',
        'identificatie': 'str',
        'administratie': 'str',
        'relatiesoort': 'str',
        'persoonsnummer': 'str',
        'persoonsgegevens': 'PersoonsGegevens',
        'contactgegevens_events': 'list[ContactgegevensEvent]',
        'contactgegevens': 'AnyOfobjectobjectobject'
    }

    attribute_map = {
        'uuid': 'uuid',
        'version': 'version',
        'identificatie': 'identificatie',
        'administratie': 'administratie',
        'relatiesoort': 'relatiesoort',
        'persoonsnummer': 'persoonsnummer',
        'persoonsgegevens': 'persoonsgegevens',
        'contactgegevens_events': 'contactgegevens_events',
        'contactgegevens': 'contactgegevens'
    }

    def __init__(self, uuid='6ae6c4a8-357c-4ee7-9f11-cd3e557433be', version=0, identificatie=None, administratie=None, relatiesoort=None, persoonsnummer=None, persoonsgegevens=None, contactgegevens_events=[], contactgegevens=None, local_vars_configuration=None):  # noqa: E501
        """Contact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._version = None
        self._identificatie = None
        self._administratie = None
        self._relatiesoort = None
        self._persoonsnummer = None
        self._persoonsgegevens = None
        self._contactgegevens_events = None
        self._contactgegevens = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if version is not None:
            self.version = version
        self.identificatie = identificatie
        if administratie is not None:
            self.administratie = administratie
        if relatiesoort is not None:
            self.relatiesoort = relatiesoort
        if persoonsnummer is not None:
            self.persoonsnummer = persoonsnummer
        if persoonsgegevens is not None:
            self.persoonsgegevens = persoonsgegevens
        if contactgegevens_events is not None:
            self.contactgegevens_events = contactgegevens_events
        if contactgegevens is not None:
            self.contactgegevens = contactgegevens

    @property
    def uuid(self):
        """Gets the uuid of this Contact.  # noqa: E501


        :return: The uuid of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Contact.


        :param uuid: The uuid of this Contact.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def version(self):
        """Gets the version of this Contact.  # noqa: E501


        :return: The version of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Contact.


        :param version: The version of this Contact.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def identificatie(self):
        """Gets the identificatie of this Contact.  # noqa: E501


        :return: The identificatie of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._identificatie

    @identificatie.setter
    def identificatie(self, identificatie):
        """Sets the identificatie of this Contact.


        :param identificatie: The identificatie of this Contact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and identificatie is None:  # noqa: E501
            raise ValueError("Invalid value for `identificatie`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                identificatie is not None and not re.search(r'^([A-Z\s-]+\|\w+\|\w+)$', identificatie)):  # noqa: E501
            raise ValueError(r"Invalid value for `identificatie`, must be a follow pattern or equal to `/^([A-Z\s-]+\|\w+\|\w+)$/`")  # noqa: E501

        self._identificatie = identificatie

    @property
    def administratie(self):
        """Gets the administratie of this Contact.  # noqa: E501


        :return: The administratie of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._administratie

    @administratie.setter
    def administratie(self, administratie):
        """Sets the administratie of this Contact.


        :param administratie: The administratie of this Contact.  # noqa: E501
        :type: str
        """

        self._administratie = administratie

    @property
    def relatiesoort(self):
        """Gets the relatiesoort of this Contact.  # noqa: E501


        :return: The relatiesoort of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._relatiesoort

    @relatiesoort.setter
    def relatiesoort(self, relatiesoort):
        """Sets the relatiesoort of this Contact.


        :param relatiesoort: The relatiesoort of this Contact.  # noqa: E501
        :type: str
        """

        self._relatiesoort = relatiesoort

    @property
    def persoonsnummer(self):
        """Gets the persoonsnummer of this Contact.  # noqa: E501


        :return: The persoonsnummer of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._persoonsnummer

    @persoonsnummer.setter
    def persoonsnummer(self, persoonsnummer):
        """Sets the persoonsnummer of this Contact.


        :param persoonsnummer: The persoonsnummer of this Contact.  # noqa: E501
        :type: str
        """

        self._persoonsnummer = persoonsnummer

    @property
    def persoonsgegevens(self):
        """Gets the persoonsgegevens of this Contact.  # noqa: E501

        Persoonsgegevens for a Contact  # noqa: E501

        :return: The persoonsgegevens of this Contact.  # noqa: E501
        :rtype: PersoonsGegevens
        """
        return self._persoonsgegevens

    @persoonsgegevens.setter
    def persoonsgegevens(self, persoonsgegevens):
        """Sets the persoonsgegevens of this Contact.

        Persoonsgegevens for a Contact  # noqa: E501

        :param persoonsgegevens: The persoonsgegevens of this Contact.  # noqa: E501
        :type: PersoonsGegevens
        """

        self._persoonsgegevens = persoonsgegevens

    @property
    def contactgegevens_events(self):
        """Gets the contactgegevens_events of this Contact.  # noqa: E501

        A list of events for a Contact  # noqa: E501

        :return: The contactgegevens_events of this Contact.  # noqa: E501
        :rtype: list[ContactgegevensEvent]
        """
        return self._contactgegevens_events

    @contactgegevens_events.setter
    def contactgegevens_events(self, contactgegevens_events):
        """Sets the contactgegevens_events of this Contact.

        A list of events for a Contact  # noqa: E501

        :param contactgegevens_events: The contactgegevens_events of this Contact.  # noqa: E501
        :type: list[ContactgegevensEvent]
        """

        self._contactgegevens_events = contactgegevens_events

    @property
    def contactgegevens(self):
        """Gets the contactgegevens of this Contact.  # noqa: E501

        The current snapshort of a Contact  # noqa: E501

        :return: The contactgegevens of this Contact.  # noqa: E501
        :rtype: AnyOfobjectobjectobject
        """
        return self._contactgegevens

    @contactgegevens.setter
    def contactgegevens(self, contactgegevens):
        """Sets the contactgegevens of this Contact.

        The current snapshort of a Contact  # noqa: E501

        :param contactgegevens: The contactgegevens of this Contact.  # noqa: E501
        :type: AnyOfobjectobjectobject
        """

        self._contactgegevens = contactgegevens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Contact):
            return True

        return self.to_dict() != other.to_dict()

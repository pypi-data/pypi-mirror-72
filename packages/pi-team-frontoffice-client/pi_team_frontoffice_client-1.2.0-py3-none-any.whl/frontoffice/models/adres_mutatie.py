# coding: utf-8

"""
    MN Frontoffice CORE & PERE

    Highly available and searchable datastore for MN  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontoffice.configuration import Configuration


class AdresMutatie(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'soort': 'str',
        'postcode': 'str',
        'straat': 'str',
        'land': 'str',
        'huisnummer': 'int',
        'huisnummertoevoeging': 'str',
        'landnaam': 'str',
        'verwijderd': 'bool',
        'einddatum': 'str'
    }

    attribute_map = {
        'soort': 'soort',
        'postcode': 'postcode',
        'straat': 'straat',
        'land': 'land',
        'huisnummer': 'huisnummer',
        'huisnummertoevoeging': 'huisnummertoevoeging',
        'landnaam': 'landnaam',
        'verwijderd': 'verwijderd',
        'einddatum': 'einddatum'
    }

    def __init__(self, soort=None, postcode=None, straat=None, land=None, huisnummer=None, huisnummertoevoeging=None, landnaam=None, verwijderd=None, einddatum=None, local_vars_configuration=None):  # noqa: E501
        """AdresMutatie - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._soort = None
        self._postcode = None
        self._straat = None
        self._land = None
        self._huisnummer = None
        self._huisnummertoevoeging = None
        self._landnaam = None
        self._verwijderd = None
        self._einddatum = None
        self.discriminator = None

        self.soort = soort
        if postcode is not None:
            self.postcode = postcode
        if straat is not None:
            self.straat = straat
        if land is not None:
            self.land = land
        if huisnummer is not None:
            self.huisnummer = huisnummer
        if huisnummertoevoeging is not None:
            self.huisnummertoevoeging = huisnummertoevoeging
        if landnaam is not None:
            self.landnaam = landnaam
        if verwijderd is not None:
            self.verwijderd = verwijderd
        if einddatum is not None:
            self.einddatum = einddatum

    @property
    def soort(self):
        """Gets the soort of this AdresMutatie.  # noqa: E501


        :return: The soort of this AdresMutatie.  # noqa: E501
        :rtype: str
        """
        return self._soort

    @soort.setter
    def soort(self, soort):
        """Sets the soort of this AdresMutatie.


        :param soort: The soort of this AdresMutatie.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and soort is None:  # noqa: E501
            raise ValueError("Invalid value for `soort`, must not be `None`")  # noqa: E501
        allowed_values = ["Domicilie", "Opgegeven", "Statutair", "Correspondentie"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and soort not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `soort` ({0}), must be one of {1}"  # noqa: E501
                .format(soort, allowed_values)
            )

        self._soort = soort

    @property
    def postcode(self):
        """Gets the postcode of this AdresMutatie.  # noqa: E501


        :return: The postcode of this AdresMutatie.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this AdresMutatie.


        :param postcode: The postcode of this AdresMutatie.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def straat(self):
        """Gets the straat of this AdresMutatie.  # noqa: E501


        :return: The straat of this AdresMutatie.  # noqa: E501
        :rtype: str
        """
        return self._straat

    @straat.setter
    def straat(self, straat):
        """Sets the straat of this AdresMutatie.


        :param straat: The straat of this AdresMutatie.  # noqa: E501
        :type: str
        """

        self._straat = straat

    @property
    def land(self):
        """Gets the land of this AdresMutatie.  # noqa: E501


        :return: The land of this AdresMutatie.  # noqa: E501
        :rtype: str
        """
        return self._land

    @land.setter
    def land(self, land):
        """Sets the land of this AdresMutatie.


        :param land: The land of this AdresMutatie.  # noqa: E501
        :type: str
        """

        self._land = land

    @property
    def huisnummer(self):
        """Gets the huisnummer of this AdresMutatie.  # noqa: E501


        :return: The huisnummer of this AdresMutatie.  # noqa: E501
        :rtype: int
        """
        return self._huisnummer

    @huisnummer.setter
    def huisnummer(self, huisnummer):
        """Sets the huisnummer of this AdresMutatie.


        :param huisnummer: The huisnummer of this AdresMutatie.  # noqa: E501
        :type: int
        """

        self._huisnummer = huisnummer

    @property
    def huisnummertoevoeging(self):
        """Gets the huisnummertoevoeging of this AdresMutatie.  # noqa: E501


        :return: The huisnummertoevoeging of this AdresMutatie.  # noqa: E501
        :rtype: str
        """
        return self._huisnummertoevoeging

    @huisnummertoevoeging.setter
    def huisnummertoevoeging(self, huisnummertoevoeging):
        """Sets the huisnummertoevoeging of this AdresMutatie.


        :param huisnummertoevoeging: The huisnummertoevoeging of this AdresMutatie.  # noqa: E501
        :type: str
        """

        self._huisnummertoevoeging = huisnummertoevoeging

    @property
    def landnaam(self):
        """Gets the landnaam of this AdresMutatie.  # noqa: E501


        :return: The landnaam of this AdresMutatie.  # noqa: E501
        :rtype: str
        """
        return self._landnaam

    @landnaam.setter
    def landnaam(self, landnaam):
        """Sets the landnaam of this AdresMutatie.


        :param landnaam: The landnaam of this AdresMutatie.  # noqa: E501
        :type: str
        """

        self._landnaam = landnaam

    @property
    def verwijderd(self):
        """Gets the verwijderd of this AdresMutatie.  # noqa: E501

        Indicates that an address has been removed from the database. If set, the field will no longer be included in the snapshot  # noqa: E501

        :return: The verwijderd of this AdresMutatie.  # noqa: E501
        :rtype: bool
        """
        return self._verwijderd

    @verwijderd.setter
    def verwijderd(self, verwijderd):
        """Sets the verwijderd of this AdresMutatie.

        Indicates that an address has been removed from the database. If set, the field will no longer be included in the snapshot  # noqa: E501

        :param verwijderd: The verwijderd of this AdresMutatie.  # noqa: E501
        :type: bool
        """

        self._verwijderd = verwijderd

    @property
    def einddatum(self):
        """Gets the einddatum of this AdresMutatie.  # noqa: E501

        Indicates that someone has moved. If this field is set, this address will no longer be included in the snapshot.  # noqa: E501

        :return: The einddatum of this AdresMutatie.  # noqa: E501
        :rtype: str
        """
        return self._einddatum

    @einddatum.setter
    def einddatum(self, einddatum):
        """Sets the einddatum of this AdresMutatie.

        Indicates that someone has moved. If this field is set, this address will no longer be included in the snapshot.  # noqa: E501

        :param einddatum: The einddatum of this AdresMutatie.  # noqa: E501
        :type: str
        """

        self._einddatum = einddatum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdresMutatie):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdresMutatie):
            return True

        return self.to_dict() != other.to_dict()

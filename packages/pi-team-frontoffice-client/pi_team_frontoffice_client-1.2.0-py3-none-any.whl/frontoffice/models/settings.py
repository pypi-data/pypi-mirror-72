# coding: utf-8

"""
    MN Frontoffice CORE & PERE

    Highly available and searchable datastore for MN  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontoffice.configuration import Configuration


class Settings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'env': 'str',
        'runtime': 'str',
        'generic_es_url': 'str',
        'pere_change_topic': 'str',
        'core_change_topic': 'str'
    }

    attribute_map = {
        'env': 'env',
        'runtime': 'runtime',
        'generic_es_url': 'generic_es_url',
        'pere_change_topic': 'pere_change_topic',
        'core_change_topic': 'core_change_topic'
    }

    def __init__(self, env='fb', runtime='basic', generic_es_url='https://generic-es.dev.mn-cloud.nl', pere_change_topic='frontoffice-pere-changes', core_change_topic='frontoffice-core-changes', local_vars_configuration=None):  # noqa: E501
        """Settings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._env = None
        self._runtime = None
        self._generic_es_url = None
        self._pere_change_topic = None
        self._core_change_topic = None
        self.discriminator = None

        if env is not None:
            self.env = env
        if runtime is not None:
            self.runtime = runtime
        if generic_es_url is not None:
            self.generic_es_url = generic_es_url
        if pere_change_topic is not None:
            self.pere_change_topic = pere_change_topic
        if core_change_topic is not None:
            self.core_change_topic = core_change_topic

    @property
    def env(self):
        """Gets the env of this Settings.  # noqa: E501

        The namespace we are working under. Used to run multiple applications in the same environment.  # noqa: E501

        :return: The env of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Settings.

        The namespace we are working under. Used to run multiple applications in the same environment.  # noqa: E501

        :param env: The env of this Settings.  # noqa: E501
        :type: str
        """

        self._env = env

    @property
    def runtime(self):
        """Gets the runtime of this Settings.  # noqa: E501

        Runtime the application is operating in  # noqa: E501

        :return: The runtime of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this Settings.

        Runtime the application is operating in  # noqa: E501

        :param runtime: The runtime of this Settings.  # noqa: E501
        :type: str
        """
        allowed_values = ["basic", "lambda", "serverless", "docker", "Unknown", "ECS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and runtime not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `runtime` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime, allowed_values)
            )

        self._runtime = runtime

    @property
    def generic_es_url(self):
        """Gets the generic_es_url of this Settings.  # noqa: E501

        The location that contains an instance of the Generic ElasticSearch stack.  # noqa: E501

        :return: The generic_es_url of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._generic_es_url

    @generic_es_url.setter
    def generic_es_url(self, generic_es_url):
        """Sets the generic_es_url of this Settings.

        The location that contains an instance of the Generic ElasticSearch stack.  # noqa: E501

        :param generic_es_url: The generic_es_url of this Settings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                generic_es_url is not None and not re.search(r'^https?:.+$', generic_es_url)):  # noqa: E501
            raise ValueError(r"Invalid value for `generic_es_url`, must be a follow pattern or equal to `/^https?:.+$/`")  # noqa: E501

        self._generic_es_url = generic_es_url

    @property
    def pere_change_topic(self):
        """Gets the pere_change_topic of this Settings.  # noqa: E501


        :return: The pere_change_topic of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._pere_change_topic

    @pere_change_topic.setter
    def pere_change_topic(self, pere_change_topic):
        """Sets the pere_change_topic of this Settings.


        :param pere_change_topic: The pere_change_topic of this Settings.  # noqa: E501
        :type: str
        """

        self._pere_change_topic = pere_change_topic

    @property
    def core_change_topic(self):
        """Gets the core_change_topic of this Settings.  # noqa: E501


        :return: The core_change_topic of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._core_change_topic

    @core_change_topic.setter
    def core_change_topic(self, core_change_topic):
        """Sets the core_change_topic of this Settings.


        :param core_change_topic: The core_change_topic of this Settings.  # noqa: E501
        :type: str
        """

        self._core_change_topic = core_change_topic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Settings):
            return True

        return self.to_dict() != other.to_dict()

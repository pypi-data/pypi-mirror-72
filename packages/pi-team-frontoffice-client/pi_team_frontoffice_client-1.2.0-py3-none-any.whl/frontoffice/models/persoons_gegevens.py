# coding: utf-8

"""
    MN Frontoffice CORE & PERE

    Highly available and searchable datastore for MN  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontoffice.configuration import Configuration


class PersoonsGegevens(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'burgerservicenummer': 'str',
        'persoonsnummer': 'str',
        'relatienummer': 'str',
        'anummer': 'str',
        'naam': 'str',
        'voornamen': 'str',
        'voorlettes': 'str',
        'voorvoegsels': 'str',
        'naamgebruik': 'str',
        'opgemaakte_naam': 'str',
        'voorkeursnaam': 'str',
        'geboortedatum': 'DatumDelen',
        'overlijdensdatum': 'DatumDelen',
        'geslacht': 'str',
        'partner_naam': 'str',
        'partner_voorvoegsels': 'str',
        'verwijderd': 'bool',
        'gba_status': 'str',
        'afnemersindicatie': 'bool',
        'partnerschappen': 'list[Partnerschap]',
        'kinderen': 'list[PersoonsGegevensBasic]',
        'ouders': 'list[PersoonsGegevensBasic]'
    }

    attribute_map = {
        'burgerservicenummer': 'burgerservicenummer',
        'persoonsnummer': 'persoonsnummer',
        'relatienummer': 'relatienummer',
        'anummer': 'anummer',
        'naam': 'naam',
        'voornamen': 'voornamen',
        'voorlettes': 'voorlettes',
        'voorvoegsels': 'voorvoegsels',
        'naamgebruik': 'naamgebruik',
        'opgemaakte_naam': 'opgemaakteNaam',
        'voorkeursnaam': 'voorkeursnaam',
        'geboortedatum': 'Geboortedatum',
        'overlijdensdatum': 'Overlijdensdatum',
        'geslacht': 'geslacht',
        'partner_naam': 'partnerNaam',
        'partner_voorvoegsels': 'partnerVoorvoegsels',
        'verwijderd': 'verwijderd',
        'gba_status': 'gbaStatus',
        'afnemersindicatie': 'afnemersindicatie',
        'partnerschappen': 'Partnerschappen',
        'kinderen': 'Kinderen',
        'ouders': 'Ouders'
    }

    def __init__(self, burgerservicenummer=None, persoonsnummer=None, relatienummer=None, anummer=None, naam=None, voornamen=None, voorlettes=None, voorvoegsels=None, naamgebruik=None, opgemaakte_naam=None, voorkeursnaam=None, geboortedatum=None, overlijdensdatum=None, geslacht=None, partner_naam=None, partner_voorvoegsels=None, verwijderd=None, gba_status=None, afnemersindicatie=None, partnerschappen=[], kinderen=[], ouders=[], local_vars_configuration=None):  # noqa: E501
        """PersoonsGegevens - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._burgerservicenummer = None
        self._persoonsnummer = None
        self._relatienummer = None
        self._anummer = None
        self._naam = None
        self._voornamen = None
        self._voorlettes = None
        self._voorvoegsels = None
        self._naamgebruik = None
        self._opgemaakte_naam = None
        self._voorkeursnaam = None
        self._geboortedatum = None
        self._overlijdensdatum = None
        self._geslacht = None
        self._partner_naam = None
        self._partner_voorvoegsels = None
        self._verwijderd = None
        self._gba_status = None
        self._afnemersindicatie = None
        self._partnerschappen = None
        self._kinderen = None
        self._ouders = None
        self.discriminator = None

        if burgerservicenummer is not None:
            self.burgerservicenummer = burgerservicenummer
        self.persoonsnummer = persoonsnummer
        if relatienummer is not None:
            self.relatienummer = relatienummer
        if anummer is not None:
            self.anummer = anummer
        if naam is not None:
            self.naam = naam
        if voornamen is not None:
            self.voornamen = voornamen
        if voorlettes is not None:
            self.voorlettes = voorlettes
        if voorvoegsels is not None:
            self.voorvoegsels = voorvoegsels
        if naamgebruik is not None:
            self.naamgebruik = naamgebruik
        if opgemaakte_naam is not None:
            self.opgemaakte_naam = opgemaakte_naam
        if voorkeursnaam is not None:
            self.voorkeursnaam = voorkeursnaam
        if geboortedatum is not None:
            self.geboortedatum = geboortedatum
        if overlijdensdatum is not None:
            self.overlijdensdatum = overlijdensdatum
        if geslacht is not None:
            self.geslacht = geslacht
        if partner_naam is not None:
            self.partner_naam = partner_naam
        if partner_voorvoegsels is not None:
            self.partner_voorvoegsels = partner_voorvoegsels
        if verwijderd is not None:
            self.verwijderd = verwijderd
        if gba_status is not None:
            self.gba_status = gba_status
        if afnemersindicatie is not None:
            self.afnemersindicatie = afnemersindicatie
        if partnerschappen is not None:
            self.partnerschappen = partnerschappen
        if kinderen is not None:
            self.kinderen = kinderen
        if ouders is not None:
            self.ouders = ouders

    @property
    def burgerservicenummer(self):
        """Gets the burgerservicenummer of this PersoonsGegevens.  # noqa: E501


        :return: The burgerservicenummer of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer):
        """Sets the burgerservicenummer of this PersoonsGegevens.


        :param burgerservicenummer: The burgerservicenummer of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._burgerservicenummer = burgerservicenummer

    @property
    def persoonsnummer(self):
        """Gets the persoonsnummer of this PersoonsGegevens.  # noqa: E501


        :return: The persoonsnummer of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._persoonsnummer

    @persoonsnummer.setter
    def persoonsnummer(self, persoonsnummer):
        """Sets the persoonsnummer of this PersoonsGegevens.


        :param persoonsnummer: The persoonsnummer of this PersoonsGegevens.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and persoonsnummer is None:  # noqa: E501
            raise ValueError("Invalid value for `persoonsnummer`, must not be `None`")  # noqa: E501

        self._persoonsnummer = persoonsnummer

    @property
    def relatienummer(self):
        """Gets the relatienummer of this PersoonsGegevens.  # noqa: E501


        :return: The relatienummer of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._relatienummer

    @relatienummer.setter
    def relatienummer(self, relatienummer):
        """Sets the relatienummer of this PersoonsGegevens.


        :param relatienummer: The relatienummer of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._relatienummer = relatienummer

    @property
    def anummer(self):
        """Gets the anummer of this PersoonsGegevens.  # noqa: E501


        :return: The anummer of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._anummer

    @anummer.setter
    def anummer(self, anummer):
        """Sets the anummer of this PersoonsGegevens.


        :param anummer: The anummer of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._anummer = anummer

    @property
    def naam(self):
        """Gets the naam of this PersoonsGegevens.  # noqa: E501


        :return: The naam of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._naam

    @naam.setter
    def naam(self, naam):
        """Sets the naam of this PersoonsGegevens.


        :param naam: The naam of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._naam = naam

    @property
    def voornamen(self):
        """Gets the voornamen of this PersoonsGegevens.  # noqa: E501


        :return: The voornamen of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._voornamen

    @voornamen.setter
    def voornamen(self, voornamen):
        """Sets the voornamen of this PersoonsGegevens.


        :param voornamen: The voornamen of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._voornamen = voornamen

    @property
    def voorlettes(self):
        """Gets the voorlettes of this PersoonsGegevens.  # noqa: E501


        :return: The voorlettes of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._voorlettes

    @voorlettes.setter
    def voorlettes(self, voorlettes):
        """Sets the voorlettes of this PersoonsGegevens.


        :param voorlettes: The voorlettes of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._voorlettes = voorlettes

    @property
    def voorvoegsels(self):
        """Gets the voorvoegsels of this PersoonsGegevens.  # noqa: E501


        :return: The voorvoegsels of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._voorvoegsels

    @voorvoegsels.setter
    def voorvoegsels(self, voorvoegsels):
        """Sets the voorvoegsels of this PersoonsGegevens.


        :param voorvoegsels: The voorvoegsels of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._voorvoegsels = voorvoegsels

    @property
    def naamgebruik(self):
        """Gets the naamgebruik of this PersoonsGegevens.  # noqa: E501


        :return: The naamgebruik of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._naamgebruik

    @naamgebruik.setter
    def naamgebruik(self, naamgebruik):
        """Sets the naamgebruik of this PersoonsGegevens.


        :param naamgebruik: The naamgebruik of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._naamgebruik = naamgebruik

    @property
    def opgemaakte_naam(self):
        """Gets the opgemaakte_naam of this PersoonsGegevens.  # noqa: E501


        :return: The opgemaakte_naam of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._opgemaakte_naam

    @opgemaakte_naam.setter
    def opgemaakte_naam(self, opgemaakte_naam):
        """Sets the opgemaakte_naam of this PersoonsGegevens.


        :param opgemaakte_naam: The opgemaakte_naam of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._opgemaakte_naam = opgemaakte_naam

    @property
    def voorkeursnaam(self):
        """Gets the voorkeursnaam of this PersoonsGegevens.  # noqa: E501


        :return: The voorkeursnaam of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._voorkeursnaam

    @voorkeursnaam.setter
    def voorkeursnaam(self, voorkeursnaam):
        """Sets the voorkeursnaam of this PersoonsGegevens.


        :param voorkeursnaam: The voorkeursnaam of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._voorkeursnaam = voorkeursnaam

    @property
    def geboortedatum(self):
        """Gets the geboortedatum of this PersoonsGegevens.  # noqa: E501


        :return: The geboortedatum of this PersoonsGegevens.  # noqa: E501
        :rtype: DatumDelen
        """
        return self._geboortedatum

    @geboortedatum.setter
    def geboortedatum(self, geboortedatum):
        """Sets the geboortedatum of this PersoonsGegevens.


        :param geboortedatum: The geboortedatum of this PersoonsGegevens.  # noqa: E501
        :type: DatumDelen
        """

        self._geboortedatum = geboortedatum

    @property
    def overlijdensdatum(self):
        """Gets the overlijdensdatum of this PersoonsGegevens.  # noqa: E501


        :return: The overlijdensdatum of this PersoonsGegevens.  # noqa: E501
        :rtype: DatumDelen
        """
        return self._overlijdensdatum

    @overlijdensdatum.setter
    def overlijdensdatum(self, overlijdensdatum):
        """Sets the overlijdensdatum of this PersoonsGegevens.


        :param overlijdensdatum: The overlijdensdatum of this PersoonsGegevens.  # noqa: E501
        :type: DatumDelen
        """

        self._overlijdensdatum = overlijdensdatum

    @property
    def geslacht(self):
        """Gets the geslacht of this PersoonsGegevens.  # noqa: E501


        :return: The geslacht of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._geslacht

    @geslacht.setter
    def geslacht(self, geslacht):
        """Sets the geslacht of this PersoonsGegevens.


        :param geslacht: The geslacht of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._geslacht = geslacht

    @property
    def partner_naam(self):
        """Gets the partner_naam of this PersoonsGegevens.  # noqa: E501


        :return: The partner_naam of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._partner_naam

    @partner_naam.setter
    def partner_naam(self, partner_naam):
        """Sets the partner_naam of this PersoonsGegevens.


        :param partner_naam: The partner_naam of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._partner_naam = partner_naam

    @property
    def partner_voorvoegsels(self):
        """Gets the partner_voorvoegsels of this PersoonsGegevens.  # noqa: E501


        :return: The partner_voorvoegsels of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._partner_voorvoegsels

    @partner_voorvoegsels.setter
    def partner_voorvoegsels(self, partner_voorvoegsels):
        """Sets the partner_voorvoegsels of this PersoonsGegevens.


        :param partner_voorvoegsels: The partner_voorvoegsels of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._partner_voorvoegsels = partner_voorvoegsels

    @property
    def verwijderd(self):
        """Gets the verwijderd of this PersoonsGegevens.  # noqa: E501


        :return: The verwijderd of this PersoonsGegevens.  # noqa: E501
        :rtype: bool
        """
        return self._verwijderd

    @verwijderd.setter
    def verwijderd(self, verwijderd):
        """Sets the verwijderd of this PersoonsGegevens.


        :param verwijderd: The verwijderd of this PersoonsGegevens.  # noqa: E501
        :type: bool
        """

        self._verwijderd = verwijderd

    @property
    def gba_status(self):
        """Gets the gba_status of this PersoonsGegevens.  # noqa: E501


        :return: The gba_status of this PersoonsGegevens.  # noqa: E501
        :rtype: str
        """
        return self._gba_status

    @gba_status.setter
    def gba_status(self, gba_status):
        """Sets the gba_status of this PersoonsGegevens.


        :param gba_status: The gba_status of this PersoonsGegevens.  # noqa: E501
        :type: str
        """

        self._gba_status = gba_status

    @property
    def afnemersindicatie(self):
        """Gets the afnemersindicatie of this PersoonsGegevens.  # noqa: E501


        :return: The afnemersindicatie of this PersoonsGegevens.  # noqa: E501
        :rtype: bool
        """
        return self._afnemersindicatie

    @afnemersindicatie.setter
    def afnemersindicatie(self, afnemersindicatie):
        """Sets the afnemersindicatie of this PersoonsGegevens.


        :param afnemersindicatie: The afnemersindicatie of this PersoonsGegevens.  # noqa: E501
        :type: bool
        """

        self._afnemersindicatie = afnemersindicatie

    @property
    def partnerschappen(self):
        """Gets the partnerschappen of this PersoonsGegevens.  # noqa: E501


        :return: The partnerschappen of this PersoonsGegevens.  # noqa: E501
        :rtype: list[Partnerschap]
        """
        return self._partnerschappen

    @partnerschappen.setter
    def partnerschappen(self, partnerschappen):
        """Sets the partnerschappen of this PersoonsGegevens.


        :param partnerschappen: The partnerschappen of this PersoonsGegevens.  # noqa: E501
        :type: list[Partnerschap]
        """

        self._partnerschappen = partnerschappen

    @property
    def kinderen(self):
        """Gets the kinderen of this PersoonsGegevens.  # noqa: E501


        :return: The kinderen of this PersoonsGegevens.  # noqa: E501
        :rtype: list[PersoonsGegevensBasic]
        """
        return self._kinderen

    @kinderen.setter
    def kinderen(self, kinderen):
        """Sets the kinderen of this PersoonsGegevens.


        :param kinderen: The kinderen of this PersoonsGegevens.  # noqa: E501
        :type: list[PersoonsGegevensBasic]
        """

        self._kinderen = kinderen

    @property
    def ouders(self):
        """Gets the ouders of this PersoonsGegevens.  # noqa: E501


        :return: The ouders of this PersoonsGegevens.  # noqa: E501
        :rtype: list[PersoonsGegevensBasic]
        """
        return self._ouders

    @ouders.setter
    def ouders(self, ouders):
        """Sets the ouders of this PersoonsGegevens.


        :param ouders: The ouders of this PersoonsGegevens.  # noqa: E501
        :type: list[PersoonsGegevensBasic]
        """

        self._ouders = ouders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersoonsGegevens):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PersoonsGegevens):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    MN Frontoffice CORE & PERE

    Highly available and searchable datastore for MN  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontoffice.configuration import Configuration


class Partnerschap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'partner': 'PersoonsGegevensBasic',
        'soort': 'str',
        'begindatum': 'DatumDelen',
        'einddatum': 'DatumDelen'
    }

    attribute_map = {
        'partner': 'Partner',
        'soort': 'soort',
        'begindatum': 'Begindatum',
        'einddatum': 'Einddatum'
    }

    def __init__(self, partner=None, soort=None, begindatum=None, einddatum=None, local_vars_configuration=None):  # noqa: E501
        """Partnerschap - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._partner = None
        self._soort = None
        self._begindatum = None
        self._einddatum = None
        self.discriminator = None

        self.partner = partner
        self.soort = soort
        self.begindatum = begindatum
        if einddatum is not None:
            self.einddatum = einddatum

    @property
    def partner(self):
        """Gets the partner of this Partnerschap.  # noqa: E501


        :return: The partner of this Partnerschap.  # noqa: E501
        :rtype: PersoonsGegevensBasic
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Partnerschap.


        :param partner: The partner of this Partnerschap.  # noqa: E501
        :type: PersoonsGegevensBasic
        """
        if self.local_vars_configuration.client_side_validation and partner is None:  # noqa: E501
            raise ValueError("Invalid value for `partner`, must not be `None`")  # noqa: E501

        self._partner = partner

    @property
    def soort(self):
        """Gets the soort of this Partnerschap.  # noqa: E501


        :return: The soort of this Partnerschap.  # noqa: E501
        :rtype: str
        """
        return self._soort

    @soort.setter
    def soort(self, soort):
        """Sets the soort of this Partnerschap.


        :param soort: The soort of this Partnerschap.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and soort is None:  # noqa: E501
            raise ValueError("Invalid value for `soort`, must not be `None`")  # noqa: E501

        self._soort = soort

    @property
    def begindatum(self):
        """Gets the begindatum of this Partnerschap.  # noqa: E501


        :return: The begindatum of this Partnerschap.  # noqa: E501
        :rtype: DatumDelen
        """
        return self._begindatum

    @begindatum.setter
    def begindatum(self, begindatum):
        """Sets the begindatum of this Partnerschap.


        :param begindatum: The begindatum of this Partnerschap.  # noqa: E501
        :type: DatumDelen
        """
        if self.local_vars_configuration.client_side_validation and begindatum is None:  # noqa: E501
            raise ValueError("Invalid value for `begindatum`, must not be `None`")  # noqa: E501

        self._begindatum = begindatum

    @property
    def einddatum(self):
        """Gets the einddatum of this Partnerschap.  # noqa: E501


        :return: The einddatum of this Partnerschap.  # noqa: E501
        :rtype: DatumDelen
        """
        return self._einddatum

    @einddatum.setter
    def einddatum(self, einddatum):
        """Sets the einddatum of this Partnerschap.


        :param einddatum: The einddatum of this Partnerschap.  # noqa: E501
        :type: DatumDelen
        """

        self._einddatum = einddatum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Partnerschap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Partnerschap):
            return True

        return self.to_dict() != other.to_dict()

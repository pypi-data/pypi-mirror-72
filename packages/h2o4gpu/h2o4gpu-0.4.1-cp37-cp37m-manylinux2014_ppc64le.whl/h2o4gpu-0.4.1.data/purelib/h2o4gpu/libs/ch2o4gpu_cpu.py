# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ch2o4gpu_cpu')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ch2o4gpu_cpu')
    _ch2o4gpu_cpu = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ch2o4gpu_cpu', [dirname(__file__)])
        except ImportError:
            import _ch2o4gpu_cpu
            return _ch2o4gpu_cpu
        try:
            _mod = imp.load_module('_ch2o4gpu_cpu', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ch2o4gpu_cpu = swig_import_helper()
    del swig_import_helper
else:
    import _ch2o4gpu_cpu
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def make_ptr_float_kmeans(dopredict, verbose, seed, gpu_id, n_gpu, mTrain, n, k, max_iterations, init_from_data, threshold, srcdata, centroids, pred_centroids, pred_labels):
    return _ch2o4gpu_cpu.make_ptr_float_kmeans(dopredict, verbose, seed, gpu_id, n_gpu, mTrain, n, k, max_iterations, init_from_data, threshold, srcdata, centroids, pred_centroids, pred_labels)
make_ptr_float_kmeans = _ch2o4gpu_cpu.make_ptr_float_kmeans

def make_ptr_double_kmeans(dopredict, verbose, seed, gpu_id, n_gpu, mTrain, n, k, max_iterations, init_from_data, threshold, srcdata, centroids, pred_centroids, pred_labels):
    return _ch2o4gpu_cpu.make_ptr_double_kmeans(dopredict, verbose, seed, gpu_id, n_gpu, mTrain, n, k, max_iterations, init_from_data, threshold, srcdata, centroids, pred_centroids, pred_labels)
make_ptr_double_kmeans = _ch2o4gpu_cpu.make_ptr_double_kmeans

def kmeans_transform_float(verbose, gpu_id, n_gpu, m, n, k, srcdata, centroids, preds):
    return _ch2o4gpu_cpu.kmeans_transform_float(verbose, gpu_id, n_gpu, m, n, k, srcdata, centroids, preds)
kmeans_transform_float = _ch2o4gpu_cpu.kmeans_transform_float

def kmeans_transform_double(verbose, gpu_id, n_gpu, m, n, k, srcdata, centroids, preds):
    return _ch2o4gpu_cpu.kmeans_transform_double(verbose, gpu_id, n_gpu, m, n, k, srcdata, centroids, preds)
kmeans_transform_double = _ch2o4gpu_cpu.kmeans_transform_double

def elastic_net_ptr_double(family, dopredict, sourceDev, datatype, sharedA, nThreads, gpu_id, nGPUs, totalnGPUs, ord, mTrain, n, mValid, intercept, standardize, lambda_max, lambda_min_ratio, nLambdas, nFolds, nAlphas, alpha_min, alpha_max, alphas, lambdas, tol, tolseekfactor, lambdastopearly, glmstopearly, glmstopearlyerrorfraction, max_iterations, verbose, trainXptr, trainYptr, validXptr, validYptr, weightptr, givefullpath, Xvsalphalambda, Xvsalpha, validPredsvsalphalambda, validPredsvsalpha, countfull, countshort, countmore):
    return _ch2o4gpu_cpu.elastic_net_ptr_double(family, dopredict, sourceDev, datatype, sharedA, nThreads, gpu_id, nGPUs, totalnGPUs, ord, mTrain, n, mValid, intercept, standardize, lambda_max, lambda_min_ratio, nLambdas, nFolds, nAlphas, alpha_min, alpha_max, alphas, lambdas, tol, tolseekfactor, lambdastopearly, glmstopearly, glmstopearlyerrorfraction, max_iterations, verbose, trainXptr, trainYptr, validXptr, validYptr, weightptr, givefullpath, Xvsalphalambda, Xvsalpha, validPredsvsalphalambda, validPredsvsalpha, countfull, countshort, countmore)
elastic_net_ptr_double = _ch2o4gpu_cpu.elastic_net_ptr_double

def elastic_net_ptr_float(family, dopredict, sourceDev, datatype, sharedA, nThreads, gpu_id, nGPUs, totalnGPUs, ord, mTrain, n, mValid, intercept, standardize, lambda_max, lambda_min_ratio, nLambdas, nFolds, nAlphas, alpha_min, alpha_max, alphas, lambdas, tol, tolseekfactor, lambdastopearly, glmstopearly, glmstopearlyerrorfraction, max_iterations, verbose, trainXptr, trainYptr, validXptr, validYptr, weightptr, givefullpath, Xvsalphalambda, Xvsalpha, validPredsvsalphalambda, validPredsvsalpha, countfull, countshort, countmore):
    return _ch2o4gpu_cpu.elastic_net_ptr_float(family, dopredict, sourceDev, datatype, sharedA, nThreads, gpu_id, nGPUs, totalnGPUs, ord, mTrain, n, mValid, intercept, standardize, lambda_max, lambda_min_ratio, nLambdas, nFolds, nAlphas, alpha_min, alpha_max, alphas, lambdas, tol, tolseekfactor, lambdastopearly, glmstopearly, glmstopearlyerrorfraction, max_iterations, verbose, trainXptr, trainYptr, validXptr, validYptr, weightptr, givefullpath, Xvsalphalambda, Xvsalpha, validPredsvsalphalambda, validPredsvsalpha, countfull, countshort, countmore)
elastic_net_ptr_float = _ch2o4gpu_cpu.elastic_net_ptr_float

def make_ptr_double(sharedA, sourceme, sourceDev, mTrain, n, mValid, ord, trainX, trainY, validX, validY, weight, a, b, c, d, e):
    return _ch2o4gpu_cpu.make_ptr_double(sharedA, sourceme, sourceDev, mTrain, n, mValid, ord, trainX, trainY, validX, validY, weight, a, b, c, d, e)
make_ptr_double = _ch2o4gpu_cpu.make_ptr_double

def make_ptr_float(sharedA, sourceme, sourceDev, mTrain, n, mValid, ord, trainX, trainY, validX, validY, weight, a, b, c, d, e):
    return _ch2o4gpu_cpu.make_ptr_float(sharedA, sourceme, sourceDev, mTrain, n, mValid, ord, trainX, trainY, validX, validY, weight, a, b, c, d, e)
make_ptr_float = _ch2o4gpu_cpu.make_ptr_float
COL_MAJ = _ch2o4gpu_cpu.COL_MAJ
ROW_MAJ = _ch2o4gpu_cpu.ROW_MAJ
DIRECT = _ch2o4gpu_cpu.DIRECT
INDIRECT = _ch2o4gpu_cpu.INDIRECT
ABS = _ch2o4gpu_cpu.ABS
EXP = _ch2o4gpu_cpu.EXP
HUBER = _ch2o4gpu_cpu.HUBER
IDENTITY = _ch2o4gpu_cpu.IDENTITY
INDBOX01 = _ch2o4gpu_cpu.INDBOX01
INDEQ0 = _ch2o4gpu_cpu.INDEQ0
INDGE0 = _ch2o4gpu_cpu.INDGE0
INDLE0 = _ch2o4gpu_cpu.INDLE0
LOGISTIC = _ch2o4gpu_cpu.LOGISTIC
MAXNEG0 = _ch2o4gpu_cpu.MAXNEG0
MAXPOS0 = _ch2o4gpu_cpu.MAXPOS0
NEGENTR = _ch2o4gpu_cpu.NEGENTR
NEGLOG = _ch2o4gpu_cpu.NEGLOG
RECIPR = _ch2o4gpu_cpu.RECIPR
SQUARE = _ch2o4gpu_cpu.SQUARE
ZERO = _ch2o4gpu_cpu.ZERO
H2O4GPU_SUCCESS = _ch2o4gpu_cpu.H2O4GPU_SUCCESS
H2O4GPU_INFEASIBLE = _ch2o4gpu_cpu.H2O4GPU_INFEASIBLE
H2O4GPU_UNBOUNDED = _ch2o4gpu_cpu.H2O4GPU_UNBOUNDED
H2O4GPU_MAX_ITER = _ch2o4gpu_cpu.H2O4GPU_MAX_ITER
H2O4GPU_NAN_FOUND = _ch2o4gpu_cpu.H2O4GPU_NAN_FOUND
H2O4GPU_ERROR = _ch2o4gpu_cpu.H2O4GPU_ERROR
class H2O4GPUSettingsS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, H2O4GPUSettingsS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, H2O4GPUSettingsS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rho"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_rho_set
    __swig_getmethods__["rho"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_rho_get
    if _newclass:
        rho = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_rho_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_rho_set)
    __swig_setmethods__["abs_tol"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_abs_tol_set
    __swig_getmethods__["abs_tol"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_abs_tol_get
    if _newclass:
        abs_tol = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_abs_tol_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_abs_tol_set)
    __swig_setmethods__["rel_tol"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_rel_tol_set
    __swig_getmethods__["rel_tol"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_rel_tol_get
    if _newclass:
        rel_tol = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_rel_tol_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_rel_tol_set)
    __swig_setmethods__["max_iters"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_max_iters_set
    __swig_getmethods__["max_iters"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_max_iters_get
    if _newclass:
        max_iters = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_max_iters_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_max_iters_set)
    __swig_setmethods__["verbose"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_verbose_set
    __swig_getmethods__["verbose"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_verbose_get
    if _newclass:
        verbose = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_verbose_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_verbose_set)
    __swig_setmethods__["adaptive_rho"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_adaptive_rho_set
    __swig_getmethods__["adaptive_rho"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_adaptive_rho_get
    if _newclass:
        adaptive_rho = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_adaptive_rho_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_adaptive_rho_set)
    __swig_setmethods__["equil"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_equil_set
    __swig_getmethods__["equil"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_equil_get
    if _newclass:
        equil = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_equil_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_equil_set)
    __swig_setmethods__["gap_stop"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_gap_stop_set
    __swig_getmethods__["gap_stop"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_gap_stop_get
    if _newclass:
        gap_stop = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_gap_stop_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_gap_stop_set)
    __swig_setmethods__["warm_start"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_warm_start_set
    __swig_getmethods__["warm_start"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_warm_start_get
    if _newclass:
        warm_start = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_warm_start_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_warm_start_set)
    __swig_setmethods__["nDev"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_nDev_set
    __swig_getmethods__["nDev"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_nDev_get
    if _newclass:
        nDev = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_nDev_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_nDev_set)
    __swig_setmethods__["wDev"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_wDev_set
    __swig_getmethods__["wDev"] = _ch2o4gpu_cpu.H2O4GPUSettingsS_wDev_get
    if _newclass:
        wDev = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsS_wDev_get, _ch2o4gpu_cpu.H2O4GPUSettingsS_wDev_set)

    def __init__(self):
        this = _ch2o4gpu_cpu.new_H2O4GPUSettingsS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ch2o4gpu_cpu.delete_H2O4GPUSettingsS
    __del__ = lambda self: None
H2O4GPUSettingsS_swigregister = _ch2o4gpu_cpu.H2O4GPUSettingsS_swigregister
H2O4GPUSettingsS_swigregister(H2O4GPUSettingsS)

class H2O4GPUSettingsD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, H2O4GPUSettingsD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, H2O4GPUSettingsD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rho"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_rho_set
    __swig_getmethods__["rho"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_rho_get
    if _newclass:
        rho = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_rho_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_rho_set)
    __swig_setmethods__["abs_tol"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_abs_tol_set
    __swig_getmethods__["abs_tol"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_abs_tol_get
    if _newclass:
        abs_tol = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_abs_tol_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_abs_tol_set)
    __swig_setmethods__["rel_tol"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_rel_tol_set
    __swig_getmethods__["rel_tol"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_rel_tol_get
    if _newclass:
        rel_tol = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_rel_tol_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_rel_tol_set)
    __swig_setmethods__["max_iters"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_max_iters_set
    __swig_getmethods__["max_iters"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_max_iters_get
    if _newclass:
        max_iters = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_max_iters_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_max_iters_set)
    __swig_setmethods__["verbose"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_verbose_set
    __swig_getmethods__["verbose"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_verbose_get
    if _newclass:
        verbose = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_verbose_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_verbose_set)
    __swig_setmethods__["adaptive_rho"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_adaptive_rho_set
    __swig_getmethods__["adaptive_rho"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_adaptive_rho_get
    if _newclass:
        adaptive_rho = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_adaptive_rho_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_adaptive_rho_set)
    __swig_setmethods__["equil"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_equil_set
    __swig_getmethods__["equil"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_equil_get
    if _newclass:
        equil = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_equil_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_equil_set)
    __swig_setmethods__["gap_stop"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_gap_stop_set
    __swig_getmethods__["gap_stop"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_gap_stop_get
    if _newclass:
        gap_stop = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_gap_stop_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_gap_stop_set)
    __swig_setmethods__["warm_start"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_warm_start_set
    __swig_getmethods__["warm_start"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_warm_start_get
    if _newclass:
        warm_start = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_warm_start_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_warm_start_set)
    __swig_setmethods__["nDev"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_nDev_set
    __swig_getmethods__["nDev"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_nDev_get
    if _newclass:
        nDev = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_nDev_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_nDev_set)
    __swig_setmethods__["wDev"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_wDev_set
    __swig_getmethods__["wDev"] = _ch2o4gpu_cpu.H2O4GPUSettingsD_wDev_get
    if _newclass:
        wDev = _swig_property(_ch2o4gpu_cpu.H2O4GPUSettingsD_wDev_get, _ch2o4gpu_cpu.H2O4GPUSettingsD_wDev_set)

    def __init__(self):
        this = _ch2o4gpu_cpu.new_H2O4GPUSettingsD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ch2o4gpu_cpu.delete_H2O4GPUSettingsD
    __del__ = lambda self: None
H2O4GPUSettingsD_swigregister = _ch2o4gpu_cpu.H2O4GPUSettingsD_swigregister
H2O4GPUSettingsD_swigregister(H2O4GPUSettingsD)

class H2O4GPUInfoS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, H2O4GPUInfoS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, H2O4GPUInfoS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iter"] = _ch2o4gpu_cpu.H2O4GPUInfoS_iter_set
    __swig_getmethods__["iter"] = _ch2o4gpu_cpu.H2O4GPUInfoS_iter_get
    if _newclass:
        iter = _swig_property(_ch2o4gpu_cpu.H2O4GPUInfoS_iter_get, _ch2o4gpu_cpu.H2O4GPUInfoS_iter_set)
    __swig_setmethods__["status"] = _ch2o4gpu_cpu.H2O4GPUInfoS_status_set
    __swig_getmethods__["status"] = _ch2o4gpu_cpu.H2O4GPUInfoS_status_get
    if _newclass:
        status = _swig_property(_ch2o4gpu_cpu.H2O4GPUInfoS_status_get, _ch2o4gpu_cpu.H2O4GPUInfoS_status_set)
    __swig_setmethods__["obj"] = _ch2o4gpu_cpu.H2O4GPUInfoS_obj_set
    __swig_getmethods__["obj"] = _ch2o4gpu_cpu.H2O4GPUInfoS_obj_get
    if _newclass:
        obj = _swig_property(_ch2o4gpu_cpu.H2O4GPUInfoS_obj_get, _ch2o4gpu_cpu.H2O4GPUInfoS_obj_set)
    __swig_setmethods__["rho"] = _ch2o4gpu_cpu.H2O4GPUInfoS_rho_set
    __swig_getmethods__["rho"] = _ch2o4gpu_cpu.H2O4GPUInfoS_rho_get
    if _newclass:
        rho = _swig_property(_ch2o4gpu_cpu.H2O4GPUInfoS_rho_get, _ch2o4gpu_cpu.H2O4GPUInfoS_rho_set)
    __swig_setmethods__["solvetime"] = _ch2o4gpu_cpu.H2O4GPUInfoS_solvetime_set
    __swig_getmethods__["solvetime"] = _ch2o4gpu_cpu.H2O4GPUInfoS_solvetime_get
    if _newclass:
        solvetime = _swig_property(_ch2o4gpu_cpu.H2O4GPUInfoS_solvetime_get, _ch2o4gpu_cpu.H2O4GPUInfoS_solvetime_set)

    def __init__(self):
        this = _ch2o4gpu_cpu.new_H2O4GPUInfoS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ch2o4gpu_cpu.delete_H2O4GPUInfoS
    __del__ = lambda self: None
H2O4GPUInfoS_swigregister = _ch2o4gpu_cpu.H2O4GPUInfoS_swigregister
H2O4GPUInfoS_swigregister(H2O4GPUInfoS)

class H2O4GPUInfoD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, H2O4GPUInfoD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, H2O4GPUInfoD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iter"] = _ch2o4gpu_cpu.H2O4GPUInfoD_iter_set
    __swig_getmethods__["iter"] = _ch2o4gpu_cpu.H2O4GPUInfoD_iter_get
    if _newclass:
        iter = _swig_property(_ch2o4gpu_cpu.H2O4GPUInfoD_iter_get, _ch2o4gpu_cpu.H2O4GPUInfoD_iter_set)
    __swig_setmethods__["status"] = _ch2o4gpu_cpu.H2O4GPUInfoD_status_set
    __swig_getmethods__["status"] = _ch2o4gpu_cpu.H2O4GPUInfoD_status_get
    if _newclass:
        status = _swig_property(_ch2o4gpu_cpu.H2O4GPUInfoD_status_get, _ch2o4gpu_cpu.H2O4GPUInfoD_status_set)
    __swig_setmethods__["obj"] = _ch2o4gpu_cpu.H2O4GPUInfoD_obj_set
    __swig_getmethods__["obj"] = _ch2o4gpu_cpu.H2O4GPUInfoD_obj_get
    if _newclass:
        obj = _swig_property(_ch2o4gpu_cpu.H2O4GPUInfoD_obj_get, _ch2o4gpu_cpu.H2O4GPUInfoD_obj_set)
    __swig_setmethods__["rho"] = _ch2o4gpu_cpu.H2O4GPUInfoD_rho_set
    __swig_getmethods__["rho"] = _ch2o4gpu_cpu.H2O4GPUInfoD_rho_get
    if _newclass:
        rho = _swig_property(_ch2o4gpu_cpu.H2O4GPUInfoD_rho_get, _ch2o4gpu_cpu.H2O4GPUInfoD_rho_set)
    __swig_setmethods__["solvetime"] = _ch2o4gpu_cpu.H2O4GPUInfoD_solvetime_set
    __swig_getmethods__["solvetime"] = _ch2o4gpu_cpu.H2O4GPUInfoD_solvetime_get
    if _newclass:
        solvetime = _swig_property(_ch2o4gpu_cpu.H2O4GPUInfoD_solvetime_get, _ch2o4gpu_cpu.H2O4GPUInfoD_solvetime_set)

    def __init__(self):
        this = _ch2o4gpu_cpu.new_H2O4GPUInfoD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ch2o4gpu_cpu.delete_H2O4GPUInfoD
    __del__ = lambda self: None
H2O4GPUInfoD_swigregister = _ch2o4gpu_cpu.H2O4GPUInfoD_swigregister
H2O4GPUInfoD_swigregister(H2O4GPUInfoD)

class H2O4GPUSolutionS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, H2O4GPUSolutionS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, H2O4GPUSolutionS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _ch2o4gpu_cpu.H2O4GPUSolutionS_x_set
    __swig_getmethods__["x"] = _ch2o4gpu_cpu.H2O4GPUSolutionS_x_get
    if _newclass:
        x = _swig_property(_ch2o4gpu_cpu.H2O4GPUSolutionS_x_get, _ch2o4gpu_cpu.H2O4GPUSolutionS_x_set)
    __swig_setmethods__["y"] = _ch2o4gpu_cpu.H2O4GPUSolutionS_y_set
    __swig_getmethods__["y"] = _ch2o4gpu_cpu.H2O4GPUSolutionS_y_get
    if _newclass:
        y = _swig_property(_ch2o4gpu_cpu.H2O4GPUSolutionS_y_get, _ch2o4gpu_cpu.H2O4GPUSolutionS_y_set)
    __swig_setmethods__["mu"] = _ch2o4gpu_cpu.H2O4GPUSolutionS_mu_set
    __swig_getmethods__["mu"] = _ch2o4gpu_cpu.H2O4GPUSolutionS_mu_get
    if _newclass:
        mu = _swig_property(_ch2o4gpu_cpu.H2O4GPUSolutionS_mu_get, _ch2o4gpu_cpu.H2O4GPUSolutionS_mu_set)
    __swig_setmethods__["nu"] = _ch2o4gpu_cpu.H2O4GPUSolutionS_nu_set
    __swig_getmethods__["nu"] = _ch2o4gpu_cpu.H2O4GPUSolutionS_nu_get
    if _newclass:
        nu = _swig_property(_ch2o4gpu_cpu.H2O4GPUSolutionS_nu_get, _ch2o4gpu_cpu.H2O4GPUSolutionS_nu_set)

    def __init__(self):
        this = _ch2o4gpu_cpu.new_H2O4GPUSolutionS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ch2o4gpu_cpu.delete_H2O4GPUSolutionS
    __del__ = lambda self: None
H2O4GPUSolutionS_swigregister = _ch2o4gpu_cpu.H2O4GPUSolutionS_swigregister
H2O4GPUSolutionS_swigregister(H2O4GPUSolutionS)

class H2O4GPUSolutionD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, H2O4GPUSolutionD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, H2O4GPUSolutionD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _ch2o4gpu_cpu.H2O4GPUSolutionD_x_set
    __swig_getmethods__["x"] = _ch2o4gpu_cpu.H2O4GPUSolutionD_x_get
    if _newclass:
        x = _swig_property(_ch2o4gpu_cpu.H2O4GPUSolutionD_x_get, _ch2o4gpu_cpu.H2O4GPUSolutionD_x_set)
    __swig_setmethods__["y"] = _ch2o4gpu_cpu.H2O4GPUSolutionD_y_set
    __swig_getmethods__["y"] = _ch2o4gpu_cpu.H2O4GPUSolutionD_y_get
    if _newclass:
        y = _swig_property(_ch2o4gpu_cpu.H2O4GPUSolutionD_y_get, _ch2o4gpu_cpu.H2O4GPUSolutionD_y_set)
    __swig_setmethods__["mu"] = _ch2o4gpu_cpu.H2O4GPUSolutionD_mu_set
    __swig_getmethods__["mu"] = _ch2o4gpu_cpu.H2O4GPUSolutionD_mu_get
    if _newclass:
        mu = _swig_property(_ch2o4gpu_cpu.H2O4GPUSolutionD_mu_get, _ch2o4gpu_cpu.H2O4GPUSolutionD_mu_set)
    __swig_setmethods__["nu"] = _ch2o4gpu_cpu.H2O4GPUSolutionD_nu_set
    __swig_getmethods__["nu"] = _ch2o4gpu_cpu.H2O4GPUSolutionD_nu_get
    if _newclass:
        nu = _swig_property(_ch2o4gpu_cpu.H2O4GPUSolutionD_nu_get, _ch2o4gpu_cpu.H2O4GPUSolutionD_nu_set)

    def __init__(self):
        this = _ch2o4gpu_cpu.new_H2O4GPUSolutionD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ch2o4gpu_cpu.delete_H2O4GPUSolutionD
    __del__ = lambda self: None
H2O4GPUSolutionD_swigregister = _ch2o4gpu_cpu.H2O4GPUSolutionD_swigregister
H2O4GPUSolutionD_swigregister(H2O4GPUSolutionD)


def h2o4gpu_init_dense_single(wDev, ord, m, n, A):
    return _ch2o4gpu_cpu.h2o4gpu_init_dense_single(wDev, ord, m, n, A)
h2o4gpu_init_dense_single = _ch2o4gpu_cpu.h2o4gpu_init_dense_single

def h2o4gpu_init_dense_double(wDev, ord, m, n, A):
    return _ch2o4gpu_cpu.h2o4gpu_init_dense_double(wDev, ord, m, n, A)
h2o4gpu_init_dense_double = _ch2o4gpu_cpu.h2o4gpu_init_dense_double

def h2o4gpu_init_sparse_single(wDev, ord, m, n, nnz, nzvals, indices, pointers):
    return _ch2o4gpu_cpu.h2o4gpu_init_sparse_single(wDev, ord, m, n, nnz, nzvals, indices, pointers)
h2o4gpu_init_sparse_single = _ch2o4gpu_cpu.h2o4gpu_init_sparse_single

def h2o4gpu_init_sparse_double(wDev, ord, m, n, nnz, nzvals, indices, pointers):
    return _ch2o4gpu_cpu.h2o4gpu_init_sparse_double(wDev, ord, m, n, nnz, nzvals, indices, pointers)
h2o4gpu_init_sparse_double = _ch2o4gpu_cpu.h2o4gpu_init_sparse_double

def h2o4gpu_solve_single(work, settings, solution, info, f_a, f_b, f_c, f_d, f_e, f_h, g_a, g_b, g_c, g_d, g_e, g_h):
    return _ch2o4gpu_cpu.h2o4gpu_solve_single(work, settings, solution, info, f_a, f_b, f_c, f_d, f_e, f_h, g_a, g_b, g_c, g_d, g_e, g_h)
h2o4gpu_solve_single = _ch2o4gpu_cpu.h2o4gpu_solve_single

def h2o4gpu_solve_double(work, settings, solution, info, f_a, f_b, f_c, f_d, f_e, f_h, g_a, g_b, g_c, g_d, g_e, g_h):
    return _ch2o4gpu_cpu.h2o4gpu_solve_double(work, settings, solution, info, f_a, f_b, f_c, f_d, f_e, f_h, g_a, g_b, g_c, g_d, g_e, g_h)
h2o4gpu_solve_double = _ch2o4gpu_cpu.h2o4gpu_solve_double

def h2o4gpu_finish_single(work):
    return _ch2o4gpu_cpu.h2o4gpu_finish_single(work)
h2o4gpu_finish_single = _ch2o4gpu_cpu.h2o4gpu_finish_single

def h2o4gpu_finish_double(work):
    return _ch2o4gpu_cpu.h2o4gpu_finish_double(work)
h2o4gpu_finish_double = _ch2o4gpu_cpu.h2o4gpu_finish_double

def modelfree1_float(aptr):
    return _ch2o4gpu_cpu.modelfree1_float(aptr)
modelfree1_float = _ch2o4gpu_cpu.modelfree1_float

def modelfree1_double(aptr):
    return _ch2o4gpu_cpu.modelfree1_double(aptr)
modelfree1_double = _ch2o4gpu_cpu.modelfree1_double

def modelfree2_float(aptr):
    return _ch2o4gpu_cpu.modelfree2_float(aptr)
modelfree2_float = _ch2o4gpu_cpu.modelfree2_float

def modelfree2_double(aptr):
    return _ch2o4gpu_cpu.modelfree2_double(aptr)
modelfree2_double = _ch2o4gpu_cpu.modelfree2_double

def mcc(tp, tn, fp, fn):
    return _ch2o4gpu_cpu.mcc(tp, tn, fp, fn)
mcc = _ch2o4gpu_cpu.mcc

def f05(tp, tn, fp, fn):
    return _ch2o4gpu_cpu.f05(tp, tn, fp, fn)
f05 = _ch2o4gpu_cpu.f05

def f1(tp, tn, fp, fn):
    return _ch2o4gpu_cpu.f1(tp, tn, fp, fn)
f1 = _ch2o4gpu_cpu.f1

def f2(tp, tn, fp, fn):
    return _ch2o4gpu_cpu.f2(tp, tn, fp, fn)
f2 = _ch2o4gpu_cpu.f2

def acc(tp, tn, fp, fn):
    return _ch2o4gpu_cpu.acc(tp, tn, fp, fn)
acc = _ch2o4gpu_cpu.acc

def mcc_opt(*args):
    return _ch2o4gpu_cpu.mcc_opt(*args)
mcc_opt = _ch2o4gpu_cpu.mcc_opt

def f05_opt(*args):
    return _ch2o4gpu_cpu.f05_opt(*args)
f05_opt = _ch2o4gpu_cpu.f05_opt

def f1_opt(*args):
    return _ch2o4gpu_cpu.f1_opt(*args)
f1_opt = _ch2o4gpu_cpu.f1_opt

def f2_opt(*args):
    return _ch2o4gpu_cpu.f2_opt(*args)
f2_opt = _ch2o4gpu_cpu.f2_opt

def acc_opt(*args):
    return _ch2o4gpu_cpu.acc_opt(*args)
acc_opt = _ch2o4gpu_cpu.acc_opt

def confusion_matrices(*args):
    return _ch2o4gpu_cpu.confusion_matrices(*args)
confusion_matrices = _ch2o4gpu_cpu.confusion_matrices
# This file is compatible with both classic and new-style classes.



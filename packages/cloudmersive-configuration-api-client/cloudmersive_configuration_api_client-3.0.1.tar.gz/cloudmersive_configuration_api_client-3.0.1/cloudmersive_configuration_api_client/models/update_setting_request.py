# coding: utf-8

"""
    configapi

    Config API lets you easily manage configuration at scale.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateSettingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_id': 'str',
        'bucket_secret_key': 'str',
        'setting_to_update': 'SettingValue'
    }

    attribute_map = {
        'bucket_id': 'BucketID',
        'bucket_secret_key': 'BucketSecretKey',
        'setting_to_update': 'SettingToUpdate'
    }

    def __init__(self, bucket_id=None, bucket_secret_key=None, setting_to_update=None):  # noqa: E501
        """UpdateSettingRequest - a model defined in Swagger"""  # noqa: E501

        self._bucket_id = None
        self._bucket_secret_key = None
        self._setting_to_update = None
        self.discriminator = None

        if bucket_id is not None:
            self.bucket_id = bucket_id
        if bucket_secret_key is not None:
            self.bucket_secret_key = bucket_secret_key
        if setting_to_update is not None:
            self.setting_to_update = setting_to_update

    @property
    def bucket_id(self):
        """Gets the bucket_id of this UpdateSettingRequest.  # noqa: E501


        :return: The bucket_id of this UpdateSettingRequest.  # noqa: E501
        :rtype: str
        """
        return self._bucket_id

    @bucket_id.setter
    def bucket_id(self, bucket_id):
        """Sets the bucket_id of this UpdateSettingRequest.


        :param bucket_id: The bucket_id of this UpdateSettingRequest.  # noqa: E501
        :type: str
        """

        self._bucket_id = bucket_id

    @property
    def bucket_secret_key(self):
        """Gets the bucket_secret_key of this UpdateSettingRequest.  # noqa: E501


        :return: The bucket_secret_key of this UpdateSettingRequest.  # noqa: E501
        :rtype: str
        """
        return self._bucket_secret_key

    @bucket_secret_key.setter
    def bucket_secret_key(self, bucket_secret_key):
        """Sets the bucket_secret_key of this UpdateSettingRequest.


        :param bucket_secret_key: The bucket_secret_key of this UpdateSettingRequest.  # noqa: E501
        :type: str
        """

        self._bucket_secret_key = bucket_secret_key

    @property
    def setting_to_update(self):
        """Gets the setting_to_update of this UpdateSettingRequest.  # noqa: E501


        :return: The setting_to_update of this UpdateSettingRequest.  # noqa: E501
        :rtype: SettingValue
        """
        return self._setting_to_update

    @setting_to_update.setter
    def setting_to_update(self, setting_to_update):
        """Sets the setting_to_update of this UpdateSettingRequest.


        :param setting_to_update: The setting_to_update of this UpdateSettingRequest.  # noqa: E501
        :type: SettingValue
        """

        self._setting_to_update = setting_to_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSettingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSettingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

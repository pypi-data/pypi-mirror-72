# coding: utf-8

"""
    configapi

    Config API lets you easily manage configuration at scale.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SettingValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config_setting_value_id': 'str',
        'config_setting_definition_id': 'str',
        'config_setting_value': 'object',
        'config_setting_last_modified': 'datetime',
        'config_setting_name': 'str',
        'config_setting_description': 'str',
        'config_setting_tags': 'str',
        'config_setting_type': 'str'
    }

    attribute_map = {
        'config_setting_value_id': 'ConfigSettingValueID',
        'config_setting_definition_id': 'ConfigSettingDefinitionID',
        'config_setting_value': 'ConfigSettingValue',
        'config_setting_last_modified': 'ConfigSettingLastModified',
        'config_setting_name': 'ConfigSettingName',
        'config_setting_description': 'ConfigSettingDescription',
        'config_setting_tags': 'ConfigSettingTags',
        'config_setting_type': 'ConfigSettingType'
    }

    def __init__(self, config_setting_value_id=None, config_setting_definition_id=None, config_setting_value=None, config_setting_last_modified=None, config_setting_name=None, config_setting_description=None, config_setting_tags=None, config_setting_type=None):  # noqa: E501
        """SettingValue - a model defined in Swagger"""  # noqa: E501

        self._config_setting_value_id = None
        self._config_setting_definition_id = None
        self._config_setting_value = None
        self._config_setting_last_modified = None
        self._config_setting_name = None
        self._config_setting_description = None
        self._config_setting_tags = None
        self._config_setting_type = None
        self.discriminator = None

        if config_setting_value_id is not None:
            self.config_setting_value_id = config_setting_value_id
        if config_setting_definition_id is not None:
            self.config_setting_definition_id = config_setting_definition_id
        if config_setting_value is not None:
            self.config_setting_value = config_setting_value
        if config_setting_last_modified is not None:
            self.config_setting_last_modified = config_setting_last_modified
        if config_setting_name is not None:
            self.config_setting_name = config_setting_name
        if config_setting_description is not None:
            self.config_setting_description = config_setting_description
        if config_setting_tags is not None:
            self.config_setting_tags = config_setting_tags
        if config_setting_type is not None:
            self.config_setting_type = config_setting_type

    @property
    def config_setting_value_id(self):
        """Gets the config_setting_value_id of this SettingValue.  # noqa: E501

        The ID of the setting value  # noqa: E501

        :return: The config_setting_value_id of this SettingValue.  # noqa: E501
        :rtype: str
        """
        return self._config_setting_value_id

    @config_setting_value_id.setter
    def config_setting_value_id(self, config_setting_value_id):
        """Sets the config_setting_value_id of this SettingValue.

        The ID of the setting value  # noqa: E501

        :param config_setting_value_id: The config_setting_value_id of this SettingValue.  # noqa: E501
        :type: str
        """

        self._config_setting_value_id = config_setting_value_id

    @property
    def config_setting_definition_id(self):
        """Gets the config_setting_definition_id of this SettingValue.  # noqa: E501

        The ID of the definition of the setting  # noqa: E501

        :return: The config_setting_definition_id of this SettingValue.  # noqa: E501
        :rtype: str
        """
        return self._config_setting_definition_id

    @config_setting_definition_id.setter
    def config_setting_definition_id(self, config_setting_definition_id):
        """Sets the config_setting_definition_id of this SettingValue.

        The ID of the definition of the setting  # noqa: E501

        :param config_setting_definition_id: The config_setting_definition_id of this SettingValue.  # noqa: E501
        :type: str
        """

        self._config_setting_definition_id = config_setting_definition_id

    @property
    def config_setting_value(self):
        """Gets the config_setting_value of this SettingValue.  # noqa: E501

        The value of the setting  # noqa: E501

        :return: The config_setting_value of this SettingValue.  # noqa: E501
        :rtype: object
        """
        return self._config_setting_value

    @config_setting_value.setter
    def config_setting_value(self, config_setting_value):
        """Sets the config_setting_value of this SettingValue.

        The value of the setting  # noqa: E501

        :param config_setting_value: The config_setting_value of this SettingValue.  # noqa: E501
        :type: object
        """

        self._config_setting_value = config_setting_value

    @property
    def config_setting_last_modified(self):
        """Gets the config_setting_last_modified of this SettingValue.  # noqa: E501

        The last modified date of the setting  # noqa: E501

        :return: The config_setting_last_modified of this SettingValue.  # noqa: E501
        :rtype: datetime
        """
        return self._config_setting_last_modified

    @config_setting_last_modified.setter
    def config_setting_last_modified(self, config_setting_last_modified):
        """Sets the config_setting_last_modified of this SettingValue.

        The last modified date of the setting  # noqa: E501

        :param config_setting_last_modified: The config_setting_last_modified of this SettingValue.  # noqa: E501
        :type: datetime
        """

        self._config_setting_last_modified = config_setting_last_modified

    @property
    def config_setting_name(self):
        """Gets the config_setting_name of this SettingValue.  # noqa: E501

        Name of the setting  # noqa: E501

        :return: The config_setting_name of this SettingValue.  # noqa: E501
        :rtype: str
        """
        return self._config_setting_name

    @config_setting_name.setter
    def config_setting_name(self, config_setting_name):
        """Sets the config_setting_name of this SettingValue.

        Name of the setting  # noqa: E501

        :param config_setting_name: The config_setting_name of this SettingValue.  # noqa: E501
        :type: str
        """

        self._config_setting_name = config_setting_name

    @property
    def config_setting_description(self):
        """Gets the config_setting_description of this SettingValue.  # noqa: E501

        Description of the setting  # noqa: E501

        :return: The config_setting_description of this SettingValue.  # noqa: E501
        :rtype: str
        """
        return self._config_setting_description

    @config_setting_description.setter
    def config_setting_description(self, config_setting_description):
        """Sets the config_setting_description of this SettingValue.

        Description of the setting  # noqa: E501

        :param config_setting_description: The config_setting_description of this SettingValue.  # noqa: E501
        :type: str
        """

        self._config_setting_description = config_setting_description

    @property
    def config_setting_tags(self):
        """Gets the config_setting_tags of this SettingValue.  # noqa: E501

        Setting tags  # noqa: E501

        :return: The config_setting_tags of this SettingValue.  # noqa: E501
        :rtype: str
        """
        return self._config_setting_tags

    @config_setting_tags.setter
    def config_setting_tags(self, config_setting_tags):
        """Sets the config_setting_tags of this SettingValue.

        Setting tags  # noqa: E501

        :param config_setting_tags: The config_setting_tags of this SettingValue.  # noqa: E501
        :type: str
        """

        self._config_setting_tags = config_setting_tags

    @property
    def config_setting_type(self):
        """Gets the config_setting_type of this SettingValue.  # noqa: E501

        Possible values are: STRING, JSON  # noqa: E501

        :return: The config_setting_type of this SettingValue.  # noqa: E501
        :rtype: str
        """
        return self._config_setting_type

    @config_setting_type.setter
    def config_setting_type(self, config_setting_type):
        """Sets the config_setting_type of this SettingValue.

        Possible values are: STRING, JSON  # noqa: E501

        :param config_setting_type: The config_setting_type of this SettingValue.  # noqa: E501
        :type: str
        """

        self._config_setting_type = config_setting_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    configapi

    Config API lets you easily manage configuration at scale.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateSettingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'bool',
        'setting_definition_id': 'str',
        'setting_value_id': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'successful': 'Successful',
        'setting_definition_id': 'SettingDefinitionID',
        'setting_value_id': 'SettingValueID',
        'error_message': 'ErrorMessage'
    }

    def __init__(self, successful=None, setting_definition_id=None, setting_value_id=None, error_message=None):  # noqa: E501
        """CreateSettingResponse - a model defined in Swagger"""  # noqa: E501

        self._successful = None
        self._setting_definition_id = None
        self._setting_value_id = None
        self._error_message = None
        self.discriminator = None

        if successful is not None:
            self.successful = successful
        if setting_definition_id is not None:
            self.setting_definition_id = setting_definition_id
        if setting_value_id is not None:
            self.setting_value_id = setting_value_id
        if error_message is not None:
            self.error_message = error_message

    @property
    def successful(self):
        """Gets the successful of this CreateSettingResponse.  # noqa: E501

        True if the operation was successful, false otherwise  # noqa: E501

        :return: The successful of this CreateSettingResponse.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this CreateSettingResponse.

        True if the operation was successful, false otherwise  # noqa: E501

        :param successful: The successful of this CreateSettingResponse.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def setting_definition_id(self):
        """Gets the setting_definition_id of this CreateSettingResponse.  # noqa: E501

        SettingDefinitionID of the setting created  # noqa: E501

        :return: The setting_definition_id of this CreateSettingResponse.  # noqa: E501
        :rtype: str
        """
        return self._setting_definition_id

    @setting_definition_id.setter
    def setting_definition_id(self, setting_definition_id):
        """Sets the setting_definition_id of this CreateSettingResponse.

        SettingDefinitionID of the setting created  # noqa: E501

        :param setting_definition_id: The setting_definition_id of this CreateSettingResponse.  # noqa: E501
        :type: str
        """

        self._setting_definition_id = setting_definition_id

    @property
    def setting_value_id(self):
        """Gets the setting_value_id of this CreateSettingResponse.  # noqa: E501

        SettingValueID of the value of the setting  # noqa: E501

        :return: The setting_value_id of this CreateSettingResponse.  # noqa: E501
        :rtype: str
        """
        return self._setting_value_id

    @setting_value_id.setter
    def setting_value_id(self, setting_value_id):
        """Sets the setting_value_id of this CreateSettingResponse.

        SettingValueID of the value of the setting  # noqa: E501

        :param setting_value_id: The setting_value_id of this CreateSettingResponse.  # noqa: E501
        :type: str
        """

        self._setting_value_id = setting_value_id

    @property
    def error_message(self):
        """Gets the error_message of this CreateSettingResponse.  # noqa: E501

        Error message, if any, when the operation was not successful  # noqa: E501

        :return: The error_message of this CreateSettingResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CreateSettingResponse.

        Error message, if any, when the operation was not successful  # noqa: E501

        :param error_message: The error_message of this CreateSettingResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSettingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSettingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

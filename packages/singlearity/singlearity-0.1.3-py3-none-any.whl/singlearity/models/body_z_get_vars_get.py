# coding: utf-8

"""
    Singlearity Baseball API

    Baseball optimization API using machine learning  # noqa: E501

    The version of the OpenAPI document: 0.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from singlearity.configuration import Configuration


class BodyZGetVarsGet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aaa': 'Atmosphere',
        'mat': 'Matchup',
        'pas': 'PaSim',
        'st': 'State'
    }

    attribute_map = {
        'aaa': 'aaa',
        'mat': 'mat',
        'pas': 'pas',
        'st': 'st'
    }

    def __init__(self, aaa=None, mat=None, pas=None, st=None, local_vars_configuration=None):  # noqa: E501
        """BodyZGetVarsGet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aaa = None
        self._mat = None
        self._pas = None
        self._st = None
        self.discriminator = None

        self.aaa = aaa
        self.mat = mat
        self.pas = pas
        self.st = st

    @property
    def aaa(self):
        """Gets the aaa of this BodyZGetVarsGet.  # noqa: E501


        :return: The aaa of this BodyZGetVarsGet.  # noqa: E501
        :rtype: Atmosphere
        """
        return self._aaa

    @aaa.setter
    def aaa(self, aaa):
        """Sets the aaa of this BodyZGetVarsGet.


        :param aaa: The aaa of this BodyZGetVarsGet.  # noqa: E501
        :type: Atmosphere
        """
        if self.local_vars_configuration.client_side_validation and aaa is None:  # noqa: E501
            raise ValueError("Invalid value for `aaa`, must not be `None`")  # noqa: E501

        self._aaa = aaa

    @property
    def mat(self):
        """Gets the mat of this BodyZGetVarsGet.  # noqa: E501


        :return: The mat of this BodyZGetVarsGet.  # noqa: E501
        :rtype: Matchup
        """
        return self._mat

    @mat.setter
    def mat(self, mat):
        """Sets the mat of this BodyZGetVarsGet.


        :param mat: The mat of this BodyZGetVarsGet.  # noqa: E501
        :type: Matchup
        """
        if self.local_vars_configuration.client_side_validation and mat is None:  # noqa: E501
            raise ValueError("Invalid value for `mat`, must not be `None`")  # noqa: E501

        self._mat = mat

    @property
    def pas(self):
        """Gets the pas of this BodyZGetVarsGet.  # noqa: E501


        :return: The pas of this BodyZGetVarsGet.  # noqa: E501
        :rtype: PaSim
        """
        return self._pas

    @pas.setter
    def pas(self, pas):
        """Sets the pas of this BodyZGetVarsGet.


        :param pas: The pas of this BodyZGetVarsGet.  # noqa: E501
        :type: PaSim
        """
        if self.local_vars_configuration.client_side_validation and pas is None:  # noqa: E501
            raise ValueError("Invalid value for `pas`, must not be `None`")  # noqa: E501

        self._pas = pas

    @property
    def st(self):
        """Gets the st of this BodyZGetVarsGet.  # noqa: E501


        :return: The st of this BodyZGetVarsGet.  # noqa: E501
        :rtype: State
        """
        return self._st

    @st.setter
    def st(self, st):
        """Sets the st of this BodyZGetVarsGet.


        :param st: The st of this BodyZGetVarsGet.  # noqa: E501
        :type: State
        """
        if self.local_vars_configuration.client_side_validation and st is None:  # noqa: E501
            raise ValueError("Invalid value for `st`, must not be `None`")  # noqa: E501

        self._st = st

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyZGetVarsGet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BodyZGetVarsGet):
            return True

        return self.to_dict() != other.to_dict()

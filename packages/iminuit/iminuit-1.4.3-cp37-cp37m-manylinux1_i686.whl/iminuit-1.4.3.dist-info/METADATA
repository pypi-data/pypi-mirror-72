Metadata-Version: 2.1
Name: iminuit
Version: 1.4.3
Summary: Jupyter-friendly Python frontend for MINUIT2 in C++
Home-page: https://github.com/scikit-hep/iminuit
Author: Piti Ongmongkolkul and the iminuit team
Maintainer: Hans Dembinski
Maintainer-email: hans.dembinski@gmail.com
License: UNKNOWN
Download-URL: http://pypi.python.org/packages/source/i/scikit-hep/iminuit-1.4.3.tar.gz
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: C++
Classifier: Programming Language :: Cython
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Intended Audience :: Science/Research
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)
Classifier: License :: OSI Approved :: MIT License
Requires-Dist: numpy (>=1.11.3)

*iminuit* is a Jupyter-friendly Python frontend to the *MINUIT2* C++ package.

It can be used as a general robust function minimisation method,
but is most commonly used for likelihood fits of models to data,
and to get model parameter error estimates from likelihood profile analysis.

* Code: https://github.com/scikit-hep/iminuit
* Documentation: http://iminuit.readthedocs.org/
* Gitter: https://gitter.im/Scikit-HEP/community
* Mailing list: https://groups.google.com/forum/#!forum/scikit-hep-forum
* PyPI: https://pypi.org/project/iminuit/
* License: *MINUIT2* is LGPL and *iminuit* is MIT
* Citation: https://github.com/scikit-hep/iminuit/blob/master/CITATION

In a nutshell
-------------

.. code-block:: python

    from iminuit import Minuit

    def f(x, y, z):
        return (x - 2) ** 2 + (y - 3) ** 2 + (z - 4) ** 2

    m = Minuit(f)

    m.migrad()  # run optimiser
    print(m.values)  # {'x': 2,'y': 3,'z': 4}

    m.hesse()   # run covariance estimator
    print(m.errors)  # {'x': 1,'y': 1,'z': 1}



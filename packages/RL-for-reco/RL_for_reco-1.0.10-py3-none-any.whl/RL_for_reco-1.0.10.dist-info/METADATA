Metadata-Version: 2.1
Name: RL-for-reco
Version: 1.0.10
Summary: A Python toolkit of Deep Reinforcement Learning for Structured Data-Oriented Recommendation.
Home-page: https://github.com/gowun/RL_for_reco.git
Author: Gowun Jeong
Author-email: gowun.jeong@gmail.com
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Requires-Dist: thrift-sasl (==0.3.0)
Requires-Dist: hvac (>=0.9.6)
Requires-Dist: pyhive[hive]
Requires-Dist: pyarrow (>=0.16.0)
Requires-Dist: pandas (==1.0.3)
Requires-Dist: slackclient (>=2.5.0)
Requires-Dist: google-cloud-bigquery (>=1.24.0)
Requires-Dist: httplib2 (>=0.18.0)
Requires-Dist: click
Requires-Dist: PyGithub
Requires-Dist: pycryptodome
Requires-Dist: joblib (==0.14.1)
Requires-Dist: tabulate (>=0.8.7)
Provides-Extra: air
Requires-Dist: torch (==1.4.0) ; extra == 'air'
Requires-Dist: torchvision (==0.5.0) ; extra == 'air'
Requires-Dist: scikit-learn (==0.22.2.post1) ; extra == 'air'
Requires-Dist: scipy (==1.4.1) ; extra == 'air'
Requires-Dist: matplotlib (==3.2.1) ; extra == 'air'
Requires-Dist: mushroom-rl (==1.4.0) ; extra == 'air'

# Deep Reinforcement Learning for Business Structured Data
---

## Item_Reco
---

A class to recommend products to customers with their any current information and product-recommended history.
Class variable items indicates the products as well as their associate promotions, offers such as any recommendation type. 
If you want to take a case where customers have not recommendation, you can use 'none' to represent the case.
States, actions and reward are respectively n-dim array, 1-d array and a float number.
A transition model, state + action => (state, reward), is assumed as a multi-output neural network on TorchModel. 

This framework, actually, is applicable to problems of any structured data.



## Network_for_Reco
---

A class to update Q-values though a nueral network.
This is also a general form avaiable to any problem.


## DQN_Learn
---

A class to formulate a Deep Q Learning problem(an environment, an agent and its policy and associated parameters) and to learn the agent by a Deep Q Network and its approximator. 


## TorchModel
---

Several classes to build a neural network by pyTorch.


# MASTER development.ini.sample configuration file
# This file is part of the notmm project.
# Copyright (C) 2007-2011 Etienne Robillard <erob@gthcfoundation.org>
# All rights reserved.
#
# Usage:
#       Copy to ``development.ini`` and use run.py script to run 
#       the selected test collections.
#       
#       % cp development.ini.sample development.ini
#       % python2.6 ./run.py 
# 
[DEFAULT]
rootdir = .

# Experimental StreamLogger interface (NEW) 
# XXX used in sandbox.logging_conf
[logging]
enabled = true
#error_log = /var/log/python.log
log_to_syslog = true
log_facility = local0
log_level = debug # debug, error, crit, info

[authkit]
# false=Disables AuthController middleware support 
authkit.setup.enable = true
authkit.setup.method = redirect, cookie
# false=Disables global debugging (NEW)
authkit.setup.debug = true
authkit.redirect.url = '/session_login/'
authkit.cookie.secret = secret_id_here

[httpserver]
host = localhost
port = 8000

[wikiapp]
default_instance = /var/www/default_wiki

[testrunner]
## *** Test collections setup *** 
## You may select alternative
## test suites here by specifying them with the
## "collections" parameter.
## ---------------------
## Available collections
## ---------------------


## apps/blogengine: BlogEngine support (experimental)
## moinmoin:   MoinMoin support (stable)
## auth: LibAuthkit2 support (experimental)
## crypto:  TextStore Encryption/Decryption API with pycryptopp (stable)
## DB-related extensions:
## datastore:   Data storage API v1 test suite (stable)
## dbapi:       Data storage API v2 test suite (stable; requires libschevo)
## livestore: LiveStore wsgi app test (experimental) 
## regression: Tests for maintainers and bug fixes.
## webdav: PyWebDav wsgi app (experimental)
## Unstable components:
## unstable/cassandra:      Apache Cassandra API v3 test suite (experimental; requires lazyboy)
## unstable/auth:           OAuth WSGI middleware (experimental; require oauth)
## Django native API wrapping:
## django110:                Django Test Harness suite
##
## HTTP 1.1 support:
## webdav:  Experimental WebDAV extension support (unstable; requires pywebdav)
## wsgi:    WSGI 1.0 test suite (stable)
##
## Debug:
## ".":     Runs everything. (don't add unless you're expecting problems)
## -----
## Usage
## -----
## python2.7 ./run.py -C="wsgi,crypto,dbapi"
## By default the SimpleTestRunner class will pass the following list
## of collections to create a TestSuite object unless the -C option is 
## used.

##DEPRECATED: use TEST_COLLECTIONS
collections='auth,apps,datastore,dbapi,wsgi,utils,django110'

## Controls verbose messages at runtime
## Default: false
quiet=true

## The following options are not yet documented
# exclude=
# extra_libs=
# topdown=true

[blogengine]
# false=disable blogengine support 
enabled = true
# false=disable verbose logging for blogengine 
verbose = false
# directory where durus databases are found 
durus_db_path = /var/db/blogengine
durus_db_name = blogengine
#durus_db_prefix = durus

[restapp]
#schema = %(rootdir)s/fixtures/packages.yaml
#schema = sqlite:///%(rootdir)s/fixtures/packages.sqlite
#has_schema_file = yes

schema_index_name = 'index.yaml'
schema_index_type = 'yaml' 
schema_index_root = 'packages'
schema_index_debug = true

[template]
#template_dirs = %(rootdir)s/templates
#todo: support Genshi
template_loader = mako.CachedTemplateLoader

#################################
# sqlite extension via sqlalchemy 
#################################
[moviereviews]
backend = sqlite
# relative to the current package/app
path = fixtures/test.db 
echo = true
#pool_recycle = 3600

#durus_db_path = /var/db/blogengine
#durus_db_format = 2             
dbname = moviereviews   # path resolve to %(dbroot)s/%(dbname).durus
#verbose = 1
#debug = true
# specify path to fixtures (json)
#initial_data = %(rootdir)s/fixtures/moviereviews.json


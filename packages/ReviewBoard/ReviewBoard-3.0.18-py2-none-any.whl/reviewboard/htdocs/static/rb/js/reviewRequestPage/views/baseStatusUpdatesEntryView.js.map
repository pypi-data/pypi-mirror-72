{"version":3,"sources":["baseStatusUpdatesEntryView.es6.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;;AAGZ,QAAM,aAAa,GAAG,iBAAH,CAAqB,SAAxC;;AAGA;;;;;;;AAOA,OAAG,iBAAH,CAAqB,0BAArB,GAAkD,WAAW,MAAX,CAAkB;AAChE,0BAAkB,KAAK,IADyC,EAClC;;AAE9B;;;AAGA,kBANgE,wBAMnD;AACT,uBAAW,SAAX,CAAqB,UAArB,CAAgC,KAAhC,CAAsC,IAAtC,EAA4C,SAA5C;;AAEA,iBAAK,YAAL,GAAoB,IAApB;AACH,SAV+D;;;AAYhE;;;;;;;AAOA,yBAnBgE,+BAmB5C;AAChB;;;;AAIA,iBAAK,KAAL,CAAW,mBAAX;;AAEA;;;;AAIA,gBAAM,oBAAoB,GAAG,WAAH,CAAe,OAAf,GAAyB,iBAAnD;AACA,gBAAM,mBAAmB,KAAK,KAAL,CAAW,GAAX,CAAe,kBAAf,KAAsC,EAA/D;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,iBAAiB,MAArC,EAA6C,GAA7C,EAAkD;AAC9C,kCAAkB,YAAlB,CAA+B,iBAAiB,CAAjB,EAAoB,CAApB,CAA/B;AACH;AACJ,SApC+D;;;AAsChE;;;;;;;;;;AAUA,cAhDgE,oBAgDvD;AAAA;;AACL,uBAAW,SAAX,CAAqB,MAArB,CAA4B,IAA5B,CAAiC,IAAjC;;AAEA,iBAAK,YAAL,GAAoB,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,EAA0B,GAA1B,CAA8B,kBAAU;AACxD,oBAAM,YAAY,MAAK,CAAL,aAAiB,OAAO,EAAxB,CAAlB;;AAEA,oBAAM,OAAO,IAAI,GAAG,iBAAH,CAAqB,UAAzB,CAAoC;AAC7C,wBAAI,SADyC;AAE7C,2BAAO,MAFsC;AAG7C,gCAAY,MAAK,KAH4B;AAI7C,2CAAuB,SAJsB;AAK7C,mCAAe,UAAU,QAAV,CAAmB,UAAnB,CAL8B;AAM7C,iDAA6B;AANgB,iBAApC,CAAb;AAQA,qBAAK,MAAL;;AAEA,sBAAK,eAAL,CAAqB,IAArB;;AAEA,uBAAO,IAAP;AACH,aAhBmB,CAApB;;AAkBA,gBAAI,KAAK,KAAL,CAAW,GAAX,CAAe,sBAAf,CAAJ,EAA4C;AACxC,qBAAK,KAAL,CAAW,YAAX,CAAwB,KAAK,gBAA7B;AACH;;AAED,mBAAO,IAAP;AACH,SA1E+D;;;AA4EhE;;;;;;;;;;AAUA,uBAtFgE,2BAsFhD,IAtFgD,EAsF1C,CACrB;AAvF+D,KAAlB,CAAlD;AA2FC,CAxGD","file":"baseStatusUpdatesEntryView.js","sourcesContent":["(function() {\n\n\nconst ParentView = RB.ReviewRequestPage.EntryView;\n\n\n/**\n * Base class for an entry that can contain status updates.\n *\n * This manages the views for each review on the status updates, and watches\n * for updates to the entry so that any completed status updates can be\n * shown without a page reload.\n */\nRB.ReviewRequestPage.BaseStatusUpdatesEntryView = ParentView.extend({\n    CHECK_UPDATES_MS: 10 * 1000,  // 10 seconds\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        ParentView.prototype.initialize.apply(this, arguments);\n\n        this._reviewViews = null;\n    },\n\n    /**\n     * Save state before applying an update.\n     *\n     * This will save all the loaded diff fragments on the entry so that\n     * they'll be loaded from cache when processing the fragments again for\n     * the entry after reload.\n     */\n    beforeApplyUpdate() {\n        /*\n         * Stop watching for any updates. If there are still status updates\n         * pending, render() will re-register for updates.\n         */\n        this.model.stopWatchingUpdates();\n\n        /*\n         * Store any diff fragments for the reload, so we don't have to\n         * fetch them again from the server.\n         */\n        const diffFragmentQueue = RB.PageManager.getPage().diffFragmentQueue;\n        const diffCommentsData = this.model.get('diffCommentsData') || [];\n\n        for (let i = 0; i < diffCommentsData.length; i++) {\n            diffFragmentQueue.saveFragment(diffCommentsData[i][0]);\n        }\n    },\n\n    /**\n     * Render the entry.\n     *\n     * This will construct a view for each review associated with a status\n     * update.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.BaseStatusUpdatesEntryView:\n     *     This object, for chaining.\n     */\n    render() {\n        ParentView.prototype.render.call(this);\n\n        this._reviewViews = this.model.get('reviews').map(review => {\n            const $reviewEl = this.$(`#review${review.id}`);\n\n            const view = new RB.ReviewRequestPage.ReviewView({\n                el: $reviewEl,\n                model: review,\n                entryModel: this.model,\n                $bannerFloatContainer: $reviewEl,\n                $bannerParent: $reviewEl.children('.banners'),\n                bannerNoFloatContainerClass: 'collapsed',\n            });\n            view.render();\n\n            this.setupReviewView(view);\n\n            return view;\n        });\n\n        if (this.model.get('pendingStatusUpdates')) {\n            this.model.watchUpdates(this.CHECK_UPDATES_MS);\n        }\n\n        return this;\n    },\n\n    /**\n     * Set up a review view.\n     *\n     * Subclasses can override this to provide additional setup for review\n     * views rendered on the page.\n     *\n     * Args:\n     *     view (RB.ReviewRequestPage.ReviewView):\n     *         The review view being set up.\n     */\n    setupReviewView(view) {\n    },\n});\n\n\n})();\n"]}
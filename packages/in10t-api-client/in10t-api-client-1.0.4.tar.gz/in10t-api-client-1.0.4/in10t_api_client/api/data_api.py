# coding: utf-8

"""
    IN10T Client Data API

    IN10T Client Data API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: matt@in10t.ag
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from in10t_api_client.api_client import ApiClient


class DataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def data_as_applied(self, **kwargs):  # noqa: E501
        """view all applied data from geodatabase  # noqa: E501

        View all applied data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_as_applied(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str year: Selected year
        :param int page: The page of data to retrieve. (Starts at 0)
        :param int page_size: The page size for querying the data (Defaults to 500)
        :param str updated_at_start: Start range for updated_at filter, can be used with or without updated_at_end for a range.  Value should be ISO date string, example 2019-11-25
        :param str updated_at_end: Start range for updated_at filter, can be used with or without updated_at_start for a range.  Value should be ISO date string, example 2019-11-25
        :return: AsAppliedData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_as_applied_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_as_applied_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_as_applied_with_http_info(self, **kwargs):  # noqa: E501
        """view all applied data from geodatabase  # noqa: E501

        View all applied data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_as_applied_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str year: Selected year
        :param int page: The page of data to retrieve. (Starts at 0)
        :param int page_size: The page size for querying the data (Defaults to 500)
        :param str updated_at_start: Start range for updated_at filter, can be used with or without updated_at_end for a range.  Value should be ISO date string, example 2019-11-25
        :param str updated_at_end: Start range for updated_at filter, can be used with or without updated_at_start for a range.  Value should be ISO date string, example 2019-11-25
        :return: AsAppliedData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'page', 'page_size', 'updated_at_start', 'updated_at_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_as_applied" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'updated_at_start' in params:
            query_params.append(('updated_at_start', params['updated_at_start']))  # noqa: E501
        if 'updated_at_end' in params:
            query_params.append(('updated_at_end', params['updated_at_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/as-applied', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsAppliedData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_harvest(self, **kwargs):  # noqa: E501
        """view all harvest data from geodatabase  # noqa: E501

        View all harvest data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_harvest(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str year: Selected year
        :param int page: The page of data to retrieve. (Starts at 0)
        :param int page_size: The page size for querying the data (Defaults to 500)
        :param str updated_at_start: Start range for updated_at filter, can be used with or without updated_at_end for a range.  Value should be ISO date string, example 2019-11-25
        :param str updated_at_end: Start range for updated_at filter, can be used with or without updated_at_start for a range.  Value should be ISO date string, example 2019-11-25
        :return: HarvestData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_harvest_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_harvest_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_harvest_with_http_info(self, **kwargs):  # noqa: E501
        """view all harvest data from geodatabase  # noqa: E501

        View all harvest data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_harvest_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str year: Selected year
        :param int page: The page of data to retrieve. (Starts at 0)
        :param int page_size: The page size for querying the data (Defaults to 500)
        :param str updated_at_start: Start range for updated_at filter, can be used with or without updated_at_end for a range.  Value should be ISO date string, example 2019-11-25
        :param str updated_at_end: Start range for updated_at filter, can be used with or without updated_at_start for a range.  Value should be ISO date string, example 2019-11-25
        :return: HarvestData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'page', 'page_size', 'updated_at_start', 'updated_at_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_harvest" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'updated_at_start' in params:
            query_params.append(('updated_at_start', params['updated_at_start']))  # noqa: E501
        if 'updated_at_end' in params:
            query_params.append(('updated_at_end', params['updated_at_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/harvest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HarvestData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_planting(self, **kwargs):  # noqa: E501
        """view all planting data from geodatabase  # noqa: E501

        View all planting data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_planting(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str year: Selected year
        :param int page: The page of data to retrieve. (Starts at 0)
        :param int page_size: The page size for querying the data (Defaults to 500)
        :param str updated_at_start: Start range for updated_at filter, can be used with or without updated_at_end for a range.  Value should be ISO date string, example 2019-11-25
        :param str updated_at_end: Start range for updated_at filter, can be used with or without updated_at_start for a range.  Value should be ISO date string, example 2019-11-25
        :return: PlantingData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_planting_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_planting_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_planting_with_http_info(self, **kwargs):  # noqa: E501
        """view all planting data from geodatabase  # noqa: E501

        View all planting data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_planting_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str year: Selected year
        :param int page: The page of data to retrieve. (Starts at 0)
        :param int page_size: The page size for querying the data (Defaults to 500)
        :param str updated_at_start: Start range for updated_at filter, can be used with or without updated_at_end for a range.  Value should be ISO date string, example 2019-11-25
        :param str updated_at_end: Start range for updated_at filter, can be used with or without updated_at_start for a range.  Value should be ISO date string, example 2019-11-25
        :return: PlantingData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'page', 'page_size', 'updated_at_start', 'updated_at_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_planting" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'updated_at_start' in params:
            query_params.append(('updated_at_start', params['updated_at_start']))  # noqa: E501
        if 'updated_at_end' in params:
            query_params.append(('updated_at_end', params['updated_at_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/planting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlantingData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def processed_data_harvest(self, **kwargs):  # noqa: E501
        """view all processed harvest data from geodatabase  # noqa: E501

        View all processed harvest data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.processed_data_harvest(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str year: Selected year
        :param int page: The page of data to retrieve. (Starts at 0)
        :param int page_size: The page size for querying the data (Defaults to 500)
        :param str updated_at_start: Start range for updated_at filter, can be used with or without updated_at_end for a range.  Value should be ISO date string, example 2019-11-25
        :param str updated_at_end: Start range for updated_at filter, can be used with or without updated_at_start for a range.  Value should be ISO date string, example 2019-11-25
        :return: ProcessedHarvestData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.processed_data_harvest_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.processed_data_harvest_with_http_info(**kwargs)  # noqa: E501
            return data

    def processed_data_harvest_with_http_info(self, **kwargs):  # noqa: E501
        """view all processed harvest data from geodatabase  # noqa: E501

        View all processed harvest data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.processed_data_harvest_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str year: Selected year
        :param int page: The page of data to retrieve. (Starts at 0)
        :param int page_size: The page size for querying the data (Defaults to 500)
        :param str updated_at_start: Start range for updated_at filter, can be used with or without updated_at_end for a range.  Value should be ISO date string, example 2019-11-25
        :param str updated_at_end: Start range for updated_at filter, can be used with or without updated_at_start for a range.  Value should be ISO date string, example 2019-11-25
        :return: ProcessedHarvestData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'page', 'page_size', 'updated_at_start', 'updated_at_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method processed_data_harvest" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'updated_at_start' in params:
            query_params.append(('updated_at_start', params['updated_at_start']))  # noqa: E501
        if 'updated_at_end' in params:
            query_params.append(('updated_at_end', params['updated_at_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/processed-harvest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProcessedHarvestData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

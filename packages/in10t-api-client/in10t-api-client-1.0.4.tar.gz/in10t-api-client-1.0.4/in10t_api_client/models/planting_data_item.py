# coding: utf-8

"""
    IN10T Client Data API

    IN10T Client Data API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: matt@in10t.ag
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PlantingDataItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'objectid': 'int',
        'operation': 'str',
        'crop': 'str',
        'product': 'str',
        'prodtype': 'str',
        'units': 'str',
        'segment': 'int',
        'timestamp': 'str',
        'amount': 'float',
        'amntperac': 'float',
        'area': 'float',
        'altitude': 'float',
        'headstatus': 'int',
        'grower': 'str',
        'farm': 'str',
        'field': 'str',
        'singulation': 'float',
        'skips': 'float',
        'doubles': 'float',
        'downforce': 'float',
        'gndcontact': 'float',
        'sdspacing': 'float',
        'rowspacing': 'float',
        'speed': 'float',
        'width': 'float',
        'furrowmois': 'float',
        'soiltemper': 'float',
        'uniformfur': 'float',
        'cleanfurro': 'float',
        'organicmat': 'float',
        'heading': 'float',
        'point': 'str',
        'report_name': 'str',
        'year': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'deleted': 'bool',
        'field_id': 'float',
        'field_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'objectid': 'objectid',
        'operation': 'operation',
        'crop': 'crop',
        'product': 'product',
        'prodtype': 'prodtype',
        'units': 'units',
        'segment': 'segment',
        'timestamp': 'timestamp',
        'amount': 'amount',
        'amntperac': 'amntperac',
        'area': 'area',
        'altitude': 'altitude',
        'headstatus': 'headstatus',
        'grower': 'grower',
        'farm': 'farm',
        'field': 'field',
        'singulation': 'singulation',
        'skips': 'skips',
        'doubles': 'doubles',
        'downforce': 'downforce',
        'gndcontact': 'gndcontact',
        'sdspacing': 'sdspacing',
        'rowspacing': 'rowspacing',
        'speed': 'speed',
        'width': 'width',
        'furrowmois': 'furrowmois',
        'soiltemper': 'soiltemper',
        'uniformfur': 'uniformfur',
        'cleanfurro': 'cleanfurro',
        'organicmat': 'organicmat',
        'heading': 'heading',
        'point': 'point',
        'report_name': 'report_name',
        'year': 'year',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted': 'deleted',
        'field_id': 'field_id',
        'field_name': 'field_name'
    }

    def __init__(self, id=None, objectid=None, operation=None, crop=None, product=None, prodtype=None, units=None, segment=None, timestamp=None, amount=None, amntperac=None, area=None, altitude=None, headstatus=None, grower=None, farm=None, field=None, singulation=None, skips=None, doubles=None, downforce=None, gndcontact=None, sdspacing=None, rowspacing=None, speed=None, width=None, furrowmois=None, soiltemper=None, uniformfur=None, cleanfurro=None, organicmat=None, heading=None, point=None, report_name=None, year=None, created_at=None, updated_at=None, deleted=None, field_id=None, field_name=None):  # noqa: E501
        """PlantingDataItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._objectid = None
        self._operation = None
        self._crop = None
        self._product = None
        self._prodtype = None
        self._units = None
        self._segment = None
        self._timestamp = None
        self._amount = None
        self._amntperac = None
        self._area = None
        self._altitude = None
        self._headstatus = None
        self._grower = None
        self._farm = None
        self._field = None
        self._singulation = None
        self._skips = None
        self._doubles = None
        self._downforce = None
        self._gndcontact = None
        self._sdspacing = None
        self._rowspacing = None
        self._speed = None
        self._width = None
        self._furrowmois = None
        self._soiltemper = None
        self._uniformfur = None
        self._cleanfurro = None
        self._organicmat = None
        self._heading = None
        self._point = None
        self._report_name = None
        self._year = None
        self._created_at = None
        self._updated_at = None
        self._deleted = None
        self._field_id = None
        self._field_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if objectid is not None:
            self.objectid = objectid
        if operation is not None:
            self.operation = operation
        if crop is not None:
            self.crop = crop
        if product is not None:
            self.product = product
        if prodtype is not None:
            self.prodtype = prodtype
        if units is not None:
            self.units = units
        if segment is not None:
            self.segment = segment
        if timestamp is not None:
            self.timestamp = timestamp
        if amount is not None:
            self.amount = amount
        if amntperac is not None:
            self.amntperac = amntperac
        if area is not None:
            self.area = area
        if altitude is not None:
            self.altitude = altitude
        if headstatus is not None:
            self.headstatus = headstatus
        if grower is not None:
            self.grower = grower
        if farm is not None:
            self.farm = farm
        if field is not None:
            self.field = field
        if singulation is not None:
            self.singulation = singulation
        if skips is not None:
            self.skips = skips
        if doubles is not None:
            self.doubles = doubles
        if downforce is not None:
            self.downforce = downforce
        if gndcontact is not None:
            self.gndcontact = gndcontact
        if sdspacing is not None:
            self.sdspacing = sdspacing
        if rowspacing is not None:
            self.rowspacing = rowspacing
        if speed is not None:
            self.speed = speed
        if width is not None:
            self.width = width
        if furrowmois is not None:
            self.furrowmois = furrowmois
        if soiltemper is not None:
            self.soiltemper = soiltemper
        if uniformfur is not None:
            self.uniformfur = uniformfur
        if cleanfurro is not None:
            self.cleanfurro = cleanfurro
        if organicmat is not None:
            self.organicmat = organicmat
        if heading is not None:
            self.heading = heading
        if point is not None:
            self.point = point
        if report_name is not None:
            self.report_name = report_name
        if year is not None:
            self.year = year
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if deleted is not None:
            self.deleted = deleted
        if field_id is not None:
            self.field_id = field_id
        if field_name is not None:
            self.field_name = field_name

    @property
    def id(self):
        """Gets the id of this PlantingDataItem.  # noqa: E501


        :return: The id of this PlantingDataItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlantingDataItem.


        :param id: The id of this PlantingDataItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def objectid(self):
        """Gets the objectid of this PlantingDataItem.  # noqa: E501


        :return: The objectid of this PlantingDataItem.  # noqa: E501
        :rtype: int
        """
        return self._objectid

    @objectid.setter
    def objectid(self, objectid):
        """Sets the objectid of this PlantingDataItem.


        :param objectid: The objectid of this PlantingDataItem.  # noqa: E501
        :type: int
        """

        self._objectid = objectid

    @property
    def operation(self):
        """Gets the operation of this PlantingDataItem.  # noqa: E501


        :return: The operation of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this PlantingDataItem.


        :param operation: The operation of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if operation is not None and len(operation) > 20:
            raise ValueError("Invalid value for `operation`, length must be less than or equal to `20`")  # noqa: E501

        self._operation = operation

    @property
    def crop(self):
        """Gets the crop of this PlantingDataItem.  # noqa: E501


        :return: The crop of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this PlantingDataItem.


        :param crop: The crop of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if crop is not None and len(crop) > 20:
            raise ValueError("Invalid value for `crop`, length must be less than or equal to `20`")  # noqa: E501

        self._crop = crop

    @property
    def product(self):
        """Gets the product of this PlantingDataItem.  # noqa: E501


        :return: The product of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this PlantingDataItem.


        :param product: The product of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if product is not None and len(product) > 30:
            raise ValueError("Invalid value for `product`, length must be less than or equal to `30`")  # noqa: E501

        self._product = product

    @property
    def prodtype(self):
        """Gets the prodtype of this PlantingDataItem.  # noqa: E501


        :return: The prodtype of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._prodtype

    @prodtype.setter
    def prodtype(self, prodtype):
        """Sets the prodtype of this PlantingDataItem.


        :param prodtype: The prodtype of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if prodtype is not None and len(prodtype) > 20:
            raise ValueError("Invalid value for `prodtype`, length must be less than or equal to `20`")  # noqa: E501

        self._prodtype = prodtype

    @property
    def units(self):
        """Gets the units of this PlantingDataItem.  # noqa: E501


        :return: The units of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this PlantingDataItem.


        :param units: The units of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if units is not None and len(units) > 20:
            raise ValueError("Invalid value for `units`, length must be less than or equal to `20`")  # noqa: E501

        self._units = units

    @property
    def segment(self):
        """Gets the segment of this PlantingDataItem.  # noqa: E501


        :return: The segment of this PlantingDataItem.  # noqa: E501
        :rtype: int
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this PlantingDataItem.


        :param segment: The segment of this PlantingDataItem.  # noqa: E501
        :type: int
        """

        self._segment = segment

    @property
    def timestamp(self):
        """Gets the timestamp of this PlantingDataItem.  # noqa: E501


        :return: The timestamp of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PlantingDataItem.


        :param timestamp: The timestamp of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if timestamp is not None and len(timestamp) > 20:
            raise ValueError("Invalid value for `timestamp`, length must be less than or equal to `20`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def amount(self):
        """Gets the amount of this PlantingDataItem.  # noqa: E501


        :return: The amount of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PlantingDataItem.


        :param amount: The amount of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amntperac(self):
        """Gets the amntperac of this PlantingDataItem.  # noqa: E501


        :return: The amntperac of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._amntperac

    @amntperac.setter
    def amntperac(self, amntperac):
        """Sets the amntperac of this PlantingDataItem.


        :param amntperac: The amntperac of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._amntperac = amntperac

    @property
    def area(self):
        """Gets the area of this PlantingDataItem.  # noqa: E501


        :return: The area of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this PlantingDataItem.


        :param area: The area of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._area = area

    @property
    def altitude(self):
        """Gets the altitude of this PlantingDataItem.  # noqa: E501


        :return: The altitude of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this PlantingDataItem.


        :param altitude: The altitude of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._altitude = altitude

    @property
    def headstatus(self):
        """Gets the headstatus of this PlantingDataItem.  # noqa: E501


        :return: The headstatus of this PlantingDataItem.  # noqa: E501
        :rtype: int
        """
        return self._headstatus

    @headstatus.setter
    def headstatus(self, headstatus):
        """Sets the headstatus of this PlantingDataItem.


        :param headstatus: The headstatus of this PlantingDataItem.  # noqa: E501
        :type: int
        """

        self._headstatus = headstatus

    @property
    def grower(self):
        """Gets the grower of this PlantingDataItem.  # noqa: E501


        :return: The grower of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._grower

    @grower.setter
    def grower(self, grower):
        """Sets the grower of this PlantingDataItem.


        :param grower: The grower of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if grower is not None and len(grower) > 40:
            raise ValueError("Invalid value for `grower`, length must be less than or equal to `40`")  # noqa: E501

        self._grower = grower

    @property
    def farm(self):
        """Gets the farm of this PlantingDataItem.  # noqa: E501


        :return: The farm of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._farm

    @farm.setter
    def farm(self, farm):
        """Sets the farm of this PlantingDataItem.


        :param farm: The farm of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if farm is not None and len(farm) > 40:
            raise ValueError("Invalid value for `farm`, length must be less than or equal to `40`")  # noqa: E501

        self._farm = farm

    @property
    def field(self):
        """Gets the field of this PlantingDataItem.  # noqa: E501


        :return: The field of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this PlantingDataItem.


        :param field: The field of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if field is not None and len(field) > 40:
            raise ValueError("Invalid value for `field`, length must be less than or equal to `40`")  # noqa: E501

        self._field = field

    @property
    def singulation(self):
        """Gets the singulation of this PlantingDataItem.  # noqa: E501


        :return: The singulation of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._singulation

    @singulation.setter
    def singulation(self, singulation):
        """Sets the singulation of this PlantingDataItem.


        :param singulation: The singulation of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._singulation = singulation

    @property
    def skips(self):
        """Gets the skips of this PlantingDataItem.  # noqa: E501


        :return: The skips of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._skips

    @skips.setter
    def skips(self, skips):
        """Sets the skips of this PlantingDataItem.


        :param skips: The skips of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._skips = skips

    @property
    def doubles(self):
        """Gets the doubles of this PlantingDataItem.  # noqa: E501


        :return: The doubles of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._doubles

    @doubles.setter
    def doubles(self, doubles):
        """Sets the doubles of this PlantingDataItem.


        :param doubles: The doubles of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._doubles = doubles

    @property
    def downforce(self):
        """Gets the downforce of this PlantingDataItem.  # noqa: E501


        :return: The downforce of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._downforce

    @downforce.setter
    def downforce(self, downforce):
        """Sets the downforce of this PlantingDataItem.


        :param downforce: The downforce of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._downforce = downforce

    @property
    def gndcontact(self):
        """Gets the gndcontact of this PlantingDataItem.  # noqa: E501


        :return: The gndcontact of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._gndcontact

    @gndcontact.setter
    def gndcontact(self, gndcontact):
        """Sets the gndcontact of this PlantingDataItem.


        :param gndcontact: The gndcontact of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._gndcontact = gndcontact

    @property
    def sdspacing(self):
        """Gets the sdspacing of this PlantingDataItem.  # noqa: E501


        :return: The sdspacing of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._sdspacing

    @sdspacing.setter
    def sdspacing(self, sdspacing):
        """Sets the sdspacing of this PlantingDataItem.


        :param sdspacing: The sdspacing of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._sdspacing = sdspacing

    @property
    def rowspacing(self):
        """Gets the rowspacing of this PlantingDataItem.  # noqa: E501


        :return: The rowspacing of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._rowspacing

    @rowspacing.setter
    def rowspacing(self, rowspacing):
        """Sets the rowspacing of this PlantingDataItem.


        :param rowspacing: The rowspacing of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._rowspacing = rowspacing

    @property
    def speed(self):
        """Gets the speed of this PlantingDataItem.  # noqa: E501


        :return: The speed of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this PlantingDataItem.


        :param speed: The speed of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def width(self):
        """Gets the width of this PlantingDataItem.  # noqa: E501


        :return: The width of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PlantingDataItem.


        :param width: The width of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def furrowmois(self):
        """Gets the furrowmois of this PlantingDataItem.  # noqa: E501


        :return: The furrowmois of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._furrowmois

    @furrowmois.setter
    def furrowmois(self, furrowmois):
        """Sets the furrowmois of this PlantingDataItem.


        :param furrowmois: The furrowmois of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._furrowmois = furrowmois

    @property
    def soiltemper(self):
        """Gets the soiltemper of this PlantingDataItem.  # noqa: E501


        :return: The soiltemper of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._soiltemper

    @soiltemper.setter
    def soiltemper(self, soiltemper):
        """Sets the soiltemper of this PlantingDataItem.


        :param soiltemper: The soiltemper of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._soiltemper = soiltemper

    @property
    def uniformfur(self):
        """Gets the uniformfur of this PlantingDataItem.  # noqa: E501


        :return: The uniformfur of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._uniformfur

    @uniformfur.setter
    def uniformfur(self, uniformfur):
        """Sets the uniformfur of this PlantingDataItem.


        :param uniformfur: The uniformfur of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._uniformfur = uniformfur

    @property
    def cleanfurro(self):
        """Gets the cleanfurro of this PlantingDataItem.  # noqa: E501


        :return: The cleanfurro of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._cleanfurro

    @cleanfurro.setter
    def cleanfurro(self, cleanfurro):
        """Sets the cleanfurro of this PlantingDataItem.


        :param cleanfurro: The cleanfurro of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._cleanfurro = cleanfurro

    @property
    def organicmat(self):
        """Gets the organicmat of this PlantingDataItem.  # noqa: E501


        :return: The organicmat of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._organicmat

    @organicmat.setter
    def organicmat(self, organicmat):
        """Sets the organicmat of this PlantingDataItem.


        :param organicmat: The organicmat of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._organicmat = organicmat

    @property
    def heading(self):
        """Gets the heading of this PlantingDataItem.  # noqa: E501


        :return: The heading of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this PlantingDataItem.


        :param heading: The heading of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._heading = heading

    @property
    def point(self):
        """Gets the point of this PlantingDataItem.  # noqa: E501


        :return: The point of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this PlantingDataItem.


        :param point: The point of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if point is not None and len(point) > 120:
            raise ValueError("Invalid value for `point`, length must be less than or equal to `120`")  # noqa: E501

        self._point = point

    @property
    def report_name(self):
        """Gets the report_name of this PlantingDataItem.  # noqa: E501


        :return: The report_name of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this PlantingDataItem.


        :param report_name: The report_name of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if report_name is not None and len(report_name) > 255:
            raise ValueError("Invalid value for `report_name`, length must be less than or equal to `255`")  # noqa: E501

        self._report_name = report_name

    @property
    def year(self):
        """Gets the year of this PlantingDataItem.  # noqa: E501


        :return: The year of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this PlantingDataItem.


        :param year: The year of this PlantingDataItem.  # noqa: E501
        :type: str
        """
        if year is not None and len(year) > 10:
            raise ValueError("Invalid value for `year`, length must be less than or equal to `10`")  # noqa: E501

        self._year = year

    @property
    def created_at(self):
        """Gets the created_at of this PlantingDataItem.  # noqa: E501


        :return: The created_at of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PlantingDataItem.


        :param created_at: The created_at of this PlantingDataItem.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PlantingDataItem.  # noqa: E501


        :return: The updated_at of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PlantingDataItem.


        :param updated_at: The updated_at of this PlantingDataItem.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def deleted(self):
        """Gets the deleted of this PlantingDataItem.  # noqa: E501


        :return: The deleted of this PlantingDataItem.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this PlantingDataItem.


        :param deleted: The deleted of this PlantingDataItem.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def field_id(self):
        """Gets the field_id of this PlantingDataItem.  # noqa: E501


        :return: The field_id of this PlantingDataItem.  # noqa: E501
        :rtype: float
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this PlantingDataItem.


        :param field_id: The field_id of this PlantingDataItem.  # noqa: E501
        :type: float
        """

        self._field_id = field_id

    @property
    def field_name(self):
        """Gets the field_name of this PlantingDataItem.  # noqa: E501


        :return: The field_name of this PlantingDataItem.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this PlantingDataItem.


        :param field_name: The field_name of this PlantingDataItem.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlantingDataItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlantingDataItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

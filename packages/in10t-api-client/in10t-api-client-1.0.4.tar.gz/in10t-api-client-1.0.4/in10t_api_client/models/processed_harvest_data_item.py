# coding: utf-8

"""
    IN10T Client Data API

    IN10T Client Data API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: matt@in10t.ag
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProcessedHarvestDataItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'objectid': 'int',
        'operation': 'str',
        'crop': 'str',
        'segment': 'int',
        'timestamp': 'str',
        '_yield': 'float',
        'moisture': 'float',
        'area': 'float',
        'altitude': 'float',
        'headstatus': 'int',
        'grower': 'str',
        'farm': 'str',
        'field': 'str',
        'speed': 'float',
        'width': 'float',
        'bu': 'float',
        'buperac_confirm': 'float',
        'analytics_report': 'str',
        'original_trial_zone': 'str',
        'musym': 'str',
        'mukey': 'str',
        'muname': 'str',
        'drclassdcd': 'str',
        'hydgrpdcd': 'str',
        'erocl': 'str',
        'erokind': 'str',
        'taxceactcl': 'str',
        'point': 'str',
        'report_name': 'str',
        'year': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'deleted': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'objectid': 'objectid',
        'operation': 'operation',
        'crop': 'crop',
        'segment': 'segment',
        'timestamp': 'timestamp',
        '_yield': 'yield',
        'moisture': 'moisture',
        'area': 'area',
        'altitude': 'altitude',
        'headstatus': 'headstatus',
        'grower': 'grower',
        'farm': 'farm',
        'field': 'field',
        'speed': 'speed',
        'width': 'width',
        'bu': 'bu',
        'buperac_confirm': 'buperac_confirm',
        'analytics_report': 'analytics_report',
        'original_trial_zone': 'original_trial_zone',
        'musym': 'musym',
        'mukey': 'mukey',
        'muname': 'muname',
        'drclassdcd': 'drclassdcd',
        'hydgrpdcd': 'hydgrpdcd',
        'erocl': 'erocl',
        'erokind': 'erokind',
        'taxceactcl': 'taxceactcl',
        'point': 'point',
        'report_name': 'report_name',
        'year': 'year',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted': 'deleted'
    }

    def __init__(self, id=None, objectid=None, operation=None, crop=None, segment=None, timestamp=None, _yield=None, moisture=None, area=None, altitude=None, headstatus=None, grower=None, farm=None, field=None, speed=None, width=None, bu=None, buperac_confirm=None, analytics_report=None, original_trial_zone=None, musym=None, mukey=None, muname=None, drclassdcd=None, hydgrpdcd=None, erocl=None, erokind=None, taxceactcl=None, point=None, report_name=None, year=None, created_at=None, updated_at=None, deleted=None):  # noqa: E501
        """ProcessedHarvestDataItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._objectid = None
        self._operation = None
        self._crop = None
        self._segment = None
        self._timestamp = None
        self.__yield = None
        self._moisture = None
        self._area = None
        self._altitude = None
        self._headstatus = None
        self._grower = None
        self._farm = None
        self._field = None
        self._speed = None
        self._width = None
        self._bu = None
        self._buperac_confirm = None
        self._analytics_report = None
        self._original_trial_zone = None
        self._musym = None
        self._mukey = None
        self._muname = None
        self._drclassdcd = None
        self._hydgrpdcd = None
        self._erocl = None
        self._erokind = None
        self._taxceactcl = None
        self._point = None
        self._report_name = None
        self._year = None
        self._created_at = None
        self._updated_at = None
        self._deleted = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if objectid is not None:
            self.objectid = objectid
        if operation is not None:
            self.operation = operation
        if crop is not None:
            self.crop = crop
        if segment is not None:
            self.segment = segment
        if timestamp is not None:
            self.timestamp = timestamp
        if _yield is not None:
            self._yield = _yield
        if moisture is not None:
            self.moisture = moisture
        if area is not None:
            self.area = area
        if altitude is not None:
            self.altitude = altitude
        if headstatus is not None:
            self.headstatus = headstatus
        if grower is not None:
            self.grower = grower
        if farm is not None:
            self.farm = farm
        if field is not None:
            self.field = field
        if speed is not None:
            self.speed = speed
        if width is not None:
            self.width = width
        if bu is not None:
            self.bu = bu
        if buperac_confirm is not None:
            self.buperac_confirm = buperac_confirm
        if analytics_report is not None:
            self.analytics_report = analytics_report
        if original_trial_zone is not None:
            self.original_trial_zone = original_trial_zone
        if musym is not None:
            self.musym = musym
        if mukey is not None:
            self.mukey = mukey
        if muname is not None:
            self.muname = muname
        if drclassdcd is not None:
            self.drclassdcd = drclassdcd
        if hydgrpdcd is not None:
            self.hydgrpdcd = hydgrpdcd
        if erocl is not None:
            self.erocl = erocl
        if erokind is not None:
            self.erokind = erokind
        if taxceactcl is not None:
            self.taxceactcl = taxceactcl
        if point is not None:
            self.point = point
        if report_name is not None:
            self.report_name = report_name
        if year is not None:
            self.year = year
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if deleted is not None:
            self.deleted = deleted

    @property
    def id(self):
        """Gets the id of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The id of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProcessedHarvestDataItem.


        :param id: The id of this ProcessedHarvestDataItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def objectid(self):
        """Gets the objectid of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The objectid of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: int
        """
        return self._objectid

    @objectid.setter
    def objectid(self, objectid):
        """Sets the objectid of this ProcessedHarvestDataItem.


        :param objectid: The objectid of this ProcessedHarvestDataItem.  # noqa: E501
        :type: int
        """

        self._objectid = objectid

    @property
    def operation(self):
        """Gets the operation of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The operation of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ProcessedHarvestDataItem.


        :param operation: The operation of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if operation is not None and len(operation) > 20:
            raise ValueError("Invalid value for `operation`, length must be less than or equal to `20`")  # noqa: E501

        self._operation = operation

    @property
    def crop(self):
        """Gets the crop of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The crop of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this ProcessedHarvestDataItem.


        :param crop: The crop of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if crop is not None and len(crop) > 20:
            raise ValueError("Invalid value for `crop`, length must be less than or equal to `20`")  # noqa: E501

        self._crop = crop

    @property
    def segment(self):
        """Gets the segment of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The segment of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: int
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this ProcessedHarvestDataItem.


        :param segment: The segment of this ProcessedHarvestDataItem.  # noqa: E501
        :type: int
        """

        self._segment = segment

    @property
    def timestamp(self):
        """Gets the timestamp of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The timestamp of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ProcessedHarvestDataItem.


        :param timestamp: The timestamp of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if timestamp is not None and len(timestamp) > 20:
            raise ValueError("Invalid value for `timestamp`, length must be less than or equal to `20`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def _yield(self):
        """Gets the _yield of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The _yield of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: float
        """
        return self.__yield

    @_yield.setter
    def _yield(self, _yield):
        """Sets the _yield of this ProcessedHarvestDataItem.


        :param _yield: The _yield of this ProcessedHarvestDataItem.  # noqa: E501
        :type: float
        """

        self.__yield = _yield

    @property
    def moisture(self):
        """Gets the moisture of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The moisture of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: float
        """
        return self._moisture

    @moisture.setter
    def moisture(self, moisture):
        """Sets the moisture of this ProcessedHarvestDataItem.


        :param moisture: The moisture of this ProcessedHarvestDataItem.  # noqa: E501
        :type: float
        """

        self._moisture = moisture

    @property
    def area(self):
        """Gets the area of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The area of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this ProcessedHarvestDataItem.


        :param area: The area of this ProcessedHarvestDataItem.  # noqa: E501
        :type: float
        """

        self._area = area

    @property
    def altitude(self):
        """Gets the altitude of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The altitude of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this ProcessedHarvestDataItem.


        :param altitude: The altitude of this ProcessedHarvestDataItem.  # noqa: E501
        :type: float
        """

        self._altitude = altitude

    @property
    def headstatus(self):
        """Gets the headstatus of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The headstatus of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: int
        """
        return self._headstatus

    @headstatus.setter
    def headstatus(self, headstatus):
        """Sets the headstatus of this ProcessedHarvestDataItem.


        :param headstatus: The headstatus of this ProcessedHarvestDataItem.  # noqa: E501
        :type: int
        """

        self._headstatus = headstatus

    @property
    def grower(self):
        """Gets the grower of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The grower of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._grower

    @grower.setter
    def grower(self, grower):
        """Sets the grower of this ProcessedHarvestDataItem.


        :param grower: The grower of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if grower is not None and len(grower) > 40:
            raise ValueError("Invalid value for `grower`, length must be less than or equal to `40`")  # noqa: E501

        self._grower = grower

    @property
    def farm(self):
        """Gets the farm of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The farm of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._farm

    @farm.setter
    def farm(self, farm):
        """Sets the farm of this ProcessedHarvestDataItem.


        :param farm: The farm of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if farm is not None and len(farm) > 40:
            raise ValueError("Invalid value for `farm`, length must be less than or equal to `40`")  # noqa: E501

        self._farm = farm

    @property
    def field(self):
        """Gets the field of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The field of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this ProcessedHarvestDataItem.


        :param field: The field of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if field is not None and len(field) > 40:
            raise ValueError("Invalid value for `field`, length must be less than or equal to `40`")  # noqa: E501

        self._field = field

    @property
    def speed(self):
        """Gets the speed of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The speed of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this ProcessedHarvestDataItem.


        :param speed: The speed of this ProcessedHarvestDataItem.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def width(self):
        """Gets the width of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The width of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ProcessedHarvestDataItem.


        :param width: The width of this ProcessedHarvestDataItem.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def bu(self):
        """Gets the bu of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The bu of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: float
        """
        return self._bu

    @bu.setter
    def bu(self, bu):
        """Sets the bu of this ProcessedHarvestDataItem.


        :param bu: The bu of this ProcessedHarvestDataItem.  # noqa: E501
        :type: float
        """

        self._bu = bu

    @property
    def buperac_confirm(self):
        """Gets the buperac_confirm of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The buperac_confirm of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: float
        """
        return self._buperac_confirm

    @buperac_confirm.setter
    def buperac_confirm(self, buperac_confirm):
        """Sets the buperac_confirm of this ProcessedHarvestDataItem.


        :param buperac_confirm: The buperac_confirm of this ProcessedHarvestDataItem.  # noqa: E501
        :type: float
        """

        self._buperac_confirm = buperac_confirm

    @property
    def analytics_report(self):
        """Gets the analytics_report of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The analytics_report of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._analytics_report

    @analytics_report.setter
    def analytics_report(self, analytics_report):
        """Sets the analytics_report of this ProcessedHarvestDataItem.


        :param analytics_report: The analytics_report of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if analytics_report is not None and len(analytics_report) > 255:
            raise ValueError("Invalid value for `analytics_report`, length must be less than or equal to `255`")  # noqa: E501

        self._analytics_report = analytics_report

    @property
    def original_trial_zone(self):
        """Gets the original_trial_zone of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The original_trial_zone of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._original_trial_zone

    @original_trial_zone.setter
    def original_trial_zone(self, original_trial_zone):
        """Sets the original_trial_zone of this ProcessedHarvestDataItem.


        :param original_trial_zone: The original_trial_zone of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if original_trial_zone is not None and len(original_trial_zone) > 255:
            raise ValueError("Invalid value for `original_trial_zone`, length must be less than or equal to `255`")  # noqa: E501

        self._original_trial_zone = original_trial_zone

    @property
    def musym(self):
        """Gets the musym of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The musym of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._musym

    @musym.setter
    def musym(self, musym):
        """Sets the musym of this ProcessedHarvestDataItem.


        :param musym: The musym of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if musym is not None and len(musym) > 6:
            raise ValueError("Invalid value for `musym`, length must be less than or equal to `6`")  # noqa: E501

        self._musym = musym

    @property
    def mukey(self):
        """Gets the mukey of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The mukey of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._mukey

    @mukey.setter
    def mukey(self, mukey):
        """Sets the mukey of this ProcessedHarvestDataItem.


        :param mukey: The mukey of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if mukey is not None and len(mukey) > 30:
            raise ValueError("Invalid value for `mukey`, length must be less than or equal to `30`")  # noqa: E501

        self._mukey = mukey

    @property
    def muname(self):
        """Gets the muname of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The muname of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._muname

    @muname.setter
    def muname(self, muname):
        """Sets the muname of this ProcessedHarvestDataItem.


        :param muname: The muname of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if muname is not None and len(muname) > 240:
            raise ValueError("Invalid value for `muname`, length must be less than or equal to `240`")  # noqa: E501

        self._muname = muname

    @property
    def drclassdcd(self):
        """Gets the drclassdcd of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The drclassdcd of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._drclassdcd

    @drclassdcd.setter
    def drclassdcd(self, drclassdcd):
        """Sets the drclassdcd of this ProcessedHarvestDataItem.


        :param drclassdcd: The drclassdcd of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if drclassdcd is not None and len(drclassdcd) > 254:
            raise ValueError("Invalid value for `drclassdcd`, length must be less than or equal to `254`")  # noqa: E501

        self._drclassdcd = drclassdcd

    @property
    def hydgrpdcd(self):
        """Gets the hydgrpdcd of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The hydgrpdcd of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._hydgrpdcd

    @hydgrpdcd.setter
    def hydgrpdcd(self, hydgrpdcd):
        """Sets the hydgrpdcd of this ProcessedHarvestDataItem.


        :param hydgrpdcd: The hydgrpdcd of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if hydgrpdcd is not None and len(hydgrpdcd) > 254:
            raise ValueError("Invalid value for `hydgrpdcd`, length must be less than or equal to `254`")  # noqa: E501

        self._hydgrpdcd = hydgrpdcd

    @property
    def erocl(self):
        """Gets the erocl of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The erocl of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._erocl

    @erocl.setter
    def erocl(self, erocl):
        """Sets the erocl of this ProcessedHarvestDataItem.


        :param erocl: The erocl of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if erocl is not None and len(erocl) > 254:
            raise ValueError("Invalid value for `erocl`, length must be less than or equal to `254`")  # noqa: E501

        self._erocl = erocl

    @property
    def erokind(self):
        """Gets the erokind of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The erokind of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._erokind

    @erokind.setter
    def erokind(self, erokind):
        """Sets the erokind of this ProcessedHarvestDataItem.


        :param erokind: The erokind of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if erokind is not None and len(erokind) > 254:
            raise ValueError("Invalid value for `erokind`, length must be less than or equal to `254`")  # noqa: E501

        self._erokind = erokind

    @property
    def taxceactcl(self):
        """Gets the taxceactcl of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The taxceactcl of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._taxceactcl

    @taxceactcl.setter
    def taxceactcl(self, taxceactcl):
        """Sets the taxceactcl of this ProcessedHarvestDataItem.


        :param taxceactcl: The taxceactcl of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if taxceactcl is not None and len(taxceactcl) > 254:
            raise ValueError("Invalid value for `taxceactcl`, length must be less than or equal to `254`")  # noqa: E501

        self._taxceactcl = taxceactcl

    @property
    def point(self):
        """Gets the point of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The point of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this ProcessedHarvestDataItem.


        :param point: The point of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if point is not None and len(point) > 120:
            raise ValueError("Invalid value for `point`, length must be less than or equal to `120`")  # noqa: E501

        self._point = point

    @property
    def report_name(self):
        """Gets the report_name of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The report_name of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this ProcessedHarvestDataItem.


        :param report_name: The report_name of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if report_name is not None and len(report_name) > 255:
            raise ValueError("Invalid value for `report_name`, length must be less than or equal to `255`")  # noqa: E501

        self._report_name = report_name

    @property
    def year(self):
        """Gets the year of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The year of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ProcessedHarvestDataItem.


        :param year: The year of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """
        if year is not None and len(year) > 10:
            raise ValueError("Invalid value for `year`, length must be less than or equal to `10`")  # noqa: E501

        self._year = year

    @property
    def created_at(self):
        """Gets the created_at of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The created_at of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProcessedHarvestDataItem.


        :param created_at: The created_at of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The updated_at of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ProcessedHarvestDataItem.


        :param updated_at: The updated_at of this ProcessedHarvestDataItem.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def deleted(self):
        """Gets the deleted of this ProcessedHarvestDataItem.  # noqa: E501


        :return: The deleted of this ProcessedHarvestDataItem.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ProcessedHarvestDataItem.


        :param deleted: The deleted of this ProcessedHarvestDataItem.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessedHarvestDataItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessedHarvestDataItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

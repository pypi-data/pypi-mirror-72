# coding: utf-8

"""
    IN10T Client Data API

    IN10T Client Data API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: matt@in10t.ag
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TrialIdLookupItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'year': 'int',
        'pivot_trial_id': 'str',
        'report_name': 'str',
        'trial_type': 'str'
    }

    attribute_map = {
        'year': 'year',
        'pivot_trial_id': 'pivot_trial_id',
        'report_name': 'report_name',
        'trial_type': 'trial_type'
    }

    def __init__(self, year=None, pivot_trial_id=None, report_name=None, trial_type=None):  # noqa: E501
        """TrialIdLookupItem - a model defined in Swagger"""  # noqa: E501

        self._year = None
        self._pivot_trial_id = None
        self._report_name = None
        self._trial_type = None
        self.discriminator = None

        if year is not None:
            self.year = year
        if pivot_trial_id is not None:
            self.pivot_trial_id = pivot_trial_id
        if report_name is not None:
            self.report_name = report_name
        if trial_type is not None:
            self.trial_type = trial_type

    @property
    def year(self):
        """Gets the year of this TrialIdLookupItem.  # noqa: E501


        :return: The year of this TrialIdLookupItem.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this TrialIdLookupItem.


        :param year: The year of this TrialIdLookupItem.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def pivot_trial_id(self):
        """Gets the pivot_trial_id of this TrialIdLookupItem.  # noqa: E501


        :return: The pivot_trial_id of this TrialIdLookupItem.  # noqa: E501
        :rtype: str
        """
        return self._pivot_trial_id

    @pivot_trial_id.setter
    def pivot_trial_id(self, pivot_trial_id):
        """Sets the pivot_trial_id of this TrialIdLookupItem.


        :param pivot_trial_id: The pivot_trial_id of this TrialIdLookupItem.  # noqa: E501
        :type: str
        """

        self._pivot_trial_id = pivot_trial_id

    @property
    def report_name(self):
        """Gets the report_name of this TrialIdLookupItem.  # noqa: E501


        :return: The report_name of this TrialIdLookupItem.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this TrialIdLookupItem.


        :param report_name: The report_name of this TrialIdLookupItem.  # noqa: E501
        :type: str
        """

        self._report_name = report_name

    @property
    def trial_type(self):
        """Gets the trial_type of this TrialIdLookupItem.  # noqa: E501


        :return: The trial_type of this TrialIdLookupItem.  # noqa: E501
        :rtype: str
        """
        return self._trial_type

    @trial_type.setter
    def trial_type(self, trial_type):
        """Sets the trial_type of this TrialIdLookupItem.


        :param trial_type: The trial_type of this TrialIdLookupItem.  # noqa: E501
        :type: str
        """

        self._trial_type = trial_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrialIdLookupItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrialIdLookupItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    IN10T Client Data API

    IN10T Client Data API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: matt@in10t.ag
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PlantingData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'year': 'str',
        'page': 'int',
        'page_size': 'int',
        'record_count': 'int',
        'total_records': 'int',
        'total_page_count': 'int',
        'data': 'list[PlantingDataItem]'
    }

    attribute_map = {
        'year': 'year',
        'page': 'page',
        'page_size': 'page_size',
        'record_count': 'record_count',
        'total_records': 'total_records',
        'total_page_count': 'total_page_count',
        'data': 'data'
    }

    def __init__(self, year=None, page=None, page_size=None, record_count=None, total_records=None, total_page_count=None, data=None):  # noqa: E501
        """PlantingData - a model defined in Swagger"""  # noqa: E501

        self._year = None
        self._page = None
        self._page_size = None
        self._record_count = None
        self._total_records = None
        self._total_page_count = None
        self._data = None
        self.discriminator = None

        if year is not None:
            self.year = year
        if page is not None:
            self.page = page
        if page_size is not None:
            self.page_size = page_size
        if record_count is not None:
            self.record_count = record_count
        if total_records is not None:
            self.total_records = total_records
        if total_page_count is not None:
            self.total_page_count = total_page_count
        if data is not None:
            self.data = data

    @property
    def year(self):
        """Gets the year of this PlantingData.  # noqa: E501


        :return: The year of this PlantingData.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this PlantingData.


        :param year: The year of this PlantingData.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def page(self):
        """Gets the page of this PlantingData.  # noqa: E501


        :return: The page of this PlantingData.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PlantingData.


        :param page: The page of this PlantingData.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this PlantingData.  # noqa: E501


        :return: The page_size of this PlantingData.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PlantingData.


        :param page_size: The page_size of this PlantingData.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def record_count(self):
        """Gets the record_count of this PlantingData.  # noqa: E501


        :return: The record_count of this PlantingData.  # noqa: E501
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """Sets the record_count of this PlantingData.


        :param record_count: The record_count of this PlantingData.  # noqa: E501
        :type: int
        """

        self._record_count = record_count

    @property
    def total_records(self):
        """Gets the total_records of this PlantingData.  # noqa: E501


        :return: The total_records of this PlantingData.  # noqa: E501
        :rtype: int
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """Sets the total_records of this PlantingData.


        :param total_records: The total_records of this PlantingData.  # noqa: E501
        :type: int
        """

        self._total_records = total_records

    @property
    def total_page_count(self):
        """Gets the total_page_count of this PlantingData.  # noqa: E501


        :return: The total_page_count of this PlantingData.  # noqa: E501
        :rtype: int
        """
        return self._total_page_count

    @total_page_count.setter
    def total_page_count(self, total_page_count):
        """Sets the total_page_count of this PlantingData.


        :param total_page_count: The total_page_count of this PlantingData.  # noqa: E501
        :type: int
        """

        self._total_page_count = total_page_count

    @property
    def data(self):
        """Gets the data of this PlantingData.  # noqa: E501


        :return: The data of this PlantingData.  # noqa: E501
        :rtype: list[PlantingDataItem]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PlantingData.


        :param data: The data of this PlantingData.  # noqa: E501
        :type: list[PlantingDataItem]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlantingData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlantingData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from finnhub.configuration import Configuration


class MergerCountry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'announcement_date': 'datetime',
        'deal_size': 'float',
        'status': 'str',
        'target_name': 'str',
        'target_nation': 'str',
        'acquirer_name': 'str',
        'acquirer_nation': 'str',
        'form': 'str',
        'target_industry': 'str',
        'acquirer_industry': 'str',
        'target_description': 'str',
        'acquirer_description': 'str',
        'target_region': 'str',
        'acquirer_region': 'str',
        'target_public_status': 'str',
        'acquirer_public_status': 'str',
        'deal_attitude': 'str',
        'netincome_multiple': 'float',
        'percent_acquired': 'float'
    }

    attribute_map = {
        'announcement_date': 'announcementDate',
        'deal_size': 'dealSize',
        'status': 'status',
        'target_name': 'targetName',
        'target_nation': 'targetNation',
        'acquirer_name': 'acquirerName',
        'acquirer_nation': 'acquirerNation',
        'form': 'form',
        'target_industry': 'targetIndustry',
        'acquirer_industry': 'acquirerIndustry',
        'target_description': 'targetDescription',
        'acquirer_description': 'acquirerDescription',
        'target_region': 'targetRegion',
        'acquirer_region': 'acquirerRegion',
        'target_public_status': 'targetPublicStatus',
        'acquirer_public_status': 'acquirerPublicStatus',
        'deal_attitude': 'dealAttitude',
        'netincome_multiple': 'netincomeMultiple',
        'percent_acquired': 'percentAcquired'
    }

    def __init__(self, announcement_date=None, deal_size=None, status=None, target_name=None, target_nation=None, acquirer_name=None, acquirer_nation=None, form=None, target_industry=None, acquirer_industry=None, target_description=None, acquirer_description=None, target_region=None, acquirer_region=None, target_public_status=None, acquirer_public_status=None, deal_attitude=None, netincome_multiple=None, percent_acquired=None, local_vars_configuration=None):  # noqa: E501
        """MergerCountry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._announcement_date = None
        self._deal_size = None
        self._status = None
        self._target_name = None
        self._target_nation = None
        self._acquirer_name = None
        self._acquirer_nation = None
        self._form = None
        self._target_industry = None
        self._acquirer_industry = None
        self._target_description = None
        self._acquirer_description = None
        self._target_region = None
        self._acquirer_region = None
        self._target_public_status = None
        self._acquirer_public_status = None
        self._deal_attitude = None
        self._netincome_multiple = None
        self._percent_acquired = None
        self.discriminator = None

        if announcement_date is not None:
            self.announcement_date = announcement_date
        if deal_size is not None:
            self.deal_size = deal_size
        if status is not None:
            self.status = status
        if target_name is not None:
            self.target_name = target_name
        if target_nation is not None:
            self.target_nation = target_nation
        if acquirer_name is not None:
            self.acquirer_name = acquirer_name
        if acquirer_nation is not None:
            self.acquirer_nation = acquirer_nation
        if form is not None:
            self.form = form
        if target_industry is not None:
            self.target_industry = target_industry
        if acquirer_industry is not None:
            self.acquirer_industry = acquirer_industry
        if target_description is not None:
            self.target_description = target_description
        if acquirer_description is not None:
            self.acquirer_description = acquirer_description
        if target_region is not None:
            self.target_region = target_region
        if acquirer_region is not None:
            self.acquirer_region = acquirer_region
        if target_public_status is not None:
            self.target_public_status = target_public_status
        if acquirer_public_status is not None:
            self.acquirer_public_status = acquirer_public_status
        if deal_attitude is not None:
            self.deal_attitude = deal_attitude
        if netincome_multiple is not None:
            self.netincome_multiple = netincome_multiple
        if percent_acquired is not None:
            self.percent_acquired = percent_acquired

    @property
    def announcement_date(self):
        """Gets the announcement_date of this MergerCountry.  # noqa: E501

        Announcement date of the deal.  # noqa: E501

        :return: The announcement_date of this MergerCountry.  # noqa: E501
        :rtype: datetime
        """
        return self._announcement_date

    @announcement_date.setter
    def announcement_date(self, announcement_date):
        """Sets the announcement_date of this MergerCountry.

        Announcement date of the deal.  # noqa: E501

        :param announcement_date: The announcement_date of this MergerCountry.  # noqa: E501
        :type: datetime
        """

        self._announcement_date = announcement_date

    @property
    def deal_size(self):
        """Gets the deal_size of this MergerCountry.  # noqa: E501

        Deal size in millions of USD.  # noqa: E501

        :return: The deal_size of this MergerCountry.  # noqa: E501
        :rtype: float
        """
        return self._deal_size

    @deal_size.setter
    def deal_size(self, deal_size):
        """Sets the deal_size of this MergerCountry.

        Deal size in millions of USD.  # noqa: E501

        :param deal_size: The deal_size of this MergerCountry.  # noqa: E501
        :type: float
        """

        self._deal_size = deal_size

    @property
    def status(self):
        """Gets the status of this MergerCountry.  # noqa: E501

        Deal status.  # noqa: E501

        :return: The status of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MergerCountry.

        Deal status.  # noqa: E501

        :param status: The status of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def target_name(self):
        """Gets the target_name of this MergerCountry.  # noqa: E501

        Target company name.  # noqa: E501

        :return: The target_name of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this MergerCountry.

        Target company name.  # noqa: E501

        :param target_name: The target_name of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def target_nation(self):
        """Gets the target_nation of this MergerCountry.  # noqa: E501

        Target company country.  # noqa: E501

        :return: The target_nation of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._target_nation

    @target_nation.setter
    def target_nation(self, target_nation):
        """Sets the target_nation of this MergerCountry.

        Target company country.  # noqa: E501

        :param target_nation: The target_nation of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._target_nation = target_nation

    @property
    def acquirer_name(self):
        """Gets the acquirer_name of this MergerCountry.  # noqa: E501

        Acquirer name.  # noqa: E501

        :return: The acquirer_name of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._acquirer_name

    @acquirer_name.setter
    def acquirer_name(self, acquirer_name):
        """Sets the acquirer_name of this MergerCountry.

        Acquirer name.  # noqa: E501

        :param acquirer_name: The acquirer_name of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._acquirer_name = acquirer_name

    @property
    def acquirer_nation(self):
        """Gets the acquirer_nation of this MergerCountry.  # noqa: E501

        Acquirer nation.  # noqa: E501

        :return: The acquirer_nation of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._acquirer_nation

    @acquirer_nation.setter
    def acquirer_nation(self, acquirer_nation):
        """Sets the acquirer_nation of this MergerCountry.

        Acquirer nation.  # noqa: E501

        :param acquirer_nation: The acquirer_nation of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._acquirer_nation = acquirer_nation

    @property
    def form(self):
        """Gets the form of this MergerCountry.  # noqa: E501

        Deal form.  # noqa: E501

        :return: The form of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this MergerCountry.

        Deal form.  # noqa: E501

        :param form: The form of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._form = form

    @property
    def target_industry(self):
        """Gets the target_industry of this MergerCountry.  # noqa: E501

        Target company industry.  # noqa: E501

        :return: The target_industry of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._target_industry

    @target_industry.setter
    def target_industry(self, target_industry):
        """Sets the target_industry of this MergerCountry.

        Target company industry.  # noqa: E501

        :param target_industry: The target_industry of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._target_industry = target_industry

    @property
    def acquirer_industry(self):
        """Gets the acquirer_industry of this MergerCountry.  # noqa: E501

        Deal form.  # noqa: E501

        :return: The acquirer_industry of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._acquirer_industry

    @acquirer_industry.setter
    def acquirer_industry(self, acquirer_industry):
        """Sets the acquirer_industry of this MergerCountry.

        Deal form.  # noqa: E501

        :param acquirer_industry: The acquirer_industry of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._acquirer_industry = acquirer_industry

    @property
    def target_description(self):
        """Gets the target_description of this MergerCountry.  # noqa: E501

        Target company business summary.  # noqa: E501

        :return: The target_description of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._target_description

    @target_description.setter
    def target_description(self, target_description):
        """Sets the target_description of this MergerCountry.

        Target company business summary.  # noqa: E501

        :param target_description: The target_description of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._target_description = target_description

    @property
    def acquirer_description(self):
        """Gets the acquirer_description of this MergerCountry.  # noqa: E501

        Acquirer business summary.  # noqa: E501

        :return: The acquirer_description of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._acquirer_description

    @acquirer_description.setter
    def acquirer_description(self, acquirer_description):
        """Sets the acquirer_description of this MergerCountry.

        Acquirer business summary.  # noqa: E501

        :param acquirer_description: The acquirer_description of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._acquirer_description = acquirer_description

    @property
    def target_region(self):
        """Gets the target_region of this MergerCountry.  # noqa: E501

        Target company region.  # noqa: E501

        :return: The target_region of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._target_region

    @target_region.setter
    def target_region(self, target_region):
        """Sets the target_region of this MergerCountry.

        Target company region.  # noqa: E501

        :param target_region: The target_region of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._target_region = target_region

    @property
    def acquirer_region(self):
        """Gets the acquirer_region of this MergerCountry.  # noqa: E501

        Acquirer company region.  # noqa: E501

        :return: The acquirer_region of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._acquirer_region

    @acquirer_region.setter
    def acquirer_region(self, acquirer_region):
        """Sets the acquirer_region of this MergerCountry.

        Acquirer company region.  # noqa: E501

        :param acquirer_region: The acquirer_region of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._acquirer_region = acquirer_region

    @property
    def target_public_status(self):
        """Gets the target_public_status of this MergerCountry.  # noqa: E501

        Target company public status.  # noqa: E501

        :return: The target_public_status of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._target_public_status

    @target_public_status.setter
    def target_public_status(self, target_public_status):
        """Sets the target_public_status of this MergerCountry.

        Target company public status.  # noqa: E501

        :param target_public_status: The target_public_status of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._target_public_status = target_public_status

    @property
    def acquirer_public_status(self):
        """Gets the acquirer_public_status of this MergerCountry.  # noqa: E501

        Acquirer company public status.  # noqa: E501

        :return: The acquirer_public_status of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._acquirer_public_status

    @acquirer_public_status.setter
    def acquirer_public_status(self, acquirer_public_status):
        """Sets the acquirer_public_status of this MergerCountry.

        Acquirer company public status.  # noqa: E501

        :param acquirer_public_status: The acquirer_public_status of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._acquirer_public_status = acquirer_public_status

    @property
    def deal_attitude(self):
        """Gets the deal_attitude of this MergerCountry.  # noqa: E501

        Deal attitude.  # noqa: E501

        :return: The deal_attitude of this MergerCountry.  # noqa: E501
        :rtype: str
        """
        return self._deal_attitude

    @deal_attitude.setter
    def deal_attitude(self, deal_attitude):
        """Sets the deal_attitude of this MergerCountry.

        Deal attitude.  # noqa: E501

        :param deal_attitude: The deal_attitude of this MergerCountry.  # noqa: E501
        :type: str
        """

        self._deal_attitude = deal_attitude

    @property
    def netincome_multiple(self):
        """Gets the netincome_multiple of this MergerCountry.  # noqa: E501

        Net Income Multiple.  # noqa: E501

        :return: The netincome_multiple of this MergerCountry.  # noqa: E501
        :rtype: float
        """
        return self._netincome_multiple

    @netincome_multiple.setter
    def netincome_multiple(self, netincome_multiple):
        """Sets the netincome_multiple of this MergerCountry.

        Net Income Multiple.  # noqa: E501

        :param netincome_multiple: The netincome_multiple of this MergerCountry.  # noqa: E501
        :type: float
        """

        self._netincome_multiple = netincome_multiple

    @property
    def percent_acquired(self):
        """Gets the percent_acquired of this MergerCountry.  # noqa: E501

        Percent acquired.  # noqa: E501

        :return: The percent_acquired of this MergerCountry.  # noqa: E501
        :rtype: float
        """
        return self._percent_acquired

    @percent_acquired.setter
    def percent_acquired(self, percent_acquired):
        """Sets the percent_acquired of this MergerCountry.

        Percent acquired.  # noqa: E501

        :param percent_acquired: The percent_acquired of this MergerCountry.  # noqa: E501
        :type: float
        """

        self._percent_acquired = percent_acquired

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MergerCountry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MergerCountry):
            return True

        return self.to_dict() != other.to_dict()

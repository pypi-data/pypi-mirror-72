from .. import network


def test_fetch():
    bad_response = """<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>Maintenance</title>\n    <noscript>\n      <meta http-equiv="refresh" content="1">\n    </noscript>\n    <style>\n      * {\n        box-sizing: border-box;\n      }\n      body {\n        background-color: white;\n        font-family: "Benton Sans", "Helvetica Neue", helvetica, arial, sans-serif;\n      }\n      main {\n        padding: 1rem;\n      }\n      p {\n        max-width: 500px\n      }\n      .note{\n        font-size: small;\n        color: #9B9B9B;\n      }\n      .content{\n        margin: 50px;\n        position: fixed;\n      }\n      #loader:after {\n        overflow: hidden;\n        display: inline-block;\n        vertical-align: bottom;\n        animation: ellipsis steps(4,end) 1000ms infinite;\n        content: "\\2026";\n        width: 0px;\n      }\n      @keyframes ellipsis {\n        to {\n          width: 1.25em\n        }\n      }\n      canvas#background {\n        position: fixed;\n        height: 100%;\n        width: 100%;\n        top: 0;\n        left: 0;\n        z-index: -1;\n      }\n    </style>\n  </head>\n  <body>\n    <main>\n      <div class="content">\n        <p class="status">\n          <span id="message">Waking up</span>\n          <span id="loader" ></span>\n        </p>\n        <p class="note">\n          To keep Glitch fast for everyone, inactive projects go to sleep and wake up on request.\n        </p>\n      </div>\n    </main>\n    <canvas id="background"/>\n<script src="https://cdnjs.cloudflare.com/ajax/libs/bowser/1.9.4/bowser.min.js"></script>\n<script>\n// drawing\nvar canvas, context, canvasImage;\nvar cursorPosition = {\n  x: undefined,\n  y: undefined,\n};\nvar color = '#e5e5e5';\nvar size = 30;\nfunction randomColor() {\n  var colors = [\n    '#fcd1c4',\n    '#abfcec',\n    '#a3d9e1',\n    '#fbbfff',\n    '#a9ef8f',\n    '#fff0b2',\n    '#fff0b2',\n  ];\n  color = colors[Math.floor(Math.random() * colors.length)];\n}\nfunction throttle(ms, fn) {\n  var lastCallTime;\n  return function () {\n    var now = Date.now();\n    if (!lastCallTime || now - lastCallTime > ms) {\n      lastCallTime = now;\n      fn.apply(this, arguments);\n    }\n  }\n}\nfunction drawCircle(event) {\n  context.beginPath();\n  context.arc(cursorPosition.x, cursorPosition.y, size, 0, 2 * Math.PI);\n  context.closePath();\n  context.fillStyle = color;\n  context.fill();\n  canvasImage = context.getImageData(0, 0, window.innerWidth, window.innerHeight);\n}\nwindow.onload = function () {\n  randomColor();\n  canvas = document.getElementById('background');\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  context = canvas.getContext('2d');\n  window.onresize = throttle(100, function () {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    context.clearRect(0,0, window.innerWidth, window.innerHeight);\n    canvasImage && context.putImageData(canvasImage, 0, 0);\n  });\n  window.onmousemove = throttle(10, function (event) {\n    cursorPosition = {\n      x: event.clientX,\n      y: event.clientY,\n    };\n    drawCircle(event);\n  });\n  window.ontouchmove = throttle(10, function (event) {\n    cursorPosition = {\n      x: event.touches[0].clientX,\n      y: event.touches[0].clientY,\n    };\n    drawCircle(event);\n  });\n}\n</script>\n<script>\n// container status updates\nsetTimeout(function () {\n  function reloadAfterDelay(delay) {\n    delay = delay || 1000;\n    return setTimeout(function () {\n      window.location.reload(true);\n    }, delay);\n  }\n  try {\n    var isValidBrowser = bowser.check({\n      ios: "7",\n      msie: "10",\n      android: "4.4",\n      chrome: "16",\n      firefox: "11",\n    });\n    if (!isValidBrowser) {\n      throw new Error("Jump to refresh");\n    }\n    var initialReloadHandler = reloadAfterDelay(5000);\n    var ws = new WebSocket("wss://" + document.location.hostname + "/___glitch_loading_status___");\n    ws.onmessage = updateContainerStatus;\n    ws.onerror = reloadAfterDelay;\n    ws.onopen = function () {\n      clearTimeout(initialReloadHandler);\n      setInterval(function () {\n        ws.send("keepalive");\n      }, 15000);\n    };\n    ws.onclose = function () {\n      reloadAfterDelay(1000);\n    };\n    function updateContainerStatus(event) {\n      try {\n        var data = JSON.parse(event.data);\n        var message = document.getElementById('message')\n        var text = "";\n        switch (data.text) {\n          case "initialize":\n            text = "Waking up";\n            break;\n          case "install":\n            text = "Preparing";\n            break;\n          case "restart":\n            text = "Starting";\n            break;\n          case "listening":\n            text = "Ready";\n            break;\n          default:\n            return;\n        }\n        message.innerHTML = text;\n        document.title = text + " ･ﾟ✧";\n        if (data.text === 'listening') {\n          window.location.reload(true);\n        }\n      } catch (e) {\n        reloadAfterDelay();\n      }\n    }\n  } catch (e) {\n    reloadAfterDelay();\n  }\n}, 0);\n</script>\n  </body>\n</html>"""

    assert network.fetch('https://theweirdapi.glitch.me').read().decode() == bad_response or "Welcome to this Weird API!"

! wrapfclasses.f
! This file is generated by Shroud 0.12.1. Do not edit.
! Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapfclasses.f
!! \brief Shroud generated wrapper for classes namespace
!<
! splicer begin file_top
! splicer end file_top
module classes_mod
    use iso_c_binding, only : C_INT, C_LONG, C_NULL_PTR, C_PTR, C_SIZE_T
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top

    ! helper capsule_data_helper
    type, bind(C) :: SHROUD_capsule_data
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type SHROUD_capsule_data

    ! start array_context
    ! helper array_context
    type, bind(C) :: SHROUD_array
        ! address of C++ memory
        type(SHROUD_capsule_data) :: cxx
        ! address of data in cxx
        type(C_PTR) :: base_addr = C_NULL_PTR
        ! type of element
        integer(C_INT) :: type
        ! bytes-per-item or character len of data in cxx
        integer(C_SIZE_T) :: elem_len = 0_C_SIZE_T
        ! size of data in cxx
        integer(C_SIZE_T) :: size = 0_C_SIZE_T
        ! number of dimensions
        integer(C_INT) :: rank = -1
        integer(C_LONG) :: shape(7) = 0
    end type SHROUD_array
    ! end array_context

    !  enum classes::Class1::DIRECTION
    integer(C_INT), parameter :: class1_up = 2
    integer(C_INT), parameter :: class1_down = 3
    integer(C_INT), parameter :: class1_left = 100
    integer(C_INT), parameter :: class1_right = 101

    ! start derived-type SHROUD_class1_capsule
    type, bind(C) :: SHROUD_class1_capsule
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type SHROUD_class1_capsule
    ! end derived-type SHROUD_class1_capsule

    type class1
        type(SHROUD_class1_capsule) :: cxxmem
        ! splicer begin class.Class1.component_part
        ! splicer end class.Class1.component_part
    contains
        procedure :: delete => class1_delete
        procedure :: method1 => class1_method1
        procedure :: equivalent => class1_equivalent
        procedure :: return_this => class1_return_this
        procedure :: return_this_buffer => class1_return_this_buffer
        procedure :: getclass3 => class1_getclass3
        procedure :: get_name => class1_get_name
        procedure :: direction_func => class1_direction_func
        procedure :: get_m_flag => class1_get_m_flag
        procedure :: get_test => class1_get_test
        procedure :: set_test => class1_set_test
        procedure :: get_instance => class1_get_instance
        procedure :: set_instance => class1_set_instance
        procedure :: associated => class1_associated
        ! splicer begin class.Class1.type_bound_procedure_part
        ! splicer end class.Class1.type_bound_procedure_part
    end type class1

    type, bind(C) :: SHROUD_class2_capsule
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type SHROUD_class2_capsule

    type class2
        type(SHROUD_class2_capsule) :: cxxmem
        ! splicer begin class.Class2.component_part
        ! splicer end class.Class2.component_part
    contains
        procedure :: get_name => class2_get_name
        procedure :: get_instance => class2_get_instance
        procedure :: set_instance => class2_set_instance
        procedure :: associated => class2_associated
        ! splicer begin class.Class2.type_bound_procedure_part
        ! splicer end class.Class2.type_bound_procedure_part
    end type class2

    type, bind(C) :: SHROUD_singleton_capsule
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type SHROUD_singleton_capsule

    type singleton
        type(SHROUD_singleton_capsule) :: cxxmem
        ! splicer begin class.Singleton.component_part
        ! splicer end class.Singleton.component_part
    contains
        procedure, nopass :: get_reference => singleton_get_reference
        procedure :: get_instance => singleton_get_instance
        procedure :: set_instance => singleton_set_instance
        procedure :: associated => singleton_associated
        ! splicer begin class.Singleton.type_bound_procedure_part
        ! splicer end class.Singleton.type_bound_procedure_part
    end type singleton

    interface operator (.eq.)
        module procedure class1_eq
        module procedure class2_eq
        module procedure singleton_eq
    end interface

    interface operator (.ne.)
        module procedure class1_ne
        module procedure class2_ne
        module procedure singleton_ne
    end interface

    ! ----------------------------------------
    ! Function:  Class1
    ! Exact:     c_shadow_scalar_result
    ! start c_class1_ctor_default
    interface
        function c_class1_ctor_default(SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_ctor_default")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_class1_ctor_default
    end interface
    ! end c_class1_ctor_default

    ! ----------------------------------------
    ! Function:  Class1
    ! Exact:     c_shadow_scalar_result
    ! ----------------------------------------
    ! Argument:  int flag +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start c_class1_ctor_flag
    interface
        function c_class1_ctor_flag(flag, SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_ctor_flag")
            use iso_c_binding, only : C_INT, C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            integer(C_INT), value, intent(IN) :: flag
            type(SHROUD_class1_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_class1_ctor_flag
    end interface
    ! end c_class1_ctor_flag

    ! ----------------------------------------
    ! Function:  ~Class1 +name(delete)
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! start c_class1_delete
    interface
        subroutine c_class1_delete(self) &
                bind(C, name="CLA_Class1_delete")
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
        end subroutine c_class1_delete
    end interface
    ! end c_class1_delete

    ! ----------------------------------------
    ! Function:  int Method1
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start c_class1_method1
    interface
        function c_class1_method1(self) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_method1")
            use iso_c_binding, only : C_INT
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_class1_method1
    end interface
    ! end c_class1_method1

    ! ----------------------------------------
    ! Function:  bool equivalent
    ! Requested: c_bool_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const Class1 & obj2 +intent(in)
    ! Requested: c_shadow_&_in
    ! Match:     c_shadow_in
    ! start c_class1_equivalent
    interface
        pure function c_class1_equivalent(self, obj2) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_equivalent")
            use iso_c_binding, only : C_BOOL
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            type(SHROUD_class1_capsule), intent(IN) :: obj2
            logical(C_BOOL) :: SHT_rv
        end function c_class1_equivalent
    end interface
    ! end c_class1_equivalent

    ! ----------------------------------------
    ! Function:  Class1 * returnThis
    ! Requested: c_void_*_result
    ! Match:     c_default
    ! start c_class1_return_this
    interface
        subroutine c_class1_return_this(self) &
                bind(C, name="CLA_Class1_return_this")
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
        end subroutine c_class1_return_this
    end interface
    ! end c_class1_return_this

    ! ----------------------------------------
    ! Function:  Class1 * returnThisBuffer
    ! Requested: c_shadow_*_result
    ! Match:     c_shadow_result
    ! ----------------------------------------
    ! Argument:  std::string & name +intent(in)
    ! Requested: c_string_&_in
    ! Match:     c_string_in
    ! ----------------------------------------
    ! Argument:  bool flag +intent(in)+value
    ! Requested: c_bool_scalar_in
    ! Match:     c_default
    ! start c_class1_return_this_buffer
    interface
        function c_class1_return_this_buffer(self, name, flag, SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_return_this_buffer")
            use iso_c_binding, only : C_BOOL, C_CHAR, C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            character(kind=C_CHAR), intent(IN) :: name(*)
            logical(C_BOOL), value, intent(IN) :: flag
            type(SHROUD_class1_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_class1_return_this_buffer
    end interface
    ! end c_class1_return_this_buffer

    ! ----------------------------------------
    ! Function:  Class1 * returnThisBuffer
    ! Requested: c_shadow_*_result_buf
    ! Match:     c_shadow_result
    ! ----------------------------------------
    ! Argument:  std::string & name +intent(in)+len_trim(Lname)
    ! Requested: c_string_&_in_buf
    ! Match:     c_string_in_buf
    ! ----------------------------------------
    ! Argument:  bool flag +intent(in)+value
    ! Requested: c_bool_scalar_in_buf
    ! Match:     c_default
    ! start c_class1_return_this_buffer_bufferify
    interface
        function c_class1_return_this_buffer_bufferify(self, name, &
                Lname, flag, SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_return_this_buffer_bufferify")
            use iso_c_binding, only : C_BOOL, C_CHAR, C_INT, C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            character(kind=C_CHAR), intent(IN) :: name(*)
            integer(C_INT), value, intent(IN) :: Lname
            logical(C_BOOL), value, intent(IN) :: flag
            type(SHROUD_class1_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_class1_return_this_buffer_bufferify
    end interface
    ! end c_class1_return_this_buffer_bufferify

    ! ----------------------------------------
    ! Function:  Class1 * getclass3
    ! Requested: c_shadow_*_result
    ! Match:     c_shadow_result
    ! start c_class1_getclass3
    interface
        function c_class1_getclass3(self, SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_getclass3")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            type(SHROUD_class1_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_class1_getclass3
    end interface
    ! end c_class1_getclass3

    ! ----------------------------------------
    ! Function:  const std::string & getName +deref(allocatable)
    ! Requested: c_string_&_result
    ! Match:     c_string_result
    ! start c_class1_get_name
    interface
        function c_class1_get_name(self) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_get_name")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_class1_get_name
    end interface
    ! end c_class1_get_name

    ! ----------------------------------------
    ! Function:  void getName
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)
    ! Requested: c_string_&_result_buf_allocatable
    ! Match:     c_string_result_buf_allocatable
    ! start c_class1_get_name_bufferify
    interface
        subroutine c_class1_get_name_bufferify(self, DSHF_rv) &
                bind(C, name="CLA_Class1_get_name_bufferify")
            import :: SHROUD_array, SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            type(SHROUD_array), intent(OUT) :: DSHF_rv
        end subroutine c_class1_get_name_bufferify
    end interface
    ! end c_class1_get_name_bufferify

    ! ----------------------------------------
    ! Function:  DIRECTION directionFunc
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  DIRECTION arg +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start c_class1_direction_func
    interface
        function c_class1_direction_func(self, arg) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_direction_func")
            use iso_c_binding, only : C_INT
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            integer(C_INT), value, intent(IN) :: arg
            integer(C_INT) :: SHT_rv
        end function c_class1_direction_func
    end interface
    ! end c_class1_direction_func

    ! ----------------------------------------
    ! Function:  int getM_flag
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start c_class1_get_m_flag
    interface
        function c_class1_get_m_flag(self) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_get_m_flag")
            use iso_c_binding, only : C_INT
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_class1_get_m_flag
    end interface
    ! end c_class1_get_m_flag

    ! ----------------------------------------
    ! Function:  int getTest
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start c_class1_get_test
    interface
        function c_class1_get_test(self) &
                result(SHT_rv) &
                bind(C, name="CLA_Class1_get_test")
            use iso_c_binding, only : C_INT
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_class1_get_test
    end interface
    ! end c_class1_get_test

    ! ----------------------------------------
    ! Function:  void setTest
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int val +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start c_class1_set_test
    interface
        subroutine c_class1_set_test(self, val) &
                bind(C, name="CLA_Class1_set_test")
            use iso_c_binding, only : C_INT
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: self
            integer(C_INT), value, intent(IN) :: val
        end subroutine c_class1_set_test
    end interface
    ! end c_class1_set_test

    ! splicer begin class.Class1.additional_interfaces
    ! splicer end class.Class1.additional_interfaces

    ! ----------------------------------------
    ! Function:  const std::string & getName +deref(allocatable)
    ! Requested: c_string_&_result
    ! Match:     c_string_result
    interface
        function c_class2_get_name(self) &
                result(SHT_rv) &
                bind(C, name="CLA_Class2_get_name")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_class2_capsule
            implicit none
            type(SHROUD_class2_capsule), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_class2_get_name
    end interface

    ! ----------------------------------------
    ! Function:  void getName
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)
    ! Requested: c_string_&_result_buf_allocatable
    ! Match:     c_string_result_buf_allocatable
    interface
        subroutine c_class2_get_name_bufferify(self, DSHF_rv) &
                bind(C, name="CLA_Class2_get_name_bufferify")
            import :: SHROUD_array, SHROUD_class2_capsule
            implicit none
            type(SHROUD_class2_capsule), intent(IN) :: self
            type(SHROUD_array), intent(OUT) :: DSHF_rv
        end subroutine c_class2_get_name_bufferify
    end interface

    ! splicer begin class.Class2.additional_interfaces
    ! splicer end class.Class2.additional_interfaces

    ! ----------------------------------------
    ! Function:  static Singleton & getReference
    ! Requested: c_shadow_&_result
    ! Match:     c_shadow_result
    interface
        function c_singleton_get_reference(SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_Singleton_get_reference")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_singleton_capsule
            implicit none
            type(SHROUD_singleton_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_singleton_get_reference
    end interface

    ! splicer begin class.Singleton.additional_interfaces
    ! splicer end class.Singleton.additional_interfaces

    ! ----------------------------------------
    ! Function:  Class1::DIRECTION directionFunc
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  Class1::DIRECTION arg +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    interface
        function direction_func(arg) &
                result(SHT_rv) &
                bind(C, name="CLA_direction_func")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), value, intent(IN) :: arg
            integer(C_INT) :: SHT_rv
        end function direction_func
    end interface

    ! ----------------------------------------
    ! Function:  void passClassByValue
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  Class1 arg +intent(in)+value
    ! Exact:     c_shadow_scalar_in
    interface
        subroutine c_pass_class_by_value(arg) &
                bind(C, name="CLA_pass_class_by_value")
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN), value :: arg
        end subroutine c_pass_class_by_value
    end interface

    ! ----------------------------------------
    ! Function:  int useclass
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const Class1 * arg +intent(in)
    ! Requested: c_shadow_*_in
    ! Match:     c_shadow_in
    interface
        function c_useclass(arg) &
                result(SHT_rv) &
                bind(C, name="CLA_useclass")
            use iso_c_binding, only : C_INT
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(IN) :: arg
            integer(C_INT) :: SHT_rv
        end function c_useclass
    end interface

    ! ----------------------------------------
    ! Function:  const Class1 * getclass2
    ! Requested: c_shadow_*_result
    ! Match:     c_shadow_result
    interface
        function c_getclass2(SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_getclass2")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_getclass2
    end interface

    ! ----------------------------------------
    ! Function:  Class1 * getclass3
    ! Requested: c_shadow_*_result
    ! Match:     c_shadow_result
    interface
        function c_getclass3(SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_getclass3")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_getclass3
    end interface

    ! ----------------------------------------
    ! Function:  const Class1 & getConstClassReference
    ! Requested: c_shadow_&_result
    ! Match:     c_shadow_result
    interface
        function c_get_const_class_reference(SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_get_const_class_reference")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_get_const_class_reference
    end interface

    ! ----------------------------------------
    ! Function:  Class1 & getClassReference
    ! Requested: c_shadow_&_result
    ! Match:     c_shadow_result
    interface
        function c_get_class_reference(SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_get_class_reference")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            type(SHROUD_class1_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_get_class_reference
    end interface

    ! ----------------------------------------
    ! Function:  Class1 getClassCopy
    ! Exact:     c_shadow_scalar_result
    ! ----------------------------------------
    ! Argument:  int flag +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    interface
        function c_get_class_copy(flag, SHT_crv) &
                result(SHT_rv) &
                bind(C, name="CLA_get_class_copy")
            use iso_c_binding, only : C_INT, C_PTR
            import :: SHROUD_class1_capsule
            implicit none
            integer(C_INT), value, intent(IN) :: flag
            type(SHROUD_class1_capsule), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_get_class_copy
    end interface

    ! ----------------------------------------
    ! Function:  void set_global_flag
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int arg +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    interface
        subroutine set_global_flag(arg) &
                bind(C, name="CLA_set_global_flag")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), value, intent(IN) :: arg
        end subroutine set_global_flag
    end interface

    ! ----------------------------------------
    ! Function:  int get_global_flag
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    interface
        function get_global_flag() &
                result(SHT_rv) &
                bind(C, name="CLA_get_global_flag")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT) :: SHT_rv
        end function get_global_flag
    end interface

    ! ----------------------------------------
    ! Function:  const std::string & LastFunctionCalled +deref(result-as-arg)+len(30)
    ! Requested: c_string_&_result
    ! Match:     c_string_result
    interface
        function c_last_function_called() &
                result(SHT_rv) &
                bind(C, name="CLA_last_function_called")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_last_function_called
    end interface

    ! ----------------------------------------
    ! Function:  void LastFunctionCalled +len(30)
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string & SHF_rv +intent(out)+len(NSHF_rv)
    ! Requested: c_string_&_result_buf
    ! Match:     c_string_result_buf
    interface
        subroutine c_last_function_called_bufferify(SHF_rv, NSHF_rv) &
                bind(C, name="CLA_last_function_called_bufferify")
            use iso_c_binding, only : C_CHAR, C_INT
            implicit none
            character(kind=C_CHAR), intent(OUT) :: SHF_rv(*)
            integer(C_INT), value, intent(IN) :: NSHF_rv
        end subroutine c_last_function_called_bufferify
    end interface

    interface
        ! splicer begin additional_interfaces
        ! splicer end additional_interfaces
    end interface

    ! start interface class1
    interface class1
        module procedure class1_ctor_default
        module procedure class1_ctor_flag
    end interface class1
    ! end interface class1

    interface
        ! helper copy_string
        ! Copy the char* or std::string in context into c_var.
        subroutine SHROUD_copy_string_and_free(context, c_var, c_var_size) &
             bind(c,name="CLA_ShroudCopyStringAndFree")
            use, intrinsic :: iso_c_binding, only : C_CHAR, C_SIZE_T
            import SHROUD_array
            type(SHROUD_array), intent(IN) :: context
            character(kind=C_CHAR), intent(OUT) :: c_var(*)
            integer(C_SIZE_T), value :: c_var_size
        end subroutine SHROUD_copy_string_and_free
    end interface

contains

    ! ----------------------------------------
    ! Function:  Class1
    ! Class1
    ! Exact:     f_shadow_ctor
    ! Exact:     c_shadow_ctor
    ! start class1_ctor_default
    function class1_ctor_default() &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR
        type(class1) :: SHT_rv
        ! splicer begin class.Class1.method.ctor_default
        type(C_PTR) :: SHT_prv
        SHT_prv = c_class1_ctor_default(SHT_rv%cxxmem)
        ! splicer end class.Class1.method.ctor_default
    end function class1_ctor_default
    ! end class1_ctor_default

    ! ----------------------------------------
    ! Function:  Class1
    ! Class1
    ! Exact:     f_shadow_ctor
    ! Exact:     c_shadow_ctor
    ! ----------------------------------------
    ! Argument:  int flag +intent(in)+value
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start class1_ctor_flag
    function class1_ctor_flag(flag) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR
        integer(C_INT), value, intent(IN) :: flag
        type(class1) :: SHT_rv
        ! splicer begin class.Class1.method.ctor_flag
        type(C_PTR) :: SHT_prv
        SHT_prv = c_class1_ctor_flag(flag, SHT_rv%cxxmem)
        ! splicer end class.Class1.method.ctor_flag
    end function class1_ctor_flag
    ! end class1_ctor_flag

    ! ----------------------------------------
    ! Function:  ~Class1 +name(delete)
    ! ~Class1 +name(delete)
    ! Requested: f_shadow_dtor
    ! Match:     f_default
    ! Exact:     c_shadow_dtor
    ! start class1_delete
    subroutine class1_delete(obj)
        class(class1) :: obj
        ! splicer begin class.Class1.method.delete
        call c_class1_delete(obj%cxxmem)
        ! splicer end class.Class1.method.delete
    end subroutine class1_delete
    ! end class1_delete

    ! ----------------------------------------
    ! Function:  int Method1
    ! int Method1
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    !>
    !! \brief returns the value of flag member
    !!
    !<
    ! start class1_method1
    function class1_method1(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(class1) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.Class1.method.method1
        SHT_rv = c_class1_method1(obj%cxxmem)
        ! splicer end class.Class1.method.method1
    end function class1_method1
    ! end class1_method1

    ! ----------------------------------------
    ! Function:  bool equivalent
    ! bool equivalent
    ! Requested: f_bool_scalar_result
    ! Match:     f_bool_result
    ! Requested: c_bool_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const Class1 & obj2 +intent(in)
    ! Requested: f_shadow_&_in
    ! Match:     f_default
    ! Requested: c_shadow_&_in
    ! Match:     c_shadow_in
    !>
    !! \brief Pass in reference to instance
    !!
    !<
    ! start class1_equivalent
    function class1_equivalent(obj, obj2) &
            result(SHT_rv)
        use iso_c_binding, only : C_BOOL
        class(class1) :: obj
        type(class1), intent(IN) :: obj2
        logical :: SHT_rv
        ! splicer begin class.Class1.method.equivalent
        SHT_rv = c_class1_equivalent(obj%cxxmem, obj2%cxxmem)
        ! splicer end class.Class1.method.equivalent
    end function class1_equivalent
    ! end class1_equivalent

    ! ----------------------------------------
    ! Function:  Class1 * returnThis
    ! Class1 * returnThis
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    !>
    !! \brief Return pointer to 'this' to allow chaining calls
    !!
    !<
    ! start class1_return_this
    subroutine class1_return_this(obj)
        class(class1) :: obj
        ! splicer begin class.Class1.method.return_this
        call c_class1_return_this(obj%cxxmem)
        ! splicer end class.Class1.method.return_this
    end subroutine class1_return_this
    ! end class1_return_this

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  Class1 * returnThisBuffer
    ! Class1 * returnThisBuffer
    ! Requested: f_shadow_*_result
    ! Match:     f_shadow_result
    ! Requested: c_shadow_*_result_buf
    ! Match:     c_shadow_result
    ! ----------------------------------------
    ! Argument:  std::string & name +intent(in)
    ! Requested: f_string_&_in
    ! Match:     f_default
    ! Argument:  std::string & name +intent(in)+len_trim(Lname)
    ! Requested: c_string_&_in_buf
    ! Match:     c_string_in_buf
    ! ----------------------------------------
    ! Argument:  bool flag +intent(in)+value
    ! Requested: f_bool_scalar_in
    ! Match:     f_bool_in
    ! Requested: c_bool_scalar_in_buf
    ! Match:     c_default
    !>
    !! \brief Return pointer to 'this' to allow chaining calls
    !!
    !<
    ! start class1_return_this_buffer
    function class1_return_this_buffer(obj, name, flag) &
            result(SHT_rv)
        use iso_c_binding, only : C_BOOL, C_INT, C_PTR
        class(class1) :: obj
        character(len=*), intent(IN) :: name
        logical, value, intent(IN) :: flag
        type(class1) :: SHT_rv
        ! splicer begin class.Class1.method.return_this_buffer
        logical(C_BOOL) SH_flag
        type(C_PTR) :: SHT_prv
        SH_flag = flag  ! coerce to C_BOOL
        SHT_prv = c_class1_return_this_buffer_bufferify(obj%cxxmem, &
            name, len_trim(name, kind=C_INT), SH_flag, SHT_rv%cxxmem)
        ! splicer end class.Class1.method.return_this_buffer
    end function class1_return_this_buffer
    ! end class1_return_this_buffer

    ! ----------------------------------------
    ! Function:  Class1 * getclass3
    ! Class1 * getclass3
    ! Requested: f_shadow_*_result
    ! Match:     f_shadow_result
    ! Requested: c_shadow_*_result
    ! Match:     c_shadow_result
    !>
    !! \brief Test const method
    !!
    !<
    ! start class1_getclass3
    function class1_getclass3(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR
        class(class1) :: obj
        type(class1) :: SHT_rv
        ! splicer begin class.Class1.method.getclass3
        type(C_PTR) :: SHT_prv
        SHT_prv = c_class1_getclass3(obj%cxxmem, SHT_rv%cxxmem)
        ! splicer end class.Class1.method.getclass3
    end function class1_getclass3
    ! end class1_getclass3

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  const std::string & getName +deref(allocatable)
    ! const std::string & getName +deref(allocatable)
    ! Requested: f_string_scalar_result_allocatable
    ! Match:     f_string_result_allocatable
    ! Function:  void getName
    ! Exact:     c_string_scalar_result_buf
    ! ----------------------------------------
    ! Argument:  const std::string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)
    ! Requested: f_string_&_result_allocatable
    ! Match:     f_string_result_allocatable
    ! Requested: c_string_&_result_buf_allocatable
    ! Match:     c_string_result_buf_allocatable
    !>
    !! \brief test helper
    !!
    !<
    ! start class1_get_name
    function class1_get_name(obj) &
            result(SHT_rv)
        class(class1) :: obj
        type(SHROUD_array) :: DSHF_rv
        character(len=:), allocatable :: SHT_rv
        ! splicer begin class.Class1.method.get_name
        call c_class1_get_name_bufferify(obj%cxxmem, DSHF_rv)
        allocate(character(len=DSHF_rv%elem_len):: SHT_rv)
        call SHROUD_copy_string_and_free(DSHF_rv, SHT_rv, DSHF_rv%elem_len)
        ! splicer end class.Class1.method.get_name
    end function class1_get_name
    ! end class1_get_name

    ! ----------------------------------------
    ! Function:  DIRECTION directionFunc
    ! DIRECTION directionFunc
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  DIRECTION arg +intent(in)+value
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start class1_direction_func
    function class1_direction_func(obj, arg) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(class1) :: obj
        integer(C_INT), value, intent(IN) :: arg
        integer(C_INT) :: SHT_rv
        ! splicer begin class.Class1.method.direction_func
        SHT_rv = c_class1_direction_func(obj%cxxmem, arg)
        ! splicer end class.Class1.method.direction_func
    end function class1_direction_func
    ! end class1_direction_func

    ! ----------------------------------------
    ! Function:  int getM_flag
    ! int getM_flag
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start class1_get_m_flag
    function class1_get_m_flag(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(class1) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.Class1.method.get_m_flag
        SHT_rv = c_class1_get_m_flag(obj%cxxmem)
        ! splicer end class.Class1.method.get_m_flag
    end function class1_get_m_flag
    ! end class1_get_m_flag

    ! ----------------------------------------
    ! Function:  int getTest
    ! int getTest
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start class1_get_test
    function class1_get_test(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(class1) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.Class1.method.get_test
        SHT_rv = c_class1_get_test(obj%cxxmem)
        ! splicer end class.Class1.method.get_test
    end function class1_get_test
    ! end class1_get_test

    ! ----------------------------------------
    ! Function:  void setTest
    ! void setTest
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int val +intent(in)+value
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start class1_set_test
    subroutine class1_set_test(obj, val)
        use iso_c_binding, only : C_INT
        class(class1) :: obj
        integer(C_INT), value, intent(IN) :: val
        ! splicer begin class.Class1.method.set_test
        call c_class1_set_test(obj%cxxmem, val)
        ! splicer end class.Class1.method.set_test
    end subroutine class1_set_test
    ! end class1_set_test

    ! Return pointer to C++ memory.
    function class1_get_instance(obj) result (cxxptr)
        use iso_c_binding, only: C_PTR
        class(class1), intent(IN) :: obj
        type(C_PTR) :: cxxptr
        cxxptr = obj%cxxmem%addr
    end function class1_get_instance

    subroutine class1_set_instance(obj, cxxmem)
        use iso_c_binding, only: C_PTR
        class(class1), intent(INOUT) :: obj
        type(C_PTR), intent(IN) :: cxxmem
        obj%cxxmem%addr = cxxmem
        obj%cxxmem%idtor = 0
    end subroutine class1_set_instance

    function class1_associated(obj) result (rv)
        use iso_c_binding, only: c_associated
        class(class1), intent(IN) :: obj
        logical rv
        rv = c_associated(obj%cxxmem%addr)
    end function class1_associated

    ! splicer begin class.Class1.additional_functions
    ! splicer end class.Class1.additional_functions

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  const std::string & getName +deref(allocatable)
    ! const std::string & getName +deref(allocatable)
    ! Requested: f_string_scalar_result_allocatable
    ! Match:     f_string_result_allocatable
    ! Function:  void getName
    ! Exact:     c_string_scalar_result_buf
    ! ----------------------------------------
    ! Argument:  const std::string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)
    ! Requested: f_string_&_result_allocatable
    ! Match:     f_string_result_allocatable
    ! Requested: c_string_&_result_buf_allocatable
    ! Match:     c_string_result_buf_allocatable
    !>
    !! \brief test helper
    !!
    !<
    function class2_get_name(obj) &
            result(SHT_rv)
        class(class2) :: obj
        type(SHROUD_array) :: DSHF_rv
        character(len=:), allocatable :: SHT_rv
        ! splicer begin class.Class2.method.get_name
        call c_class2_get_name_bufferify(obj%cxxmem, DSHF_rv)
        allocate(character(len=DSHF_rv%elem_len):: SHT_rv)
        call SHROUD_copy_string_and_free(DSHF_rv, SHT_rv, DSHF_rv%elem_len)
        ! splicer end class.Class2.method.get_name
    end function class2_get_name

    ! Return pointer to C++ memory.
    function class2_get_instance(obj) result (cxxptr)
        use iso_c_binding, only: C_PTR
        class(class2), intent(IN) :: obj
        type(C_PTR) :: cxxptr
        cxxptr = obj%cxxmem%addr
    end function class2_get_instance

    subroutine class2_set_instance(obj, cxxmem)
        use iso_c_binding, only: C_PTR
        class(class2), intent(INOUT) :: obj
        type(C_PTR), intent(IN) :: cxxmem
        obj%cxxmem%addr = cxxmem
        obj%cxxmem%idtor = 0
    end subroutine class2_set_instance

    function class2_associated(obj) result (rv)
        use iso_c_binding, only: c_associated
        class(class2), intent(IN) :: obj
        logical rv
        rv = c_associated(obj%cxxmem%addr)
    end function class2_associated

    ! splicer begin class.Class2.additional_functions
    ! splicer end class.Class2.additional_functions

    ! ----------------------------------------
    ! Function:  static Singleton & getReference
    ! static Singleton & getReference
    ! Requested: f_shadow_&_result
    ! Match:     f_shadow_result
    ! Requested: c_shadow_&_result
    ! Match:     c_shadow_result
    function singleton_get_reference() &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR
        type(singleton) :: SHT_rv
        ! splicer begin class.Singleton.method.get_reference
        type(C_PTR) :: SHT_prv
        SHT_prv = c_singleton_get_reference(SHT_rv%cxxmem)
        ! splicer end class.Singleton.method.get_reference
    end function singleton_get_reference

    ! Return pointer to C++ memory.
    function singleton_get_instance(obj) result (cxxptr)
        use iso_c_binding, only: C_PTR
        class(singleton), intent(IN) :: obj
        type(C_PTR) :: cxxptr
        cxxptr = obj%cxxmem%addr
    end function singleton_get_instance

    subroutine singleton_set_instance(obj, cxxmem)
        use iso_c_binding, only: C_PTR
        class(singleton), intent(INOUT) :: obj
        type(C_PTR), intent(IN) :: cxxmem
        obj%cxxmem%addr = cxxmem
        obj%cxxmem%idtor = 0
    end subroutine singleton_set_instance

    function singleton_associated(obj) result (rv)
        use iso_c_binding, only: c_associated
        class(singleton), intent(IN) :: obj
        logical rv
        rv = c_associated(obj%cxxmem%addr)
    end function singleton_associated

    ! splicer begin class.Singleton.additional_functions
    ! splicer end class.Singleton.additional_functions

    ! ----------------------------------------
    ! Function:  void passClassByValue
    ! void passClassByValue
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  Class1 arg +intent(in)+value
    ! Requested: f_shadow_scalar_in
    ! Match:     f_default
    ! Exact:     c_shadow_scalar_in
    !>
    !! \brief Pass arguments to a function.
    !!
    !<
    subroutine pass_class_by_value(arg)
        type(class1), value, intent(IN) :: arg
        ! splicer begin function.pass_class_by_value
        call c_pass_class_by_value(arg%cxxmem)
        ! splicer end function.pass_class_by_value
    end subroutine pass_class_by_value

    ! ----------------------------------------
    ! Function:  int useclass
    ! int useclass
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const Class1 * arg +intent(in)
    ! Requested: f_shadow_*_in
    ! Match:     f_default
    ! Requested: c_shadow_*_in
    ! Match:     c_shadow_in
    function useclass(arg) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        type(class1), intent(IN) :: arg
        integer(C_INT) :: SHT_rv
        ! splicer begin function.useclass
        SHT_rv = c_useclass(arg%cxxmem)
        ! splicer end function.useclass
    end function useclass

    ! ----------------------------------------
    ! Function:  const Class1 * getclass2
    ! const Class1 * getclass2
    ! Requested: f_shadow_*_result
    ! Match:     f_shadow_result
    ! Requested: c_shadow_*_result
    ! Match:     c_shadow_result
    function getclass2() &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR
        type(class1) :: SHT_rv
        ! splicer begin function.getclass2
        type(C_PTR) :: SHT_prv
        SHT_prv = c_getclass2(SHT_rv%cxxmem)
        ! splicer end function.getclass2
    end function getclass2

    ! ----------------------------------------
    ! Function:  Class1 * getclass3
    ! Class1 * getclass3
    ! Requested: f_shadow_*_result
    ! Match:     f_shadow_result
    ! Requested: c_shadow_*_result
    ! Match:     c_shadow_result
    function getclass3() &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR
        type(class1) :: SHT_rv
        ! splicer begin function.getclass3
        type(C_PTR) :: SHT_prv
        SHT_prv = c_getclass3(SHT_rv%cxxmem)
        ! splicer end function.getclass3
    end function getclass3

    ! ----------------------------------------
    ! Function:  const Class1 & getConstClassReference
    ! const Class1 & getConstClassReference
    ! Requested: f_shadow_&_result
    ! Match:     f_shadow_result
    ! Requested: c_shadow_&_result
    ! Match:     c_shadow_result
    function get_const_class_reference() &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR
        type(class1) :: SHT_rv
        ! splicer begin function.get_const_class_reference
        type(C_PTR) :: SHT_prv
        SHT_prv = c_get_const_class_reference(SHT_rv%cxxmem)
        ! splicer end function.get_const_class_reference
    end function get_const_class_reference

    ! ----------------------------------------
    ! Function:  Class1 & getClassReference
    ! Class1 & getClassReference
    ! Requested: f_shadow_&_result
    ! Match:     f_shadow_result
    ! Requested: c_shadow_&_result
    ! Match:     c_shadow_result
    function get_class_reference() &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR
        type(class1) :: SHT_rv
        ! splicer begin function.get_class_reference
        type(C_PTR) :: SHT_prv
        SHT_prv = c_get_class_reference(SHT_rv%cxxmem)
        ! splicer end function.get_class_reference
    end function get_class_reference

    ! ----------------------------------------
    ! Function:  Class1 getClassCopy
    ! Class1 getClassCopy
    ! Requested: f_shadow_scalar_result
    ! Match:     f_shadow_result
    ! Exact:     c_shadow_scalar_result
    ! ----------------------------------------
    ! Argument:  int flag +intent(in)+value
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    !>
    !! \brief Return Class1 instance by value, uses copy constructor
    !!
    !<
    function get_class_copy(flag) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR
        integer(C_INT), value, intent(IN) :: flag
        type(class1) :: SHT_rv
        ! splicer begin function.get_class_copy
        type(C_PTR) :: SHT_prv
        SHT_prv = c_get_class_copy(flag, SHT_rv%cxxmem)
        ! splicer end function.get_class_copy
    end function get_class_copy

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  const std::string & LastFunctionCalled +deref(result-as-arg)+len(30)
    ! const std::string & LastFunctionCalled +deref(result-as-arg)+len(30)
    ! Requested: f_string_scalar_result_result-as-arg
    ! Match:     f_default
    ! Function:  void LastFunctionCalled +len(30)
    ! Exact:     c_string_scalar_result_buf
    ! ----------------------------------------
    ! Argument:  std::string & SHF_rv +intent(out)+len(NSHF_rv)
    ! Requested: f_string_&_result
    ! Match:     f_default
    ! Requested: c_string_&_result_buf
    ! Match:     c_string_result_buf
    function last_function_called() &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        character(len=30) :: SHT_rv
        ! splicer begin function.last_function_called
        call c_last_function_called_bufferify(SHT_rv, &
            len(SHT_rv, kind=C_INT))
        ! splicer end function.last_function_called
    end function last_function_called

    ! splicer begin additional_functions
    ! splicer end additional_functions

    function class1_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(class1), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function class1_eq

    function class1_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(class1), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function class1_ne

    function class2_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(class2), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function class2_eq

    function class2_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(class2), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function class2_ne

    function singleton_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(singleton), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function singleton_eq

    function singleton_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(singleton), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function singleton_ne

end module classes_mod

! wrapfpointers.f
! This file is generated by Shroud 0.12.1. Do not edit.
! Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapfpointers.f
!! \brief Shroud generated wrapper for pointers library
!<
! splicer begin file_top
! splicer end file_top
module pointers_mod
    use iso_c_binding, only : C_INT, C_LONG, C_NULL_PTR, C_PTR, C_SIZE_T
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top

    ! helper capsule_data_helper
    type, bind(C) :: SHROUD_capsule_data
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type SHROUD_capsule_data

    ! start array_context
    ! helper array_context
    type, bind(C) :: SHROUD_array
        ! address of C++ memory
        type(SHROUD_capsule_data) :: cxx
        ! address of data in cxx
        type(C_PTR) :: base_addr = C_NULL_PTR
        ! type of element
        integer(C_INT) :: type
        ! bytes-per-item or character len of data in cxx
        integer(C_SIZE_T) :: elem_len = 0_C_SIZE_T
        ! size of data in cxx
        integer(C_SIZE_T) :: size = 0_C_SIZE_T
        ! number of dimensions
        integer(C_INT) :: rank = -1
        integer(C_LONG) :: shape(7) = 0
    end type SHROUD_array
    ! end array_context

    ! ----------------------------------------
    ! Function:  void intargs_in
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * arg +intent(in)
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! start intargs_in
    interface
        subroutine intargs_in(arg) &
                bind(C, name="POI_intargs_in")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), intent(IN) :: arg
        end subroutine intargs_in
    end interface
    ! end intargs_in

    ! ----------------------------------------
    ! Function:  void intargs_inout
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * arg +intent(inout)
    ! Requested: c_native_*_inout
    ! Match:     c_default
    ! start intargs_inout
    interface
        subroutine intargs_inout(arg) &
                bind(C, name="POI_intargs_inout")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), intent(INOUT) :: arg
        end subroutine intargs_inout
    end interface
    ! end intargs_inout

    ! ----------------------------------------
    ! Function:  void intargs_out
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * arg +intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start intargs_out
    interface
        subroutine intargs_out(arg) &
                bind(C, name="POI_intargs_out")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), intent(OUT) :: arg
        end subroutine intargs_out
    end interface
    ! end intargs_out

    ! ----------------------------------------
    ! Function:  void intargs
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int argin +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * arginout +intent(inout)
    ! Requested: c_native_*_inout
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * argout +intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start intargs
    interface
        subroutine intargs(argin, arginout, argout) &
                bind(C, name="POI_intargs")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), value, intent(IN) :: argin
            integer(C_INT), intent(INOUT) :: arginout
            integer(C_INT), intent(OUT) :: argout
        end subroutine intargs
    end interface
    ! end intargs

    ! ----------------------------------------
    ! Function:  void cos_doubles
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  double * in +intent(in)+rank(1)
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  double * out +deref(allocatable)+dimension(size(in))+intent(out)
    ! Requested: c_native_*_out_allocatable
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int sizein +implied(size(in))+intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start c_cos_doubles
    interface
        subroutine c_cos_doubles(in, out, sizein) &
                bind(C, name="POI_cos_doubles")
            use iso_c_binding, only : C_DOUBLE, C_INT
            implicit none
            real(C_DOUBLE), intent(IN) :: in(*)
            real(C_DOUBLE), intent(OUT) :: out(*)
            integer(C_INT), value, intent(IN) :: sizein
        end subroutine c_cos_doubles
    end interface
    ! end c_cos_doubles

    ! ----------------------------------------
    ! Function:  void truncate_to_int
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  double * in +intent(in)+rank(1)
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * out +deref(allocatable)+dimension(size(in))+intent(out)
    ! Requested: c_native_*_out_allocatable
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int sizein +implied(size(in))+intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start c_truncate_to_int
    interface
        subroutine c_truncate_to_int(in, out, sizein) &
                bind(C, name="POI_truncate_to_int")
            use iso_c_binding, only : C_DOUBLE, C_INT
            implicit none
            real(C_DOUBLE), intent(IN) :: in(*)
            integer(C_INT), intent(OUT) :: out(*)
            integer(C_INT), value, intent(IN) :: sizein
        end subroutine c_truncate_to_int
    end interface
    ! end c_truncate_to_int

    ! ----------------------------------------
    ! Function:  void get_values
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * nvalues +intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * values +dimension(3)+intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start get_values
    interface
        subroutine get_values(nvalues, values) &
                bind(C, name="POI_get_values")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), intent(OUT) :: nvalues
            integer(C_INT), intent(OUT) :: values(*)
        end subroutine get_values
    end interface
    ! end get_values

    ! ----------------------------------------
    ! Function:  void get_values2
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * arg1 +dimension(3)+intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * arg2 +dimension(3)+intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start get_values2
    interface
        subroutine get_values2(arg1, arg2) &
                bind(C, name="POI_get_values2")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), intent(OUT) :: arg1(*)
            integer(C_INT), intent(OUT) :: arg2(*)
        end subroutine get_values2
    end interface
    ! end get_values2

    ! ----------------------------------------
    ! Function:  void iota_allocatable
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int nvar +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * values +deref(allocatable)+dimension(nvar)+intent(out)
    ! Requested: c_native_*_out_allocatable
    ! Match:     c_default
    ! start c_iota_allocatable
    interface
        subroutine c_iota_allocatable(nvar, values) &
                bind(C, name="POI_iota_allocatable")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), value, intent(IN) :: nvar
            integer(C_INT), intent(OUT) :: values(*)
        end subroutine c_iota_allocatable
    end interface
    ! end c_iota_allocatable

    ! ----------------------------------------
    ! Function:  void iota_dimension
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int nvar +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * values +dimension(nvar)+intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start iota_dimension
    interface
        subroutine iota_dimension(nvar, values) &
                bind(C, name="POI_iota_dimension")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), value, intent(IN) :: nvar
            integer(C_INT), intent(OUT) :: values(*)
        end subroutine iota_dimension
    end interface
    ! end iota_dimension

    ! ----------------------------------------
    ! Function:  void Sum
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int len +implied(size(values))+intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * values +intent(in)+rank(1)
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * result +intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start c_sum
    interface
        subroutine c_sum(len, values, result) &
                bind(C, name="POI_sum")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), value, intent(IN) :: len
            integer(C_INT), intent(IN) :: values(*)
            integer(C_INT), intent(OUT) :: result
        end subroutine c_sum
    end interface
    ! end c_sum

    ! ----------------------------------------
    ! Function:  void fillIntArray
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * out +dimension(3)+intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start fill_int_array
    interface
        subroutine fill_int_array(out) &
                bind(C, name="POI_fill_int_array")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), intent(OUT) :: out(*)
        end subroutine fill_int_array
    end interface
    ! end fill_int_array

    ! ----------------------------------------
    ! Function:  void incrementIntArray
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * array +intent(inout)+rank(1)
    ! Requested: c_native_*_inout
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int sizein +implied(size(array))+intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start c_increment_int_array
    interface
        subroutine c_increment_int_array(array, sizein) &
                bind(C, name="POI_increment_int_array")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), intent(INOUT) :: array(*)
            integer(C_INT), value, intent(IN) :: sizein
        end subroutine c_increment_int_array
    end interface
    ! end c_increment_int_array

    ! ----------------------------------------
    ! Function:  void fill_with_zeros
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  double * x +intent(inout)+rank(1)
    ! Requested: c_native_*_inout
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int x_length +implied(size(x))+intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start c_fill_with_zeros
    interface
        subroutine c_fill_with_zeros(x, x_length) &
                bind(C, name="POI_fill_with_zeros")
            use iso_c_binding, only : C_DOUBLE, C_INT
            implicit none
            real(C_DOUBLE), intent(INOUT) :: x(*)
            integer(C_INT), value, intent(IN) :: x_length
        end subroutine c_fill_with_zeros
    end interface
    ! end c_fill_with_zeros

    ! ----------------------------------------
    ! Function:  int accumulate
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * arr +intent(in)+rank(1)
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  size_t len +implied(size(arr))+intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start c_accumulate
    interface
        function c_accumulate(arr, len) &
                result(SHT_rv) &
                bind(C, name="POI_accumulate")
            use iso_c_binding, only : C_INT, C_SIZE_T
            implicit none
            integer(C_INT), intent(IN) :: arr(*)
            integer(C_SIZE_T), value, intent(IN) :: len
            integer(C_INT) :: SHT_rv
        end function c_accumulate
    end interface
    ! end c_accumulate

    ! ----------------------------------------
    ! Function:  int acceptCharArrayIn
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * * names +intent(in)+rank(1)
    ! Exact:     c_char_**_in
    ! start c_accept_char_array_in
    interface
        function c_accept_char_array_in(names) &
                result(SHT_rv) &
                bind(C, name="POI_accept_char_array_in")
            use iso_c_binding, only : C_INT, C_PTR
            implicit none
            type(C_PTR), intent(IN) :: names(*)
            integer(C_INT) :: SHT_rv
        end function c_accept_char_array_in
    end interface
    ! end c_accept_char_array_in

    ! ----------------------------------------
    ! Function:  int acceptCharArrayIn
    ! Requested: c_native_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * * names +intent(in)+len(Nnames)+rank(1)+size(Snames)
    ! Exact:     c_char_**_in_buf
    ! start c_accept_char_array_in_bufferify
    interface
        function c_accept_char_array_in_bufferify(names, Snames, Nnames) &
                result(SHT_rv) &
                bind(C, name="POI_accept_char_array_in_bufferify")
            use iso_c_binding, only : C_CHAR, C_INT, C_LONG
            implicit none
            character(kind=C_CHAR), intent(IN) :: names(*)
            integer(C_LONG), value, intent(IN) :: Snames
            integer(C_INT), value, intent(IN) :: Nnames
            integer(C_INT) :: SHT_rv
        end function c_accept_char_array_in_bufferify
    end interface
    ! end c_accept_char_array_in_bufferify

    ! ----------------------------------------
    ! Function:  void setGlobalInt
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int value +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start set_global_int
    interface
        subroutine set_global_int(value) &
                bind(C, name="POI_set_global_int")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), value, intent(IN) :: value
        end subroutine set_global_int
    end interface
    ! end set_global_int

    ! ----------------------------------------
    ! Function:  int sumFixedArray
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start sum_fixed_array
    interface
        function sum_fixed_array() &
                result(SHT_rv) &
                bind(C, name="POI_sum_fixed_array")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT) :: SHT_rv
        end function sum_fixed_array
    end interface
    ! end sum_fixed_array

    ! ----------------------------------------
    ! Function:  void getPtrToScalar
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * nitems +deref(pointer)+intent(out)
    ! Requested: c_native_**_out_pointer
    ! Match:     c_default
    ! start c_get_ptr_to_scalar
    interface
        subroutine c_get_ptr_to_scalar(nitems) &
                bind(C, name="POI_get_ptr_to_scalar")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: nitems
        end subroutine c_get_ptr_to_scalar
    end interface
    ! end c_get_ptr_to_scalar

    ! ----------------------------------------
    ! Function:  void getPtrToScalar
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * nitems +context(Dnitems)+deref(pointer)+intent(out)
    ! Requested: c_native_**_out_buf_pointer
    ! Match:     c_native_**_out_buf
    ! start c_get_ptr_to_scalar_bufferify
    interface
        subroutine c_get_ptr_to_scalar_bufferify(Dnitems) &
                bind(C, name="POI_get_ptr_to_scalar_bufferify")
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dnitems
        end subroutine c_get_ptr_to_scalar_bufferify
    end interface
    ! end c_get_ptr_to_scalar_bufferify

    ! ----------------------------------------
    ! Function:  void getPtrToFixedArray
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +deref(pointer)+dimension(10)+intent(out)
    ! Requested: c_native_**_out_pointer
    ! Match:     c_default
    ! start c_get_ptr_to_fixed_array
    interface
        subroutine c_get_ptr_to_fixed_array(count) &
                bind(C, name="POI_get_ptr_to_fixed_array")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: count
        end subroutine c_get_ptr_to_fixed_array
    end interface
    ! end c_get_ptr_to_fixed_array

    ! ----------------------------------------
    ! Function:  void getPtrToFixedArray
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +context(Dcount)+deref(pointer)+dimension(10)+intent(out)
    ! Requested: c_native_**_out_buf_pointer
    ! Match:     c_native_**_out_buf
    ! start c_get_ptr_to_fixed_array_bufferify
    interface
        subroutine c_get_ptr_to_fixed_array_bufferify(Dcount) &
                bind(C, name="POI_get_ptr_to_fixed_array_bufferify")
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dcount
        end subroutine c_get_ptr_to_fixed_array_bufferify
    end interface
    ! end c_get_ptr_to_fixed_array_bufferify

    ! ----------------------------------------
    ! Function:  void getPtrToDynamicArray
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +deref(pointer)+dimension(ncount)+intent(out)
    ! Requested: c_native_**_out_pointer
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * ncount +hidden+intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start c_get_ptr_to_dynamic_array
    interface
        subroutine c_get_ptr_to_dynamic_array(count, ncount) &
                bind(C, name="POI_get_ptr_to_dynamic_array")
            use iso_c_binding, only : C_INT, C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: count
            integer(C_INT), intent(OUT) :: ncount
        end subroutine c_get_ptr_to_dynamic_array
    end interface
    ! end c_get_ptr_to_dynamic_array

    ! ----------------------------------------
    ! Function:  void getPtrToDynamicArray
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +context(Dcount)+deref(pointer)+dimension(ncount)+intent(out)
    ! Requested: c_native_**_out_buf_pointer
    ! Match:     c_native_**_out_buf
    ! ----------------------------------------
    ! Argument:  int * ncount +hidden+intent(out)
    ! Requested: c_native_*_out_buf
    ! Match:     c_default
    ! start c_get_ptr_to_dynamic_array_bufferify
    interface
        subroutine c_get_ptr_to_dynamic_array_bufferify(Dcount, ncount) &
                bind(C, name="POI_get_ptr_to_dynamic_array_bufferify")
            use iso_c_binding, only : C_INT
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dcount
            integer(C_INT), intent(OUT) :: ncount
        end subroutine c_get_ptr_to_dynamic_array_bufferify
    end interface
    ! end c_get_ptr_to_dynamic_array_bufferify

    ! ----------------------------------------
    ! Function:  void getPtrToFuncArray
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +deref(pointer)+dimension(getLen())+intent(out)
    ! Requested: c_native_**_out_pointer
    ! Match:     c_default
    ! start c_get_ptr_to_func_array
    interface
        subroutine c_get_ptr_to_func_array(count) &
                bind(C, name="POI_get_ptr_to_func_array")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: count
        end subroutine c_get_ptr_to_func_array
    end interface
    ! end c_get_ptr_to_func_array

    ! ----------------------------------------
    ! Function:  void getPtrToFuncArray
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +context(Dcount)+deref(pointer)+dimension(getLen())+intent(out)
    ! Requested: c_native_**_out_buf_pointer
    ! Match:     c_native_**_out_buf
    ! start c_get_ptr_to_func_array_bufferify
    interface
        subroutine c_get_ptr_to_func_array_bufferify(Dcount) &
                bind(C, name="POI_get_ptr_to_func_array_bufferify")
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dcount
        end subroutine c_get_ptr_to_func_array_bufferify
    end interface
    ! end c_get_ptr_to_func_array_bufferify

    ! ----------------------------------------
    ! Function:  void getPtrToConstScalar
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * * nitems +deref(pointer)+intent(out)
    ! Requested: c_native_**_out_pointer
    ! Match:     c_default
    ! start c_get_ptr_to_const_scalar
    interface
        subroutine c_get_ptr_to_const_scalar(nitems) &
                bind(C, name="POI_get_ptr_to_const_scalar")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: nitems
        end subroutine c_get_ptr_to_const_scalar
    end interface
    ! end c_get_ptr_to_const_scalar

    ! ----------------------------------------
    ! Function:  void getPtrToConstScalar
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * * nitems +context(Dnitems)+deref(pointer)+intent(out)
    ! Requested: c_native_**_out_buf_pointer
    ! Match:     c_native_**_out_buf
    ! start c_get_ptr_to_const_scalar_bufferify
    interface
        subroutine c_get_ptr_to_const_scalar_bufferify(Dnitems) &
                bind(C, name="POI_get_ptr_to_const_scalar_bufferify")
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dnitems
        end subroutine c_get_ptr_to_const_scalar_bufferify
    end interface
    ! end c_get_ptr_to_const_scalar_bufferify

    ! ----------------------------------------
    ! Function:  void getPtrToFixedConstArray
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * * count +deref(pointer)+dimension(10)+intent(out)
    ! Requested: c_native_**_out_pointer
    ! Match:     c_default
    ! start c_get_ptr_to_fixed_const_array
    interface
        subroutine c_get_ptr_to_fixed_const_array(count) &
                bind(C, name="POI_get_ptr_to_fixed_const_array")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: count
        end subroutine c_get_ptr_to_fixed_const_array
    end interface
    ! end c_get_ptr_to_fixed_const_array

    ! ----------------------------------------
    ! Function:  void getPtrToFixedConstArray
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * * count +context(Dcount)+deref(pointer)+dimension(10)+intent(out)
    ! Requested: c_native_**_out_buf_pointer
    ! Match:     c_native_**_out_buf
    ! start c_get_ptr_to_fixed_const_array_bufferify
    interface
        subroutine c_get_ptr_to_fixed_const_array_bufferify(Dcount) &
                bind(C, name="POI_get_ptr_to_fixed_const_array_bufferify")
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dcount
        end subroutine c_get_ptr_to_fixed_const_array_bufferify
    end interface
    ! end c_get_ptr_to_fixed_const_array_bufferify

    ! ----------------------------------------
    ! Function:  void getPtrToDynamicConstArray
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * * count +deref(pointer)+dimension(ncount)+intent(out)
    ! Requested: c_native_**_out_pointer
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * ncount +hidden+intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start c_get_ptr_to_dynamic_const_array
    interface
        subroutine c_get_ptr_to_dynamic_const_array(count, ncount) &
                bind(C, name="POI_get_ptr_to_dynamic_const_array")
            use iso_c_binding, only : C_INT, C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: count
            integer(C_INT), intent(OUT) :: ncount
        end subroutine c_get_ptr_to_dynamic_const_array
    end interface
    ! end c_get_ptr_to_dynamic_const_array

    ! ----------------------------------------
    ! Function:  void getPtrToDynamicConstArray
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * * count +context(Dcount)+deref(pointer)+dimension(ncount)+intent(out)
    ! Requested: c_native_**_out_buf_pointer
    ! Match:     c_native_**_out_buf
    ! ----------------------------------------
    ! Argument:  int * ncount +hidden+intent(out)
    ! Requested: c_native_*_out_buf
    ! Match:     c_default
    ! start c_get_ptr_to_dynamic_const_array_bufferify
    interface
        subroutine c_get_ptr_to_dynamic_const_array_bufferify(Dcount, &
                ncount) &
                bind(C, name="POI_get_ptr_to_dynamic_const_array_bufferify")
            use iso_c_binding, only : C_INT
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dcount
            integer(C_INT), intent(OUT) :: ncount
        end subroutine c_get_ptr_to_dynamic_const_array_bufferify
    end interface
    ! end c_get_ptr_to_dynamic_const_array_bufferify

    ! ----------------------------------------
    ! Function:  void getRawPtrToScalar
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * nitems +deref(raw)+intent(out)
    ! Requested: c_native_**_out_raw
    ! Match:     c_default
    ! start c_get_raw_ptr_to_scalar
    interface
        subroutine c_get_raw_ptr_to_scalar(nitems) &
                bind(C, name="POI_get_raw_ptr_to_scalar")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: nitems
        end subroutine c_get_raw_ptr_to_scalar
    end interface
    ! end c_get_raw_ptr_to_scalar

    ! ----------------------------------------
    ! Function:  void getRawPtrToScalar
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * nitems +context(Dnitems)+deref(raw)+intent(out)
    ! Requested: c_native_**_out_buf_raw
    ! Match:     c_native_**_out_buf
    ! start c_get_raw_ptr_to_scalar_bufferify
    interface
        subroutine c_get_raw_ptr_to_scalar_bufferify(Dnitems) &
                bind(C, name="POI_get_raw_ptr_to_scalar_bufferify")
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dnitems
        end subroutine c_get_raw_ptr_to_scalar_bufferify
    end interface
    ! end c_get_raw_ptr_to_scalar_bufferify

    ! ----------------------------------------
    ! Function:  void getRawPtrToScalarForce
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * nitems +deref(raw)+intent(out)
    ! Requested: c_native_**_out_raw
    ! Match:     c_default
    ! start c_get_raw_ptr_to_scalar_force
    interface
        subroutine c_get_raw_ptr_to_scalar_force(nitems) &
                bind(C, name="POI_get_raw_ptr_to_scalar_force")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: nitems
        end subroutine c_get_raw_ptr_to_scalar_force
    end interface
    ! end c_get_raw_ptr_to_scalar_force

    ! ----------------------------------------
    ! Function:  void getRawPtrToScalarForce
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * nitems +context(Dnitems)+deref(raw)+intent(out)
    ! Requested: c_native_**_out_buf_raw
    ! Match:     c_native_**_out_buf
    ! start c_get_raw_ptr_to_scalar_force_bufferify
    interface
        subroutine c_get_raw_ptr_to_scalar_force_bufferify(Dnitems) &
                bind(C, name="POI_get_raw_ptr_to_scalar_force_bufferify")
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dnitems
        end subroutine c_get_raw_ptr_to_scalar_force_bufferify
    end interface
    ! end c_get_raw_ptr_to_scalar_force_bufferify

    ! ----------------------------------------
    ! Function:  void getRawPtrToFixedArray
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +deref(raw)+intent(out)
    ! Requested: c_native_**_out_raw
    ! Match:     c_default
    ! start c_get_raw_ptr_to_fixed_array
    interface
        subroutine c_get_raw_ptr_to_fixed_array(count) &
                bind(C, name="POI_get_raw_ptr_to_fixed_array")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: count
        end subroutine c_get_raw_ptr_to_fixed_array
    end interface
    ! end c_get_raw_ptr_to_fixed_array

    ! ----------------------------------------
    ! Function:  void getRawPtrToFixedArray
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +context(Dcount)+deref(raw)+intent(out)
    ! Requested: c_native_**_out_buf_raw
    ! Match:     c_native_**_out_buf
    ! start c_get_raw_ptr_to_fixed_array_bufferify
    interface
        subroutine c_get_raw_ptr_to_fixed_array_bufferify(Dcount) &
                bind(C, name="POI_get_raw_ptr_to_fixed_array_bufferify")
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dcount
        end subroutine c_get_raw_ptr_to_fixed_array_bufferify
    end interface
    ! end c_get_raw_ptr_to_fixed_array_bufferify

    ! ----------------------------------------
    ! Function:  void getRawPtrToFixedArrayForce
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +deref(raw)+intent(out)
    ! Requested: c_native_**_out_raw
    ! Match:     c_default
    ! start c_get_raw_ptr_to_fixed_array_force
    interface
        subroutine c_get_raw_ptr_to_fixed_array_force(count) &
                bind(C, name="POI_get_raw_ptr_to_fixed_array_force")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: count
        end subroutine c_get_raw_ptr_to_fixed_array_force
    end interface
    ! end c_get_raw_ptr_to_fixed_array_force

    ! ----------------------------------------
    ! Function:  void getRawPtrToFixedArrayForce
    ! Requested: c_void_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +context(Dcount)+deref(raw)+intent(out)
    ! Requested: c_native_**_out_buf_raw
    ! Match:     c_native_**_out_buf
    ! start c_get_raw_ptr_to_fixed_array_force_bufferify
    interface
        subroutine c_get_raw_ptr_to_fixed_array_force_bufferify(Dcount) &
                bind(C, name="POI_get_raw_ptr_to_fixed_array_force_bufferify")
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: Dcount
        end subroutine c_get_raw_ptr_to_fixed_array_force_bufferify
    end interface
    ! end c_get_raw_ptr_to_fixed_array_force_bufferify

    ! ----------------------------------------
    ! Function:  void getRawPtrToInt2d
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * * arg +intent(out)
    ! Requested: c_native_***_out
    ! Match:     c_default
    ! start get_raw_ptr_to_int2d
    interface
        subroutine get_raw_ptr_to_int2d(arg) &
                bind(C, name="POI_get_raw_ptr_to_int2d")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: arg
        end subroutine get_raw_ptr_to_int2d
    end interface
    ! end get_raw_ptr_to_int2d

    ! ----------------------------------------
    ! Function:  int checkInt2d
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * arg +intent(in)
    ! Exact:     c_native_**_in
    ! start check_int2d
    interface
        function check_int2d(arg) &
                result(SHT_rv) &
                bind(C, name="POI_check_int2d")
            use iso_c_binding, only : C_INT, C_PTR
            implicit none
            type(C_PTR), intent(IN), value :: arg
            integer(C_INT) :: SHT_rv
        end function check_int2d
    end interface
    ! end check_int2d

    ! ----------------------------------------
    ! Function:  void DimensionIn
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * arg +dimension(10,20)+intent(in)
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! start c_dimension_in
    interface
        subroutine c_dimension_in(arg) &
                bind(C, name="POI_dimension_in")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), intent(IN) :: arg(*)
        end subroutine c_dimension_in
    end interface
    ! end c_dimension_in

    ! ----------------------------------------
    ! Function:  void * returnAddress1
    ! Requested: c_void_*_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int flag +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start return_address1
    interface
        function return_address1(flag) &
                result(SHT_rv) &
                bind(C, name="POI_return_address1")
            use iso_c_binding, only : C_INT, C_PTR
            implicit none
            integer(C_INT), value, intent(IN) :: flag
            type(C_PTR) :: SHT_rv
        end function return_address1
    end interface
    ! end return_address1

    ! ----------------------------------------
    ! Function:  void * returnAddress2
    ! Requested: c_void_*_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int flag +intent(in)+value
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start c_return_address2
    interface
        function c_return_address2(flag) &
                result(SHT_rv) &
                bind(C, name="POI_return_address2")
            use iso_c_binding, only : C_INT, C_PTR
            implicit none
            integer(C_INT), value, intent(IN) :: flag
            type(C_PTR) :: SHT_rv
        end function c_return_address2
    end interface
    ! end c_return_address2

    ! ----------------------------------------
    ! Function:  void fetchVoidPtr
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  void * * addr +intent(out)
    ! Requested: c_void_**_out
    ! Match:     c_default
    ! start fetch_void_ptr
    interface
        subroutine fetch_void_ptr(addr) &
                bind(C, name="POI_fetch_void_ptr")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR), intent(OUT) :: addr
        end subroutine fetch_void_ptr
    end interface
    ! end fetch_void_ptr

    ! ----------------------------------------
    ! Function:  int * returnIntPtrToScalar +deref(pointer)
    ! Requested: c_native_*_result
    ! Match:     c_default
    ! start c_return_int_ptr_to_scalar
    interface
        function c_return_int_ptr_to_scalar() &
                result(SHT_rv) &
                bind(C, name="POI_return_int_ptr_to_scalar")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_return_int_ptr_to_scalar
    end interface
    ! end c_return_int_ptr_to_scalar

    ! ----------------------------------------
    ! Function:  int * returnIntPtrToFixedArray +deref(pointer)+dimension(10)
    ! Requested: c_native_*_result
    ! Match:     c_default
    ! start c_return_int_ptr_to_fixed_array
    interface
        function c_return_int_ptr_to_fixed_array() &
                result(SHT_rv) &
                bind(C, name="POI_return_int_ptr_to_fixed_array")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_return_int_ptr_to_fixed_array
    end interface
    ! end c_return_int_ptr_to_fixed_array

    ! ----------------------------------------
    ! Function:  int * returnIntPtrToFixedArray +context(DSHC_rv)+deref(pointer)+dimension(10)
    ! Exact:     c_native_*_result_buf
    ! start c_return_int_ptr_to_fixed_array_bufferify
    interface
        function c_return_int_ptr_to_fixed_array_bufferify(DSHC_rv) &
                result(SHT_rv) &
                bind(C, name="POI_return_int_ptr_to_fixed_array_bufferify")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: DSHC_rv
            type(C_PTR) SHT_rv
        end function c_return_int_ptr_to_fixed_array_bufferify
    end interface
    ! end c_return_int_ptr_to_fixed_array_bufferify

    ! ----------------------------------------
    ! Function:  const int * returnIntPtrToConstScalar +deref(pointer)
    ! Requested: c_native_*_result
    ! Match:     c_default
    ! start c_return_int_ptr_to_const_scalar
    interface
        function c_return_int_ptr_to_const_scalar() &
                result(SHT_rv) &
                bind(C, name="POI_return_int_ptr_to_const_scalar")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_return_int_ptr_to_const_scalar
    end interface
    ! end c_return_int_ptr_to_const_scalar

    ! ----------------------------------------
    ! Function:  const int * returnIntPtrToFixedConstArray +deref(pointer)+dimension(10)
    ! Requested: c_native_*_result
    ! Match:     c_default
    ! start c_return_int_ptr_to_fixed_const_array
    interface
        function c_return_int_ptr_to_fixed_const_array() &
                result(SHT_rv) &
                bind(C, name="POI_return_int_ptr_to_fixed_const_array")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_return_int_ptr_to_fixed_const_array
    end interface
    ! end c_return_int_ptr_to_fixed_const_array

    ! ----------------------------------------
    ! Function:  const int * returnIntPtrToFixedConstArray +context(DSHC_rv)+deref(pointer)+dimension(10)
    ! Exact:     c_native_*_result_buf
    ! start c_return_int_ptr_to_fixed_const_array_bufferify
    interface
        function c_return_int_ptr_to_fixed_const_array_bufferify( &
                DSHC_rv) &
                result(SHT_rv) &
                bind(C, name="POI_return_int_ptr_to_fixed_const_array_bufferify")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_array
            implicit none
            type(SHROUD_array), intent(INOUT) :: DSHC_rv
            type(C_PTR) SHT_rv
        end function c_return_int_ptr_to_fixed_const_array_bufferify
    end interface
    ! end c_return_int_ptr_to_fixed_const_array_bufferify

    ! ----------------------------------------
    ! Function:  int * returnIntScalar +deref(scalar)
    ! Requested: c_native_*_result
    ! Match:     c_default
    ! start return_int_scalar
    interface
        function return_int_scalar() &
                result(SHT_rv) &
                bind(C, name="POI_return_int_scalar")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT) :: SHT_rv
        end function return_int_scalar
    end interface
    ! end return_int_scalar

    ! ----------------------------------------
    ! Function:  int * returnIntRaw +deref(raw)
    ! Requested: c_native_*_result
    ! Match:     c_default
    ! start return_int_raw
    interface
        function return_int_raw() &
                result(SHT_rv) &
                bind(C, name="POI_return_int_raw")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function return_int_raw
    end interface
    ! end return_int_raw

    ! ----------------------------------------
    ! Function:  int * returnIntRawWithArgs +deref(raw)
    ! Requested: c_native_*_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const char * name +intent(in)
    ! Requested: c_char_*_in
    ! Match:     c_default
    ! start c_return_int_raw_with_args
    interface
        function c_return_int_raw_with_args(name) &
                result(SHT_rv) &
                bind(C, name="POI_return_int_raw_with_args")
            use iso_c_binding, only : C_CHAR, C_PTR
            implicit none
            character(kind=C_CHAR), intent(IN) :: name(*)
            type(C_PTR) SHT_rv
        end function c_return_int_raw_with_args
    end interface
    ! end c_return_int_raw_with_args

    ! ----------------------------------------
    ! Function:  int * * returnRawPtrToInt2d +deref(pointer)
    ! Requested: c_native_**_result
    ! Match:     c_default
    ! start c_return_raw_ptr_to_int2d
    interface
        function c_return_raw_ptr_to_int2d() &
                result(SHT_rv) &
                bind(C, name="POI_return_raw_ptr_to_int2d")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_return_raw_ptr_to_int2d
    end interface
    ! end c_return_raw_ptr_to_int2d

    interface
        ! splicer begin additional_interfaces
        ! splicer end additional_interfaces
    end interface

contains

    ! ----------------------------------------
    ! Function:  void cos_doubles
    ! void cos_doubles
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  double * in +intent(in)+rank(1)
    ! Requested: f_native_*_in
    ! Match:     f_default
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  double * out +deref(allocatable)+dimension(size(in))+intent(out)
    ! Exact:     f_native_*_out_allocatable
    ! Requested: c_native_*_out
    ! Match:     c_default
    !>
    !! \brief compute cos of IN and save in OUT
    !!
    !! allocate OUT same type as IN implied size of array
    !<
    ! start cos_doubles
    subroutine cos_doubles(in, out)
        use iso_c_binding, only : C_DOUBLE, C_INT
        real(C_DOUBLE), intent(IN) :: in(:)
        real(C_DOUBLE), intent(OUT), allocatable :: out(:)
        integer(C_INT) :: SH_sizein
        ! splicer begin function.cos_doubles
        allocate(out(size(in)))
        SH_sizein = size(in,kind=C_INT)
        call c_cos_doubles(in, out, SH_sizein)
        ! splicer end function.cos_doubles
    end subroutine cos_doubles
    ! end cos_doubles

    ! ----------------------------------------
    ! Function:  void truncate_to_int
    ! void truncate_to_int
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  double * in +intent(in)+rank(1)
    ! Requested: f_native_*_in
    ! Match:     f_default
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * out +deref(allocatable)+dimension(size(in))+intent(out)
    ! Exact:     f_native_*_out_allocatable
    ! Requested: c_native_*_out
    ! Match:     c_default
    !>
    !! \brief truncate IN argument and save in OUT
    !!
    !! allocate OUT different type as IN
    !! implied size of array
    !<
    ! start truncate_to_int
    subroutine truncate_to_int(in, out)
        use iso_c_binding, only : C_DOUBLE, C_INT
        real(C_DOUBLE), intent(IN) :: in(:)
        integer(C_INT), intent(OUT), allocatable :: out(:)
        integer(C_INT) :: SH_sizein
        ! splicer begin function.truncate_to_int
        allocate(out(size(in)))
        SH_sizein = size(in,kind=C_INT)
        call c_truncate_to_int(in, out, SH_sizein)
        ! splicer end function.truncate_to_int
    end subroutine truncate_to_int
    ! end truncate_to_int

    ! ----------------------------------------
    ! Function:  void iota_allocatable
    ! void iota_allocatable
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int nvar +intent(in)+value
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * values +deref(allocatable)+dimension(nvar)+intent(out)
    ! Exact:     f_native_*_out_allocatable
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start iota_allocatable
    subroutine iota_allocatable(nvar, values)
        use iso_c_binding, only : C_INT
        integer(C_INT), value, intent(IN) :: nvar
        integer(C_INT), intent(OUT), allocatable :: values(:)
        ! splicer begin function.iota_allocatable
        allocate(values(nvar))
        call c_iota_allocatable(nvar, values)
        ! splicer end function.iota_allocatable
    end subroutine iota_allocatable
    ! end iota_allocatable

    ! ----------------------------------------
    ! Function:  void Sum
    ! void Sum
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * values +intent(in)+rank(1)
    ! Requested: f_native_*_in
    ! Match:     f_default
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * result +intent(out)
    ! Requested: f_native_*_out
    ! Match:     f_default
    ! Requested: c_native_*_out
    ! Match:     c_default
    ! start sum
    subroutine sum(values, result)
        use iso_c_binding, only : C_INT
        integer(C_INT) :: SH_len
        integer(C_INT), intent(IN) :: values(:)
        integer(C_INT), intent(OUT) :: result
        ! splicer begin function.sum
        SH_len = size(values,kind=C_INT)
        call c_sum(SH_len, values, result)
        ! splicer end function.sum
    end subroutine sum
    ! end sum

    ! ----------------------------------------
    ! Function:  void incrementIntArray
    ! void incrementIntArray
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * array +intent(inout)+rank(1)
    ! Requested: f_native_*_inout
    ! Match:     f_default
    ! Requested: c_native_*_inout
    ! Match:     c_default
    !>
    !! Increment array in place using intent(INOUT).
    !<
    ! start increment_int_array
    subroutine increment_int_array(array)
        use iso_c_binding, only : C_INT
        integer(C_INT), intent(INOUT) :: array(:)
        integer(C_INT) :: SH_sizein
        ! splicer begin function.increment_int_array
        SH_sizein = size(array,kind=C_INT)
        call c_increment_int_array(array, SH_sizein)
        ! splicer end function.increment_int_array
    end subroutine increment_int_array
    ! end increment_int_array

    ! ----------------------------------------
    ! Function:  void fill_with_zeros
    ! void fill_with_zeros
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  double * x +intent(inout)+rank(1)
    ! Requested: f_native_*_inout
    ! Match:     f_default
    ! Requested: c_native_*_inout
    ! Match:     c_default
    ! start fill_with_zeros
    subroutine fill_with_zeros(x)
        use iso_c_binding, only : C_DOUBLE, C_INT
        real(C_DOUBLE), intent(INOUT) :: x(:)
        integer(C_INT) :: SH_x_length
        ! splicer begin function.fill_with_zeros
        SH_x_length = size(x,kind=C_INT)
        call c_fill_with_zeros(x, SH_x_length)
        ! splicer end function.fill_with_zeros
    end subroutine fill_with_zeros
    ! end fill_with_zeros

    ! ----------------------------------------
    ! Function:  int accumulate
    ! int accumulate
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * arr +intent(in)+rank(1)
    ! Requested: f_native_*_in
    ! Match:     f_default
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! start accumulate
    function accumulate(arr) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_SIZE_T
        integer(C_INT), intent(IN) :: arr(:)
        integer(C_SIZE_T) :: SH_len
        integer(C_INT) :: SHT_rv
        ! splicer begin function.accumulate
        SH_len = size(arr,kind=C_SIZE_T)
        SHT_rv = c_accumulate(arr, SH_len)
        ! splicer end function.accumulate
    end function accumulate
    ! end accumulate

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  int acceptCharArrayIn
    ! int acceptCharArrayIn
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * * names +intent(in)+rank(1)
    ! Requested: f_char_**_in
    ! Match:     f_default
    ! Argument:  char * * names +intent(in)+len(Nnames)+rank(1)+size(Snames)
    ! Exact:     c_char_**_in_buf
    !>
    !! Return strlen of the first index as a check.
    !<
    ! start accept_char_array_in
    function accept_char_array_in(names) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_LONG
        character(len=*), intent(IN) :: names(:)
        integer(C_INT) :: SHT_rv
        ! splicer begin function.accept_char_array_in
        SHT_rv = c_accept_char_array_in_bufferify(names, &
            size(names, kind=C_LONG), len(names, kind=C_INT))
        ! splicer end function.accept_char_array_in
    end function accept_char_array_in
    ! end accept_char_array_in

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getPtrToScalar
    ! void getPtrToScalar
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * nitems +deref(pointer)+intent(out)
    ! Requested: f_native_**_out_pointer
    ! Match:     f_native_**_out
    ! Argument:  int * * nitems +context(Dnitems)+deref(pointer)+intent(out)
    ! Exact:     c_native_**_out_buf
    ! start get_ptr_to_scalar
    subroutine get_ptr_to_scalar(nitems)
        use iso_c_binding, only : C_INT, c_f_pointer
        integer(C_INT), intent(OUT), pointer :: nitems
        type(SHROUD_array) :: Dnitems
        ! splicer begin function.get_ptr_to_scalar
        call c_get_ptr_to_scalar_bufferify(Dnitems)
        call c_f_pointer(Dnitems%base_addr, nitems)
        ! splicer end function.get_ptr_to_scalar
    end subroutine get_ptr_to_scalar
    ! end get_ptr_to_scalar

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getPtrToFixedArray
    ! void getPtrToFixedArray
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +deref(pointer)+dimension(10)+intent(out)
    ! Requested: f_native_**_out_pointer
    ! Match:     f_native_**_out
    ! Argument:  int * * count +context(Dcount)+deref(pointer)+dimension(10)+intent(out)
    ! Exact:     c_native_**_out_buf
    !>
    !! Return a Fortran pointer to an array which is always the same length.
    !<
    ! start get_ptr_to_fixed_array
    subroutine get_ptr_to_fixed_array(count)
        use iso_c_binding, only : C_INT, c_f_pointer
        integer(C_INT), intent(OUT), pointer :: count(:)
        type(SHROUD_array) :: Dcount
        ! splicer begin function.get_ptr_to_fixed_array
        call c_get_ptr_to_fixed_array_bufferify(Dcount)
        call c_f_pointer(Dcount%base_addr, count, Dcount%shape(1:1))
        ! splicer end function.get_ptr_to_fixed_array
    end subroutine get_ptr_to_fixed_array
    ! end get_ptr_to_fixed_array

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getPtrToDynamicArray
    ! void getPtrToDynamicArray
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +deref(pointer)+dimension(ncount)+intent(out)
    ! Requested: f_native_**_out_pointer
    ! Match:     f_native_**_out
    ! Argument:  int * * count +context(Dcount)+deref(pointer)+dimension(ncount)+intent(out)
    ! Exact:     c_native_**_out_buf
    ! ----------------------------------------
    ! Argument:  int * ncount +hidden+intent(out)
    ! Requested: f_native_*_out
    ! Match:     f_default
    ! Requested: c_native_*_out_buf
    ! Match:     c_default
    !>
    !! Return a Fortran pointer to an array which is the length of
    !! the argument ncount.
    !<
    ! start get_ptr_to_dynamic_array
    subroutine get_ptr_to_dynamic_array(count)
        use iso_c_binding, only : C_INT, c_f_pointer
        integer(C_INT), intent(OUT), pointer :: count(:)
        type(SHROUD_array) :: Dcount
        integer(C_INT) :: ncount
        ! splicer begin function.get_ptr_to_dynamic_array
        call c_get_ptr_to_dynamic_array_bufferify(Dcount, ncount)
        call c_f_pointer(Dcount%base_addr, count, Dcount%shape(1:1))
        ! splicer end function.get_ptr_to_dynamic_array
    end subroutine get_ptr_to_dynamic_array
    ! end get_ptr_to_dynamic_array

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getPtrToFuncArray
    ! void getPtrToFuncArray
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +deref(pointer)+dimension(getLen())+intent(out)
    ! Requested: f_native_**_out_pointer
    ! Match:     f_native_**_out
    ! Argument:  int * * count +context(Dcount)+deref(pointer)+dimension(getLen())+intent(out)
    ! Exact:     c_native_**_out_buf
    !>
    !! Return a Fortran pointer to an array which is the length
    !! is computed by C++ function getLen.
    !! getLen will be called from C/C++ to compute the shape.
    !<
    ! start get_ptr_to_func_array
    subroutine get_ptr_to_func_array(count)
        use iso_c_binding, only : C_INT, c_f_pointer
        integer(C_INT), intent(OUT), pointer :: count(:)
        type(SHROUD_array) :: Dcount
        ! splicer begin function.get_ptr_to_func_array
        call c_get_ptr_to_func_array_bufferify(Dcount)
        call c_f_pointer(Dcount%base_addr, count, Dcount%shape(1:1))
        ! splicer end function.get_ptr_to_func_array
    end subroutine get_ptr_to_func_array
    ! end get_ptr_to_func_array

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getPtrToConstScalar
    ! void getPtrToConstScalar
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * * nitems +deref(pointer)+intent(out)
    ! Requested: f_native_**_out_pointer
    ! Match:     f_native_**_out
    ! Argument:  const int * * nitems +context(Dnitems)+deref(pointer)+intent(out)
    ! Exact:     c_native_**_out_buf
    ! start get_ptr_to_const_scalar
    subroutine get_ptr_to_const_scalar(nitems)
        use iso_c_binding, only : C_INT, c_f_pointer
        integer(C_INT), intent(OUT), pointer :: nitems
        type(SHROUD_array) :: Dnitems
        ! splicer begin function.get_ptr_to_const_scalar
        call c_get_ptr_to_const_scalar_bufferify(Dnitems)
        call c_f_pointer(Dnitems%base_addr, nitems)
        ! splicer end function.get_ptr_to_const_scalar
    end subroutine get_ptr_to_const_scalar
    ! end get_ptr_to_const_scalar

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getPtrToFixedConstArray
    ! void getPtrToFixedConstArray
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * * count +deref(pointer)+dimension(10)+intent(out)
    ! Requested: f_native_**_out_pointer
    ! Match:     f_native_**_out
    ! Argument:  const int * * count +context(Dcount)+deref(pointer)+dimension(10)+intent(out)
    ! Exact:     c_native_**_out_buf
    ! start get_ptr_to_fixed_const_array
    subroutine get_ptr_to_fixed_const_array(count)
        use iso_c_binding, only : C_INT, c_f_pointer
        integer(C_INT), intent(OUT), pointer :: count(:)
        type(SHROUD_array) :: Dcount
        ! splicer begin function.get_ptr_to_fixed_const_array
        call c_get_ptr_to_fixed_const_array_bufferify(Dcount)
        call c_f_pointer(Dcount%base_addr, count, Dcount%shape(1:1))
        ! splicer end function.get_ptr_to_fixed_const_array
    end subroutine get_ptr_to_fixed_const_array
    ! end get_ptr_to_fixed_const_array

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getPtrToDynamicConstArray
    ! void getPtrToDynamicConstArray
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * * count +deref(pointer)+dimension(ncount)+intent(out)
    ! Requested: f_native_**_out_pointer
    ! Match:     f_native_**_out
    ! Argument:  const int * * count +context(Dcount)+deref(pointer)+dimension(ncount)+intent(out)
    ! Exact:     c_native_**_out_buf
    ! ----------------------------------------
    ! Argument:  int * ncount +hidden+intent(out)
    ! Requested: f_native_*_out
    ! Match:     f_default
    ! Requested: c_native_*_out_buf
    ! Match:     c_default
    ! start get_ptr_to_dynamic_const_array
    subroutine get_ptr_to_dynamic_const_array(count)
        use iso_c_binding, only : C_INT, c_f_pointer
        integer(C_INT), intent(OUT), pointer :: count(:)
        type(SHROUD_array) :: Dcount
        integer(C_INT) :: ncount
        ! splicer begin function.get_ptr_to_dynamic_const_array
        call c_get_ptr_to_dynamic_const_array_bufferify(Dcount, ncount)
        call c_f_pointer(Dcount%base_addr, count, Dcount%shape(1:1))
        ! splicer end function.get_ptr_to_dynamic_const_array
    end subroutine get_ptr_to_dynamic_const_array
    ! end get_ptr_to_dynamic_const_array

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getRawPtrToScalar
    ! void getRawPtrToScalar
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * nitems +deref(raw)+intent(out)
    ! Exact:     f_native_**_out_raw
    ! Argument:  int * * nitems +context(Dnitems)+deref(raw)+intent(out)
    ! Exact:     c_native_**_out_buf
    !>
    !! Called directly via an interface in Fortran.
    !<
    ! start get_raw_ptr_to_scalar
    subroutine get_raw_ptr_to_scalar(nitems)
        use iso_c_binding, only : C_INT, C_PTR
        type(C_PTR), intent(OUT) :: nitems
        ! splicer begin function.get_raw_ptr_to_scalar
        type(SHROUD_array) Dnitems
        call c_get_raw_ptr_to_scalar_bufferify(Dnitems)
        nitems = Dnitems%base_addr
        ! splicer end function.get_raw_ptr_to_scalar
    end subroutine get_raw_ptr_to_scalar
    ! end get_raw_ptr_to_scalar

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getRawPtrToScalarForce
    ! void getRawPtrToScalarForce
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * nitems +deref(raw)+intent(out)
    ! Exact:     f_native_**_out_raw
    ! Argument:  int * * nitems +context(Dnitems)+deref(raw)+intent(out)
    ! Exact:     c_native_**_out_buf
    !>
    !! Create a Fortran wrapper.
    !<
    ! start get_raw_ptr_to_scalar_force
    subroutine get_raw_ptr_to_scalar_force(nitems)
        use iso_c_binding, only : C_INT, C_PTR
        type(C_PTR), intent(OUT) :: nitems
        ! splicer begin function.get_raw_ptr_to_scalar_force
        type(SHROUD_array) Dnitems
        call c_get_raw_ptr_to_scalar_force_bufferify(Dnitems)
        nitems = Dnitems%base_addr
        ! splicer end function.get_raw_ptr_to_scalar_force
    end subroutine get_raw_ptr_to_scalar_force
    ! end get_raw_ptr_to_scalar_force

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getRawPtrToFixedArray
    ! void getRawPtrToFixedArray
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +deref(raw)+intent(out)
    ! Exact:     f_native_**_out_raw
    ! Argument:  int * * count +context(Dcount)+deref(raw)+intent(out)
    ! Exact:     c_native_**_out_buf
    !>
    !! Return a type(C_PTR) to an array which is always the same length.
    !! Called directly via an interface in Fortran.
    !! # Uses +deref(raw) instead of +dimension(10) like getPtrToFixedArray.
    !<
    ! start get_raw_ptr_to_fixed_array
    subroutine get_raw_ptr_to_fixed_array(count)
        use iso_c_binding, only : C_INT, C_PTR
        type(C_PTR), intent(OUT) :: count
        ! splicer begin function.get_raw_ptr_to_fixed_array
        type(SHROUD_array) Dcount
        call c_get_raw_ptr_to_fixed_array_bufferify(Dcount)
        count = Dcount%base_addr
        ! splicer end function.get_raw_ptr_to_fixed_array
    end subroutine get_raw_ptr_to_fixed_array
    ! end get_raw_ptr_to_fixed_array

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void getRawPtrToFixedArrayForce
    ! void getRawPtrToFixedArrayForce
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * * count +deref(raw)+intent(out)
    ! Exact:     f_native_**_out_raw
    ! Argument:  int * * count +context(Dcount)+deref(raw)+intent(out)
    ! Exact:     c_native_**_out_buf
    !>
    !! Return a type(C_PTR) to an array which is always the same length.
    !! Create a Fortran wrapper.
    !<
    ! start get_raw_ptr_to_fixed_array_force
    subroutine get_raw_ptr_to_fixed_array_force(count)
        use iso_c_binding, only : C_INT, C_PTR
        type(C_PTR), intent(OUT) :: count
        ! splicer begin function.get_raw_ptr_to_fixed_array_force
        type(SHROUD_array) Dcount
        call c_get_raw_ptr_to_fixed_array_force_bufferify(Dcount)
        count = Dcount%base_addr
        ! splicer end function.get_raw_ptr_to_fixed_array_force
    end subroutine get_raw_ptr_to_fixed_array_force
    ! end get_raw_ptr_to_fixed_array_force

    ! ----------------------------------------
    ! Function:  void DimensionIn
    ! void DimensionIn
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const int * arg +dimension(10,20)+intent(in)
    ! Requested: f_native_*_in
    ! Match:     f_default
    ! Requested: c_native_*_in
    ! Match:     c_default
    !>
    !! Test +dimension(10,20) +intent(in) together.
    !! This will not use assumed-shape in the Fortran wrapper.
    !<
    ! start dimension_in
    subroutine dimension_in(arg)
        use iso_c_binding, only : C_INT
        integer(C_INT), intent(IN) :: arg(10,20)
        ! splicer begin function.dimension_in
        call c_dimension_in(arg)
        ! splicer end function.dimension_in
    end subroutine dimension_in
    ! end dimension_in

    ! ----------------------------------------
    ! Function:  void * returnAddress2
    ! void * returnAddress2
    ! Exact:     f_void_*_result
    ! Requested: c_void_*_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int flag +intent(in)+value
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start return_address2
    function return_address2(flag) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR
        integer(C_INT), value, intent(IN) :: flag
        type(C_PTR) :: SHT_rv
        ! splicer begin function.return_address2
        SHT_rv = c_return_address2(flag)
        ! splicer end function.return_address2
    end function return_address2
    ! end return_address2

    ! ----------------------------------------
    ! Function:  int * returnIntPtrToScalar +deref(pointer)
    ! int * returnIntPtrToScalar +deref(pointer)
    ! Exact:     f_native_*_result_pointer
    ! Requested: c_native_*_result
    ! Match:     c_default
    ! start return_int_ptr_to_scalar
    function return_int_ptr_to_scalar() &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR, c_f_pointer
        integer(C_INT), pointer :: SHT_rv
        ! splicer begin function.return_int_ptr_to_scalar
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_return_int_ptr_to_scalar()
        call c_f_pointer(SHT_ptr, SHT_rv)
        ! splicer end function.return_int_ptr_to_scalar
    end function return_int_ptr_to_scalar
    ! end return_int_ptr_to_scalar

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  int * returnIntPtrToFixedArray +deref(pointer)+dimension(10)
    ! int * returnIntPtrToFixedArray +deref(pointer)+dimension(10)
    ! Exact:     f_native_*_result_pointer
    ! Function:  int * returnIntPtrToFixedArray +context(DSHC_rv)+deref(pointer)+dimension(10)
    ! Exact:     c_native_*_result_buf
    ! start return_int_ptr_to_fixed_array
    function return_int_ptr_to_fixed_array() &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR, c_f_pointer
        type(SHROUD_array) :: DSHC_rv
        integer(C_INT), pointer :: SHT_rv(:)
        ! splicer begin function.return_int_ptr_to_fixed_array
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_return_int_ptr_to_fixed_array_bufferify(DSHC_rv)
        call c_f_pointer(SHT_ptr, SHT_rv, DSHC_rv%shape(1:1))
        ! splicer end function.return_int_ptr_to_fixed_array
    end function return_int_ptr_to_fixed_array
    ! end return_int_ptr_to_fixed_array

    ! ----------------------------------------
    ! Function:  const int * returnIntPtrToConstScalar +deref(pointer)
    ! const int * returnIntPtrToConstScalar +deref(pointer)
    ! Exact:     f_native_*_result_pointer
    ! Requested: c_native_*_result
    ! Match:     c_default
    ! start return_int_ptr_to_const_scalar
    function return_int_ptr_to_const_scalar() &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR, c_f_pointer
        integer(C_INT), pointer :: SHT_rv
        ! splicer begin function.return_int_ptr_to_const_scalar
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_return_int_ptr_to_const_scalar()
        call c_f_pointer(SHT_ptr, SHT_rv)
        ! splicer end function.return_int_ptr_to_const_scalar
    end function return_int_ptr_to_const_scalar
    ! end return_int_ptr_to_const_scalar

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  const int * returnIntPtrToFixedConstArray +deref(pointer)+dimension(10)
    ! const int * returnIntPtrToFixedConstArray +deref(pointer)+dimension(10)
    ! Exact:     f_native_*_result_pointer
    ! Function:  const int * returnIntPtrToFixedConstArray +context(DSHC_rv)+deref(pointer)+dimension(10)
    ! Exact:     c_native_*_result_buf
    ! start return_int_ptr_to_fixed_const_array
    function return_int_ptr_to_fixed_const_array() &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR, c_f_pointer
        type(SHROUD_array) :: DSHC_rv
        integer(C_INT), pointer :: SHT_rv(:)
        ! splicer begin function.return_int_ptr_to_fixed_const_array
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_return_int_ptr_to_fixed_const_array_bufferify(DSHC_rv)
        call c_f_pointer(SHT_ptr, SHT_rv, DSHC_rv%shape(1:1))
        ! splicer end function.return_int_ptr_to_fixed_const_array
    end function return_int_ptr_to_fixed_const_array
    ! end return_int_ptr_to_fixed_const_array

    ! ----------------------------------------
    ! Function:  int * returnIntRawWithArgs +deref(raw)
    ! int * returnIntRawWithArgs +deref(raw)
    ! Exact:     f_native_*_result_raw
    ! Requested: c_native_*_result
    ! Match:     c_default
    !>
    !! Like returnIntRaw but with another argument to force a wrapper.
    !! Uses fc_statements f_native_*_result_raw.
    !<
    ! start return_int_raw_with_args
    function return_int_raw_with_args(name) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_NULL_CHAR
        character(len=*), intent(IN) :: name
        type(C_PTR) :: SHT_rv
        ! splicer begin function.return_int_raw_with_args
        SHT_rv = c_return_int_raw_with_args(trim(name)//C_NULL_CHAR)
        ! splicer end function.return_int_raw_with_args
    end function return_int_raw_with_args
    ! end return_int_raw_with_args

    ! ----------------------------------------
    ! Function:  int * * returnRawPtrToInt2d +deref(pointer)
    ! int * * returnRawPtrToInt2d +deref(pointer)
    ! Requested: f_native_**_result_pointer
    ! Match:     f_native_**_result
    ! Requested: c_native_**_result
    ! Match:     c_default
    !>
    !! Test multiple layers of indirection.
    !! # getRawPtrToInt2d
    !<
    ! start return_raw_ptr_to_int2d
    function return_raw_ptr_to_int2d() &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        type(C_PTR) :: SHT_rv
        ! splicer begin function.return_raw_ptr_to_int2d
        SHT_rv = c_return_raw_ptr_to_int2d()
        ! splicer end function.return_raw_ptr_to_int2d
    end function return_raw_ptr_to_int2d
    ! end return_raw_ptr_to_int2d

    ! splicer begin additional_functions
    ! splicer end additional_functions

end module pointers_mod

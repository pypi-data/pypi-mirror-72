# def_types.yaml
# This file is generated by Shroud 0.12.1. Do not edit.
# 
# Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and
# other Shroud Project Developers.
# See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (BSD-3-Clause)
# All types predefined by Shroud
typemap:
  - type: MPI_Comm
    fields:
      flat_name: MPI_Comm
      base: unknown
      idtor: 0
      cxx_type: MPI_Comm
      cxx_to_c: MPI_Comm_c2f({cxx_var})
      cxx_header:
      - mpi.h
      c_type: MPI_Fint
      c_header:
      - mpi.h
      c_to_cxx: MPI_Comm_f2c({c_var})
      f_c_module:
        iso_c_binding:
        - C_INT
      f_type: integer
      f_kind: C_INT
      f_c_type: integer(C_INT)
      f_cast: "{f_var}"
      PY_format: O
      LUA_type: LUA_TNONE
      LUA_pop: POP
      LUA_push: PUSH
      sgroup: unknown
      sh_type: SH_TYPE_OTHER
  - type: bool
    fields:
      flat_name: bool
      base: bool
      idtor: 0
      cxx_type: bool
      c_type: bool
      c_header:
      - <stdbool.h>
      f_type: logical
      f_kind: C_BOOL
      f_c_type: logical(C_BOOL)
      f_module:
        iso_c_binding:
        - C_BOOL
      f_cast: "{f_var}"
      PY_format: O
      PY_PyTypeObject: PyBool_Type
      PYN_typenum: NPY_BOOL
      LUA_type: LUA_TBOOLEAN
      LUA_pop: lua_toboolean({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushboolean({LUA_state_var}, {c_var})
      sgroup: bool
      sh_type: SH_TYPE_BOOL
  - type: char
    fields:
      flat_name: char
      base: string
      idtor: 0
      cxx_type: char
      c_type: char
      f_c_module:
        iso_c_binding:
        - C_CHAR
      f_type: character(*)
      f_kind: C_CHAR
      f_c_type: character(kind=C_CHAR)
      f_cast: "{f_var}"
      PY_format: s
      PY_ctor: PyString_FromString({ctor_expr})
      PYN_typenum: NPY_INTP
      LUA_type: LUA_TSTRING
      LUA_pop: lua_tostring({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushstring({LUA_state_var}, {c_var})
      sgroup: char
      sh_type: SH_TYPE_OTHER
  - type: double
    fields:
      flat_name: double
      base: unknown
      idtor: 0
      cxx_type: double
      c_type: double
      f_type: real(C_DOUBLE)
      f_kind: C_DOUBLE
      f_module:
        iso_c_binding:
        - C_DOUBLE
      f_cast: real({f_var}, C_DOUBLE)
      PY_format: d
      PY_ctor: PyFloat_FromDouble({ctor_expr})
      PY_get: PyFloat_AsDouble({py_var})
      PYN_typenum: NPY_DOUBLE
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tonumber({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushnumber({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_DOUBLE
  - type: float
    fields:
      flat_name: float
      base: unknown
      idtor: 0
      cxx_type: float
      c_type: float
      f_type: real(C_FLOAT)
      f_kind: C_FLOAT
      f_module:
        iso_c_binding:
        - C_FLOAT
      f_cast: real({f_var}, C_FLOAT)
      PY_format: f
      PY_ctor: PyFloat_FromDouble({ctor_expr})
      PY_get: PyFloat_AsDouble({py_var})
      PYN_typenum: NPY_FLOAT
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tonumber({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushnumber({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_FLOAT
  - type: int
    fields:
      flat_name: int
      base: unknown
      idtor: 0
      cxx_type: int
      c_type: int
      f_type: integer(C_INT)
      f_kind: C_INT
      f_module:
        iso_c_binding:
        - C_INT
      f_cast: int({f_var}, C_INT)
      PY_format: i
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_INT
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_INT
  - type: int16_t
    fields:
      flat_name: int16_t
      base: unknown
      idtor: 0
      cxx_type: int16_t
      cxx_header:
      - <cstdint>
      c_type: int16_t
      c_header:
      - <stdint.h>
      f_type: integer(C_INT16_T)
      f_kind: C_INT16_T
      f_module:
        iso_c_binding:
        - C_INT16_T
      f_cast: int({f_var}, C_INT16_t)
      PY_format: i
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_INT16
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_INT16_T
  - type: int32_t
    fields:
      flat_name: int32_t
      base: unknown
      idtor: 0
      cxx_type: int32_t
      cxx_header:
      - <cstdint>
      c_type: int32_t
      c_header:
      - <stdint.h>
      f_type: integer(C_INT32_T)
      f_kind: C_INT32_T
      f_module:
        iso_c_binding:
        - C_INT32_T
      f_cast: int({f_var}, C_INT32_t)
      PY_format: i
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_INT32
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_INT32_T
  - type: int64_t
    fields:
      flat_name: int64_t
      base: unknown
      idtor: 0
      cxx_type: int64_t
      cxx_header:
      - <cstdint>
      c_type: int64_t
      c_header:
      - <stdint.h>
      f_type: integer(C_INT64_T)
      f_kind: C_INT64_T
      f_module:
        iso_c_binding:
        - C_INT64_T
      f_cast: int({f_var}, C_INT64_t)
      PY_format: L
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_INT64
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_INT64_T
  - type: int8_t
    fields:
      flat_name: int8_t
      base: unknown
      idtor: 0
      cxx_type: int8_t
      cxx_header:
      - <cstdint>
      c_type: int8_t
      c_header:
      - <stdint.h>
      f_type: integer(C_INT8_T)
      f_kind: C_INT8_T
      f_module:
        iso_c_binding:
        - C_INT8_T
      f_cast: int({f_var}, C_INT8_t)
      PY_format: i
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_INT8
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_INT8_T
  - type: long
    fields:
      flat_name: long
      base: unknown
      idtor: 0
      cxx_type: long
      c_type: long
      f_type: integer(C_LONG)
      f_kind: C_LONG
      f_module:
        iso_c_binding:
        - C_LONG
      f_cast: int({f_var}, C_LONG)
      PY_format: l
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_LONG
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_LONG
  - type: long_long
    fields:
      flat_name: long_long
      base: unknown
      idtor: 0
      cxx_type: long long
      c_type: long long
      f_type: integer(C_LONG_LONG)
      f_kind: C_LONG_LONG
      f_module:
        iso_c_binding:
        - C_LONG_LONG
      f_cast: int({f_var}, C_LONG_LONG)
      PY_format: L
      PYN_typenum: NPY_LONGLONG
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_LONG_LONG
  - type: short
    fields:
      flat_name: short
      base: unknown
      idtor: 0
      cxx_type: short
      c_type: short
      f_type: integer(C_SHORT)
      f_kind: C_SHORT
      f_module:
        iso_c_binding:
        - C_SHORT
      f_cast: int({f_var}, C_SHORT)
      PY_format: h
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_SHORT
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_SHORT
  - type: size_t
    fields:
      flat_name: size_t
      base: unknown
      idtor: 0
      cxx_type: size_t
      cxx_header:
      - <cstddef>
      c_type: size_t
      c_header:
      - <stddef.h>
      f_type: integer(C_SIZE_T)
      f_kind: C_SIZE_T
      f_module:
        iso_c_binding:
        - C_SIZE_T
      f_cast: int({f_var}, C_SIZE_T)
      PY_format: n
      PY_ctor: PyInt_FromSize_t({ctor_expr})
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_SIZE_T
  - type: std::string
    fields:
      flat_name: std_string
      base: string
      idtor: 0
      cxx_type: std::string
      cxx_to_c: "{cxx_var}{cxx_member}c_str()"
      c_type: char
      f_c_module:
        iso_c_binding:
        - C_CHAR
      f_type: character(*)
      f_kind: C_CHAR
      f_c_type: character(kind=C_CHAR)
      f_cast: "{f_var}"
      impl_header:
      - <string>
      PY_format: s
      PY_ctor: PyString_FromStringAndSize({ctor_expr})
      PY_build_arg: "{cxx_var}{cxx_member}data(), {cxx_var}{cxx_member}size()"
      PY_build_format: s#
      LUA_type: LUA_TSTRING
      LUA_pop: lua_tostring({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushstring({LUA_state_var}, {c_var})
      sgroup: string
      sh_type: SH_TYPE_OTHER
  - type: std::vector
    fields:
      flat_name: std_vector_{cxx_T}
      base: vector
      idtor: 0
      cxx_type: std::vector<{cxx_T}>
      cxx_header:
      - <vector>
      f_cast: "{f_var}"
      PY_format: O
      LUA_type: LUA_TNONE
      LUA_pop: POP
      LUA_push: PUSH
      sgroup: vector
      sh_type: SH_TYPE_OTHER
  - type: uint16_t
    fields:
      flat_name: uint16_t
      base: unknown
      idtor: 0
      cxx_type: uint16_t
      cxx_header:
      - <cstdint>
      c_type: uint16_t
      c_header:
      - <stdint.h>
      f_type: integer(C_INT16_T)
      f_kind: C_INT16_T
      f_module:
        iso_c_binding:
        - C_INT16_T
      f_cast: int({f_var}, C_INT16_t)
      PY_format: i
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_UINT16
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_UINT16_T
  - type: uint32_t
    fields:
      flat_name: uint32_t
      base: unknown
      idtor: 0
      cxx_type: uint32_t
      cxx_header:
      - <cstdint>
      c_type: uint32_t
      c_header:
      - <stdint.h>
      f_type: integer(C_INT32_T)
      f_kind: C_INT32_T
      f_module:
        iso_c_binding:
        - C_INT32_T
      f_cast: int({f_var}, C_INT32_t)
      PY_format: i
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_UINT32
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_UINT32_T
  - type: uint64_t
    fields:
      flat_name: uint64_t
      base: unknown
      idtor: 0
      cxx_type: uint64_t
      cxx_header:
      - <cstdint>
      c_type: uint64_t
      c_header:
      - <stdint.h>
      f_type: integer(C_INT64_T)
      f_kind: C_INT64_T
      f_module:
        iso_c_binding:
        - C_INT64_T
      f_cast: int({f_var}, C_INT64_t)
      PY_format: L
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_UINT64
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_UINT64_T
  - type: uint8_t
    fields:
      flat_name: uint8_t
      base: unknown
      idtor: 0
      cxx_type: uint8_t
      cxx_header:
      - <cstdint>
      c_type: uint8_t
      c_header:
      - <stdint.h>
      f_type: integer(C_INT8_T)
      f_kind: C_INT8_T
      f_module:
        iso_c_binding:
        - C_INT8_T
      f_cast: int({f_var}, C_INT8_t)
      PY_format: i
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_UINT8
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_UINT8_T
  - type: unsigned_int
    fields:
      flat_name: unsigned_int
      base: unknown
      idtor: 0
      cxx_type: unsigned int
      c_type: unsigned int
      f_type: integer(C_INT)
      f_kind: C_INT
      f_module:
        iso_c_binding:
        - C_INT
      f_cast: int({f_var}, C_INT)
      PY_format: i
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_INT
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_UNSIGNED_INT
  - type: unsigned_long
    fields:
      flat_name: unsigned_long
      base: unknown
      idtor: 0
      cxx_type: unsigned long
      c_type: unsigned long
      f_type: integer(C_LONG)
      f_kind: C_LONG
      f_module:
        iso_c_binding:
        - C_LONG
      f_cast: int({f_var}, C_LONG)
      PY_format: l
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_LONG
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_UNSIGNED_LONG
  - type: unsigned_long_long
    fields:
      flat_name: unsigned_long_long
      base: unknown
      idtor: 0
      cxx_type: unsigned long long
      c_type: unsigned long long
      f_type: integer(C_LONG_LONG)
      f_kind: C_LONG_LONG
      f_module:
        iso_c_binding:
        - C_LONG_LONG
      f_cast: int({f_var}, C_LONG_LONG)
      PY_format: L
      PYN_typenum: NPY_LONGLONG
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_UNSIGNED_LONG_LONG
  - type: unsigned_short
    fields:
      flat_name: unsigned_short
      base: unknown
      idtor: 0
      cxx_type: unsigned short
      c_type: unsigned short
      f_type: integer(C_SHORT)
      f_kind: C_SHORT
      f_module:
        iso_c_binding:
        - C_SHORT
      f_cast: int({f_var}, C_SHORT)
      PY_format: h
      PY_ctor: PyInt_FromLong({ctor_expr})
      PY_get: PyInt_AsLong({py_var})
      PYN_typenum: NPY_SHORT
      LUA_type: LUA_TNUMBER
      LUA_pop: lua_tointeger({LUA_state_var}, {LUA_index})
      LUA_push: lua_pushinteger({LUA_state_var}, {c_var})
      sgroup: native
      sh_type: SH_TYPE_UNSIGNED_SHORT
  - type: void
    fields:
      flat_name: void
      base: void
      idtor: 0
      cxx_type: void
      c_type: void
      f_c_module:
        iso_c_binding:
        - C_PTR
      f_type: type(C_PTR)
      f_cast: "{f_var}"
      PY_format: O
      PY_ctor: PyCapsule_New({ctor_expr}, NULL, NULL)
      LUA_type: LUA_TNONE
      LUA_pop: POP
      LUA_push: PUSH
      sgroup: void
      sh_type: SH_TYPE_CPTR

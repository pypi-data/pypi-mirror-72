/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#ifndef PyVarObject_HEAD_INIT
#define PyVarObject_HEAD_INIT(type, size) \
        PyObject_HEAD_INIT(type) size,
#endif


#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03050000
typedef PyAsyncMethods* cmpfunc;
#else
typedef void* cmpfunc;
#endif
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "strings.hpp"
/* --- module functions --- */


PyObject *
_wrap_strings_returnStrings()
{
    PyObject *py_retval;
    const char *arg1 = NULL;
    Py_ssize_t arg1_len;
    std::string arg1_std;
    const char *arg2 = NULL;
    Py_ssize_t arg2_len;
    std::string arg2_std;

    returnStrings(arg1_std, arg2_std);
    py_retval = Py_BuildValue((char *) "s#s#", (arg1_std).c_str(), (arg1_std).size(), (arg2_std).c_str(), (arg2_std).size());
    return py_retval;
}
PyObject * _wrap_strings_returnStrings();


PyObject *
_wrap_strings_getConstStringAlloc()
{
    PyObject *py_retval;
    std::string retval;

    retval = getConstStringAlloc();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}
PyObject * _wrap_strings_getConstStringAlloc();


PyObject *
_wrap_strings_passChar(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char status;
    const char *keywords[] = {"status", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "c", (char **) keywords, &status)) {
        return NULL;
    }
    passChar(status);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_strings_passChar(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_strings_returnChar()
{
    PyObject *py_retval;
    char retval;

    retval = returnChar();
    py_retval = Py_BuildValue((char *) "c", (int) retval);
    return py_retval;
}
PyObject * _wrap_strings_returnChar();


PyObject *
_wrap_strings_getConstStringRefAlloc()
{
    PyObject *py_retval;
    std::string const retval;

    retval = getConstStringRefAlloc();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}
PyObject * _wrap_strings_getConstStringRefAlloc();

static PyMethodDef strings_functions[] = {
    {(char *) "returnStrings", (PyCFunction) _wrap_strings_returnStrings, METH_NOARGS, "returnStrings(arg1, arg2)\n\ntype: arg1: std::string &\ntype: arg2: std::string &" },
    {(char *) "getConstStringAlloc", (PyCFunction) _wrap_strings_getConstStringAlloc, METH_NOARGS, "getConstStringAlloc()\n\n" },
    {(char *) "passChar", (PyCFunction) _wrap_strings_passChar, METH_KEYWORDS|METH_VARARGS, "passChar(status)\n\ntype: status: char" },
    {(char *) "returnChar", (PyCFunction) _wrap_strings_returnChar, METH_NOARGS, "returnChar()\n\n" },
    {(char *) "getConstStringRefAlloc", (PyCFunction) _wrap_strings_getConstStringRefAlloc, METH_NOARGS, "getConstStringRefAlloc()\n\n" },
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef strings_moduledef = {
    PyModuleDef_HEAD_INIT,
    "strings",
    NULL,
    -1,
    strings_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(strings)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&strings_moduledef);
    #else
    m = Py_InitModule3((char *) "strings", strings_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    return MOD_RETURN(m);
}

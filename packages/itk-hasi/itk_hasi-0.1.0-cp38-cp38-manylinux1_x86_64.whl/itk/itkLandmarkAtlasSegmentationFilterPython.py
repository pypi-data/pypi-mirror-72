# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLandmarkAtlasSegmentationFilterPython
else:
    import _itkLandmarkAtlasSegmentationFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLandmarkAtlasSegmentationFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLandmarkAtlasSegmentationFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkVersorRigid3DTransformPython
import itk.itkVersorTransformPython
import itk.itkVersorPython
import itk.itkRigid3DTransformPython
import itk.itkCompositeTransformPython
import itk.itkMultiTransformPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkLandmarkAtlasSegmentationFilterID3ID3_New():
    return itkLandmarkAtlasSegmentationFilterID3ID3.New()

class itkLandmarkAtlasSegmentationFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkLandmarkAtlasSegmentationFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_Clone)
    SetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_SetInputLabels)
    GetModifiableInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetModifiableInputLabels)
    GetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetInputLabels)
    SetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_SetAtlasLabels)
    GetModifiableAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetModifiableAtlasLabels)
    GetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetAtlasLabels)
    SetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_SetInputLandmarks)
    GetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetInputLandmarks)
    SetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_SetAtlasLandmarks)
    GetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetAtlasLandmarks)
    GetLandmarksTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetLandmarksTransform)
    GetRigidTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetRigidTransform)
    GetAffineTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetAffineTransform)
    GetFinalTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetFinalTransform)
    SetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_SetStopAtAffine)
    GetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_GetStopAtAffine)
    StopAtAffineOn = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_StopAtAffineOn)
    StopAtAffineOff = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_StopAtAffineOff)
    __swig_destroy__ = _itkLandmarkAtlasSegmentationFilterPython.delete_itkLandmarkAtlasSegmentationFilterID3ID3
    cast = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkAtlasSegmentationFilterID3ID3

        Create a new object of the class itkLandmarkAtlasSegmentationFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkAtlasSegmentationFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkAtlasSegmentationFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkAtlasSegmentationFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkAtlasSegmentationFilterID3ID3 in _itkLandmarkAtlasSegmentationFilterPython:
_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_swigregister(itkLandmarkAtlasSegmentationFilterID3ID3)
itkLandmarkAtlasSegmentationFilterID3ID3___New_orig__ = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3___New_orig__
itkLandmarkAtlasSegmentationFilterID3ID3_cast = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterID3ID3_cast


def itkLandmarkAtlasSegmentationFilterIF3IF3_New():
    return itkLandmarkAtlasSegmentationFilterIF3IF3.New()

class itkLandmarkAtlasSegmentationFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkLandmarkAtlasSegmentationFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_Clone)
    SetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_SetInputLabels)
    GetModifiableInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetModifiableInputLabels)
    GetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetInputLabels)
    SetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_SetAtlasLabels)
    GetModifiableAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetModifiableAtlasLabels)
    GetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetAtlasLabels)
    SetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_SetInputLandmarks)
    GetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetInputLandmarks)
    SetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_SetAtlasLandmarks)
    GetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetAtlasLandmarks)
    GetLandmarksTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetLandmarksTransform)
    GetRigidTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetRigidTransform)
    GetAffineTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetAffineTransform)
    GetFinalTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetFinalTransform)
    SetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_SetStopAtAffine)
    GetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_GetStopAtAffine)
    StopAtAffineOn = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_StopAtAffineOn)
    StopAtAffineOff = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_StopAtAffineOff)
    __swig_destroy__ = _itkLandmarkAtlasSegmentationFilterPython.delete_itkLandmarkAtlasSegmentationFilterIF3IF3
    cast = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkAtlasSegmentationFilterIF3IF3

        Create a new object of the class itkLandmarkAtlasSegmentationFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkAtlasSegmentationFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkAtlasSegmentationFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkAtlasSegmentationFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkAtlasSegmentationFilterIF3IF3 in _itkLandmarkAtlasSegmentationFilterPython:
_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_swigregister(itkLandmarkAtlasSegmentationFilterIF3IF3)
itkLandmarkAtlasSegmentationFilterIF3IF3___New_orig__ = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3___New_orig__
itkLandmarkAtlasSegmentationFilterIF3IF3_cast = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIF3IF3_cast


def itkLandmarkAtlasSegmentationFilterISS3ID3_New():
    return itkLandmarkAtlasSegmentationFilterISS3ID3.New()

class itkLandmarkAtlasSegmentationFilterISS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3):
    r"""Proxy of C++ itkLandmarkAtlasSegmentationFilterISS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_Clone)
    SetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_SetInputLabels)
    GetModifiableInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetModifiableInputLabels)
    GetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetInputLabels)
    SetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_SetAtlasLabels)
    GetModifiableAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetModifiableAtlasLabels)
    GetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetAtlasLabels)
    SetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_SetInputLandmarks)
    GetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetInputLandmarks)
    SetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_SetAtlasLandmarks)
    GetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetAtlasLandmarks)
    GetLandmarksTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetLandmarksTransform)
    GetRigidTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetRigidTransform)
    GetAffineTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetAffineTransform)
    GetFinalTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetFinalTransform)
    SetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_SetStopAtAffine)
    GetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_GetStopAtAffine)
    StopAtAffineOn = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_StopAtAffineOn)
    StopAtAffineOff = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_StopAtAffineOff)
    __swig_destroy__ = _itkLandmarkAtlasSegmentationFilterPython.delete_itkLandmarkAtlasSegmentationFilterISS3ID3
    cast = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkAtlasSegmentationFilterISS3ID3

        Create a new object of the class itkLandmarkAtlasSegmentationFilterISS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkAtlasSegmentationFilterISS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkAtlasSegmentationFilterISS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkAtlasSegmentationFilterISS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkAtlasSegmentationFilterISS3ID3 in _itkLandmarkAtlasSegmentationFilterPython:
_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_swigregister(itkLandmarkAtlasSegmentationFilterISS3ID3)
itkLandmarkAtlasSegmentationFilterISS3ID3___New_orig__ = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3___New_orig__
itkLandmarkAtlasSegmentationFilterISS3ID3_cast = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ID3_cast


def itkLandmarkAtlasSegmentationFilterISS3IF3_New():
    return itkLandmarkAtlasSegmentationFilterISS3IF3.New()

class itkLandmarkAtlasSegmentationFilterISS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3):
    r"""Proxy of C++ itkLandmarkAtlasSegmentationFilterISS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_Clone)
    SetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_SetInputLabels)
    GetModifiableInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetModifiableInputLabels)
    GetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetInputLabels)
    SetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_SetAtlasLabels)
    GetModifiableAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetModifiableAtlasLabels)
    GetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetAtlasLabels)
    SetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_SetInputLandmarks)
    GetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetInputLandmarks)
    SetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_SetAtlasLandmarks)
    GetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetAtlasLandmarks)
    GetLandmarksTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetLandmarksTransform)
    GetRigidTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetRigidTransform)
    GetAffineTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetAffineTransform)
    GetFinalTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetFinalTransform)
    SetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_SetStopAtAffine)
    GetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_GetStopAtAffine)
    StopAtAffineOn = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_StopAtAffineOn)
    StopAtAffineOff = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_StopAtAffineOff)
    __swig_destroy__ = _itkLandmarkAtlasSegmentationFilterPython.delete_itkLandmarkAtlasSegmentationFilterISS3IF3
    cast = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkAtlasSegmentationFilterISS3IF3

        Create a new object of the class itkLandmarkAtlasSegmentationFilterISS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkAtlasSegmentationFilterISS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkAtlasSegmentationFilterISS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkAtlasSegmentationFilterISS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkAtlasSegmentationFilterISS3IF3 in _itkLandmarkAtlasSegmentationFilterPython:
_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_swigregister(itkLandmarkAtlasSegmentationFilterISS3IF3)
itkLandmarkAtlasSegmentationFilterISS3IF3___New_orig__ = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3___New_orig__
itkLandmarkAtlasSegmentationFilterISS3IF3_cast = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IF3_cast


def itkLandmarkAtlasSegmentationFilterISS3ISS3_New():
    return itkLandmarkAtlasSegmentationFilterISS3ISS3.New()

class itkLandmarkAtlasSegmentationFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkLandmarkAtlasSegmentationFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_Clone)
    SetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_SetInputLabels)
    GetModifiableInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetModifiableInputLabels)
    GetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetInputLabels)
    SetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_SetAtlasLabels)
    GetModifiableAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetModifiableAtlasLabels)
    GetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetAtlasLabels)
    SetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_SetInputLandmarks)
    GetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetInputLandmarks)
    SetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_SetAtlasLandmarks)
    GetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetAtlasLandmarks)
    GetLandmarksTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetLandmarksTransform)
    GetRigidTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetRigidTransform)
    GetAffineTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetAffineTransform)
    GetFinalTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetFinalTransform)
    SetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_SetStopAtAffine)
    GetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_GetStopAtAffine)
    StopAtAffineOn = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_StopAtAffineOn)
    StopAtAffineOff = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_StopAtAffineOff)
    __swig_destroy__ = _itkLandmarkAtlasSegmentationFilterPython.delete_itkLandmarkAtlasSegmentationFilterISS3ISS3
    cast = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkAtlasSegmentationFilterISS3ISS3

        Create a new object of the class itkLandmarkAtlasSegmentationFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkAtlasSegmentationFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkAtlasSegmentationFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkAtlasSegmentationFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkAtlasSegmentationFilterISS3ISS3 in _itkLandmarkAtlasSegmentationFilterPython:
_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_swigregister(itkLandmarkAtlasSegmentationFilterISS3ISS3)
itkLandmarkAtlasSegmentationFilterISS3ISS3___New_orig__ = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3___New_orig__
itkLandmarkAtlasSegmentationFilterISS3ISS3_cast = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3ISS3_cast


def itkLandmarkAtlasSegmentationFilterISS3IUC3_New():
    return itkLandmarkAtlasSegmentationFilterISS3IUC3.New()

class itkLandmarkAtlasSegmentationFilterISS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3):
    r"""Proxy of C++ itkLandmarkAtlasSegmentationFilterISS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_Clone)
    SetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_SetInputLabels)
    GetModifiableInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetModifiableInputLabels)
    GetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetInputLabels)
    SetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_SetAtlasLabels)
    GetModifiableAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetModifiableAtlasLabels)
    GetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetAtlasLabels)
    SetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_SetInputLandmarks)
    GetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetInputLandmarks)
    SetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_SetAtlasLandmarks)
    GetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetAtlasLandmarks)
    GetLandmarksTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetLandmarksTransform)
    GetRigidTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetRigidTransform)
    GetAffineTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetAffineTransform)
    GetFinalTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetFinalTransform)
    SetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_SetStopAtAffine)
    GetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_GetStopAtAffine)
    StopAtAffineOn = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_StopAtAffineOn)
    StopAtAffineOff = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_StopAtAffineOff)
    __swig_destroy__ = _itkLandmarkAtlasSegmentationFilterPython.delete_itkLandmarkAtlasSegmentationFilterISS3IUC3
    cast = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkAtlasSegmentationFilterISS3IUC3

        Create a new object of the class itkLandmarkAtlasSegmentationFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkAtlasSegmentationFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkAtlasSegmentationFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkAtlasSegmentationFilterISS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkAtlasSegmentationFilterISS3IUC3 in _itkLandmarkAtlasSegmentationFilterPython:
_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_swigregister(itkLandmarkAtlasSegmentationFilterISS3IUC3)
itkLandmarkAtlasSegmentationFilterISS3IUC3___New_orig__ = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3___New_orig__
itkLandmarkAtlasSegmentationFilterISS3IUC3_cast = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUC3_cast


def itkLandmarkAtlasSegmentationFilterISS3IUS3_New():
    return itkLandmarkAtlasSegmentationFilterISS3IUS3.New()

class itkLandmarkAtlasSegmentationFilterISS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3):
    r"""Proxy of C++ itkLandmarkAtlasSegmentationFilterISS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_Clone)
    SetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_SetInputLabels)
    GetModifiableInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetModifiableInputLabels)
    GetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetInputLabels)
    SetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_SetAtlasLabels)
    GetModifiableAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetModifiableAtlasLabels)
    GetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetAtlasLabels)
    SetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_SetInputLandmarks)
    GetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetInputLandmarks)
    SetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_SetAtlasLandmarks)
    GetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetAtlasLandmarks)
    GetLandmarksTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetLandmarksTransform)
    GetRigidTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetRigidTransform)
    GetAffineTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetAffineTransform)
    GetFinalTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetFinalTransform)
    SetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_SetStopAtAffine)
    GetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_GetStopAtAffine)
    StopAtAffineOn = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_StopAtAffineOn)
    StopAtAffineOff = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_StopAtAffineOff)
    __swig_destroy__ = _itkLandmarkAtlasSegmentationFilterPython.delete_itkLandmarkAtlasSegmentationFilterISS3IUS3
    cast = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkAtlasSegmentationFilterISS3IUS3

        Create a new object of the class itkLandmarkAtlasSegmentationFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkAtlasSegmentationFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkAtlasSegmentationFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkAtlasSegmentationFilterISS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkAtlasSegmentationFilterISS3IUS3 in _itkLandmarkAtlasSegmentationFilterPython:
_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_swigregister(itkLandmarkAtlasSegmentationFilterISS3IUS3)
itkLandmarkAtlasSegmentationFilterISS3IUS3___New_orig__ = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3___New_orig__
itkLandmarkAtlasSegmentationFilterISS3IUS3_cast = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterISS3IUS3_cast


def itkLandmarkAtlasSegmentationFilterIUC3IUC3_New():
    return itkLandmarkAtlasSegmentationFilterIUC3IUC3.New()

class itkLandmarkAtlasSegmentationFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkLandmarkAtlasSegmentationFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_Clone)
    SetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_SetInputLabels)
    GetModifiableInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetModifiableInputLabels)
    GetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetInputLabels)
    SetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_SetAtlasLabels)
    GetModifiableAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetModifiableAtlasLabels)
    GetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetAtlasLabels)
    SetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_SetInputLandmarks)
    GetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetInputLandmarks)
    SetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_SetAtlasLandmarks)
    GetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetAtlasLandmarks)
    GetLandmarksTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetLandmarksTransform)
    GetRigidTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetRigidTransform)
    GetAffineTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetAffineTransform)
    GetFinalTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetFinalTransform)
    SetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_SetStopAtAffine)
    GetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_GetStopAtAffine)
    StopAtAffineOn = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_StopAtAffineOn)
    StopAtAffineOff = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_StopAtAffineOff)
    __swig_destroy__ = _itkLandmarkAtlasSegmentationFilterPython.delete_itkLandmarkAtlasSegmentationFilterIUC3IUC3
    cast = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkAtlasSegmentationFilterIUC3IUC3

        Create a new object of the class itkLandmarkAtlasSegmentationFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkAtlasSegmentationFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkAtlasSegmentationFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkAtlasSegmentationFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkAtlasSegmentationFilterIUC3IUC3 in _itkLandmarkAtlasSegmentationFilterPython:
_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_swigregister(itkLandmarkAtlasSegmentationFilterIUC3IUC3)
itkLandmarkAtlasSegmentationFilterIUC3IUC3___New_orig__ = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3___New_orig__
itkLandmarkAtlasSegmentationFilterIUC3IUC3_cast = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUC3IUC3_cast


def itkLandmarkAtlasSegmentationFilterIUS3IUS3_New():
    return itkLandmarkAtlasSegmentationFilterIUS3IUS3.New()

class itkLandmarkAtlasSegmentationFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkLandmarkAtlasSegmentationFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_Clone)
    SetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_SetInputLabels)
    GetModifiableInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetModifiableInputLabels)
    GetInputLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetInputLabels)
    SetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_SetAtlasLabels)
    GetModifiableAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetModifiableAtlasLabels)
    GetAtlasLabels = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetAtlasLabels)
    SetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_SetInputLandmarks)
    GetInputLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetInputLandmarks)
    SetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_SetAtlasLandmarks)
    GetAtlasLandmarks = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetAtlasLandmarks)
    GetLandmarksTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetLandmarksTransform)
    GetRigidTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetRigidTransform)
    GetAffineTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetAffineTransform)
    GetFinalTransform = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetFinalTransform)
    SetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_SetStopAtAffine)
    GetStopAtAffine = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_GetStopAtAffine)
    StopAtAffineOn = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_StopAtAffineOn)
    StopAtAffineOff = _swig_new_instance_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_StopAtAffineOff)
    __swig_destroy__ = _itkLandmarkAtlasSegmentationFilterPython.delete_itkLandmarkAtlasSegmentationFilterIUS3IUS3
    cast = _swig_new_static_method(_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkAtlasSegmentationFilterIUS3IUS3

        Create a new object of the class itkLandmarkAtlasSegmentationFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkAtlasSegmentationFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkAtlasSegmentationFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkAtlasSegmentationFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkAtlasSegmentationFilterIUS3IUS3 in _itkLandmarkAtlasSegmentationFilterPython:
_itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_swigregister(itkLandmarkAtlasSegmentationFilterIUS3IUS3)
itkLandmarkAtlasSegmentationFilterIUS3IUS3___New_orig__ = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3___New_orig__
itkLandmarkAtlasSegmentationFilterIUS3IUS3_cast = _itkLandmarkAtlasSegmentationFilterPython.itkLandmarkAtlasSegmentationFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def landmark_atlas_segmentation_filter(*args, **kwargs):
    """Procedural interface for LandmarkAtlasSegmentationFilter"""
    import itk
    instance = itk.LandmarkAtlasSegmentationFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def landmark_atlas_segmentation_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LandmarkAtlasSegmentationFilter, itkTemplate.itkTemplate):
        filter_object = itk.LandmarkAtlasSegmentationFilter.values()[0]
    else:
        filter_object = itk.LandmarkAtlasSegmentationFilter

    landmark_atlas_segmentation_filter.__doc__ = filter_object.__doc__
    landmark_atlas_segmentation_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    landmark_atlas_segmentation_filter.__doc__ += "Available Keyword Arguments:\n"
    landmark_atlas_segmentation_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])




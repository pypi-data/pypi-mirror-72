# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Blstats(object):
    __slots__ = ['_tab']

    # Blstats
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Blstats
    def CursX(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Blstats
    def CursY(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # Blstats
    def StrengthPercentage(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # Blstats
    def Strength(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # Blstats
    def Dexterity(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # Blstats
    def Constitution(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(20))
    # Blstats
    def Intelligence(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))
    # Blstats
    def Wisdom(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(28))
    # Blstats
    def Charisma(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(32))
    # Blstats
    def Score(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(36))
    # Blstats
    def Hitpoints(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(40))
    # Blstats
    def MaxHitpoints(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(44))
    # Blstats
    def Depth(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(48))
    # Blstats
    def Gold(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(52))
    # Blstats
    def Energy(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(56))
    # Blstats
    def MaxEnergy(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(60))
    # Blstats
    def ArmorClass(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(64))
    # Blstats
    def MonsterLevel(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(68))
    # Blstats
    def ExperienceLevel(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(72))
    # Blstats
    def ExperiencePoints(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(76))
    # Blstats
    def Time(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(80))
    # Blstats
    def HungerState(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(84))
    # Blstats
    def CarryingCapacity(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(88))

def CreateBlstats(builder, cursX, cursY, strengthPercentage, strength, dexterity, constitution, intelligence, wisdom, charisma, score, hitpoints, maxHitpoints, depth, gold, energy, maxEnergy, armorClass, monsterLevel, experienceLevel, experiencePoints, time, hungerState, carryingCapacity):
    builder.Prep(4, 92)
    builder.PrependInt32(carryingCapacity)
    builder.PrependInt32(hungerState)
    builder.PrependInt32(time)
    builder.PrependInt32(experiencePoints)
    builder.PrependInt32(experienceLevel)
    builder.PrependInt32(monsterLevel)
    builder.PrependInt32(armorClass)
    builder.PrependInt32(maxEnergy)
    builder.PrependInt32(energy)
    builder.PrependInt32(gold)
    builder.PrependInt32(depth)
    builder.PrependInt32(maxHitpoints)
    builder.PrependInt32(hitpoints)
    builder.PrependInt32(score)
    builder.PrependInt32(charisma)
    builder.PrependInt32(wisdom)
    builder.PrependInt32(intelligence)
    builder.PrependInt32(constitution)
    builder.PrependInt32(dexterity)
    builder.PrependInt32(strength)
    builder.PrependInt32(strengthPercentage)
    builder.PrependInt32(cursY)
    builder.PrependInt32(cursX)
    return builder.Offset()

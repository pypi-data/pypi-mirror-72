# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Dashboard(pulumi.CustomResource):
    dashboard_url: pulumi.Output[str]
    """
    The URL for viewing the dashboard.
    """
    editable: pulumi.Output[str]
    """
    Determines who can edit the dashboard in an account. Valid values are `all`,  `editable_by_all`, `editable_by_owner`, or `read_only`.  Defaults to `editable_by_all`.
    """
    filter: pulumi.Output[dict]
    """
    A nested block that describes a dashboard filter.  Exactly one nested `filter` block is allowed. See Nested filter block below for details.

      * `attributes` (`list`)
      * `eventTypes` (`list`)
    """
    grid_column_count: pulumi.Output[float]
    """
    The number of columns to use when organizing and displaying widgets. New Relic One supports a 3 column grid and a 12 column grid. New Relic Insights supports a 3 column grid.
    """
    icon: pulumi.Output[str]
    """
    The icon for the dashboard.  Valid values are `adjust`, `archive`, `bar-chart`, `bell`, `bolt`, `bug`, `bullhorn`, `bullseye`, `clock-o`, `cloud`, `cog`, `comments-o`, `crosshairs`, `dashboard`, `envelope`, `fire`, `flag`, `flask`, `globe`, `heart`, `leaf`, `legal`, `life-ring`, `line-chart`, `magic`, `mobile`, `money`, `none`, `paper-plane`, `pie-chart`, `puzzle-piece`, `road`, `rocket`, `shopping-cart`, `sitemap`, `sliders`, `tablet`, `thumbs-down`, `thumbs-up`, `trophy`, `usd`, `user`, and `users`.  Defaults to `bar-chart`.
    """
    title: pulumi.Output[str]
    """
    The title of the dashboard.
    """
    visibility: pulumi.Output[str]
    """
    Determines who can see the dashboard in an account. Valid values are `all` or `owner`.  Defaults to `all`.
    """
    widgets: pulumi.Output[list]
    """
    A nested block that describes a visualization.  Up to 300 `widget` blocks are allowed in a dashboard definition.  See Nested widget blocks below for details.

      * `column` (`float`)
      * `compareWiths` (`list`)
        * `offsetDuration` (`str`)
        * `presentation` (`dict`)
          * `color` (`str`)
          * `name` (`str`)

      * `drilldownDashboardId` (`float`)
      * `duration` (`float`)
      * `endTime` (`float`)
      * `entityIds` (`list`)
      * `facet` (`str`)
      * `height` (`float`)
      * `limit` (`float`)
      * `metrics` (`list`)
        * `name` (`str`)
        * `scope` (`str`)
        * `units` (`str`)
        * `values` (`list`)

      * `notes` (`str`)
      * `nrql` (`str`)
      * `orderBy` (`str`)
      * `rawMetricName` (`str`)
      * `row` (`float`)
      * `source` (`str`)
      * `thresholdRed` (`float`)
      * `thresholdYellow` (`float`)
      * `title` (`str`) - The title of the dashboard.
      * `visualization` (`str`)
      * `widgetId` (`float`)
      * `width` (`float`)
    """
    def __init__(__self__, resource_name, opts=None, editable=None, filter=None, grid_column_count=None, icon=None, title=None, visibility=None, widgets=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Dashboard resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] editable: Determines who can edit the dashboard in an account. Valid values are `all`,  `editable_by_all`, `editable_by_owner`, or `read_only`.  Defaults to `editable_by_all`.
        :param pulumi.Input[dict] filter: A nested block that describes a dashboard filter.  Exactly one nested `filter` block is allowed. See Nested filter block below for details.
        :param pulumi.Input[float] grid_column_count: The number of columns to use when organizing and displaying widgets. New Relic One supports a 3 column grid and a 12 column grid. New Relic Insights supports a 3 column grid.
        :param pulumi.Input[str] icon: The icon for the dashboard.  Valid values are `adjust`, `archive`, `bar-chart`, `bell`, `bolt`, `bug`, `bullhorn`, `bullseye`, `clock-o`, `cloud`, `cog`, `comments-o`, `crosshairs`, `dashboard`, `envelope`, `fire`, `flag`, `flask`, `globe`, `heart`, `leaf`, `legal`, `life-ring`, `line-chart`, `magic`, `mobile`, `money`, `none`, `paper-plane`, `pie-chart`, `puzzle-piece`, `road`, `rocket`, `shopping-cart`, `sitemap`, `sliders`, `tablet`, `thumbs-down`, `thumbs-up`, `trophy`, `usd`, `user`, and `users`.  Defaults to `bar-chart`.
        :param pulumi.Input[str] title: The title of the dashboard.
        :param pulumi.Input[str] visibility: Determines who can see the dashboard in an account. Valid values are `all` or `owner`.  Defaults to `all`.
        :param pulumi.Input[list] widgets: A nested block that describes a visualization.  Up to 300 `widget` blocks are allowed in a dashboard definition.  See Nested widget blocks below for details.

        The **filter** object supports the following:

          * `attributes` (`pulumi.Input[list]`)
          * `eventTypes` (`pulumi.Input[list]`)

        The **widgets** object supports the following:

          * `column` (`pulumi.Input[float]`)
          * `compareWiths` (`pulumi.Input[list]`)
            * `offsetDuration` (`pulumi.Input[str]`)
            * `presentation` (`pulumi.Input[dict]`)
              * `color` (`pulumi.Input[str]`)
              * `name` (`pulumi.Input[str]`)

          * `drilldownDashboardId` (`pulumi.Input[float]`)
          * `duration` (`pulumi.Input[float]`)
          * `endTime` (`pulumi.Input[float]`)
          * `entityIds` (`pulumi.Input[list]`)
          * `facet` (`pulumi.Input[str]`)
          * `height` (`pulumi.Input[float]`)
          * `limit` (`pulumi.Input[float]`)
          * `metrics` (`pulumi.Input[list]`)
            * `name` (`pulumi.Input[str]`)
            * `scope` (`pulumi.Input[str]`)
            * `units` (`pulumi.Input[str]`)
            * `values` (`pulumi.Input[list]`)

          * `notes` (`pulumi.Input[str]`)
          * `nrql` (`pulumi.Input[str]`)
          * `orderBy` (`pulumi.Input[str]`)
          * `rawMetricName` (`pulumi.Input[str]`)
          * `row` (`pulumi.Input[float]`)
          * `source` (`pulumi.Input[str]`)
          * `thresholdRed` (`pulumi.Input[float]`)
          * `thresholdYellow` (`pulumi.Input[float]`)
          * `title` (`pulumi.Input[str]`) - The title of the dashboard.
          * `visualization` (`pulumi.Input[str]`)
          * `widgetId` (`pulumi.Input[float]`)
          * `width` (`pulumi.Input[float]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['editable'] = editable
            __props__['filter'] = filter
            __props__['grid_column_count'] = grid_column_count
            __props__['icon'] = icon
            if title is None:
                raise TypeError("Missing required property 'title'")
            __props__['title'] = title
            __props__['visibility'] = visibility
            __props__['widgets'] = widgets
            __props__['dashboard_url'] = None
        super(Dashboard, __self__).__init__(
            'newrelic:index/dashboard:Dashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, dashboard_url=None, editable=None, filter=None, grid_column_count=None, icon=None, title=None, visibility=None, widgets=None):
        """
        Get an existing Dashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dashboard_url: The URL for viewing the dashboard.
        :param pulumi.Input[str] editable: Determines who can edit the dashboard in an account. Valid values are `all`,  `editable_by_all`, `editable_by_owner`, or `read_only`.  Defaults to `editable_by_all`.
        :param pulumi.Input[dict] filter: A nested block that describes a dashboard filter.  Exactly one nested `filter` block is allowed. See Nested filter block below for details.
        :param pulumi.Input[float] grid_column_count: The number of columns to use when organizing and displaying widgets. New Relic One supports a 3 column grid and a 12 column grid. New Relic Insights supports a 3 column grid.
        :param pulumi.Input[str] icon: The icon for the dashboard.  Valid values are `adjust`, `archive`, `bar-chart`, `bell`, `bolt`, `bug`, `bullhorn`, `bullseye`, `clock-o`, `cloud`, `cog`, `comments-o`, `crosshairs`, `dashboard`, `envelope`, `fire`, `flag`, `flask`, `globe`, `heart`, `leaf`, `legal`, `life-ring`, `line-chart`, `magic`, `mobile`, `money`, `none`, `paper-plane`, `pie-chart`, `puzzle-piece`, `road`, `rocket`, `shopping-cart`, `sitemap`, `sliders`, `tablet`, `thumbs-down`, `thumbs-up`, `trophy`, `usd`, `user`, and `users`.  Defaults to `bar-chart`.
        :param pulumi.Input[str] title: The title of the dashboard.
        :param pulumi.Input[str] visibility: Determines who can see the dashboard in an account. Valid values are `all` or `owner`.  Defaults to `all`.
        :param pulumi.Input[list] widgets: A nested block that describes a visualization.  Up to 300 `widget` blocks are allowed in a dashboard definition.  See Nested widget blocks below for details.

        The **filter** object supports the following:

          * `attributes` (`pulumi.Input[list]`)
          * `eventTypes` (`pulumi.Input[list]`)

        The **widgets** object supports the following:

          * `column` (`pulumi.Input[float]`)
          * `compareWiths` (`pulumi.Input[list]`)
            * `offsetDuration` (`pulumi.Input[str]`)
            * `presentation` (`pulumi.Input[dict]`)
              * `color` (`pulumi.Input[str]`)
              * `name` (`pulumi.Input[str]`)

          * `drilldownDashboardId` (`pulumi.Input[float]`)
          * `duration` (`pulumi.Input[float]`)
          * `endTime` (`pulumi.Input[float]`)
          * `entityIds` (`pulumi.Input[list]`)
          * `facet` (`pulumi.Input[str]`)
          * `height` (`pulumi.Input[float]`)
          * `limit` (`pulumi.Input[float]`)
          * `metrics` (`pulumi.Input[list]`)
            * `name` (`pulumi.Input[str]`)
            * `scope` (`pulumi.Input[str]`)
            * `units` (`pulumi.Input[str]`)
            * `values` (`pulumi.Input[list]`)

          * `notes` (`pulumi.Input[str]`)
          * `nrql` (`pulumi.Input[str]`)
          * `orderBy` (`pulumi.Input[str]`)
          * `rawMetricName` (`pulumi.Input[str]`)
          * `row` (`pulumi.Input[float]`)
          * `source` (`pulumi.Input[str]`)
          * `thresholdRed` (`pulumi.Input[float]`)
          * `thresholdYellow` (`pulumi.Input[float]`)
          * `title` (`pulumi.Input[str]`) - The title of the dashboard.
          * `visualization` (`pulumi.Input[str]`)
          * `widgetId` (`pulumi.Input[float]`)
          * `width` (`pulumi.Input[float]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["dashboard_url"] = dashboard_url
        __props__["editable"] = editable
        __props__["filter"] = filter
        __props__["grid_column_count"] = grid_column_count
        __props__["icon"] = icon
        __props__["title"] = title
        __props__["visibility"] = visibility
        __props__["widgets"] = widgets
        return Dashboard(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

